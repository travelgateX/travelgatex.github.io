[
{
	"uri": "https://travelgatex.com/integrations/flights/ei/changelog/2020-03-02/",
	"title": "2020-03-02",
	"tags": ["integration-changelog"],
	"description": "Added a new counter to assign id for idTarifas &amp; Fix numScale counter in Availability",
	"content": "##2020-03-02  Added idTarifas in Availability  \n##2020-03-02  numScale counter error in Availability  \n"
},
{
	"uri": "https://travelgatex.com/integrations/flights/aert/changelog/2020-02-26/",
	"title": "2020-02-26",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2020-02-26  issue of fare amount price without agency comission   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/de2/changelog/2020-02-12/",
	"title": "2020-02-12",
	"tags": ["integration-changelog"],
	"description": "Null reference error of Valoracion",
	"content": "##2020-02-12  Null reference error of Valoracion  \n"
},
{
	"uri": "https://travelgatex.com/integrations/payment/rsys/changelog/2020-02-06/",
	"title": "2020-02-06",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2020-01-17  Fixed transaction code for refunds   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/aert/changelog/2020-01-17/",
	"title": "2020-01-17",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2020-01-17  Bookings with ADT typed passengers   "
},
{
	"uri": "https://travelgatex.com/integrations/payment/rsys/changelog/2020-01-17/",
	"title": "2020-01-17",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2020-01-17  Fixed languages codes   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/de2/changelog/2020-01-14/",
	"title": "2020-01-14",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2020-01-14  OrderList development   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/sbr/changelog/2020-01-08/",
	"title": "2020-01-08",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2020-01-08  Parsing of baggage with import=0 Parsing of included baggage   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/vy/changelog/2020-01-07/",
	"title": "2020-01-07",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": "##2020-01-07  List of segments shown  \n"
},
{
	"uri": "https://travelgatex.com/integrations/flights/amd/changelog/2019-12-19/",
	"title": "2019-12-19",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-12-19  Retrieved bookings\u0026rsquo; status   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/de2/changelog/2019-12-19/",
	"title": "2019-12-19",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-12-19  Cancellation issue   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/vy/changelog/2019-12-19/",
	"title": "2019-12-19",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": "##2019-12-19  Fare upsell request error by RT fares request  \n"
},
{
	"uri": "https://travelgatex.com/integrations/flights/sbr/changelog/2019-12-18/",
	"title": "2019-12-18",
	"tags": ["integration-changelog"],
	"description": "Sporadic search errors that we should investigate",
	"content": " 2019-12-18  Parsing of special suplements of AvailabilityFares branded fares   "
},
{
	"uri": "https://travelgatex.com/integrations/payment/bcmr/changelog/2019-12-18/",
	"title": "2019-12-18",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-12-18  Fixed problem with phone numbers starting with \u0026lsquo;+\u0026rsquo;   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/vy/changelog/2019-12-12/",
	"title": "2019-12-12",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": "##2019-12-12  changed priority boarding book requirement from perReserva to perSegment  \n"
},
{
	"uri": "https://travelgatex.com/integrations/flights/nas/changelog/2019-12-11/",
	"title": "2019-12-11",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-12-11  List of routes offered   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/vy/changelog/2019-12-03/",
	"title": "2019-12-03",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": "##2019-12-03  type of priority boarding supplements that we parse in the Valuation response  \n Fare upsell request error   "
},
{
	"uri": "https://travelgatex.com/integrations/payment/bcmr/changelog/2019-12-03/",
	"title": "2019-12-03",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-12-03  MobilePhoneNumber value is now used if specified   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/hv/changelog/2019-12-02/",
	"title": "2019-12-02",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-12-02  Showing payment methods   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/ig/changelog/2019-12-02/",
	"title": "2019-12-02",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-12-02  framework to 4.6.2    when receiving RT request in 1 \u0026ldquo;Desglose\u0026rdquo;   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/nas/changelog/2019-12-02/",
	"title": "2019-12-02",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-12-02  Seating references to flights   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/aa/changelog/2019-11-29/",
	"title": "2019-11-29",
	"tags": ["integration-changelog"],
	"description": "100% errores en Valoraci√≥n",
	"content": " 2019-11-27  change to get item bags.   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/nas/changelog/2019-11-28/",
	"title": "2019-11-28",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-28  Charges for included baggage Number of baggage shown Baggage references to passengers   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/eft/changelog/2019-11-27/",
	"title": "2019-11-27",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-27  The possibility of booking Open Jaw fares    tasasDU includes   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/lh/changelog/2019-11-27/",
	"title": "2019-11-27",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-27  Error in Bags information Error in aplicaSegmentos when the flight is one-way .   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/sbr/changelog/2019-11-27/",
	"title": "2019-11-27",
	"tags": ["integration-changelog"],
	"description": "Sporadic search errors that we should investigate",
	"content": " 2019-11-27  Now when it tries to add it checks if it is before and if it deletes it..   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/sbr/changelog/2019-11-25/",
	"title": "2019-11-25",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-25  Added seats to bill with price 0 when not reserved because of \u0026ldquo;PNS not allowed\u0026rdquo; error.   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/sbr/changelog/2019-11-19/",
	"title": "2019-11-19",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-19  Sending duplicated birthdates causing the error \u0026ldquo;DB already collected\u0026rdquo; on Reservation.   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/sbr/changelog/2019-11-15/",
	"title": "2019-11-15",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-15  Now in reservation PassengerDetails we always send the element ReceivedFrom.   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/nas/changelog/2019-11-14/",
	"title": "2019-11-14",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-14  Transaction to get a list of supported routes.   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/sbr/changelog/2019-11-13/",
	"title": "2019-11-13",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-13  Now last ticketing date is returned in the response of RetrieveReservation.   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/vy/changelog/2019-11-13/",
	"title": "2019-11-13",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-13  Timeout error typified Error in FareAvailability when asking for Optima Fares for return trips.   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/vy/changelog/2019-11-11/",
	"title": "2019-11-11",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-11-11  The delta price control in the booking transaction Added priority boarding pricing in quote transaction. Added functionalty to request priority boarding in book transaction.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/2019-10-15/",
	"title": "2019-10-15",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-10-15  ACCESES: Added shared field and allowed url edition in acceses. MENU: new horizontal menu.    CONNECT: Modified to choose client before hotelx. PUBLIC WEB: changed info searches/day in home.    PROFILES: tag error on removing category fixed. PRESS: Fixed media processing.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/2019-10-09/",
	"title": "2019-10-09",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-10-09  ALERTS: Added new filters and group by ALERTS: Add API and timesToRecovery    ALERTS: Added new responsive styles    ALERTS: fix on Status ALERTS: fix on Update Price   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/2019-09-16/",
	"title": "2019-09-16",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-09-16  Connect: Added VCC to legacy Profiles: Enabled entity asignment to profiles IAM: Added pagination and info to orgs, and profiles page completed    Added gzip compression to calls to the gateway    Alerts: Fixed issue on create new alert Connect: Fixed dates activations   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-channelx/log/legacy/",
	"title": "ChannelX",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/2019-09-30/",
	"title": "2019-09-30",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-09-30  ENTITIES: Modified access form to custom require runtime configuration    IAM: Changes on new macro roles ORGANIZATIONS: Changed filters to not appear on the request on missing    MEMBERS: Solved an error realated on updating api-keys after a new creation   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/2019-08-30/",
	"title": "2019-08-30",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-08-30  IAM: Added owner filter to entities/admin-entities. added new tab for\u0026hellip; Logging: Added hotel reference Members: IAM-macro-roles, added tabs for simple and advanced Alerts: entities by buyer or seller    Logging: References now allows more than one option    Logging: Fixed logging with filter if your not logged on the page   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/2019-08-16/",
	"title": "2019-08-16",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-08-16  Logging: Added new feature to set filters via url Alerts: added logic time alerts Connect: modified profile cals and addded premium partner option to connect    Accesses: improved refresh logic when updating accesses IAM Entities: Improved sorting in entities    B2B: Fixed required typename on apis   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/2019-07-31/",
	"title": "2019-07-31",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-07-31  Alerts: Added sort to table Stats: traffic type selector Logging: Added column machine to results Logging: Selector items per page Error Messages: added hint description to error code table    Changed format of api-errors    Logging: Fixed error descriptions Profiles: fixed bug that prevented refresh on edit Logging: Added label when reference filters are disabled   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/2019-07-15/",
	"title": "2019-07-15",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-07-15  Alerts: added configuration multiselectors Profiles: Fully enabled filter profiles Logging: Added new filter number of results Entities: Added sorting method Profiles: Updated query to look for stats and formated text in profiles    Logging: Filter errors refactored Logging: Added red control to non filled required filters Logging: Changed time to 24h mode, without am/pm    Logging: Logging table wasn\u0026rsquo;t showing the timestamps on firefox, now is fixed Logging: Enable showing organisation suppliers on SELLER mode Logging: Hide the table on no results   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/2019-06-28/",
	"title": "2019-06-28",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2019-06-28  Logging-filter: Implemented ShowOnlyActives filter, added pagination to the results table Added Star-rating component at pages and changed text in people Created internal status page Alerts released on web    Logging-filter: Reorder filter columns, reorder table columns Changed the global header, alerts and organization selector.    Fix on Stats Calendar   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/de2/changelog/2020-01-16/",
	"title": "2019-01-20",
	"tags": ["integration-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": "##2019-01-20  ValoracionRS passenger reference issue  \n"
},
{
	"uri": "https://travelgatex.com/integrations/flights/aa/",
	"title": "AA - American Airlines",
	"tags": [],
	"description": "American Airlines integration",
	"content": "   AA - American Airlines Changelog     "
},
{
	"uri": "https://travelgatex.com/integrations/flights/aert/",
	"title": "AERT - AERTiCKET",
	"tags": [],
	"description": "AERTiCKET integration",
	"content": "   AERT - AERTiCKET     "
},
{
	"uri": "https://travelgatex.com/integrations/flights/amd/",
	"title": "AMD - Amadeus",
	"tags": [],
	"description": "Amadeus integration",
	"content": "   AMD - Amadeus Changelog     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by APIEdge:    OperationData:    ManagedGroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    OperationData:    APIEdge:    ManagedGroupData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by APIEdge:    OperationData:    ManagedGroupData:    Permission:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    OperationData:    APIEdge:    ManagedGroupData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    OperationData:    APIEdge:    ManagedGroupData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {  code: ID!    apiData: APIData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   apiData(APIData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    ManagedGroupData:    APIEdge:    OperationData:     "
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/api-methods/messages/",
	"title": "API Messages",
	"tags": [],
	"description": "API Messages",
	"content": "   Search Search basic reservation information      Read Read complete reservations information\n    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    ResourceData:    ProductData:    GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    ResourceData:    OrganizationData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    ResourceData:    OrganizationData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    ResourceData:    OrganizationData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by GroupData:    GroupCommonData:    ResourceData:    OrganizationData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([APIEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:    GroupData:    GroupCommonData:    ResourceData:    OrganizationData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): API Code  id(ID!): API ID  isEditable(Boolean!): Is API Editable or not.  label(String): API label  groups(GroupConnection): which groups are asigned this API?  resources(ResourceConnection): which resources are asigned this API?  operations(OperationConnection): which operations are asigned this API?   Required by API:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     types: [OperationType!],     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   id(ID!):   isEditable(Boolean!):   label(String):   groups(GroupConnection):   resources(ResourceConnection):   operations(OperationConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by API:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     types: [OperationType!],     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   id(ID!):   isEditable(Boolean!):   label(String):   groups(GroupConnection):   resources(ResourceConnection):   operations(OperationConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by API:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     types: [OperationType!],     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   id(ID!):   isEditable(Boolean!):   label(String):   groups(GroupConnection):   resources(ResourceConnection):   operations(OperationConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by API:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     types: [OperationType!],     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   id(ID!):   isEditable(Boolean!):   label(String):   groups(GroupConnection):   resources(ResourceConnection):   operations(OperationConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by API:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection    operations(    codes: [ID!],     type: OperationType,     types: [OperationType!],     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   id(ID!):   isEditable(Boolean!):   label(String):   groups(GroupConnection):   resources(ResourceConnection):   operations(OperationConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by API:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {  node: API    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(API):   cursor(String!):    Required by APIConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/inputobjects/absoluteinput/",
	"title": "AbsoluteInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AbsoluteInput {  from: DateTime!    to: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields from(DateTime!):   to(DateTime!):    Required by TimeRangeInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/absoluteinput/",
	"title": "AbsoluteInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AbsoluteInput {  from: DateTime!    to: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields from(DateTime!):   to(DateTime!):    Required by TimeRangeInput:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " An Access is a set of credentials and configuration in order to access the system of a Supplier.\nGraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by StatsData:    AccessData:    AccessEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by StatsData:    AccessData:    AccessEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessEdge:    AccessData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessEdge:    AccessData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessEdge:    AccessData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   accessData(AccessData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessEdge:    AccessData:    StatsData:    LoggingLegacyData:    AdminMutation:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):    Required by SupplierData:    OrganizationData:    GroupCommonData:    GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by SupplierData:    GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    SupplierData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by SupplierData:    GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    SupplierData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AccessEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by AdminQuery:    SupplierData:    GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    isSchedulerActive: Boolean    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!): Access descriptive name  isActive(Boolean!): Indicates if Access is active  code(ID!): Unique AccessConfiguration identifier  supplier(Supplier!): Supplier for this Access  isTest(Boolean!): Indicates if Access can be used for testing or not  user(String): User code to connect to supplier  password(String): Password for the connection  urls(Urls): Specific URLs  parameters([Parameter]): List of parameters for additional information  markets([String!]): Markets allowed for the Access  rateRules([RateRulesType!]): Business rule types for the Access  shared(Access): Parent Access if Shared Access  owner(Organization): Access owner  isSchedulerActive(Boolean): True if scheduler is active  groups(GroupConnection): Groups where access belongs   Required by Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    updateDescriptiveInfo: Int!    descriptiveInfoLimit: Int!    isSchedulerActive: Boolean    updateList: Int!    updateDateRange: String!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    legacyLink: LegacyLink    master: Access   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   isActive(Boolean!):   code(ID!):   supplier(Supplier!):   isTest(Boolean!):   user(String):   password(String):   urls(Urls):   parameters([Parameter]):   markets([String!]):   rateRules([RateRulesType!]):   shared(Access):   owner(Organization):   updateDescriptiveInfo(Int!):   descriptiveInfoLimit(Int!):   isSchedulerActive(Boolean):   updateList(Int!):   updateDateRange(String!):   groups(GroupConnection):   legacyLink(LegacyLink):   master(Access):    Required by Access:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    updateDescriptiveInfo: Int!    descriptiveInfoLimit: Int!    isSchedulerActive: Boolean    updateList: Int!    updateDateRange: String!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    legacyLink: LegacyLink    master: Access   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   isActive(Boolean!):   code(ID!):   supplier(Supplier!):   isTest(Boolean!):   user(String):   password(String):   urls(Urls):   parameters([Parameter]):   markets([String!]):   rateRules([RateRulesType!]):   shared(Access):   owner(Organization):   updateDescriptiveInfo(Int!):   descriptiveInfoLimit(Int!):   isSchedulerActive(Boolean):   updateList(Int!):   updateDateRange(String!):   groups(GroupConnection):   legacyLink(LegacyLink):   master(Access):    Required by Access:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    updateDescriptiveInfo: Int!    descriptiveInfoLimit: Int!    isSchedulerActive: Boolean    updateList: Int!    updateDateRange: String!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    legacyLink: LegacyLink    master: Access   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   isActive(Boolean!):   code(ID!):   supplier(Supplier!):   isTest(Boolean!):   user(String):   password(String):   urls(Urls):   parameters([Parameter]):   markets([String!]):   rateRules([RateRulesType!]):   shared(Access):   owner(Organization):   updateDescriptiveInfo(Int!):   descriptiveInfoLimit(Int!):   isSchedulerActive(Boolean):   updateList(Int!):   updateDateRange(String!):   groups(GroupConnection):   legacyLink(LegacyLink):   master(Access):    Required by Access:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    updateDescriptiveInfo: Int!    descriptiveInfoLimit: Int!    isSchedulerActive: Boolean    updateList: Int!    updateDateRange: String!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    legacyLink: LegacyLink    master: Access   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   isActive(Boolean!):   code(ID!):   supplier(Supplier!):   isTest(Boolean!):   user(String):   password(String):   urls(Urls):   parameters([Parameter]):   markets([String!]):   rateRules([RateRulesType!]):   shared(Access):   owner(Organization):   updateDescriptiveInfo(Int!):   descriptiveInfoLimit(Int!):   isSchedulerActive(Boolean):   updateList(Int!):   updateDateRange(String!):   groups(GroupConnection):   legacyLink(LegacyLink):   master(Access):    Required by Access:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access    owner: Organization    updateDescriptiveInfo: Int!    descriptiveInfoLimit: Int!    isSchedulerActive: Boolean    updateList: Int!    updateDateRange: String!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    legacyLink: LegacyLink    master: Access   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   isActive(Boolean!):   code(ID!):   supplier(Supplier!):   isTest(Boolean!):   user(String):   password(String):   urls(Urls):   parameters([Parameter]):   markets([String!]):   rateRules([RateRulesType!]):   shared(Access):   owner(Organization):   updateDescriptiveInfo(Int!):   descriptiveInfoLimit(Int!):   isSchedulerActive(Boolean):   updateList(Int!):   updateDateRange(String!):   groups(GroupConnection):   legacyLink(LegacyLink):   master(Access):    Required by Access:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {  node: Access    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Access):   cursor(String!):    Required by AccessConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/inputobjects/accessfilter/",
	"title": "AccessFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessFilter {  accessID: [ID]    group: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessID([ID]):   group([ID]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/accessfilter/",
	"title": "AccessFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessFilter {  accessID: [ID]    group: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessID([ID]):   group([ID]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/inputobjects/accessfilter/",
	"title": "AccessFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessFilter {  accessID: [ID]    group: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessID([ID]):   group([ID]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/inputobjects/accessfilter/",
	"title": "AccessFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessFilter {  accessID: [ID]    group: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessID([ID]):   group([ID]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/accessfilter/",
	"title": "AccessFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessFilter {  accessID: [ID]    group: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessID([ID]):   group([ID]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/accessfilterinput/",
	"title": "AccessFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessFilterInput {  includes: [ID!]    excludes: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields includes([ID!]):   excludes([ID!]):    Required by FilterInput:    HotelXFilterSearchInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/accessinput/",
	"title": "AccessInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessInput {  name: String    isActive: Boolean    code: ID    supplier: String    isTest: Boolean    user: String    password: String    urls: UrlsInput    parameters: [ParameterInput]    descriptiveInfoLimit: Int    markets: [String!]    rateRules: [RateRulesType!]    shared: String    group: ID    updateDescriptiveInfo: Int    updateList: Int    updateDateRange: String    owner: ID    isSchedulerActive: Boolean    legacyLink: LegacyLinkInput    master: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String):   isActive(Boolean):   code(ID):   supplier(String):   isTest(Boolean):   user(String):   password(String):   urls(UrlsInput):   parameters([ParameterInput]):   descriptiveInfoLimit(Int):   markets([String!]):   rateRules([RateRulesType!]):   shared(String):   group(ID):   updateDescriptiveInfo(Int):   updateList(Int):   updateDateRange(String):   owner(ID):   isSchedulerActive(Boolean):   legacyLink(LegacyLinkInput):   master(ID):    "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/inputobjects/activefilterinput/",
	"title": "ActiveFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ActiveFilterInput {  requestMode: ModeType!    codes: [ID!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestMode(ModeType!):   codes([ID!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/activefilterinput/",
	"title": "ActiveFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ActiveFilterInput {  requestMode: ModeType!    codes: [ID!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestMode(ModeType!):   codes([ID!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/addon/",
	"title": "AddOn",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AddOn {  key: String!    value: JSON!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(String!):   value(JSON!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/addons/",
	"title": "AddOns",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AddOns {  distribution: [AddOn!]   Show deprecated fields   distribute: : JSON // deprecated from 2018-05-21 You can find it in distribution AddOn     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields distribute(JSON):   distribution([AddOn!]):    Required by HotelOptionSearch:    HotelOptionQuote:    HotelBookingDetail:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/adminmutation/",
	"title": "AdminMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AdminMutation {  createAccess( input: AccessInput!, ): Access    updateAccess( input: AccessInput!, ): Access    grantAccessToGroup( input: GroupInput!, ): Access    deleteAccessFromGroup( input: GroupInput!, ): Access    grantSupplierToGroup( input: GroupInput!, ): Supplier    deleteSupplierFromGroup( input: GroupInput!, ): Supplier    grantClientToGroup( input: GroupInput!, ): Client    deleteClientFromGroup( input: GroupInput!, ): Client    createClient( input: CreateClientInput!, ): Client    updateClient( input: UpdateClientInput!, ): Client    createProfile( input: CreateProfileInput!, ): Profile    updateProfile( input: UpdateProfileInput!, ): Profile    deleteProfile( input: DeleteProfileInput!, ): Profile    addEntitiesToProfile( input: UpdateEntitiesInput!, ): Profile    removeEntitiesFromProfile( input: UpdateEntitiesInput!, ): Profile    grantProfileToGroup( input: GroupInput!, ): Profile    createSystem( input: CreateSystemInput!, ): System    updateSystem( input: UpdateSystemInput!, ): System    createOrganization( organization: CreateOrganizationInput!, ): Organization!    suitOrganization( organization: SuitOrganizationInput!, ): Organization!    suitFolder( folder: SuitFolderInput!, ): Group!    createMember( member: CreateMemberInput!, ): Member!    createGroup( group: CreateGroupInput!, ): Group!    updateMember( member: UpdateMemberInput!, ): Member!    grantPermissions( member: GrantPermissionsInput!, ): Member!    revokePermissions( member: GrantPermissionsInput!, ): Member!    clonePermissions( member: ClonePermissionsInput!, ): Member!    updateGroup( group: UpdateGroupInput!, ): Group!    deleteMember( member: [DeleteMemberInput!]!, ): Member!    deleteGroup( group: DeleteGroupInput!, ): Group!    grantApiToGroup( group: UpdateGroupAPISInput, ): Group!    revokeApiFromGroup( group: UpdateGroupAPISInput, ): Group!    grantMacroPermissionsToMember( input: GrantMacroPermissionInput!, ): Member!    revokeMacroPermissionsFromMember( input: GrantMacroPermissionInput!, ): Member!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields createAccess(Access):   updateAccess(Access):   grantAccessToGroup(Access):   deleteAccessFromGroup(Access):   grantSupplierToGroup(Supplier):   deleteSupplierFromGroup(Supplier):   grantClientToGroup(Client):   deleteClientFromGroup(Client):   createClient(Client):   updateClient(Client):   createProfile(Profile):   updateProfile(Profile):   deleteProfile(Profile):   addEntitiesToProfile(Profile):   removeEntitiesFromProfile(Profile):   grantProfileToGroup(Profile):   createSystem(System):   updateSystem(System):   createOrganization(Organization!):   suitOrganization(Organization!):   suitFolder(Group!):   createMember(Member!):   createGroup(Group!):   updateMember(Member!):   grantPermissions(Member!):   revokePermissions(Member!):   clonePermissions(Member!):   updateGroup(Group!):   deleteMember(Member!):   deleteGroup(Group!):   grantApiToGroup(Group!):   revokeApiFromGroup(Group!):   grantMacroPermissionsToMember(Member!):   revokeMacroPermissionsFromMember(Member!):    Required by Mutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/adminquery/",
	"title": "AdminQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AdminQuery {  jwt: JWT    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection    serviceApi( filter: ServiceApiFilter, ): ServiceApi    pointsOfSale( filter: PointOfSaleFilter, ): PointOfSaleConnection    profiles( filter: ProfileFilter, ): ProfileConnection    systems(    first: Int,     last: Int,     before: String,     after: String,     filter: SystemFilter,     ): SystemConnection    organizations(    codes: [ID!],     domains: [DomainName!],     label: String,     contains: String,     first: Int,     last: Int,     before: String,     after: String,     orderBy: OrganizationOrderByInput,     ): OrganizationConnection!    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection!    groups(    codes: [ID!],     contains: String,     api: [ID!],     codeStartsWith: String,     type: GroupType,     parentCode: ID,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection!    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection!    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection!    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection!    operations(    codes: [ID!],     type: OperationType,     types: [OperationType!],     first: Int,     last: Int,     before: String,     after: String,     ): OperationConnection!   Show deprecated fields   entities( filter: EntityFilter, ): EntityConnection  // Only for statsX product. Use client, supplier, accesess queries   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields jwt(JWT):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   serviceApi(ServiceApi):   pointsOfSale(PointOfSaleConnection):   profiles(ProfileConnection):   entities(EntityConnection):   systems(SystemConnection):   organizations(OrganizationConnection!):   products(ProductConnection!):   members(MemberConnection!):   groups(GroupConnection!):   apis(APIConnection!):   resources(ResourceConnection!):   roles(RoleConnection!):   operations(OperationConnection!):    Required by Query:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " List of advise messages.\nGraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): AM code: The following codes can be returned:  type(String!): Error type: The following types are valid:  description(String!): Error description  level(AdviseMessageLevel!): Indicates the level of importance of the message: Posible values ERROR WARN INFO  external(ExternalMessage): Specify the external message.  correlationID(ID!): Identifier to be able to investigate the cause of the error   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(String!):   description(String!):   level(AdviseMessageLevel!):   external(ExternalMessage):   correlationID(ID!):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(String!):   description(String!):   level(AdviseMessageLevel!):   external(ExternalMessage):   correlationID(ID!):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(String!):   description(String!):   level(AdviseMessageLevel!):   external(ExternalMessage):   correlationID(ID!):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(String!):   description(String!):   level(AdviseMessageLevel!):   external(ExternalMessage):   correlationID(ID!):    Required by PaymentXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AdviseMessage {  code: ID!    description: String!    level: AdviseMessageLevel!    external: ExternalMessage    correlationID: ID!   Show deprecated fields   type: : String! // deprecated from 2018-06-01     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(String!):   description(String!):   level(AdviseMessageLevel!):   external(ExternalMessage):   correlationID(ID!):    Required by PaymentXQuery:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:  List of advise messages.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/advisemessagelevel/",
	"title": "AdviseMessageLevel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AdviseMessageLevel{   WARN,    ERROR,    INFO,   }   Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/agerange/",
	"title": "AgeRange",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AgeRange {  min: Int!    max: Int!    type: HotelPaxType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields min(Int!):   max(Int!):   type(HotelPaxType!):    "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/agencies/",
	"title": "Agencies",
	"tags": [],
	"description": "Create and configurate your agencies",
	"content": " What is the meaning of agency? We can understand an agency as a client, a buyer or a distribution channel. An organization has a set of agencies (at least one).\n\nHow to create an agency Considerations It is an incremental load, so bear in mind these considerations:\n If an agency exists then it is updated.\n If an agency does not exist then it is created. Existing agencies that are not referenced are not removed.\n If an existing agency has to be removed from system then you have to contact with TravelgateX.\n If there is any problem with an agency\u0026rsquo;s information then it is omitted (and logged) but the load continues.\n  \nSpecifications  File name: Master_Agencies.csv.\n Each line represents a unique agency and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026ldquo; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Agency code   1 Yes Yes string Agency name   2 Yes Yes boolean Access to be set    Example 350#My Agency#true  "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/airlinecode/",
	"title": "AirlineCode",
	"tags": [],
	"description": "",
	"content": " 2-letters IATA airline code\nGraphQL schema definition scalar AirlineCode   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/airport/",
	"title": "Airport",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Airport {  code: ID!    airportData: AirportData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   airportData(AirportData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/airportdata/",
	"title": "AirportData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AirportData {  code: ID!    name: String    location: Location   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String):   location(Location):    Required by Airport:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/alert/",
	"title": "Alert",
	"tags": [],
	"description": "",
	"content": " Alert node\nGraphQL schema definition type Alert {  code: ID!    alertData: AlertData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   alertData(AlertData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AlertEdge:    AlertsXMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/alert/",
	"title": "Alert",
	"tags": [],
	"description": "",
	"content": " Alert node\nGraphQL schema definition type Alert {  code: ID!    alertData: AlertData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   alertData(AlertData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AlertEdge:    AlertsXMutation:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/alertconfiguration/",
	"title": "AlertConfiguration",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertConfiguration {  alertType: AlertType!    periodicity: Int    window: Int    timesToAlert: Int!    timesToRecovery: Int!    typeConfiguration: AlertTypeConfiguration    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int    email( type: EmailType, ): [Email]!    hubStatus( isInclusive: Boolean!, ): [HubStatus!]    errorCode( isInclusive: Boolean!, ): [Int!]    errorType( isInclusive: Boolean!, ): [ErrorType!]    alertObjects( isInclusive: Boolean!, ): [AlertObjectsUnion]    groupBy: [AlertGroups!]    comercialType: ComercialType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields alertType(AlertType!): alert type  periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int!): The number of times the alert must be recovered in order to notify  typeConfiguration(AlertTypeConfiguration):   noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): Minimum number of requests should be in the window to check alert or Number of requests to be checked (According to configuration)  percentageToAlert(Int): Minimum percentage to be considered status ALERTING   email([Email]!): Email addresses to send notifications  hubStatus([HubStatus!]): Filter of hub status  errorCode([Int!]): Filter of error code  errorType([ErrorType!]): Filter of error type  alertObjects([AlertObjectsUnion]): filter of Access|Client|Supplier|Operation|Group  groupBy([AlertGroups!]): Group by traffic and calculate its parameters separately  comercialType(ComercialType): Indicates if the group configuration is SELLER OR BUYER   Required by AlertData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/alertconfiguration/",
	"title": "AlertConfiguration",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertConfiguration {  alertType: AlertType!    periodicity: Int    window: Int    timesToAlert: Int!    timesToRecovery: Int!    typeConfiguration: AlertTypeConfiguration    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int    email( type: EmailType, ): [Email]!    hubStatus( isInclusive: Boolean!, ): [HubStatus!]    errorCode( isInclusive: Boolean!, ): [Int!]    errorType( isInclusive: Boolean!, ): [ErrorType!]    alertObjects( isInclusive: Boolean!, ): [AlertObjectsUnion]    groupBy: [AlertGroups!]    comercialType: ComercialType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields alertType(AlertType!): alert type  periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int!): The number of times the alert must be recovered in order to notify  typeConfiguration(AlertTypeConfiguration):   noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): Minimum number of requests should be in the window to check alert or Number of requests to be checked (According to configuration)  percentageToAlert(Int): Minimum percentage to be considered status ALERTING   email([Email]!): Email addresses to send notifications  hubStatus([HubStatus!]): Filter of hub status  errorCode([Int!]): Filter of error code  errorType([ErrorType!]): Filter of error type  alertObjects([AlertObjectsUnion]): filter of Access|Client|Supplier|Operation|Group  groupBy([AlertGroups!]): Group by traffic and calculate its parameters separately  comercialType(ComercialType): Indicates if the group configuration is SELLER OR BUYER   Required by AlertData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertconfigurationinputaveragetime/",
	"title": "AlertConfigurationInputAverageTime",
	"tags": [],
	"description": "",
	"content": " Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\nGraphQL schema definition type AlertConfigurationInputAverageTime {  historicalWindow: Int    offset: Int    max_average: Int    periodicity: Int!    window: Int!    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int!    email: [EmailInput]!    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The timeframe in minutes  offset(Int): Time frame in minutes to set the beginning of historicalWindow  max_average(Int): maximum average time allowed in miliseconds  periodicity(Int!): Frequency of time in minutes in which the alert will be reviewed  window(Int!): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int!): Defines the minimum percentage to consider alert in status ALERTING. OPTION 1: Average time difference between window and historical window will be used to calculate the percentage and compared with the minimum percentage set. OPTION 2: Average time difference between window and max_average value field will be used to calculate the percetage and compared with the minimum percentage set. OPTION 3: Average time difference between Requests and max_average value field will be used to calculate the percetage and compared with the minimum percentage set.  email([EmailInput]!): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately   Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertconfigurationinputaveragetime/",
	"title": "AlertConfigurationInputAverageTime",
	"tags": [],
	"description": "",
	"content": " Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\nGraphQL schema definition type AlertConfigurationInputAverageTime {  historicalWindow: Int    offset: Int    max_average: Int    periodicity: Int!    window: Int!    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int!    email: [EmailInput]!    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The timeframe in minutes  offset(Int): Time frame in minutes to set the beginning of historicalWindow  max_average(Int): maximum average time allowed in miliseconds  periodicity(Int!): Frequency of time in minutes in which the alert will be reviewed  window(Int!): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int!): Defines the minimum percentage to consider alert in status ALERTING. OPTION 1: Average time difference between window and historical window will be used to calculate the percentage and compared with the minimum percentage set. OPTION 2: Average time difference between window and max_average value field will be used to calculate the percetage and compared with the minimum percentage set. OPTION 3: Average time difference between Requests and max_average value field will be used to calculate the percetage and compared with the minimum percentage set.  email([EmailInput]!): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately   Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertconfigurationinputerrorrate/",
	"title": "AlertConfigurationInputErrorRate",
	"tags": [],
	"description": "",
	"content": " Configuration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.\nGraphQL schema definition type AlertConfigurationInputErrorRate {  toCheck: [Int!]    toCompare: [Int!]    periodicity: Int!    window: Int!    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int!    email: [EmailInput]!    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields toCheck([Int!]): Error codes to be Checked. By default all error codes excepts 0  toCompare([Int!]): Error codes to be Compared with Checked codes. By default all error codes  periodicity(Int!): Frequency of time in minutes in which the alert will be reviewed  window(Int!): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int!): Minimum percentage of traffic with error codes (toCheck) compared to error codes(toCompare) in the window time frame to be considered status ALERTING  email([EmailInput]!): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertconfigurationinputerrorrate/",
	"title": "AlertConfigurationInputErrorRate",
	"tags": [],
	"description": "",
	"content": " Configuration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.\nGraphQL schema definition type AlertConfigurationInputErrorRate {  toCheck: [Int!]    toCompare: [Int!]    periodicity: Int!    window: Int!    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int!    email: [EmailInput]!    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields toCheck([Int!]): Error codes to be Checked. By default all error codes excepts 0  toCompare([Int!]): Error codes to be Compared with Checked codes. By default all error codes  periodicity(Int!): Frequency of time in minutes in which the alert will be reviewed  window(Int!): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int!): Minimum percentage of traffic with error codes (toCheck) compared to error codes(toCompare) in the window time frame to be considered status ALERTING  email([EmailInput]!): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertconfigurationinputnotraffic/",
	"title": "AlertConfigurationInputNoTraffic",
	"tags": [],
	"description": "",
	"content": " Configuration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\nGraphQL schema definition type AlertConfigurationInputNoTraffic {  periodicity: Int    window: Int    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    email: [EmailInput]!    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): Minimum number of requests should be in the window to consider that there is no traffic  email([EmailInput]!): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertconfigurationinputnotraffic/",
	"title": "AlertConfigurationInputNoTraffic",
	"tags": [],
	"description": "",
	"content": " Configuration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\nGraphQL schema definition type AlertConfigurationInputNoTraffic {  periodicity: Int    window: Int    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    email: [EmailInput]!    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): Minimum number of requests should be in the window to consider that there is no traffic  email([EmailInput]!): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertconfigurationinputpeaktraffic/",
	"title": "AlertConfigurationInputPeakTraffic",
	"tags": [],
	"description": "",
	"content": " Configuration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .\nGraphQL schema definition type AlertConfigurationInputPeakTraffic {  historicalWindow: Int    offset: Int    periodicity: Int    window: Int!    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int!    email: [EmailInput]!    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The time frame in minutes to be used to compare with the window time frame  offset(Int): Time frame in minutes to set the beginning of historicalWindow  periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int!): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): Minimum number of requests should be in the window to check alert  percentageToAlert(Int!): Minimum percentage of difference between the window and the historical window to be considered status ALERTING   email([EmailInput]!): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by hubStatus  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertconfigurationinputpeaktraffic/",
	"title": "AlertConfigurationInputPeakTraffic",
	"tags": [],
	"description": "",
	"content": " Configuration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .\nGraphQL schema definition type AlertConfigurationInputPeakTraffic {  historicalWindow: Int    offset: Int    periodicity: Int    window: Int!    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int!    email: [EmailInput]!    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The time frame in minutes to be used to compare with the window time frame  offset(Int): Time frame in minutes to set the beginning of historicalWindow  periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int!): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): Minimum number of requests should be in the window to check alert  percentageToAlert(Int!): Minimum percentage of difference between the window and the historical window to be considered status ALERTING   email([EmailInput]!): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by hubStatus  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertconfigurationinputprice/",
	"title": "AlertConfigurationInputPrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertConfigurationInputPrice {  periodicity: Int!    window: Int!    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int!    email: [EmailInput]!    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroupsInsights!]    price: AlertPriceInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields periodicity(Int!): Frequency of time in minutes in which the alert will be reviewed  window(Int!): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int!): Defines the minimum percentage to consider alert in status ALERTING.  email([EmailInput]!): Email addresses to send notifications  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroupsInsights!]): Possibility to group by traffic and calculate its parameters separately  price(AlertPriceInput!): Price values   Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertconfigurationinputprice/",
	"title": "AlertConfigurationInputPrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertConfigurationInputPrice {  periodicity: Int!    window: Int!    timesToAlert: Int!    timesToRecovery: Int    noRecoveries: Boolean!    stateChangesOnly: Boolean!    minNumberRequests: Int!    percentageToAlert: Int!    email: [EmailInput]!    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroupsInsights!]    price: AlertPriceInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields periodicity(Int!): Frequency of time in minutes in which the alert will be reviewed  window(Int!): The time frame in minutes  timesToAlert(Int!): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean!): To allow recoveries notifications  stateChangesOnly(Boolean!): To allow notifications only if the status change  minNumberRequests(Int!): defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int!): Defines the minimum percentage to consider alert in status ALERTING.  email([EmailInput]!): Email addresses to send notifications  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroupsInsights!]): Possibility to group by traffic and calculate its parameters separately  price(AlertPriceInput!): Price values   Required by AlertInput:  Alert information. Only one configuration has to be set at once.   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/alertconnection/",
	"title": "AlertConnection",
	"tags": [],
	"description": "",
	"content": " Alert list\nGraphQL schema definition type AlertConnection {  edges: [AlertEdge]    pageInfo: PageInfo!    count: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AlertEdge]):   pageInfo(PageInfo!):   count(Int!):    Required by AlertData:    AlertsXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/alertconnection/",
	"title": "AlertConnection",
	"tags": [],
	"description": "",
	"content": " Alert list\nGraphQL schema definition type AlertConnection {  edges: [AlertEdge]    pageInfo: PageInfo!    count: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([AlertEdge]):   pageInfo(PageInfo!):   count(Int!):    Required by AlertsXQuery:    AlertData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertcriteriainput/",
	"title": "AlertCriteriaInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertCriteriaInput {  alertCodes: [ID!]    isActive: Boolean    groups: [ID!]    shared: [SharedType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields alertCodes([ID!]):   isActive(Boolean):   groups([ID!]):   shared([SharedType!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertcriteriainput/",
	"title": "AlertCriteriaInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertCriteriaInput {  alertCodes: [ID!]    isActive: Boolean    groups: [ID!]    shared: [SharedType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields alertCodes([ID!]):   isActive(Boolean):   groups([ID!]):   shared([SharedType!]):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/alertdata/",
	"title": "AlertData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertData {  code: ID!    name: String    description: String    configuration: AlertConfiguration!    isActive: Boolean!    history( relay: RelayInput, filter: AlertFilterInput, ): AlertConnection!    editor: Member!    events( relay: RelayInput, filter: AlertFilterInput, ): EventConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String): Alert name  description(String): Alert description  configuration(AlertConfiguration!): Alert configuration  isActive(Boolean!): Indicates if the alert is being checked by the service.  history(AlertConnection!): Records of each update made of the alert  editor(Member!): Member has edit the actual alert data  events(EventConnection!): Records of the last 10 events triggered   Required by Alert:   Alert node   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/alertdata/",
	"title": "AlertData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertData {  code: ID!    name: String    description: String    configuration: AlertConfiguration!    isActive: Boolean!    history( relay: RelayInput, filter: AlertFilterInput, ): AlertConnection!    editor: Member!    events( relay: RelayInput, filter: AlertFilterInput, ): EventConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String): Alert name  description(String): Alert description  configuration(AlertConfiguration!): Alert configuration  isActive(Boolean!): Indicates if the alert is being checked by the service.  history(AlertConnection!): Records of each update made of the alert  editor(Member!): Member has edit the actual alert data  events(EventConnection!): Records of the last 10 events triggered   Required by Alert:   Alert node   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/alertedge/",
	"title": "AlertEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertEdge {  node: Alert    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Alert):   cursor(String!):    Required by AlertConnection:  Alert list   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/alertedge/",
	"title": "AlertEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertEdge {  node: Alert    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Alert):   cursor(String!):    Required by AlertConnection:  Alert list   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertfilterinput/",
	"title": "AlertFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertFilterInput {  AND: [AlertFilterInput!]    OR: [AlertFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([AlertFilterInput!]):   OR([AlertFilterInput!]):   createdAt_in([DateTime!]):   createdAt_not_in([DateTime!]):   createdAt_lt(DateTime):   createdAt_lte(DateTime):   createdAt_gt(DateTime):   createdAt_gte(DateTime):   updatedAt_in([DateTime!]):   updatedAt_not_in([DateTime!]):   updatedAt_lt(DateTime):   updatedAt_lte(DateTime):   updatedAt_gt(DateTime):   updatedAt_gte(DateTime):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertfilterinput/",
	"title": "AlertFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertFilterInput {  AND: [AlertFilterInput!]    OR: [AlertFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([AlertFilterInput!]):   OR([AlertFilterInput!]):   createdAt_in([DateTime!]):   createdAt_not_in([DateTime!]):   createdAt_lt(DateTime):   createdAt_lte(DateTime):   createdAt_gt(DateTime):   createdAt_gte(DateTime):   updatedAt_in([DateTime!]):   updatedAt_not_in([DateTime!]):   updatedAt_lt(DateTime):   updatedAt_lte(DateTime):   updatedAt_gt(DateTime):   updatedAt_gte(DateTime):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertgroupinput/",
	"title": "AlertGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertGroupInput {  code: ID!    comercialType: ComercialType!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   comercialType(ComercialType!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertgroupinput/",
	"title": "AlertGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertGroupInput {  code: ID!    comercialType: ComercialType!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   comercialType(ComercialType!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/alertgroups/",
	"title": "AlertGroups",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AlertGroups{   ACCESS,    CLIENT,    SUPPLIER,    OPERATION,    HUB_STATUS,    ERROR_CODE,    ERROR_TYPE,    GROUP_ORG_SELLER,    GROUP_ORG_BUYER,    GROUP_FOLDER_SELLER,    GROUP_FOLDER_BUYER,    GROUP_PRODUCT_SELLER,    GROUP_PRODUCT_BUYER,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/alertgroups/",
	"title": "AlertGroups",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AlertGroups{   ACCESS,    CLIENT,    SUPPLIER,    OPERATION,    HUB_STATUS,    ERROR_CODE,    ERROR_TYPE,    GROUP_ORG_SELLER,    GROUP_ORG_BUYER,    GROUP_FOLDER_SELLER,    GROUP_FOLDER_BUYER,    GROUP_PRODUCT_SELLER,    GROUP_PRODUCT_BUYER,   }   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/alertgroupsinsights/",
	"title": "AlertGroupsInsights",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AlertGroupsInsights{   ACCESS,    CLIENT,    SUPPLIER,    OPERATION,    GROUP_ORG_SELLER,    GROUP_ORG_BUYER,    GROUP_FOLDER_SELLER,    GROUP_FOLDER_BUYER,    GROUP_PRODUCT_SELLER,    GROUP_PRODUCT_BUYER,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/alertgroupsinsights/",
	"title": "AlertGroupsInsights",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AlertGroupsInsights{   ACCESS,    CLIENT,    SUPPLIER,    OPERATION,    GROUP_ORG_SELLER,    GROUP_ORG_BUYER,    GROUP_FOLDER_SELLER,    GROUP_FOLDER_BUYER,    GROUP_PRODUCT_SELLER,    GROUP_PRODUCT_BUYER,   }   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertinput/",
	"title": "AlertInput",
	"tags": [],
	"description": "",
	"content": " Alert information. Only one configuration has to be set at once.\nGraphQL schema definition type AlertInput {  name: String    description: String    configurationNoTraffic: AlertConfigurationInputNoTraffic    configurationErrorRate: AlertConfigurationInputErrorRate    configurationAverageTime: AlertConfigurationInputAverageTime    configurationPeakTraffic: AlertConfigurationInputPeakTraffic    configurationPrice: AlertConfigurationInputPrice    isActive: Boolean!    group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String): Alert name  description(String): Alert description  configurationNoTraffic(AlertConfigurationInputNoTraffic): No traffic configuration   configurationErrorRate(AlertConfigurationInputErrorRate): Error rate configuration   configurationAverageTime(AlertConfigurationInputAverageTime): Average time configuration   configurationPeakTraffic(AlertConfigurationInputPeakTraffic): Peak traffic configuration   configurationPrice(AlertConfigurationInputPrice): Price Configuration  isActive(Boolean!): To set alert active or not  group(ID!): Alert location group   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertinput/",
	"title": "AlertInput",
	"tags": [],
	"description": "",
	"content": " Alert information. Only one configuration has to be set at once.\nGraphQL schema definition type AlertInput {  name: String    description: String    configurationNoTraffic: AlertConfigurationInputNoTraffic    configurationErrorRate: AlertConfigurationInputErrorRate    configurationAverageTime: AlertConfigurationInputAverageTime    configurationPeakTraffic: AlertConfigurationInputPeakTraffic    configurationPrice: AlertConfigurationInputPrice    isActive: Boolean!    group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String): Alert name  description(String): Alert description  configurationNoTraffic(AlertConfigurationInputNoTraffic): No traffic configuration   configurationErrorRate(AlertConfigurationInputErrorRate): Error rate configuration   configurationAverageTime(AlertConfigurationInputAverageTime): Average time configuration   configurationPeakTraffic(AlertConfigurationInputPeakTraffic): Peak traffic configuration   configurationPrice(AlertConfigurationInputPrice): Price Configuration  isActive(Boolean!): To set alert active or not  group(ID!): Alert location group   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertobjectinput/",
	"title": "AlertObjectInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertObjectInput {  code: ID!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertobjectinput/",
	"title": "AlertObjectInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertObjectInput {  code: ID!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/alertprice/",
	"title": "AlertPrice",
	"tags": [],
	"description": "",
	"content": " Price contains the specific configuration for Price alert Type\nGraphQL schema definition type AlertPrice {  mode: ModePrice!    check: CheckPrice!    range: RangePrice!    amount: Int    commission: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields mode(ModePrice!): UNIT: to be informed for each transaction that matches the amount / commission PERCENTAGE: to be advise if a percentage of traffic matches the amount / commission  check(CheckPrice!): Specify which field is goinf to be checked. Amount, commission or both  range(RangePrice!): Low or greater values of amount/commission (value included)   amount(Int): Value of amount price  commission(Int): Value of commission price   Required by AlertTypeConfiguration:  Depending on the talert type, typeConfiguration will use some fields    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/alertprice/",
	"title": "AlertPrice",
	"tags": [],
	"description": "",
	"content": " Price contains the specific configuration for Price alert Type\nGraphQL schema definition type AlertPrice {  mode: ModePrice!    check: CheckPrice!    range: RangePrice!    amount: Int    commission: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields mode(ModePrice!): UNIT: to be informed for each transaction that matches the amount / commission PERCENTAGE: to be advise if a percentage of traffic matches the amount / commission  check(CheckPrice!): Specify which field is goinf to be checked. Amount, commission or both  range(RangePrice!): Low or greater values of amount/commission (value included)   amount(Int): Value of amount price  commission(Int): Value of commission price   Required by AlertTypeConfiguration:  Depending on the talert type, typeConfiguration will use some fields    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertpriceinput/",
	"title": "AlertPriceInput",
	"tags": [],
	"description": "",
	"content": " Price input\nGraphQL schema definition type AlertPriceInput {  mode: ModePrice!    check: CheckPrice!    range: RangePrice!    amount: Int    commission: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields mode(ModePrice!): UNIT: to be informed for each transaction that matches the amount / commission PERCENTAGE: to be advise if a percentage of traffic matches the amount / commission  check(CheckPrice!): Specify which field is going to be checked. Amount, commission or both  range(RangePrice!): Low or greater values of amount/commission (value included)   amount(Int): Value of amount price  commission(Int): Value of commission price   Required by AlertConfigurationInputPrice:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertpriceinput/",
	"title": "AlertPriceInput",
	"tags": [],
	"description": "",
	"content": " Price input\nGraphQL schema definition type AlertPriceInput {  mode: ModePrice!    check: CheckPrice!    range: RangePrice!    amount: Int    commission: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields mode(ModePrice!): UNIT: to be informed for each transaction that matches the amount / commission PERCENTAGE: to be advise if a percentage of traffic matches the amount / commission  check(CheckPrice!): Specify which field is going to be checked. Amount, commission or both  range(RangePrice!): Low or greater values of amount/commission (value included)   amount(Int): Value of amount price  commission(Int): Value of commission price   Required by AlertConfigurationInputPrice:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertpriceupdateinput/",
	"title": "AlertPriceUpdateInput",
	"tags": [],
	"description": "",
	"content": " Price update\nGraphQL schema definition type AlertPriceUpdateInput {  mode: ModePrice    check: CheckPrice    range: RangePrice    amount: Int    commission: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields mode(ModePrice): UNIT: to be informed for each transaction that matches the amount / commission PERCENTAGE: to be advise if a percentage of traffic matches the amount / commission  check(CheckPrice): Specify which field is going to be checked. Amount, commission or both  range(RangePrice): Low or greater values of amount/commission (value included)   amount(Int): Value of amount price  commission(Int): Value of commission price   Required by AlertUpdateConfigurationInputPrice:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertpriceupdateinput/",
	"title": "AlertPriceUpdateInput",
	"tags": [],
	"description": "",
	"content": " Price update\nGraphQL schema definition type AlertPriceUpdateInput {  mode: ModePrice    check: CheckPrice    range: RangePrice    amount: Int    commission: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields mode(ModePrice): UNIT: to be informed for each transaction that matches the amount / commission PERCENTAGE: to be advise if a percentage of traffic matches the amount / commission  check(CheckPrice): Specify which field is going to be checked. Amount, commission or both  range(RangePrice): Low or greater values of amount/commission (value included)   amount(Int): Value of amount price  commission(Int): Value of commission price   Required by AlertUpdateConfigurationInputPrice:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/alerttype/",
	"title": "AlertType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AlertType{   ERROR_RATE,    AVERAGE_TIME,    NO_TRAFFIC,    PEAK_TRAFFIC,    PRICE,   }   Required by AlertConfiguration:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/alerttype/",
	"title": "AlertType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum AlertType{   ERROR_RATE,    AVERAGE_TIME,    NO_TRAFFIC,    PEAK_TRAFFIC,    PRICE,   }   Required by AlertConfiguration:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/alerttypeconfiguration/",
	"title": "AlertTypeConfiguration",
	"tags": [],
	"description": "",
	"content": " Depending on the talert type, typeConfiguration will use some fields\nGraphQL schema definition type AlertTypeConfiguration {  historicalWindow: Int    offset: Int    max_average: Int    toCheck: [Int!]    toCompare: [Int!]    price: AlertPrice   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The time frame in minutes to be used to compare with the window time frame  offset(Int): Time frame in minutes to set the beginning of historicalWindow  max_average(Int): maximum average time allowed in miliseconds  toCheck([Int!]): Error codes to be Checked. By default all error codes excepts 0  toCompare([Int!]): Error codes to be Compared with Checked codes. By default all error codes  price(AlertPrice): Price contains the specific configuration for Price alert Type   Required by AlertConfiguration:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/alerttypeconfiguration/",
	"title": "AlertTypeConfiguration",
	"tags": [],
	"description": "",
	"content": " Depending on the talert type, typeConfiguration will use some fields\nGraphQL schema definition type AlertTypeConfiguration {  historicalWindow: Int    offset: Int    max_average: Int    toCheck: [Int!]    toCompare: [Int!]    price: AlertPrice   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The time frame in minutes to be used to compare with the window time frame  offset(Int): Time frame in minutes to set the beginning of historicalWindow  max_average(Int): maximum average time allowed in miliseconds  toCheck([Int!]): Error codes to be Checked. By default all error codes excepts 0  toCompare([Int!]): Error codes to be Compared with Checked codes. By default all error codes  price(AlertPrice): Price contains the specific configuration for Price alert Type   Required by AlertConfiguration:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertupdateconfigurationinputaveragetime/",
	"title": "AlertUpdateConfigurationInputAverageTime",
	"tags": [],
	"description": "",
	"content": " Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\nGraphQL schema definition type AlertUpdateConfigurationInputAverageTime {  historicalWindow: Int    offset: Int    max_average: Int    periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    percentageToAlert: Int    email: [EmailInput]    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The timeframe in minutes  offset(Int): Time frame in minutes to set the beginning of historicalWindow  max_average(Int): maximum average time allowed in miliseconds  periodicity(Int): Frequency of time in minutes in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int): Defines the minimum percentage to consider alert in status ALERTING. OPTION 1: Average time difference between window and historical window will be used to calculate the percentage and compared with the minimum percentage set. OPTION 2: Average time difference between window and max_average value field will be used to calculate the percetage and compared with the minimum percentage set. OPTION 3: Average time difference between Requests and max_average value field will be used to calculate the percetage and compared with the minimum percentage set.  email([EmailInput]): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertupdateconfigurationinputaveragetime/",
	"title": "AlertUpdateConfigurationInputAverageTime",
	"tags": [],
	"description": "",
	"content": " Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\nGraphQL schema definition type AlertUpdateConfigurationInputAverageTime {  historicalWindow: Int    offset: Int    max_average: Int    periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    percentageToAlert: Int    email: [EmailInput]    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The timeframe in minutes  offset(Int): Time frame in minutes to set the beginning of historicalWindow  max_average(Int): maximum average time allowed in miliseconds  periodicity(Int): Frequency of time in minutes in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int): Defines the minimum percentage to consider alert in status ALERTING. OPTION 1: Average time difference between window and historical window will be used to calculate the percentage and compared with the minimum percentage set. OPTION 2: Average time difference between window and max_average value field will be used to calculate the percetage and compared with the minimum percentage set. OPTION 3: Average time difference between Requests and max_average value field will be used to calculate the percetage and compared with the minimum percentage set.  email([EmailInput]): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertupdateconfigurationinputerrorrate/",
	"title": "AlertUpdateConfigurationInputErrorRate",
	"tags": [],
	"description": "",
	"content": " Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.\nGraphQL schema definition type AlertUpdateConfigurationInputErrorRate {  toCheck: [Int!]    toCompare: [Int!]    periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    percentageToAlert: Int    email: [EmailInput]    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields toCheck([Int!]): Error codes to be Checked. By default all error codes excepts 0  toCompare([Int!]): Error codes to be Compared with Checked codes. By default all error codes  periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int): Minimum percentage of traffic with error codes(toCheck) compared to error codes(toCompare) in the window time frame to be considered status ALERTING  email([EmailInput]): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertupdateconfigurationinputerrorrate/",
	"title": "AlertUpdateConfigurationInputErrorRate",
	"tags": [],
	"description": "",
	"content": " Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.\nGraphQL schema definition type AlertUpdateConfigurationInputErrorRate {  toCheck: [Int!]    toCompare: [Int!]    periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    percentageToAlert: Int    email: [EmailInput]    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields toCheck([Int!]): Error codes to be Checked. By default all error codes excepts 0  toCompare([Int!]): Error codes to be Compared with Checked codes. By default all error codes  periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.  percentageToAlert(Int): Minimum percentage of traffic with error codes(toCheck) compared to error codes(toCompare) in the window time frame to be considered status ALERTING  email([EmailInput]): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertupdateconfigurationinputnotraffic/",
	"title": "AlertUpdateConfigurationInputNoTraffic",
	"tags": [],
	"description": "",
	"content": " Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\nGraphQL schema definition type AlertUpdateConfigurationInputNoTraffic {  periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    email: [EmailInput]    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes to be used to check the alert status  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): Minimum number of requests should be in the window to consider that there is no traffic  email([EmailInput]): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertupdateconfigurationinputnotraffic/",
	"title": "AlertUpdateConfigurationInputNoTraffic",
	"tags": [],
	"description": "",
	"content": " Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\nGraphQL schema definition type AlertUpdateConfigurationInputNoTraffic {  periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    email: [EmailInput]    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes to be used to check the alert status  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): Minimum number of requests should be in the window to consider that there is no traffic  email([EmailInput]): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertupdateconfigurationinputpeaktraffic/",
	"title": "AlertUpdateConfigurationInputPeakTraffic",
	"tags": [],
	"description": "",
	"content": " Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .\nGraphQL schema definition type AlertUpdateConfigurationInputPeakTraffic {  historicalWindow: Int    offset: Int    periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    percentageToAlert: Int    email: [EmailInput]    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The time frame in minutes to be used to compare with the window time frame  offset(Int): Time frame in minutes to set the beginning of historicalWindow  periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes to be used to check the alert status  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): Minimum number of requests should be in the window to check alert  percentageToAlert(Int): Minimum percentage of difference between the window and the historical window to be considered status ALERTING   email([EmailInput]): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertupdateconfigurationinputpeaktraffic/",
	"title": "AlertUpdateConfigurationInputPeakTraffic",
	"tags": [],
	"description": "",
	"content": " Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .\nGraphQL schema definition type AlertUpdateConfigurationInputPeakTraffic {  historicalWindow: Int    offset: Int    periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    percentageToAlert: Int    email: [EmailInput]    hubStatus: [HubStatusInput!]    errorCode: [ErrorCodeInput!]    errorType: [ErrorTypeInput!]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroups!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields historicalWindow(Int): The time frame in minutes to be used to compare with the window time frame  offset(Int): Time frame in minutes to set the beginning of historicalWindow  periodicity(Int): Frequency of time in which the alert will be reviewed  window(Int): The time frame in minutes to be used to check the alert status  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): Minimum number of requests should be in the window to check alert  percentageToAlert(Int): Minimum percentage of difference between the window and the historical window to be considered status ALERTING   email([EmailInput]): Email addresses to send notifications  hubStatus([HubStatusInput!]): Possibility to filter traffic by hubStatus  errorCode([ErrorCodeInput!]): Possibility to filter traffic by errorCodes  errorType([ErrorTypeInput!]): Possibility to filter traffic by errorTypes  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroups!]): Possibility to group by traffic and calculate its parameters separately    Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertupdateconfigurationinputprice/",
	"title": "AlertUpdateConfigurationInputPrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertUpdateConfigurationInputPrice {  periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    percentageToAlert: Int    email: [EmailInput]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroupsInsights!]    price: AlertPriceUpdateInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields periodicity(Int): Frequency of time in minutes in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): Defines the minimum number of requests must be in our historical Data before cheking the alert.  percentageToAlert(Int): Defines the minimum percentage to consider alert in status ALERTING.  email([EmailInput]): Email addresses to send notifications  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroupsInsights!]): Possibility to group by traffic and calculate its parameters separately   price(AlertPriceUpdateInput): Price values   Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertupdateconfigurationinputprice/",
	"title": "AlertUpdateConfigurationInputPrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertUpdateConfigurationInputPrice {  periodicity: Int    window: Int    timesToAlert: Int    timesToRecovery: Int    noRecoveries: Boolean    stateChangesOnly: Boolean    minNumberRequests: Int    percentageToAlert: Int    email: [EmailInput]    supplier: [AlertObjectInput!]    client: [AlertObjectInput!]    group: [AlertGroupInput!]    access: [AlertObjectInput!]    operation: [AlertObjectInput!]    api: [AlertObjectInput!]    groupBy: [AlertGroupsInsights!]    price: AlertPriceUpdateInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields periodicity(Int): Frequency of time in minutes in which the alert will be reviewed  window(Int): The time frame in minutes  timesToAlert(Int): The number of times the alert must be triggered in order to notify  timesToRecovery(Int): The number of times the alert must be recovered in order to notify  noRecoveries(Boolean): To allow recoveries notifications  stateChangesOnly(Boolean): To allow notifications only if the status change  minNumberRequests(Int): Defines the minimum number of requests must be in our historical Data before cheking the alert.  percentageToAlert(Int): Defines the minimum percentage to consider alert in status ALERTING.  email([EmailInput]): Email addresses to send notifications  supplier([AlertObjectInput!]): Possibility to filter traffic by suppliers  client([AlertObjectInput!]): Possibility to filter traffic by clients  group([AlertGroupInput!]): Must filter traffic by group. Only PRODUCT group type is allowed  access([AlertObjectInput!]): Possibility to filter traffic by accesses  operation([AlertObjectInput!]): Possibility to filter traffic by operations  api([AlertObjectInput!]): Possibility to filter traffic by apis  groupBy([AlertGroupsInsights!]): Possibility to group by traffic and calculate its parameters separately   price(AlertPriceUpdateInput): Price values   Required by AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/alertupdateinput/",
	"title": "AlertUpdateInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertUpdateInput {  name: String    description: String    configurationNoTraffic: AlertUpdateConfigurationInputNoTraffic    configurationErrorRate: AlertUpdateConfigurationInputErrorRate    configurationAverageTime: AlertUpdateConfigurationInputAverageTime    configurationPeakTraffic: AlertUpdateConfigurationInputPeakTraffic    configurationPrice: AlertUpdateConfigurationInputPrice    isActive: Boolean    delete: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String):   description(String):   configurationNoTraffic(AlertUpdateConfigurationInputNoTraffic):   configurationErrorRate(AlertUpdateConfigurationInputErrorRate):   configurationAverageTime(AlertUpdateConfigurationInputAverageTime):   configurationPeakTraffic(AlertUpdateConfigurationInputPeakTraffic):   configurationPrice(AlertUpdateConfigurationInputPrice):   isActive(Boolean):   delete(Boolean):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/alertupdateinput/",
	"title": "AlertUpdateInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertUpdateInput {  name: String    description: String    configurationNoTraffic: AlertUpdateConfigurationInputNoTraffic    configurationErrorRate: AlertUpdateConfigurationInputErrorRate    configurationAverageTime: AlertUpdateConfigurationInputAverageTime    configurationPeakTraffic: AlertUpdateConfigurationInputPeakTraffic    configurationPrice: AlertUpdateConfigurationInputPrice    isActive: Boolean    delete: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String):   description(String):   configurationNoTraffic(AlertUpdateConfigurationInputNoTraffic):   configurationErrorRate(AlertUpdateConfigurationInputErrorRate):   configurationAverageTime(AlertUpdateConfigurationInputAverageTime):   configurationPeakTraffic(AlertUpdateConfigurationInputPeakTraffic):   configurationPrice(AlertUpdateConfigurationInputPrice):   isActive(Boolean):   delete(Boolean):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/alertsxmutation/",
	"title": "AlertsXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertsXMutation {  createAlert( input: AlertInput!, ): Alert    updateAlert( code: ID!, input: AlertUpdateInput!, ): Alert   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields createAlert(Alert): Mutation to create a new alert  updateAlert(Alert): Mutation to update an existing alert   Required by Mutation:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/schema/query/",
	"title": "AlertsXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertsXQuery {  alerts(    relay: RelayInput,     filter: AlertFilterInput,     criteria: AlertCriteriaInput,     ): AlertConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields alerts(AlertConnection!): Query to obtain Alerts   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/alertsxquery/",
	"title": "AlertsXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertsXQuery {  alerts(    relay: RelayInput,     filter: AlertFilterInput,     criteria: AlertCriteriaInput,     ): AlertConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields alerts(AlertConnection!): Query to obtain Alerts   Required by Query:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/amenity/",
	"title": "Amenity",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Amenity {  code: String!    amenityCodeSupplier: String!    type: ApplicationAreaType!    value: String!    texts: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   amenityCodeSupplier(String!):   type(ApplicationAreaType!):   value(String!):   texts(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/amenitystatic/",
	"title": "AmenityStatic",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AmenityStatic {  code: String!    type: ApplicationAreaType!    texts( languages: [Language!], ): [Text!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   type(ApplicationAreaType!):   texts([Text!]!):    "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/amounttype/",
	"title": "AmountType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AmountType {  amount: Float    curCode: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields amount(Float):   curCode(String):    Required by  "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/applicationareatype/",
	"title": "ApplicationAreaType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ApplicationAreaType{   HOTEL,    ROOM,    SERVICE,    GENERAL,   }   Required by AmenityStatic:    Media:    HotelXAmenityData:    Amenity:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/area/",
	"title": "Area",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Area   Required by RoomData:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/arrival/",
	"title": "Arrival",
	"tags": [],
	"description": "",
	"content": " IATA defined code identifying a city or station.\nGraphQL schema definition scalar Arrival   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/auditdata/",
	"title": "AuditData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AuditData {  transactions: [Transactions!]!    timeStamp: DateTime!    processTime: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields transactions([Transactions!]!):   timeStamp(DateTime!):   processTime(Float!):    Required by HotelSearch:    HotelQuote:    HotelBooking:    Response:    HotelBookPayload:    HotelCancelPayload:    HotelCommitPayload:     "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/tools/availability-simulator.1/",
	"title": "Availability simulator",
	"tags": [],
	"description": "",
	"content": "In order to simulate the availability requests and response for the product loaded in Inventory-X you will need to go to the Product tab and then select the Availability option in the Inventory-X extranet.\n\nFirst step will be to indicate the desired Client-Provider connection and then the hotel to search availability. After that, you should specify the following conditions:\n Hotel: Hotel name or ID to request for. Dates: Check-in and check-out date to request for. Rate Rules: In case you need to search and filter a particular rate rule, check the option required: Large Family, Public Servant, Negotiated, Package, Canary Resident, Balearic Resident, Honeymoon. Rates without rule assigned will be returned. Markets: Optional filter if you only want to receive rates allowed for specific markets. Rooms: Number of rooms to request for. Paxes and ages: Number of pax in each room and their age.  Once you have filled all the information you can click on the Search button and all options and prices will appear if there is any rate that fullfills all conditions.\nPlease, bear in mind that this is just a visual tool that will show you the different options available based on the request that you make. It will not let you to do neither a Valuation nor a Booking request,because this is not the purpose of this tool.\n  "
},
{
	"uri": "https://travelgatex.com/integrations/payment/bcmr/",
	"title": "BCMR - Bancomer",
	"tags": [],
	"description": "Bancomer integration",
	"content": "   BCMR - Bancomer Changelog     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/concepts/basicconcepts/",
	"title": "Basic Concepts",
	"tags": [],
	"description": "Understand Hotel-X basic concepts",
	"content": "   Supplier, Access, Client and Context Learn about entities used in HotelX\n     Single Mode \u0026amp; Multi Mode Searching Learn about searching Multi Mode\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/bed/",
	"title": "Bed",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Bed {  type: String    count: Int    shared: Boolean   Show deprecated fields   description: : String // Deprecated from 2019-07-29     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(String):   description(String):   count(Int):   shared(Boolean):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/bedstatic/",
	"title": "BedStatic",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BedStatic {  type: String    count: Int    shared: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(String):   count(Int):   shared(Boolean):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/board/",
	"title": "Board",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Board {  code: ID!    boardData: BoardData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   error: : [Error!] // Deprecated from 2019-07-03     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   boardData(BoardData):   error([Error!]):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by BoardEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/boardconnection/",
	"title": "BoardConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BoardConnection {  edges: [BoardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([BoardEdge]):   pageInfo(PageInfo!):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/boarddata/",
	"title": "BoardData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BoardData {  code: ID!    boardCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   boardCode(String!):   texts([Text!]):    Required by Board:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/boardedge/",
	"title": "BoardEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BoardEdge {  node: Board    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Board):   cursor(String!):    Required by BoardConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/bookpaxinput/",
	"title": "BookPaxInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookPaxInput {  name: String!    surname: String!    age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   surname(String!):   age(Int!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/bookpreferenceinfo/",
	"title": "BookPreferenceInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookPreferenceInfo {  hotel: Boolean!    room: Boolean!    preferenceType: BookPreferenceType!    value: BookPreferenceValue!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotel(Boolean!):   room(Boolean!):   preferenceType(BookPreferenceType!):   value(BookPreferenceValue!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/bookpreferencetype/",
	"title": "BookPreferenceType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum BookPreferenceType{   SMOKER,    NON_SMOKER,    EXTRABED,    CRADLE,    DOUBLE_BED,    TWIN_BEDS,    CONTIGUOUS_ROOMS,    WEDDING,    LATE_ARRIVAL,    LATE_CHECKOUT,    EARLY_CHECKIN,    GROUND_FLOOR,    TOP_FLOR,    WITHOUT_VOUCHER,   }   Required by BookPreferenceInfo:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/bookpreferencevalue/",
	"title": "BookPreferenceValue",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookPreferenceValue {  mandatory: Boolean!    type: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields mandatory(Boolean!):   type(String!):    Required by BookPreferenceInfo:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/bookreferenceinput/",
	"title": "BookReferenceInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookReferenceInput {  client: String    supplier: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields client(String):   supplier(String):    Required by HotelCancelInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/bookroominput/",
	"title": "BookRoomInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookRoomInput {  occupancyRefId: Int!    paxes: [BookPaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields occupancyRefId(Int!):   paxes([BookPaxInput!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/bookstatustype/",
	"title": "BookStatusType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum BookStatusType{   OK,    KO,    ON_REQUEST,    CANCELLED,    UNKNOWN,    PENDING_COMMIT,   }   Required by HotelBookingDetail:    HotelCancelDetail:    HotelCommitDetails:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/interfaces/bookableoptionsearch/",
	"title": "BookableOptionSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface BookableOptionSearch {  supplierCode: String!    accessCode: String!    id: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierCode(String!):   accessCode(String!):   id(String!):    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/bookingflow/",
	"title": "Booking Flow",
	"tags": [],
	"description": "How to perform a booking",
	"content": " The operations  Avail     Valuation     Reservation     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/booking-flow-methods/",
	"title": "Booking Flow",
	"tags": [],
	"description": "Booking Flow",
	"content": "   Avail      Valuation      Reservation     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/reservationmanagement/booklist/",
	"title": "Booking List",
	"tags": [],
	"description": "How to request a list of your bookings via TGX",
	"content": " The Booking List operation allows to retrieve a booking (or bookings) with all its details from the booking reference locator. The main information returned for each booking in the list is as follows:\n Booking reference\n Booking holder\n Booking pax\n Hotel, rooms and boards confirmed\n Booking rates\n  Advanced criteria There are three different types of booking search:\n By reference\n By dates\n By bookingID\n  How to request     cca5c85b0cd1be29f86a67ecf38bb75a You can ask for bookings by client reference or by supplier reference. /cca5c85b0cd1be29f86a67ecf38bb75a\naf8923db89312e8f2cd85ed063b2fc15 Bear in mind that you will have to carry the bookingID recieved in the book response if you want to retrieve with this query. /af8923db89312e8f2cd85ed063b2fc15\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"310e5aab39ae09ddb5ba06cbaae8bcb6\",\"n\":\"By Dates\",\"o\":[\"graphiql\"],\"u\":\"xsolano\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"cca5c85b0cd1be29f86a67ecf38bb75a\",\"n\":\"By Reference\",\"o\":[\"graphiql\"],\"u\":\"xsolano\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"af8923db89312e8f2cd85ed063b2fc15\",\"n\":\"By BookingID\",\"o\":[\"graphiql\"],\"u\":\"xsolano\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \nBear in mind _Remember that you can choose the information you want displayed\nReference: To display client or supplier booking reference\nStatus: To display the booking status\nIf you want to ask for one booking, you can send the client/supplier booking reference on the HotelCriteriaBooking\n "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/bookingcriteriatype/",
	"title": "BookingCriteriaType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum BookingCriteriaType{   DATES,    REFERENCES,   }   Required by HotelCriteriaBookingInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/bookinghotel/",
	"title": "BookingHotel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookingHotel {  bookingDate: Date    start: Date    end: Date    hotelCode: String    hotelName: String    boardCode: String    occupancies: [Occupancy!]    rooms: [BookingRoom!]   Show deprecated fields   creationDate: : Date // deprecated from 2018-02-28 Incorrect date format.     checkIn: : Date // deprecated from 2018-02-28 Incorrect date format.     checkOut: : Date // deprecated from 2018-02-28 Incorrect date format.     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields creationDate(Date):   checkIn(Date):   checkOut(Date):   bookingDate(Date):   start(Date):   end(Date):   hotelCode(String):   hotelName(String):   boardCode(String):   occupancies([Occupancy!]):   rooms([BookingRoom!]):    Required by HotelBookingDetail:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/bookingroom/",
	"title": "BookingRoom",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookingRoom {  occupancyRefId: Int    code: String    description: String    price: Price   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields occupancyRefId(Int):   code(String):   description(String):   price(Price):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by PageInfo:    OperationDetailed:  Stats information per operation  AccessData:    SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    GroupData:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by StatsFilterInput:    PageInfo:    OperationDetailed:    AccessData:    SupplierData:    Provider:    ClientFilter:    SystemData:    SupplierFilter:    GroupData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    ProfileData:    OrganizationData:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by AlertCriteriaInput:    PageInfo:    AlertData:    AlertConfiguration:    MemberData:    GroupData:    GroupCommonData:    APIData:    ResourceData:    RoleData:    AccessData:    SupplierData:    Provider:    ClientFilter:    SystemData:    SupplierFilter:    OrganizationData:    ClientData:    ProfileData:    AlertInput:  Alert information. Only one configuration has to be set at once.  AlertUpdateInput:    AlertConfigurationInputNoTraffic:  Configuration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertConfigurationInputErrorRate:  Configuration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.  AlertConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertConfigurationInputPeakTraffic:  Configuration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertConfigurationInputPrice:    HubStatusInput:    ErrorCodeInput:    ErrorTypeInput:    AlertObjectInput:    AlertGroupInput:    AlertUpdateConfigurationInputNoTraffic:  Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertUpdateConfigurationInputErrorRate:  Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.  AlertUpdateConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertUpdateConfigurationInputPeakTraffic:  Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertUpdateConfigurationInputPrice:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   "
},
{
	"uri": "https://travelgatex.com/mappea/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by SupplierData:    Provider:    ClientFilter:    PageInfo:    AccessData:    ClientData:    SupplierFilter:    GroupData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    ProfileData:    OrganizationData:    SystemData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by PageInfo:    GroupData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    AccessData:    SupplierData:    Provider:    ClientFilter:    SystemData:    SupplierFilter:    OrganizationData:    ClientData:    ProfileData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean   Required by SupplierFilter:    ClientFilter:    EntityFilter:    SystemFilter:    PageInfo:    AccessData:    SupplierData:    Provider:    SystemData:    GroupData:    GroupCommonData:    MemberData:    RoleData:    ResourceData:    APIData:    OrganizationData:    ClientData:    ProfileData:    HotelXHotelFilterInput:    HotelSettingsInput:    HotelData:    MandatoryFee:    DestinationData:    BedStatic:    ReviewedBool:    BookPreferenceInfo:    BookPreferenceValue:    SettingsBaseInput:    Room:    Price:    Supplement:    Surcharge:    CancelPolicy:    Bed:    Markup:    Priceable:    PriceChange:    HotelRuntimeParameter:    StatsFilterInput:    OperationDetailed:    AlertCriteriaInput:    AlertData:    AlertConfiguration:    AccessInput:    CreateClientInput:    UpdateClientInput:    CreateProfileInput:    UpdateProfileInput:    CreateSystemInput:    UpdateSystemInput:    UpdateMemberInput:    HotelXUpdateStatusData:    DeltaPriceInput:    AlertInput:  Alert information. Only one configuration has to be set at once.  AlertUpdateInput:    AlertConfigurationInputNoTraffic:  Configuration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertConfigurationInputErrorRate:  Configuration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.  AlertConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertConfigurationInputPeakTraffic:  Configuration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertConfigurationInputPrice:    HubStatusInput:    ErrorCodeInput:    ErrorTypeInput:    AlertObjectInput:    AlertGroupInput:    AlertUpdateConfigurationInputNoTraffic:  Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertUpdateConfigurationInputErrorRate:  Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.  AlertUpdateConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertUpdateConfigurationInputPeakTraffic:  Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertUpdateConfigurationInputPrice:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/tutorials/ota-site/",
	"title": "Build An OTA",
	"tags": [],
	"description": "Build your own full fledged OTA",
	"content": " Creating your full OTA This topic describes how to build your own OTA using HotelX.\nBefore you begin  Basic knowledge of Angular Read HotelX, which contains information about the HotelX API  Scenario: Create an Online Travel Agency written in Angular For this quickstart tutorial, we have prepared a repository that contains the full Angular code for the OTA clone. All you need to do is to get TravelgateX credentials and connect it with the Angular application. Let\u0026rsquo;s get started!\n Visit OTA Angular follow readme instructions  "
},
{
	"uri": "https://travelgatex.com/distribution/getting-started/business-elements/",
	"title": "Business elements",
	"tags": [],
	"description": "Business elements and structures",
	"content": " Distribution-X distinguishes up to 3 levels in which we can organize product distribution: in each of these levels we can establish a set of rules, or even inherit them.\nThe entire set of rules and their operation are described in the documentation for the Rules Management Extranet. Please check Rules Management. Organization: 1st level The 1st level is the so-called ‚Äúorganization‚Äù and would be equivalent to a Distribution-X customer (not a buyer/client who comes to TravelgateX platform to buy, but the company that has contracted the Distribution-X module to distribute its product). An organization has complete control over its rules, being able to modify any behavior. A buyer/client does not have access to the rules, only to the reservation flow. Between organizations there is no visibility, they do not share anything, nor rules, nor information (masters of entities, for example or reservations.\nAt the organization level, you can define pricing rules, blacklists, filters, etc. and they will be unique to each organization. Reservations are also stored at the organization level and are only accessible by the owner organization.\nShould a Distribution-X customer be restricted to having the equivalence of a single organization? No, it all depends on the circumstances of each Distribution-X customer. In case of having more than one organization, it should be born in mind that the restrictions remain between these organizations and there is neither visibility nor sharing information or rules.\nAgency: 2nd level If we go down one level within an organization we find what is called ‚Äúagency‚Äù: an organization has a set of agencies (at least one). Agencies are specific to each organization and are not shared between organizations.\nWe can understand an agency as a client, a buyer or a distribution channel. At the agency level, you can define pricing rules, blacklists, filters, etc. and they will be unique to each agency. What the agencies of the same organization do share are the master of entities and the rules of the organization.\nOne client of the Distribution-X customer have at least one corresponding agency, but can have more (it depends on the needs, and for example can have 2 to distinguish between B2B and B2C rates).\nOffice: 3rd level (optional) We have an optional third level, which is the office level: an agency can have offices, which will be exclusive to the agency and organization (they are not shared between agencies or between organizations).\nAt the office level we can define some price rules and they mainly inherit the rules of the agency and organization in which it is included. Like agencies, offices within the same organization also share the organization\u0026rsquo;s masters of entities and rules.\n"
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/businessrules/",
	"title": "BusinessRules",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BusinessRules {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionsQuota(Int!):   businessRulesType(BusinessRulesType!):    Required by HotelXDefaultSettingsData:    HotelXCommonSettingsData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/businessrulesinput/",
	"title": "BusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BusinessRulesInput {  optionsQuota: Int    businessRulesType: BusinessRulesType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionsQuota(Int):   businessRulesType(BusinessRulesType):    Required by HotelSettingsInput:    SettingsBaseInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/businessrulestype/",
	"title": "BusinessRulesType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum BusinessRulesType{   CHEAPER_AMOUNT,    ROOM_TYPE,   }   Required by BusinessRules:    BusinessRulesInput:    HotelXBusinessRulesInput:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/cvc/",
	"title": "CVC",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar CVC   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/cvc/",
	"title": "CVC",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar CVC   Required by PaymentCardData:    PaymentXStoredCardData:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/cancelpenalty/",
	"title": "CancelPenalty",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CancelPenalty {  deadline: DateTime    hoursBefore: Int!    penaltyType: CancelPenaltyType!    currency: Currency!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields deadline(DateTime):   hoursBefore(Int!):   penaltyType(CancelPenaltyType!):   currency(Currency!):   value(Float!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/cancelpenaltytype/",
	"title": "CancelPenaltyType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum CancelPenaltyType{   NIGHTS,    PERCENT,    IMPORT,   }   Required by CancelPenalty:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/cancelpolicy/",
	"title": "CancelPolicy",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CancelPolicy {  refundable: Boolean!    cancelPenalties: [CancelPenalty!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields refundable(Boolean!):   cancelPenalties([CancelPenalty!]):    Required by HotelOptionSearch:    HotelOptionQuote:    HotelBookingDetail:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/cardnumber/",
	"title": "CardNumber",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar CardNumber   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/cardnumber/",
	"title": "CardNumber",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar CardNumber   Required by PaymentCardData:    PaymentXStoredCardData:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/category/",
	"title": "Category",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Category {  code: ID!    categoryData: CategoryData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   error: : [Error!] // Deprecated from 2019-07-03     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   categoryData(CategoryData):   error([Error!]):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by CategoryEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/categoryconnection/",
	"title": "CategoryConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CategoryConnection {  edges: [CategoryEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([CategoryEdge]):   pageInfo(PageInfo!):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/categorydata/",
	"title": "CategoryData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CategoryData {  code: ID!    categoryCode: String!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   categoryCode(String!):   texts([Text!]):    Required by Category:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/categoryedge/",
	"title": "CategoryEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CategoryEdge {  node: Category    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Category):   cursor(String!):    Required by CategoryConnection:     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/howtos/guides/certification_process/goals/",
	"title": "Certification Goals",
	"tags": [],
	"description": "Why we ask for certification process",
	"content": " The Certification process intention is to test and ensure that your integration is performed correctly, this means, that functionality and implementation of the relevant and mandatory information are done correctly and without errors. All of this is focused to avoid issues with the final consumer, or he/she being misled by any incorrect information or not desirable API uses. Before starting the certification process, make sure you have followed the Welcome Pack instructions. This will speed up the process and avoid problems afterwards.\nHaving said that, our certification process will look at 5 different operations: \n Search Quote Book Cancel BookingList  What we check during certification We will be checking the below data:\n Usage of general data structure of our API Usage of the correct booking flow: search, quote, book. The arrival and departure dates. The correct handling of the prices (net price, gross price, commission, etc.). Possible cancellation policies applied to that booking (if you use it). The information of the room selected (id, code, description, etc.). The meal plan selected. Provide supplier‚Äôs remarks on the entire booking flow.  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/release-notes/change-log/",
	"title": "Change Log",
	"tags": [],
	"description": "",
	"content": "Version 1.0.27: Date 23/12/2020\n Strong Customer Authentication (3DS). 3DS data can now be included with a Payment Card in a reservation in reservations alongside payment card data. You can find new field \u0026ldquo;ThreeDomainService\u0026rdquo; specification in Reservation request.    Virtual Credit Cards (VCC). Extra information about Virtual Credit Cards can now be included with a Payment Card in a reservation. You can find new field \u0026ldquo;VirtualCreditCard\u0026rdquo; specification in Reservation request.   Version 1.0.26: Date 17/09/2020\n Hotel code in Reservation Read Response. Hotel code not mandatory at Hotel element level in Reservation Read Response.   Version 1.0.25: Date 28/07/2020\n Addition of new rate conditions. 2 new rate rule condition types added to the possible returned values:     Codes Description     mobile Rate applicable to options booked by mobile.   warranty Rate applicable to options with cancellation warranty.    See full list at Lists of Data page.\n Version 1.0.24: Date 22/06/2020\n Addition of new typified error. Adding error code 303 to identify bookings that have not been confirmed in the supplier\u0026rsquo;s system. This error will come with the ResStatus element as UN to identify bookings that haven\u0026rsquo;t been confirmed only when the supplier can identify them.   \u0026lt;ApplicationError\u0026gt; \u0026lt;type\u0026gt;303\u0026lt;/type\u0026gt; \u0026lt;description\u0026gt;Booking not confirmed\u0026lt;/description\u0026gt; \u0026lt;/ApplicationError\u0026gt; \u0026lt;ResStatus\u0026gt;UN\u0026lt;/ResStatus\u0026gt;  Version 1.0.23: Date 03/06/2020\n Addition of new typified error. Adding error code 103 to identify when the error returned by the supplier is due to too many requests.   \u0026lt;ApplicationError\u0026gt; \u0026lt;type\u0026gt;103\u0026lt;/type\u0026gt; \u0026lt;description\u0026gt;TooManyRequests\u0026lt;/description\u0026gt; \u0026lt;httpStatusCode\u0026gt;429\u0026lt;/httpStatusCode\u0026gt; \u0026lt;/ApplicationError\u0026gt;  Version 1.0.22: Date 30/09/2019\n Addition of tag AllowsNationality in MetaData. Adding AllowsNationality tag to MetaData response to inform if the supplier allows to receive the Nationality of the Holder of the booking.   \u0026lt;Generic\u0026gt; \u0026lt;AllowsNationality reviewDate = \u0026quot;06/09/2019\u0026quot;\u0026gt;true\u0026lt;/AllowsNationality\u0026gt; \u0026lt;RequiredNationality reviewDate = \u0026quot;06/09/2019\u0026quot;\u0026gt;true\u0026lt;/RequiredNationality\u0026gt; \u0026lt;AllowsOnRequest reviewDate = \u0026quot;06/09/2019\u0026quot;\u0026gt;false\u0026lt;/AllowsOnRequest\u0026gt; \u0026lt;/Generic\u0026gt;   Addition of Holder element in Reservation, ReservationRead and Cancellation requests. Adding Holder element tag to Reservation, ReservationRead and Cancellation requests. If the supplier allows, we would send this passenger as the Holder of the booking instead of picking the first guest.   \u0026lt;Holder title = \u0026quot;Miss\u0026quot; name = \u0026quot;test\u0026quot; surname = \u0026quot;test\u0026quot;/\u0026gt;   Addition of Title element for guests in Reservation request and ReservationRead response. Adding Title element of guests to Reservation request and ReservationRead response.   \u0026lt;Guest roomCandidateId = \u0026quot;1\u0026quot; paxId = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Title\u0026gt;Miss\u0026lt;/Title\u0026gt; \u0026lt;GivenName\u0026gt;Test11\u0026lt;/GivenName\u0026gt; \u0026lt;SurName\u0026gt;TestAp11\u0026lt;/SurName\u0026gt; \u0026lt;/Guest\u0026gt;   Addition of new payment type PayX. Adding PayX as a payment type.      Code Description     PayX The payment is managed by TravelgateX\u0026rsquo;s payment system.    (You can find full payment types list at Lists of Data).\n Addition new error code type 302. Adding code 302 for error Hotel Not Found in DescriptiveInfo.   (You can find full error codes list at Lists of Data).\nVersion 1.0.22: Date 09/07/2019\n Addition of the boolean DailyPrices to AvailRS. By default DailyPrices is set to true. When set to true, if the supplier implements daily prices you will receive a list of daily prices for each room in the Avail response for the given date range. If set to false this information will not be included in the response.\n Addition of the boolean DailyRatePlans to AvailRS. By default DailyRatePlans is set to true. When set to true, if the supplier implements daily rate plans you will receive a list of the available rate plans for each room in the Avail response for the given date range. If set to false this information will not be included in the response.\n Added Mobile as a Rate Condition In the avail response at Option level there is now an option to add \u0026ldquo;mobile\u0026rdquo; to the list of rate conditions.\n Http Status Code 504 type as 105 Error. If the supplier returns a httpStatusCode 504 this will register as error code 105.\n New Metadata tags.\n InformRoomDescription indicates if the supplier returns a room description in their availability call. Found in MetaDataAvail. InformHotelName indicates if the supplier returns the hotel name in their availability call. Found in MetaDataAvail. InformNRFRate indicates if the rate is non refundable in the availability call. Found in MetaDataAvail. InformDailyPrice indicates if the supplier returns daily prices in the availability call. Found in MetaDataAvail. InformDailyRatePlan indicates if the supplier returns daily rate plans in their availability call. Found in MetaDataAvail. RequiredNationality indicates if the nationality field in the AvailRQ is required. Found in MetaDataGeneric.  Error Message Language Change. Errors caught by the Avail Validator now return error messages in English instead of Spanish as they previously did.\n  |\nVersion 1.0.21: Date 25/04/2018\n CancelPolicies and fees returned at stage room in AvailRS. Depending on the supplier, the information concerning CancelPolicies and fees can be displayed at room level. To receive the CancelPolicies at room level, it is necessary to send the tag RoomCancellationPolicies in the AvailRQ. Property reservation number in ReservationRS, ReservationReadRS and ReservationListRS. Depending on the supplier, you will receive the property reservation number in addition to the supplier locator. IATA airport codes in DescriptiveInfoRS and HotelListRS Depending on the supplier, you will receive the codes for the airports near a specific hotel. New Metadata tags. InformRoomCancelPolicies, InformRoomFees, ImplementsCombination and InformPropertyReservationNumber.  |\nVersion 1.0.20: Date 11/12/2017\n New tags Metadata: PaxTypeRangeInRoomCandidates: Definition of the restrictions of the guests in the room. New tags Metadata: AllowsPreferences: Definition of the preferences that the provider allows in the request of the reservation. New atribute in AgeRange/Age@type: Type of guest according to the age range. New filters in Reservation Request: With this tag you can define preferences filters at the hotel or room level if the provider allows it.  |\nVersion 1.0.19: Date 19/06/2017\n Offers returned at stage room and fees at stage option in AvailRS. Depending on the supplier, the information concerning offers can be displayed either at room level or at option level. Furthermore, we will show at stage option the information relative to fees from now on.\n GroupCode in MarketListRS. Use this option to see if the supplier groups different markets in a single group, so you can get the same prices/options if two markets belong to the same group.\n UpgradeUTCDate in DescriptiveInfoRS. With this new tag you can check the upgrade date of the picture in UTC format.\n Added new rate conditions in AvailRS. Specifically, publicServant and unemployed.\n Added 105 error type. Used for communication errors.\n New method MetaData. This method provides information about the meta data of the supplier so that it can be effectively configured.\n Added UpgradeUTCDate in DescriptiveInfoRS, HotelListRS, AvailDestinationTreeRS, GeographicDestinationTreeRS, CategoryListRS, MealPlanListRS, RoomListRS, CurrencyListRS and MarketListRS. For each method, this tag was added to show when the information was last updated.\n  |\nVersion 1.0.18: Date 31/10/2016\n: Name (DailyRatePlan) in AvailRS.\n: New method MarketList.\n: AgeRange in StaticConfiguration.\n: DestinationRegex in StaticConfiguration.\n|\nVersion 1.0.17: Date 27/06/2016\n: Code (Picture) in DescriptiveInfoRS.\n|\nVersion 1.0.16: Date 03/05/2016\n: Currency in AvailRQ.\n: Markets in AvailRQ.\n: NumberOfUnits in AvailRQ.\n: ProviderCode in HotelListRS.\n: NumMarketsAllowed in StaticConfiguration.\n: InformTiket in StaticConfiguration.\n: InformNumberOfUnits in StaticConfiguration.\n: ImplementsDescriptiveInfoExtended in StaticConfiguration.\n|\nVersion 1.0.15: Date 29/02/2016\n: New BusinessRules (RoomType) in AvailRQ.\n: ImplementsProviderLocatorCancel in StaticConfiguration.\n: ImplementsClientLocatorCancel in StaticConfiguration.\n|\nVersion 1.0.14: Date 01/02/2016\n: ContinuationToken in Common Elements (use in HotelList call).\n|\nVersion 1.0.13: Date 18/01/2016\n: BusinessRules in AvailRQ.\n: ImplementsBusinessRules in StaticConfiguration.\n: OptionsQuota in Common-Elements.\n: PropertyCategory in HotelList and DescriptiveInfo.\n|\nVersion 1.0.12: Date 09/12/2015\n: Nationality in Avail, Valuation, ModifyValuation and ModifyReservation request.\n: New rate conditions: largeFamily and honeymoon.\n: RequiredNationality in StaticConfiguration.\n: Inform60Rate in StaticConfiguration.\n: Inform65Rate in StaticConfiguration.\n: InformCanaryResidentRate in StaticConfiguration\n: InformBalearicResidentRate in StaticConfiguration.\n: InformLargeFamilyRate in StaticConfiguration.\n: InformHoneymoonRate in StaticConfiguration.\n|\nVersion 1.0.11: Date 17/11/2015\n: BusinessRule in AvailRQ.\n: AvailableModifications in ReservationRead.\n: ImplementsBusinessRule in StaticConfiguration.\n: InformAvailableModificationsInReservationRead in StaticConfiguration.\n: GiataId.\n|\nVersion 1.0.10: Date 29/09/2015\n: OnRequest.\n: DailyRatePlans.\n: Remarks in Confirmation request.\n: BedTypes.\n: SharedBed.\n: BlockOption.\n: ExclusiveDeal.\n: Offers in Avail.\n: Fees in Valuation.\n: CancelPoliciesDescription in Valuation.\n: DeltaPrice in Confirmation.\n: DescriptiveInfoExtended.\n|\nVersion 1.0.9: Date 30/11/2014\n: New Wiki look \u0026amp; Feel, now using Sphinx reST.\n: Add hotel XSDs.\n: Improvement documentation PaymentType, CardInfo and MasterCodes.\n|\nVersion 1.0.9: Date 27/03/2014\n: Modify booking.\n|\nVersion 1.0.8: Date 17/03/2014\n: Bed information in AvailRS.\n|\nVersion 1.0.7: Date 11/03/2013\n: Product specification download.\n: Added element geographical destination in hotel.\n: Implemented new call: GeographicDestinationTree.\n|\nVersion 1.0.6: Date 30/08/2012\n: Implemented three new calls: ReservationList, RuntimeConfigurationand StaticConfiguration.\n: Added attribute element level NuevaOpcion Offer.\n: Appendix of countries and currencies.\n|\nVersion 1.0.5: Date 30/07/2012\n: Correcting errors in the documentation.\n: Add Promotions / Specials Offers in disponibilidadRS option.\n|\nVersion 1.0.4: Date 13/06/2012\n: Larger PDI structure to charge hotel + ticket.\n: Add ProveedorFacturacionExterna in confirmacionRS.\n|\nVersion 1.0.3: Date 09/04/2012\n: New type errors in Valuation.\n|\nVersion 1.0.2: Date 20/02/2012\n: AvailDestinationTree specified destinations only attackable on availability Added ISO country code in response Hotel.\n|\nVersion 1.0.1: Date 11/01/2012\n: Specified Common Elements Added Appendices.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/release-notes/change-log/",
	"title": "Change Log",
	"tags": [],
	"description": "",
	"content": "Version 1.0.27: Date 21/12/2020\n Strong Customer Authentication (3DS). 3DS data can now be included with a Payment Card in a reservation in reservations alongside payment card data. You can find new field \u0026ldquo;ThreeDomainService\u0026rdquo; specification in [Reservation]((/hotelpullsellers/methods/messages/reservation) request.    Virtual Credit Cards (VCC). Extra information about Virtual Credit Cards can now be included with a Payment Card in a reservation. You can find new field \u0026ldquo;VirtualCreditCard\u0026rdquo; specification in [Reservation]((/hotelpullsellers/methods/messages/reservation) request.   Version 1.0.26: Date 01/09/2020\n Hotel code in Reservation Read Response. Hotel code not mandatory at Hotel element level in Reservation Read Response.   Version 1.0.24: Date 22/06/2020\n Addition of new rate conditions. 2 new rate rule condition types added to the possible returned values:     Codes Description     mobile Rate applicable to options booked by mobile.   warranty Rate applicable to options with cancellation warranty.    See full list at Lists of Data page.\n Version 1.0.24: Date 22/06/2020\n Addition of new typified error. Adding error code 303 to identify bookings that have not been confirmed in the supplier\u0026rsquo;s system. This error will come with the ResStatus element as UN to identify bookings that haven\u0026rsquo;t been confirmed only when the supplier can identify them.   \u0026lt;ApplicationError\u0026gt; \u0026lt;type\u0026gt;303\u0026lt;/type\u0026gt; \u0026lt;description\u0026gt;Booking not confirmed\u0026lt;/description\u0026gt; \u0026lt;/ApplicationError\u0026gt; \u0026lt;ResStatus\u0026gt;UN\u0026lt;/ResStatus\u0026gt;  Version 1.0.23: Date 03/06/2020\n Addition of new typified error. Adding error code 103 to identify when the error returned by the supplier is due to too many requests.   \u0026lt;ApplicationError\u0026gt; \u0026lt;type\u0026gt;103\u0026lt;/type\u0026gt; \u0026lt;description\u0026gt;TooManyRequests\u0026lt;/description\u0026gt; \u0026lt;httpStatusCode\u0026gt;429\u0026lt;/httpStatusCode\u0026gt; \u0026lt;/ApplicationError\u0026gt;  Version 1.0.22: Date 30/09/2019\n Addition of tag AllowsNationality in MetaData. Adding AllowsNationality tag to MetaData response to inform if the supplier allows to receive the Nationality of the Holder of the booking.   \u0026lt;Generic\u0026gt; \u0026lt;AllowsNationality reviewDate = \u0026quot;06/09/2019\u0026quot;\u0026gt;true\u0026lt;/AllowsNationality\u0026gt; \u0026lt;RequiredNationality reviewDate = \u0026quot;06/09/2019\u0026quot;\u0026gt;true\u0026lt;/RequiredNationality\u0026gt; \u0026lt;AllowsOnRequest reviewDate = \u0026quot;06/09/2019\u0026quot;\u0026gt;false\u0026lt;/AllowsOnRequest\u0026gt; \u0026lt;/Generic\u0026gt;   Addition of Holder element in Reservation, ReservationRead and Cancellation requests. Adding Holder element tag to Reservation, ReservationRead and Cancellation requests. If the supplier allows, we would send this passenger as the Holder of the booking instead of picking the first guest.   \u0026lt;Holder title = \u0026quot;Miss\u0026quot; name = \u0026quot;test\u0026quot; surname = \u0026quot;test\u0026quot;/\u0026gt;   Addition of Title element for guests in Reservation request and ReservationRead response. Adding Title element of guests to Reservation request and ReservationRead response.   \u0026lt;Guest roomCandidateId = \u0026quot;1\u0026quot; paxId = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Title\u0026gt;Miss\u0026lt;/Title\u0026gt; \u0026lt;GivenName\u0026gt;Test11\u0026lt;/GivenName\u0026gt; \u0026lt;SurName\u0026gt;TestAp11\u0026lt;/SurName\u0026gt; \u0026lt;/Guest\u0026gt;   Addition of new payment type PayX. Adding PayX as a payment type.      Code Description     PayX The payment is managed by TravelgateX\u0026rsquo;s payment system.    (You can find full payment types list at Lists of Data).\n Addition new error code type 302. Adding code 302 for error Hotel Not Found in DescriptiveInfo.   (You can find full error codes list at Lists of Data).\nVersion 1.0.22: Date 09/07/2019\n Addition of the boolean DailyPrices to AvailRS. By default DailyPrices is set to true. When set to true, if the supplier implements daily prices you will receive a list of daily prices for each room in the Avail response for the given date range. If set to false this information will not be included in the response.\n Addition of the boolean DailyRatePlans to AvailRS. By default DailyRatePlans is set to true. When set to true, if the supplier implements daily rate plans you will receive a list of the available rate plans for each room in the Avail response for the given date range. If set to false this information will not be included in the response.\n Added Mobile as a Rate Condition In the avail response at Option level there is now an option to add \u0026ldquo;mobile\u0026rdquo; to the list of rate conditions.\n Http Status Code 504 type as 105 Error. If the supplier returns a httpStatusCode 504 this will register as error code 105.\n New Metadata tags.\n InformRoomDescription indicates if the supplier returns a room description in their availability call. Found in MetaDataAvail. InformHotelName indicates if the supplier returns the hotel name in their availability call. Found in MetaDataAvail. InformNRFRate indicates if the rate is non refundable in the availability call. Found in MetaDataAvail. InformDailyPrice indicates if the supplier returns daily prices in the availability call. Found in MetaDataAvail. InformDailyRatePlan indicates if the supplier returns daily rate plans in their availability call. Found in MetaDataAvail. RequiredNationality indicates if the nationality field in the AvailRQ is required. Found in MetaDataGeneric.  Error Message Language Change. Errors caught by the Avail Validator now return error messages in English instead of Spanish as they previously did.\n  |\nVersion 1.0.21: Date 25/04/2018\n CancelPolicies and fees returned at stage room in AvailRS. Depending on the supplier, the information concerning CancelPolicies and fees can be displayed at room level. To receive the CancelPolicies at room level, it is necessary to send the tag RoomCancellationPolicies in the AvailRQ. Property reservation number in ReservationRS, ReservationReadRS and ReservationListRS. Depending on the supplier, you will receive the property reservation number in addition to the supplier locator. IATA airport codes in DescriptiveInfoRS and HotelListRS Depending on the supplier, you will receive the codes for the airports near a specific hotel. New Metadata tags. InformRoomCancelPolicies, InformRoomFees, ImplementsCombination and InformPropertyReservationNumber.  |\nVersion 1.0.20: Date 11/12/2017\n New tags Metadata: PaxTypeRangeInRoomCandidates: Definition of the restrictions of the guests in the room. New tags Metadata: AllowsPreferences: Definition of the preferences that the provider allows in the request of the reservation. New atribute in AgeRange/Age@type: Type of guest according to the age range. New filters in Reservation Request: With this tag you can define preferences filters at the hotel or room level if the provider allows it.  |\nVersion 1.0.19: Date 19/06/2017\n Offers returned at stage room and fees at stage option in AvailRS. Depending on the supplier, the information concerning offers can be displayed either at room level or at option level. Furthermore, we will show at stage option the information relative to fees from now on.\n GroupCode in MarketListRS. Use this option to see if the supplier groups different markets in a single group, so you can get the same prices/options if two markets belong to the same group.\n UpgradeUTCDate in DescriptiveInfoRS. With this new tag you can check the upgrade date of the picture in UTC format.\n Added new rate conditions in AvailRS. Specifically, publicServant and unemployed.\n Added 105 error type. Used for communication errors.\n New method MetaData. This method provides information about the meta data of the supplier so that it can be effectively configured.\n Added UpgradeUTCDate in DescriptiveInfoRS, HotelListRS, AvailDestinationTreeRS, GeographicDestinationTreeRS, CategoryListRS, MealPlanListRS, RoomListRS, CurrencyListRS and MarketListRS. For each method, this tag was added to show when the information was last updated.\n  |\nVersion 1.0.18: Date 31/10/2016\n: Name (DailyRatePlan) in AvailRS.\n: New method MarketList.\n: AgeRange in StaticConfiguration.\n: DestinationRegex in StaticConfiguration.\n|\nVersion 1.0.17: Date 27/06/2016\n: Code (Picture) in DescriptiveInfoRS.\n|\nVersion 1.0.16: Date 03/05/2016\n: Currency in AvailRQ.\n: Markets in AvailRQ.\n: NumberOfUnits in AvailRQ.\n: ProviderCode in HotelListRS.\n: NumMarketsAllowed in StaticConfiguration.\n: InformTiket in StaticConfiguration.\n: InformNumberOfUnits in StaticConfiguration.\n: ImplementsDescriptiveInfoExtended in StaticConfiguration.\n|\nVersion 1.0.15: Date 29/02/2016\n: New BusinessRules (RoomType) in AvailRQ.\n: ImplementsProviderLocatorCancel in StaticConfiguration.\n: ImplementsClientLocatorCancel in StaticConfiguration.\n|\nVersion 1.0.14: Date 01/02/2016\n: ContinuationToken in Common Elements (use in HotelList call).\n|\nVersion 1.0.13: Date 18/01/2016\n: BusinessRules in AvailRQ.\n: ImplementsBusinessRules in StaticConfiguration.\n: OptionsQuota in Common-Elements.\n: PropertyCategory in HotelList and DescriptiveInfo.\n|\nVersion 1.0.12: Date 09/12/2015\n: Nationality in Avail, Valuation, ModifyValuation and ModifyReservation request.\n: New rate conditions: largeFamily and honeymoon.\n: RequiredNationality in StaticConfiguration.\n: Inform60Rate in StaticConfiguration.\n: Inform65Rate in StaticConfiguration.\n: InformCanaryResidentRate in StaticConfiguration\n: InformBalearicResidentRate in StaticConfiguration.\n: InformLargeFamilyRate in StaticConfiguration.\n: InformHoneymoonRate in StaticConfiguration.\n|\nVersion 1.0.11: Date 17/11/2015\n: BusinessRule in AvailRQ.\n: AvailableModifications in ReservationRead.\n: ImplementsBusinessRule in StaticConfiguration.\n: InformAvailableModificationsInReservationRead in StaticConfiguration.\n: GiataId.\n|\nVersion 1.0.10: Date 29/09/2015\n: OnRequest.\n: DailyRatePlans.\n: Remarks in Confirmation request.\n: BedTypes.\n: SharedBed.\n: BlockOption.\n: ExclusiveDeal.\n: Offers in Avail.\n: Fees in Valuation.\n: CancelPoliciesDescription in Valuation.\n: DeltaPrice in Confirmation.\n: DescriptiveInfoExtended.\n|\nVersion 1.0.9: Date 30/11/2014\n: New Wiki look \u0026amp; Feel, now using Sphinx reST.\n: Add hotel XSDs.\n: Improvement documentation PaymentType, CardInfo and MasterCodes.\n|\nVersion 1.0.9: Date 27/03/2014\n: Modify booking.\n|\nVersion 1.0.8: Date 17/03/2014\n: Bed information in AvailRS.\n|\nVersion 1.0.7: Date 11/03/2013\n: Product specification download.\n: Added element geographical destination in hotel.\n: Implemented new call: GeographicDestinationTree.\n|\nVersion 1.0.6: Date 30/08/2012\n: Implemented three new calls: ReservationList, RuntimeConfigurationand StaticConfiguration.\n: Added attribute element level NuevaOpcion Offer.\n: Appendix of countries and currencies.\n|\nVersion 1.0.5: Date 30/07/2012\n: Correcting errors in the documentation.\n: Add Promotions / Specials Offers in disponibilidadRS option.\n|\nVersion 1.0.4: Date 13/06/2012\n: Larger PDI structure to charge hotel + ticket.\n: Add ProveedorFacturacionExterna in confirmacionRS.\n|\nVersion 1.0.3: Date 09/04/2012\n: New type errors in Valuation.\n|\nVersion 1.0.2: Date 20/02/2012\n: AvailDestinationTree specified destinations only attackable on availability Added ISO country code in response Hotel.\n|\nVersion 1.0.1: Date 11/01/2012\n: Specified Common Elements Added Appendices.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/channel-x/release-notes/changelog/",
	"title": "Changelog",
	"tags": ["release-notes"],
	"description": "Channel-X Changelog",
	"content": " 2021-05-24  Add FreeChild/Baby at RatePlan level in HotelRatePlanInventoryNotif and HotelRatePlanNotif requests. Please check our API to find more information.   2019-06-04  Deletion order when value is -1    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/release-notes/changelog/",
	"title": "Changelog",
	"tags": [],
	"description": "Changelog Hotel Push Sellers API",
	"content": " 2022-03-22  Now it\u0026rsquo;s possible to load rate rules or rate types using the HotelRatePlanInventoryNotifRQ method. This feature allows sellers to set, at rate level, rate rules as \u0026lsquo;Package\u0026rsquo; or \u0026lsquo;Negotiated\u0026rsquo;.   2020-11-25  Now it\u0026rsquo;s possible to load free charges for child and baby pax using the Inventory-X extranet. This feature allows buyers to set, at rate level, free children or babies when Channel Managers are not able to load it from their side. More info.    "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-channelx/",
	"title": "ChannelX",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \tTo make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/chargetype/",
	"title": "ChargeType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ChargeType{   INCLUDE,    EXCLUDE,   }   Required by Supplement:    Surcharge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/checkinformation/",
	"title": "CheckInformation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CheckInformation {  instructions( languages: [Language!], ): [Text!]    specialInstructions( languages: [Language!], ): [Text!]    minAge: Int    schedule: TimeRange   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instructions([Text!]):   specialInstructions([Text!]):   minAge(Int):   schedule(TimeRange):    Required by HotelData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/checkprice/",
	"title": "CheckPrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum CheckPrice{   AMOUNT,    COMMISSION,    ALL,   }   Required by AlertPrice:  Price contains the specific configuration for Price alert Type  AlertPriceInput:  Price input  AlertPriceUpdateInput:  Price update   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/checkprice/",
	"title": "CheckPrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum CheckPrice{   AMOUNT,    COMMISSION,    ALL,   }   Required by AlertPrice:  Price contains the specific configuration for Price alert Type  AlertPriceInput:  Price input  AlertPriceUpdateInput:  Price update   "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " Client identifies who is making the request and holds the configuration assigned to it.\nGraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by StatsData:    ClientEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by StatsData:    LegacyLink:    ClientEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by LegacyLink:    ClientEdge:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by LegacyLink:    ClientEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by LegacyLink:    ClientEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   clientData(ClientData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by LegacyLink:    ClientEdge:    StatsData:    LoggingLegacyData:    AdminMutation:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by SupplierData:    GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    SupplierData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by SupplierData:    GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    SupplierData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ClientEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by AdminQuery:    SupplierData:    GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID identifier of a Client  name(ID!): Client complete name  isActive(Boolean!): Indicates whether a Client is active or inactive  group(Group): Indicates the group where the Client belongs  owner(Organization): Client owner   Required by Client:  Client identifies who is making the request and holds the configuration assigned to it.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers(SupplierConnection):    Required by Client:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers(SupplierConnection):    Required by Client:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers(SupplierConnection):    Required by Client:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers(SupplierConnection):    Required by Client:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers(    first: Int,     last: Int,     before: String,     after: String,     filter: SupplierFilter,     ): SupplierConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers(SupplierConnection):    Required by Client:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {  node: Client    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Client):   cursor(String!):    Required by ClientConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/inputobjects/clientfilter/",
	"title": "ClientFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientFilter {  clientID: [ID]    name: [String!]    groupID: [ID]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields clientID([ID]):   name([String!]):   groupID([ID]):   isActive(Boolean):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/clientfilter/",
	"title": "ClientFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientFilter {  clientID: [ID]    name: [String!]    groupID: [ID]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields clientID([ID]):   name([String!]):   groupID([ID]):   isActive(Boolean):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/inputobjects/clientfilter/",
	"title": "ClientFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientFilter {  clientID: [ID]    name: [String!]    groupID: [ID]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields clientID([ID]):   name([String!]):   groupID([ID]):   isActive(Boolean):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/inputobjects/clientfilter/",
	"title": "ClientFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientFilter {  clientID: [ID]    name: [String!]    groupID: [ID]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields clientID([ID]):   name([String!]):   groupID([ID]):   isActive(Boolean):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/clientfilter/",
	"title": "ClientFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientFilter {  clientID: [ID]    name: [String!]    groupID: [ID]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields clientID([ID]):   name([String!]):   groupID([ID]):   isActive(Boolean):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/clonepermissionsinput/",
	"title": "ClonePermissionsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClonePermissionsInput {  sourceMember: ID!    destMember: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields sourceMember(ID!):   destMember(ID!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/cloudenvironment/",
	"title": "CloudEnvironment",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum CloudEnvironment{   AZURE,    GOOGLE,    HETZNER,    TOTAL_UPTIME,    BLUEKIRI,   }   Required by Environment:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/comercialtype/",
	"title": "ComercialType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ComercialType{   SELLER,    BUYER,   }   Required by AlertConfiguration:    AlertGroupInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/comercialtype/",
	"title": "ComercialType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ComercialType{   SELLER,    BUYER,   }   Required by AlertConfiguration:    AlertGroupInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/concepts/common-resources/",
	"title": "Common resources",
	"tags": [],
	"description": "Learn about common resources used in TravelgateX",
	"content": " On this page you will learn more about common resources used in TravelgateX. You can also refer to the overarching core concepts that apply to all TravelgateX APIs.\nSeller A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers.\nSupplier A Supplier is the Seler's API integration used to connect to the Seller.\nAccess An Access is a set of credentials and configuration in order to access the system of a Supplier.\nClient Client identifies who is making the request and holds the configuration assigned to it.\n"
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/conditiontype/",
	"title": "ConditionType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ConditionType{   GTE,    GT,    LTE,    LT,   }   Required by RangeFilter:     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Method Goals This message returns your connection configuration template as Seller in our platform. With this response we build a form, known as activation or connection form, where the Buyers fill the configuration parameters for the requests to you. In order to expedite the connections to your system through our platform it is important that all data in the configuration response is clear and explanatory as possible. Here you can read how the Buyers create a new connection in our platform.\nRequest Format The request only requires the maximum time in milliseconds that is necessary respect when returning your response.\nResponse Format The returned XML contains a template of all connection fields used in order to compose a form in our platform.\nConfigurationRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section.\n\u0026lt;ConfigurationRQ xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot; xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;999999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;true\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;optionsQuota\u0026gt;0\u0026lt;/optionsQuota\u0026gt; \u0026lt;hubProvider\u0026gt;XXX\u0026lt;/hubProvider\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;UrlGeneric\u0026gt;https://www.supplier.com/tgx\u0026lt;/UrlGeneric\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;param\u0026quot; value = \u0026quot;PWXML\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;/ConfigurationRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nConfigurationRQ Description    Element Number Type Description     ConfigurationRQ 1  Root node.    ConfigurationRS Example \u0026lt;ConfigurationRS xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;operationImplemented\u0026gt;true\u0026lt;/operationImplemented\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter\u0026gt; \u0026lt;TagRunTime\u0026gt;UrlGeneric\u0026lt;/TagRunTime\u0026gt; \u0026lt;ProviderTagName\u0026gt;Endpoint Supplier\u0026lt;/ProviderTagName\u0026gt; \u0026lt;Show\u0026gt;true\u0026lt;/Show\u0026gt; \u0026lt;Mandatory\u0026gt;true\u0026lt;/Mandatory\u0026gt; \u0026lt;Pattern\u0026gt;^(?:(http(s)?|ftp|file):\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$\u0026amp;amp;'\\(\\)\\*\\+,;=.]+$\u0026lt;/Pattern\u0026gt; \u0026lt;DescriptionPattern\u0026gt;Please, this field expects the value of a url.\u0026lt;/DescriptionPattern\u0026gt; \u0026lt;Description\u0026gt;Endpoint Supplier Restel\u0026lt;/Description\u0026gt; \u0026lt;Type\u0026gt;uri\u0026lt;/Type\u0026gt; \u0026lt;DefaultValue\u0026gt;http://xml.hotelresb2b.com/xml/listen_xml.jsp\u0026lt;/DefaultValue\u0026gt; \u0026lt;/Parameter\u0026gt; \u0026lt;Parameter\u0026gt; \u0026lt;TagRunTime\u0026gt;Parameter\u0026lt;/TagRunTime\u0026gt; \u0026lt;ProviderTagName\u0026gt;codigousu\u0026lt;/ProviderTagName\u0026gt; \u0026lt;Show\u0026gt;true\u0026lt;/Show\u0026gt; \u0026lt;Mandatory\u0026gt;true\u0026lt;/Mandatory\u0026gt; \u0026lt;Description\u0026gt;User code, credentials\u0026lt;/Description\u0026gt; \u0026lt;Type\u0026gt;string\u0026lt;/Type\u0026gt; \u0026lt;Key\u0026gt;Usuario\u0026lt;/Key\u0026gt; \u0026lt;ExampleValue\u0026gt;TravelgateTest\u0026lt;/ExampleValue\u0026gt; \u0026lt;/Parameter\u0026gt; \u0026lt;Parameter\u0026gt; \u0026lt;TagRunTime\u0026gt;Parameter\u0026lt;/TagRunTime\u0026gt; \u0026lt;ProviderTagName\u0026gt;clausu\u0026lt;/ProviderTagName\u0026gt; \u0026lt;Show\u0026gt;true\u0026lt;/Show\u0026gt; \u0026lt;Mandatory\u0026gt;true\u0026lt;/Mandatory\u0026gt; \u0026lt;Description\u0026gt;User Password, credentials\u0026lt;/Description\u0026gt; \u0026lt;Type\u0026gt;string\u0026lt;/Type\u0026gt; \u0026lt;Key\u0026gt;Password\u0026lt;/Key\u0026gt; \u0026lt;ExampleValue\u0026gt;travelgate123\u0026lt;/ExampleValue\u0026gt; \u0026lt;/Parameter\u0026gt; \u0026lt;Parameter\u0026gt; \u0026lt;TagRunTime\u0026gt;Parameter\u0026lt;/TagRunTime\u0026gt; \u0026lt;ProviderTagName\u0026gt;afiliacio\u0026lt;/ProviderTagName\u0026gt; \u0026lt;Show\u0026gt;true\u0026lt;/Show\u0026gt; \u0026lt;Mandatory\u0026gt;true\u0026lt;/Mandatory\u0026gt; \u0026lt;Pattern\u0026gt;[A-Z]{2}\u0026lt;/Pattern\u0026gt; \u0026lt;DescriptionPattern\u0026gt;Please, this field expects a 2 digit uppercase character value.\u0026lt;/DescriptionPattern\u0026gt; \u0026lt;Description\u0026gt;Affiliation of the user, affiliation of the XML account created. Two digit code, exactly as it is supplied by HOTUSA.This code refers to which brand it belongs to\u0026lt;/Description\u0026gt; \u0026lt;Type\u0026gt;string\u0026lt;/Type\u0026gt; \u0026lt;Key\u0026gt;Afiliacion\u0026lt;/Key\u0026gt; \u0026lt;ExampleValue\u0026gt;TS\u0026lt;/ExampleValue\u0026gt; \u0026lt;/Parameter\u0026gt; \u0026lt;Parameter\u0026gt; \u0026lt;TagRunTime\u0026gt;Parameter\u0026lt;/TagRunTime\u0026gt; \u0026lt;ProviderTagName\u0026gt;codusu\u0026lt;/ProviderTagName\u0026gt; \u0026lt;Show\u0026gt;true\u0026lt;/Show\u0026gt; \u0026lt;Mandatory\u0026gt;true\u0026lt;/Mandatory\u0026gt; \u0026lt;Pattern\u0026gt;[A-Z,0-9]{6}\u0026lt;/Pattern\u0026gt; \u0026lt;DescriptionPattern\u0026gt;Please, this field expects a value of 6 digits, uppercase or numeric characters.\u0026lt;/DescriptionPattern\u0026gt; \u0026lt;Description\u0026gt;User code\u0026lt;/Description\u0026gt; \u0026lt;Type\u0026gt;string\u0026lt;/Type\u0026gt; \u0026lt;Key\u0026gt;CodigoUsuario\u0026lt;/Key\u0026gt; \u0026lt;ExampleValue\u0026gt;D65934\u0026lt;/ExampleValue\u0026gt; \u0026lt;/Parameter\u0026gt; \u0026lt;Parameter\u0026gt; \u0026lt;TagRunTime\u0026gt;Parameter\u0026lt;/TagRunTime\u0026gt; \u0026lt;ProviderTagName\u0026gt;secacc\u0026lt;/ProviderTagName\u0026gt; \u0026lt;Show\u0026gt;true\u0026lt;/Show\u0026gt; \u0026lt;Mandatory\u0026gt;true\u0026lt;/Mandatory\u0026gt; \u0026lt;Pattern\u0026gt;[0-9]{5,6}\u0026lt;/Pattern\u0026gt; \u0026lt;DescriptionPattern\u0026gt;Please, this field expects a value of 5 or 6 numeric digits.\u0026lt;/DescriptionPattern\u0026gt; \u0026lt;Description\u0026gt;Access code, access sequence\u0026lt;/Description\u0026gt; \u0026lt;Type\u0026gt;string\u0026lt;/Type\u0026gt; \u0026lt;Key\u0026gt;SecAcc\u0026lt;/Key\u0026gt; \u0026lt;ExampleValue\u0026gt;245698\u0026lt;/ExampleValue\u0026gt; \u0026lt;/Parameter\u0026gt; \u0026lt;Parameter\u0026gt; \u0026lt;TagRunTime\u0026gt;Parameter\u0026lt;/TagRunTime\u0026gt; \u0026lt;Show\u0026gt;true\u0026lt;/Show\u0026gt; \u0026lt;Mandatory\u0026gt;false\u0026lt;/Mandatory\u0026gt; \u0026lt;Pattern\u0026gt;true|false\u0026lt;/Pattern\u0026gt; \u0026lt;DescriptionPattern\u0026gt;Please, this field expects a boolean value, 'true' or 'false'\u0026lt;/DescriptionPattern\u0026gt; \u0026lt;Description\u0026gt;If the value is true, we show only the non-refundable options.\u0026lt;/Description\u0026gt; \u0026lt;Type\u0026gt;boolean\u0026lt;/Type\u0026gt; \u0026lt;Key\u0026gt;ShowRateNonRefundable\u0026lt;/Key\u0026gt; \u0026lt;DefaultValue\u0026gt;false\u0026lt;/DefaultValue\u0026gt; \u0026lt;PossibleValues\u0026gt; \u0026lt;PossibleValue\u0026gt;true\u0026lt;/PossibleValue\u0026gt; \u0026lt;PossibleValue\u0026gt;false\u0026lt;/PossibleValue\u0026gt; \u0026lt;/PossibleValues\u0026gt; \u0026lt;/Parameter\u0026gt; \u0026lt;Parameter\u0026gt; \u0026lt;TagRunTime\u0026gt;Parameter\u0026lt;/TagRunTime\u0026gt; \u0026lt;ProviderTagName\u0026gt;duplicidad\u0026lt;/ProviderTagName\u0026gt; \u0026lt;Show\u0026gt;false\u0026lt;/Show\u0026gt; \u0026lt;Mandatory\u0026gt;false\u0026lt;/Mandatory\u0026gt; \u0026lt;Description\u0026gt;Duplicity will serve to filter duplicates, that is, on some occasions,a hotel can offer us different offers, if we want them to appear all of them in the list, just do not include this tag or leave it to zero, if you want the list to appear of better offers, label in value 1 (thebest offer criterion is based on this order: better availability / better price of the. first room / regime find).\u0026lt;/Description\u0026gt; \u0026lt;Type\u0026gt;numeric\u0026lt;/Type\u0026gt; \u0026lt;Key\u0026gt;duplicity\u0026lt;/Key\u0026gt; \u0026lt;DefaultValue\u0026gt;0\u0026lt;/DefaultValue\u0026gt; \u0026lt;PossibleValues\u0026gt; \u0026lt;PossibleValue\u0026gt;0\u0026lt;/PossibleValue\u0026gt; \u0026lt;PossibleValue\u0026gt;1\u0026lt;/PossibleValue\u0026gt; \u0026lt;/PossibleValues\u0026gt; \u0026lt;/Parameter\u0026gt; \u0026lt;Parameter\u0026gt; \u0026lt;TagRunTime\u0026gt;Parameter\u0026lt;/TagRunTime\u0026gt; \u0026lt;Show\u0026gt;false\u0026lt;/Show\u0026gt; \u0026lt;Mandatory\u0026gt;true\u0026lt;/Mandatory\u0026gt; \u0026lt;Pattern\u0026gt;^(?:(http(s)?|ftp|file):\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$\u0026amp;amp;'\\(\\)\\*\\+,;=.]+$\u0026lt;/Pattern\u0026gt; \u0026lt;DescriptionPattern\u0026gt;Please, this field expects the value of a url.\u0026lt;/DescriptionPattern\u0026gt; \u0026lt;Description\u0026gt;Url Room List\u0026lt;/Description\u0026gt; \u0026lt;Type\u0026gt;uri\u0026lt;/Type\u0026gt; \u0026lt;Key\u0026gt;urlListRooms\u0026lt;/Key\u0026gt; \u0026lt;DefaultValue\u0026gt;http://xtghubstatic.blob.core.windows.net/int-static-hotel/HOT-RoomTypes.csv\u0026lt;/DefaultValue\u0026gt; \u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/ConfigurationRS\u0026gt;  \nThis is the example of how the form is displayed with the previous xml response.\nConfiguracionRS Description    Element Number Type Description     ConfigurationRS 1  Root node.   Parameters / 1     Parameters /Parameter 1..n     Parameters /Parameter/TagRunTime 1 Enum This is the tag of the configuration node in the requests that you want to contextualize in the activation form. Possible values: User, Password, UrlAvail, UrlReservation, UrlValuation, UrlGeneric, Parameter. See Configuration   Parameters /Parameter/ProviderTagName 1 String Name of the parameter in the activation form, as you use our PULL Seller API, it is recomendable to put similar names used on it in a human readbility format. For example: Availability Url, Valuation Url \u0026hellip; If it is an extra parameter, you should put a name similar to the key used, and preferly with a human readbility format too.   Parameters /Parameter/Show 1 Boolean Indicates if you want to show the parameter in the connection form or not. May be you want that some parameter to be filled internally and you do not want the Buyer fill it in.   Parameters /Parameter/Mandatory 1 Boolean Indicates if the parameter is compulsory or not in order to make a connection without any problem.   Parameters /Parameter/Type 1 Enum The parameter value data type. Posible types are: eString, eBoolean, eUri.   Parameters /Parameter/Pattern 0..1 String Regular expression to validate the parameter value. If the parameter type is eBoolean or eUri the pattern is mandatory, and has a specific regular expresion. You can find more information about patterns here. If the type is eString or you add the tag PossibleValues the pattern is not mandatory.   Parameters /Parameter/DescriptionPattern 0..1 String This is the error that the Buyer see if the parameter value do not validate the pattern. Please, fill this node if you want to expedite your connections and avoid future issues.   Parameters /Parameter/Description 0..1 String Value of the tooltip that explains the parameter. Avoid use an only word, avoid use the same value than ProviderTagName, and if it is an aditional parameter, avoid use the same value than Key. Please, fill this information to help the Buyer to connect you.   Parameters /Parameter/Key 0..1 String Value of the key attribute as you accept in the xml requests in Configuration node.   Parameters /Parameter/DefaultValue 0..1 String Value by the default, if the Buyer do not change it, all connections to you are set up with this value.   Parameters /Parameter/ExampleValue 0..1 String Value of the placeholder for this parameter in the form. If the Buyer do not fill the parameter, the value is empty   Parameters /Parameter/PossibleValues 0..1     Parameters /Parameter/PossibleValues/PossibleValue 1..n String If you return a list of possible parameter values, in the connection form the Buyer only can choose one of this values.    \nPatterns All the patterns must work with Golang and ECMAScript(javaScript). You can validate your regular expressions by this two laguanges at regex101.\nThe pattern for eUri type is: ^(?:(http(s)?|ftp|file):\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$\u0026amp;\u0026rsquo;\\(\\)\\*\\+,;=.]+$\nThe pattern for eBoolean type is:true|false\nHere you have an example of the regex for an email: ^(\\D)+(\\w)*((\\.(\\w)+)?)+@(\\D)+(\\w)*((\\.(\\D)+(\\w)*)+)?(\\.)[a-z]{2,}$\n"
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "Configurate general rules and filters by different conditions",
	"content": "Of the different distribution rules, some of them can be applied exclusively at the organization level, some can only be applied to agencies, and several can be applied to both organizations and agencies.\nThe rules are grouped according to which areas they affect:\n Pricing: modify the final price of the rates. Filters: remove rates that do not fulfill the specified conditions. Modifiers: change rate values. Currencies: related to currencies. Others: those that do not belong to any previous group.    Pricing Configuration rules related to pricing\n     Filters Configuration filters by different market conditions\n     Modifiers Configuration modifiers\n     Currencies Currencies modifiers\n     Others Other business rules you can manage\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/how-to-guides/configuration/",
	"title": "Configuration Element",
	"tags": [],
	"description": "",
	"content": " A Configuration element with the credentials, endpoints and extra needed parameters by the supplier will be received in the request from the buyer and will be sent to the supplier. In this configuration TravelgateX will receive the endpoints needed to send the request to the supplier (you can see the correlation between methods and enpoints used in the connectivity page).\n\u0026lt;Configuration\u0026gt; \u0026lt;UrlGeneric\u0026gt;\u0026lt;/UrlGeneric\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;\u0026quot; value = \u0026quot;\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt;  Configuration Description    Element Number Type Description     Configuration 1  The info required to access the supplier\u0026rsquo;s system.   Configuration/UrlGeneric 1 String Supplier URL used for multiple methods.   Configuration/Parameters 0..1  Parameters for additional information.   Configuration/Parameters/Parameter 0..n  List of parameters.   @key 1 String Contains the keyword/Id to identify a parameter.   @value 1 String Contains the parameter values    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/configurationinput/",
	"title": "ConfigurationInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ConfigurationInput {  username: String    password: String    urls: UrlsInput!    parameters: [ParameterInput!]    markets: [String!]    rateRules: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields username(String):   password(String):   urls(UrlsInput!):   parameters([ParameterInput!]):   markets([String!]):   rateRules([RateRulesType!]):    Required by HotelXAccessInput:     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/howtos/guides/howto-connect-supplier/",
	"title": "Connect a New Supplier",
	"tags": [],
	"description": "How to connect to a new Supplier",
	"content": "In order to connect to a new Supplier please follow the steps below:\n Login to our Connect Form Select the supplier you want to connect to and enter the connectivity credentials. A Jira ticket will be raised and you will receive a confirmation email. Our Activations Department will contact you when the process is ready.  In order to activate a new Supplier a few processes need to be executed - this process depends on each Supplier and it could take up to 24 hours.\n "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/connectionconnection/",
	"title": "ConnectionConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ConnectionConnection {  edges: [ConnectionEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ConnectionEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):    Required by StatsQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/connectionconnection/",
	"title": "ConnectionConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ConnectionConnection {  edges: [ConnectionEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ConnectionEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):    Required by StatsQuery:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/connectionedge/",
	"title": "ConnectionEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ConnectionEdge {  node: Connection    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Connection):   cursor(String!):    Required by ConnectionConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/connectionedge/",
	"title": "ConnectionEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ConnectionEdge {  node: Connection    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Connection):   cursor(String!):    Required by ConnectionConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/contact/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Contact {  email: String    telephone: String    fax: String    web: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields email(String):   telephone(String):   fax(String):   web(URI):    Required by HotelData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/coordinates/",
	"title": "Coordinates",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Coordinates {  latitude: Float!    longitude: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields latitude(Float!):   longitude(Float!):    Required by Location:    GeonameData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Country   Required by OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Country   Required by OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Country   Required by OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Country   Required by OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Country   Required by OrganizationData:    HotelCriteriaSearchInput:    HotelXDefaultSettingsData:    Location:    GeonameData:    CriteriaSearch:    CreateOrganizationInput:    UpdateGroupInput:    HotelXDefaultSettingsDataInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/createclientinput/",
	"title": "CreateClientInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateClientInput {  name: String!    isActive: Boolean!    group: String!    owner: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   isActive(Boolean!):   group(String!):   owner(ID):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/creategroupinput/",
	"title": "CreateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateGroupInput {  group: ID!    type: GroupTypeInput!    info: String    parent: ID!    template: Template   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields group(ID!):   type(GroupTypeInput!):   info(String):   parent(ID!):   template(Template):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/creatememberinput/",
	"title": "CreateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateMemberInput {  member: ID    info: String    type: MemberType!    group: ID!    role: ID!    resources: [ID!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields member(ID):   info(String):   type(MemberType!):   group(ID!):   role(ID!):   resources([ID!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/createorganizationinput/",
	"title": "CreateOrganizationInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateOrganizationInput {  user: ID!    info: String    organization: ID    template: OrganizationTemplate!    label: String    country: Country   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields user(ID!):   info(String):   organization(ID):   template(OrganizationTemplate!):   label(String):   country(Country):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/createprofileinput/",
	"title": "CreateProfileInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateProfileInput {  label: String!    group: String!    type: [ProfileType!]!    entities: EntitiesInput    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields label(String!):   group(String!):   type([ProfileType!]!):   entities(EntitiesInput):   isActive(Boolean):   isPublished(Boolean):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/createsysteminput/",
	"title": "CreateSystemInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateSystemInput {  name: ID!    isActive: Boolean    group: ID!    owner: ID    suppliers: [ID]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(ID!):   isActive(Boolean):   group(ID!):   owner(ID):   suppliers([ID]):    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/gettingstarted/credentials/",
	"title": "Credentials",
	"tags": [],
	"description": "",
	"content": " Credentials  "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/criteriabookingdatesinput/",
	"title": "CriteriaBookingDatesInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CriteriaBookingDatesInput {  dateType: DateType!    start: Date!    end: Date!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields dateType(DateType!):   start(Date!):   end(Date!):    Required by HotelCriteriaBookingInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/criteriabookingreferencesinput/",
	"title": "CriteriaBookingReferencesInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CriteriaBookingReferencesInput {  hotelCode: String!    currency: Currency!    references: [BookReferenceInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotelCode(String!):   currency(Currency!):   references([BookReferenceInput!]!):    Required by HotelCriteriaBookingInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/criteriasearch/",
	"title": "CriteriaSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CriteriaSearch {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomCriteria!]!    language: Language    currency: Currency    nationality: Country    market: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields checkIn(Date!):   checkOut(Date!):   hotels([String!]!):   occupancies([RoomCriteria!]!):   language(Language):   currency(Currency):   nationality(Country):   market(String!):    Required by HotelSearch:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/currency/",
	"title": "Currency",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Currency   Required by HotelCriteriaSearchInput:    HotelXDefaultSettingsData:    HotelXCommonSettingsData:    PriceStatic:    SettingsBaseInput:    CriteriaSearch:    Price:    Exchange:    Markup:    Priceable:    CancelPenalty:    CriteriaBookingReferencesInput:    HotelXDefaultSettingsDataInput:    HotelXCommonSettingsDataInput:     "
},
{
	"uri": "https://travelgatex.com/integrations/flights/de2/",
	"title": "DE - Condor",
	"tags": [],
	"description": "Condor integration",
	"content": "   DE - Condor Changelog     "
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/datasets-formats/",
	"title": "Datasets formats",
	"tags": [],
	"description": "Learn about what datasets types can you use",
	"content": " As a customer, you can access Insights data via BigQuery Dataset or as Exported Table Data to Cloud Storage\nBigQuery BigQuery is a ‚Äúbig data‚Äù SQL store invented by Google. Many massive datasets, like all the code in GitHub and the complete history of the Bitcoin blockchain, are made available to the public through the Google BigQuery Datasets initiative.\nBigQuery Datasets are multi-terabyte datasets hosted on Google‚Äôs servers. You interact with the dataset by writing SQL fetch queries within either the web UI, Command-line tool or any client library.\nSome resources on BigQuery:\n BigQuery overview  To get started using a BigQuery Dataset, Insights will allow permission to your own project so you can start querying datasets. If you intend to go beyond the included quotas, you must also enable billing.\nExported Data Up to 1 GB of table data can be exported into a single file in different formats:\nCSV The simplest file type available on Insights is the ‚ÄúComma-Separated List‚Äù, or CSV, for tabular data. A CSV representation of a booking list with a header row, for example, looks like this:\n   client_id provider_id check_in     clientA providerX 2019-01-13 00:00:00 UTC   clientB providerX 2019-01-15 00:00:00 UTC    CSV format does not support nested and repeated data.\nJSON While CSV is the most common file format for ‚Äúflat‚Äù data, JSON is the most common file format for ‚Äútree-like‚Äù data that potentially has multiple layers, like the branches on a tree:\n{ \u0026quot;bookings\u0026quot;: [ { \u0026quot;client_id\u0026quot;: \u0026quot;clientA\u0026quot;, \u0026quot;provider_id\u0026quot;: \u0026quot;providerX\u0026quot;, \u0026quot;check_in\u0026quot;: \u0026quot;2019-01-13 00:00:00 UTC\u0026quot; }, { \u0026quot;client_id\u0026quot;: \u0026quot;clientB\u0026quot;, \u0026quot;provider_id\u0026quot;: \u0026quot;providerX\u0026quot;, \u0026quot;check_in\u0026quot;: \u0026quot;2019-01-15 00:00:00 UTC\u0026quot; } ] }  When exported data is in JSON format, INT64 (integer) data types are encoded as JSON strings to preserve 64-bit precision when the data is read by other systems.\nAVRO Avro‚Ñ¢ is an open source project that provides data serialization and data exchange services for Apache‚Ñ¢ Hadoop¬Æ. \u0026hellip; Avro stores the data definition in JSON format making it easy to read and interpret, the data itself is stored in binary format making it compact and efficient.\n"
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/date/",
	"title": "Date",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Date   Required by PaymentXStoredCardData:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/date/",
	"title": "Date",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Date   Required by HotelCriteriaSearchInput:    ReviewedBool:    ReviewedInt:    ReviewedPaymentType:    ReviewedHotelOptionType:    ReviewedText:    ReviwedPaxTypeRangeInRoomCandidates:    ReviewedRateRule:    ReviewedAgeRanges:    ReviewedAllowsBookPreferences:    CriteriaSearch:    Supplement:    RatePlan:    Promotion:    PriceBreakdown:    CriteriaBookingDatesInput:    BookingHotel:    PaymentCardData:    PaymentXStoredCardData:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22T13:57:31.123Z\u0026rdquo;.\nGraphQL schema definition scalar DateTime   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)  Stats:  The service used to access the stats of every connection that uses the HUB  StatsData:    Node:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  Client:  Client identifies who is making the request and holds the configuration assigned to it.  Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  Domain:    Role:  Permissions determine what operations are allowed on a resource  Resource:  Resources are those used in APIs and Products.  API:    Operation:    Product:  An APIs collection.  Group:  Groups are organized hierarchically.  ManagedGroup:    StatsAsset:  Asset of an specific error   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DateTime   Required by StatsFilterInput:    AbsoluteInput:    Stats:    StatsData:    Node:    Access:    Client:    Supplier:    Organization:    System:    Group:    Member:    MacroPermission:    Role:    Resource:    API:    Operation:    ManagedGroup:    Profile:    Entity:    Domain:    Product:    StatsAsset:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DateTime   Required by AlertFilterInput:    Alert:   Alert node  Node:    Member:    Group:    API:    Resource:    Operation:    ManagedGroup:    Role:    Access:    Supplier:    Organization:    System:    Domain:    Product:    Client:    Profile:    Entity:    MacroPermission:    Event:  Event triggered   "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DateTime   "
},
{
	"uri": "https://travelgatex.com/mappea/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DateTime   Required by Supplier:    Node:    Organization:    System:    Access:    Client:    Group:    Member:    MacroPermission:    Role:    Resource:    API:    Operation:    ManagedGroup:    Profile:    Entity:    Domain:    Product:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DateTime   Required by PaymentXStoredCardFilterInput:    PaymentXStoredCard:    Node:    Group:    PointOfSale:    Member:    MacroPermission:    Role:    Resource:    API:    Operation:    ManagedGroup:    Access:    Supplier:    Organization:    System:    Domain:    Product:    Client:    Profile:    Entity:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DateTime   Required by Access:    Node:    Supplier:    Organization:    System:    Group:    Member:    MacroPermission:    Role:    Resource:    API:    ManagedGroup:    Domain:    Client:    PointOfSale:    Profile:    Entity:    Product:    Operation:    HotelXHotelFilterInput:    HotelRuntimeConfiguration:    Board:    Category:    Hotel:    GiataData:    Media:    Airport:    Geoname:    HotelXAmenity:    RoomStatic:    Destination:    Metadata:    AuditData:    Stat:    Transactions:    CancelPenalty:    PaymentCard:    PaymentXStoredCardFilterInput:    PaymentXStoredCard:    StatsFilterInput:    AbsoluteInput:    Stats:    StatsData:    StatsAsset:    AlertFilterInput:    Alert:   Alert node  Event:  Event triggered  LoggingLegacyFilterInput:  Filters needed to do a search. From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss),   LoggingLegacy:  The service used to access the stats of every connection that uses the HUB  LoggingLegacyData:    HotelXUpdateStatus:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/datetype/",
	"title": "DateType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum DateType{   ARRIVAL,    BOOKING,   }   Required by CriteriaBookingDatesInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/deletegroupinput/",
	"title": "DeleteGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DeleteGroupInput {  group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields group(ID!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/deletememberinput/",
	"title": "DeleteMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DeleteMemberInput {  member: ID!    group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields member(ID!):   group(ID!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/deleteprofileinput/",
	"title": "DeleteProfileInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DeleteProfileInput {  code: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/deltapriceinput/",
	"title": "DeltaPriceInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DeltaPriceInput {  amount: Float    percent: Float    applyBoth: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields amount(Float):   percent(Float):   applyBoth(Boolean!):    Required by HotelBookInput:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/departure/",
	"title": "Departure",
	"tags": [],
	"description": "",
	"content": " IATA defined code identifying a city or station.\nGraphQL schema definition scalar Departure   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/description/",
	"title": "Description",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Description {  type: DescriptionType!    texts: [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(DescriptionType!):   texts([Text!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/descriptiontype/",
	"title": "DescriptionType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum DescriptionType{   ADDITIONAL,    AMENITY,    ACTIVITY,    RESTAURANT,    ROOM,    GENERAL,    POOL,    LOCATION,    HOW_TO_GET,   }   Required by Description:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/destination/",
	"title": "Destination",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Destination {  code: ID!    destinationData: DestinationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   error: : [AdviseMessage!] // Deprecated from 2019-07-03     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   destinationData(DestinationData):   error([AdviseMessage!]):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by DestinationEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/destinationconnection/",
	"title": "DestinationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DestinationConnection {  edges: [DestinationEdge]    token: String!    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([DestinationEdge]):   token(String!):   pageInfo(PageInfo!):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/destinationdata/",
	"title": "DestinationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DestinationData {  code: ID!    available: Boolean!    destinationLeaf: [String!]    texts( languages: [Language!], ): [Text!]!    closestDestinations: [String!]    parent: String    type: DestinationType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   available(Boolean!):   destinationLeaf([String!]):   texts([Text!]!):   closestDestinations([String!]):   parent(String):   type(DestinationType):    Required by Location:    Destination:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/destinationedge/",
	"title": "DestinationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DestinationEdge {  node: Destination    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Destination):   cursor(String!):    Required by DestinationConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/destinationtype/",
	"title": "DestinationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum DestinationType{   ZONE,    CITY,    COUNTRY,   }   Required by DestinationData:     "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/faq/discount-supplement/",
	"title": "Discount/Supplement using derived rates",
	"tags": [],
	"description": "Know how the create and configurate different discounts or supplements",
	"content": " In order to create discounts or supplements as early bird offers, non refundable discounts or gala extra you can use what we call derived rates. These are rates that descend from non-derived rates and they may or may not modify some of the values of the base rate, such as cancellation policies or markets\nWe are going to explain the process to add a derived rate using an example of creating an Early Bird discount:\nStep 1: Derived Rate SetUp First, it is necessary to create the Derived Rate in the SetUp section. Once there, select the hotel and click the Add Derived Rate button for the same rate for which you want to create a derived rate:\n\nA pop up window will appear for you to fill in the derived rate information:\n\n Code: Derived rate code. Must be unique per hotel. (it cannot coincide with any other rate or derived rate code in the same hotel). Name: Derived rate name. Cancel policies from base rate: Checkbox that will apply the cancel policies from the base rate to the derived rate depending on whether it is checked or not. If it is not checked, a form appears like the one seen previously when adding a rate, letting you add the cancel policies you may want for this derived rate. Markets from base rate: Checkbox that will apply the markets from the base rate to the derived rate depending on whether it is checked or not. If it is not checked, a form appears like the one seen previously when adding a rate, letting you select any markets you may want included or excluded for this derived rate. Apply Rate Rule from base rate: Checkbox that will apply the rate rule conditions from the base rate depending on whether it is checked or not. Rate Rule: Rate rule to select if you do not want apply the same than the base rate. Active: Checkbox to activate or deactivate the derived rate. If it is checked the derived rate is active. Apply Dates from base rate: Checkbox used to apply the effective dates from the base rate. If it is not checked appears a form like the one explained previously when creating a rate. Board from base rate: Checkbox used to apply the meal plan from the base rate. If it\u0026rsquo;s not checked, the meal plan list will be enabled and you will be able to select the board of the derived rate. Apply to all rooms: Checkbox that will indicate whether the derived rate applies to all the rooms existing (or that will be added in the future) to the base rate. In case it is not selected, a list of rooms will appear, allowing you to select which rooms will be affected by the derived rate. It is mandatory to select at least one room in order to be able to save the derived rate. Bear in mind that if the derived rate only applies to a set of rooms, when a new room is added to the base rate, it will not have the derived rate‚Äôs conditions applied to it. To apply the conditions of the derived rate to said room, you will have to edit the derived rate. Apply Payments from Base Rate: Checkbox that indicates if the ‚ÄúPayment Type‚Äù and ‚ÄúCard Type\u0026rdquo; are the same as the base rate. If so, it has to be selected. If not, you will be able to select this information from drop down menus, so that the derived rate can have its own payment types. Inform Base Rate: Checkbox that indicates that the retrieve functions would return the name of the Base Rate instead of the derived rate‚Äôs name, if checked. Apply MealPlan Supplement from Base Rate: Checkbox that allows the derived rate to have its own MealPlan Supplements. If checked, the derived rate would get the MealPlans of the base rate if any. Apply Specific Clients from Base Rate: Checkbox that allows the derived rate to have its own Specific Clients. If checked, the derived rate would get the Specific Clients of the base rate if any.  In our example we have created a derived rate specifying its code and name as a discount and we‚Äôve indicated that we only want this discount to be applied to our ‚ÄòDouble room‚Äô. All other conditions will remain the same as its base rate.\nStep 2: Derived Rate Price and Availability Load Next step will be to add the discount or supplement and the availability conditions for your derived rate in the ‚ÄòManual Load‚Äô section:\n\nSelect your Derived Rated and load the date range that this discount/supplement will be applied and the sort of adjustment type (Type adjust amount) to apply with its value (Adjust Amount). The adjust type is either percentage or amount.\nThe four possible combinations will be :\n1.Percent supplement * Type adjust: Percent * Percent Adjust Amount: Integer positive value.\nThis means that a supplement has been applied equal to the amount calculated, based on the percentage introduced, over the final price.\n2.Percent discount * Type adjust Amount: Percent * Adjust Amount: Integer negative value\nThis means that a discount has been applied equal to the amount calculated, based on the percentage introduced, over the final amount.\n3.Amount supplement * Type adjust Amount: Amount * Adjust Amount: Integer positive value\nThis means that a supplement has been applied equal to the amount introduced to the final amount.\n3. Amount discount * Type adjust Amount: Amount * Adjust Amount: Integer negative value\nThis means that a discount has been applied equal to the amount introduced to the final amount.\nIf you want the derived rate to have a discount or offer applied to it, you will have to introduce a negative value. To do so you must introduce a minus before the value. In this example, we have loaded availability and conditions for our ‚ÄòEarly Bird Discount 10%‚Äô. The discount will be available all February, applying a 10% discount and only if the release is 60 days before the check in day.\nOnce you have created your discount/supplement you will be able to check this information in the Calendar section as follows:\n\n "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/domain/",
	"title": "Domain",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Domain {  code: ID!    domainData: DomainData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   domainData(DomainData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/domaindata/",
	"title": "DomainData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DomainData {  id: ID!    name: DomainName!    organization: Organization!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   name(DomainName!):   organization(Organization!):    Required by Domain:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " Scalar for type Domain\nGraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/domainname/",
	"title": "DomainName",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar DomainName   Required by DomainData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/duration/",
	"title": "Duration",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Duration   Required by RelativeInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/duration/",
	"title": "Duration",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Duration   Required by RelativeInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/durationtype/",
	"title": "DurationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum DurationType{   RANGE,    OPEN,   }   Required by Supplement:     "
},
{
	"uri": "https://travelgatex.com/integrations/flights/eft/",
	"title": "EFT - Esferatur",
	"tags": [],
	"description": "Esferatur integration",
	"content": "   EFT - Esferatur Changelog     "
},
{
	"uri": "https://travelgatex.com/integrations/flights/ei/",
	"title": "EI - Aer Lingus",
	"tags": [],
	"description": "Aer Lingus integration",
	"content": "   EI - Aer Lingus Changelog     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/email/",
	"title": "Email",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Email   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/email/",
	"title": "Email",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Email   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/emailinput/",
	"title": "EmailInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EmailInput {  address: ID!    type: EmailType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields address(ID!):   type(EmailType!):    Required by AlertUpdateConfigurationInputNoTraffic:  Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertUpdateConfigurationInputErrorRate:  Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.  AlertUpdateConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertUpdateConfigurationInputPeakTraffic:  Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertUpdateConfigurationInputPrice:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/emailinput/",
	"title": "EmailInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EmailInput {  address: ID!    type: EmailType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields address(ID!):   type(EmailType!):    Required by AlertUpdateConfigurationInputNoTraffic:  Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertUpdateConfigurationInputErrorRate:  Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.  AlertUpdateConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertUpdateConfigurationInputPeakTraffic:  Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertUpdateConfigurationInputPrice:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/emailtype/",
	"title": "EmailType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum EmailType{   BCC,    TO,   }   Required by EmailInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/emailtype/",
	"title": "EmailType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum EmailType{   BCC,    TO,   }   Required by EmailInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/entitiesinput/",
	"title": "EntitiesInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntitiesInput {  suppliers: [ID!]    clients: [ID!]    access: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields suppliers([ID!]):   clients([ID!]):   access([ID!]):    Required by CreateProfileInput:    UpdateEntitiesInput:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/entity/",
	"title": "Entity",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Entity {  code: ID!    entity: EntityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   entity(EntityData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by EntityEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/entity/",
	"title": "Entity",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Entity {  code: ID!    entity: EntityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   entity(EntityData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by EntityEdge:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/entity/",
	"title": "Entity",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Entity {  code: ID!    entity: EntityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   entity(EntityData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by EntityEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/entity/",
	"title": "Entity",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Entity {  code: ID!    entity: EntityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   entity(EntityData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by EntityEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/entity/",
	"title": "Entity",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Entity {  code: ID!    entity: EntityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   entity(EntityData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by EntityEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/entityconnection/",
	"title": "EntityConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityConnection {  edges: [EntityEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([EntityEdge]):   pageInfo(PageInfo!):    Required by ProfileData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/entityconnection/",
	"title": "EntityConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityConnection {  edges: [EntityEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([EntityEdge]):   pageInfo(PageInfo!):    Required by ProfileData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/entityconnection/",
	"title": "EntityConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityConnection {  edges: [EntityEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([EntityEdge]):   pageInfo(PageInfo!):    Required by ProfileData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/entityconnection/",
	"title": "EntityConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityConnection {  edges: [EntityEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([EntityEdge]):   pageInfo(PageInfo!):    Required by ProfileData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/entityconnection/",
	"title": "EntityConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityConnection {  edges: [EntityEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([EntityEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:    ProfileData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/entityedge/",
	"title": "EntityEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityEdge {  node: Entity    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Entity):   cursor(String!):    Required by EntityConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/entityedge/",
	"title": "EntityEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityEdge {  node: Entity    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Entity):   cursor(String!):    Required by EntityConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/entityedge/",
	"title": "EntityEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityEdge {  node: Entity    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Entity):   cursor(String!):    Required by EntityConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/entityedge/",
	"title": "EntityEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityEdge {  node: Entity    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Entity):   cursor(String!):    Required by EntityConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/entityedge/",
	"title": "EntityEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityEdge {  node: Entity    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Entity):   cursor(String!):    Required by EntityConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/entityfilter/",
	"title": "EntityFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EntityFilter {  codes: [ID!]    groups: [ID!]    isActive: Boolean    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields codes([ID!]):   groups([ID!]):   isActive(Boolean):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/environment/",
	"title": "Environment",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Environment {  code: EnvironmentName!    type: CloudEnvironment!    worker: Worker!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(EnvironmentName!):   type(CloudEnvironment!):   worker(Worker!): Return hubMachine   Required by LoggingLegacyData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/environmentname/",
	"title": "EnvironmentName",
	"tags": [],
	"description": "",
	"content": " Scalars types GraphQL schema definition scalar EnvironmentName   Required by Environment:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " Application errors\nGraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!): Error code  type(String!): Error type  description(String!): Error description   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   type(String!):   description(String!):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   type(String!):   description(String!):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   type(String!):   description(String!):    Required by GetUploadedFilesResponse:    GetMappeaStatsResponse:    OnlyStatusResponse:    UploadFileResponse:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   type(String!):   description(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Error {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   type(String!):   description(String!):    Required by GetUploadedFilesResponse:    GetMappeaStatsResponse:    OnlyStatusResponse:    UploadFileResponse:     "
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/api-methods/code-list/error-codes/",
	"title": "Error Codes",
	"tags": [],
	"description": "List and description of error codes",
	"content": " Error list The following errors will be returned as Http Status Errors:\n   Code Description Explanation     400 Bad Request There is a problem on the request data.   401 Unauthorized There is an access problem.   500 Internal Server Error Internal undefined error.    In other cases we can receive a 200 Http Status (ok) and an error node on the body\u0026rsquo;s response:\n   Code Explanation     010 Exception/Unexpected Error.   020 Error validating the RQ.   030 No results.   040 Incorrect AccessToken.    Note that we can receive a Http Status Error and an error node on the body\u0026rsquo;s response to identificate the concrete problem. "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/codelist/setup-product-load-errors/",
	"title": "Error Codes Set-up and Product load",
	"tags": [],
	"description": "List of Error Codes in Set-up and Product load",
	"content": "List of the possible errors you could receive setting up and loading the product (in HotelRatePlanInventoryNotif, HotelRatePlanInventoryRetrieve, HotelAvailNotif, HotelAvailNotif, HotelRatePlanNotif or HotelRatePlanRetrieve.)\n   Error Code Error Description     -1 Unexpected error   1 Invalid request   10 Invalid hotel id   11 Invalid dates   12 Invalid rate plan code   13 Invalid reservation id   14 Invalid derived rate adjust values   15 Invalid id   16 Invalid amount type   17 Invalid supplement type   18 Invalid number of hotel   19 Invalid rate currency code   20 Requestor id not found   21 Provider id not found   22 Rooms not found   23 Rates not found   30 Occupation error   31 Rate error   32 Avail rq error   33 Data Base error   34 Cancel error   35 Confirmation error   36 Valuation_error   37 Authorization error   38 Authentication error   90 Connection time out    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/errorcodeinput/",
	"title": "ErrorCodeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ErrorCodeInput {  code: Int!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(Int!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/errorcodeinput/",
	"title": "ErrorCodeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ErrorCodeInput {  code: Int!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(Int!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/errorfilter/",
	"title": "ErrorFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ErrorFilter {  type: StatsInfoTypes!    code: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(StatsInfoTypes!):   code([ID!]):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/errortype/",
	"title": "ErrorType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ErrorType{   OK,    PROVIDER,    TIMEOUT,    INTEGRATION,   }   Required by ErrorTypeInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/errortype/",
	"title": "ErrorType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ErrorType{   OK,    PROVIDER,    TIMEOUT,    INTEGRATION,   }   Required by ErrorTypeInput:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/errortypeinput/",
	"title": "ErrorTypeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ErrorTypeInput {  code: ErrorType!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ErrorType!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/errortypeinput/",
	"title": "ErrorTypeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ErrorTypeInput {  code: ErrorType!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ErrorType!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/event/",
	"title": "Event",
	"tags": [],
	"description": "",
	"content": " Event triggered\nGraphQL schema definition type Event {  code: ID!    eventData: EventData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   eventData(EventData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by EventEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/event/",
	"title": "Event",
	"tags": [],
	"description": "",
	"content": " Event triggered\nGraphQL schema definition type Event {  code: ID!    eventData: EventData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   eventData(EventData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by EventEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/eventconnection/",
	"title": "EventConnection",
	"tags": [],
	"description": "",
	"content": " Events list\nGraphQL schema definition type EventConnection {  edges: [EventEdge]    pageInfo: PageInfo!    count: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([EventEdge]):   pageInfo(PageInfo!):   count(Int!):    Required by AlertData:    EventData:  Event data   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/eventconnection/",
	"title": "EventConnection",
	"tags": [],
	"description": "",
	"content": " Events list\nGraphQL schema definition type EventConnection {  edges: [EventEdge]    pageInfo: PageInfo!    count: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([EventEdge]):   pageInfo(PageInfo!):   count(Int!):    Required by AlertData:    EventData:  Event data   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/eventdata/",
	"title": "EventData",
	"tags": [],
	"description": "",
	"content": " Event data\nGraphQL schema definition type EventData {  code: ID!    groupBy: String    status: EventType!    details: String!    history( relay: RelayInput, filter: AlertFilterInput, ): EventConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupBy(String):   status(EventType!):   details(String!):   history(EventConnection!):    Required by Event:  Event triggered   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/eventdata/",
	"title": "EventData",
	"tags": [],
	"description": "",
	"content": " Event data\nGraphQL schema definition type EventData {  code: ID!    groupBy: String    status: EventType!    details: String!    history( relay: RelayInput, filter: AlertFilterInput, ): EventConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupBy(String):   status(EventType!):   details(String!):   history(EventConnection!):    Required by Event:  Event triggered   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/eventedge/",
	"title": "EventEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EventEdge {  node: Event    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Event):   cursor(String!):    Required by EventConnection:  Events list   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/eventedge/",
	"title": "EventEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type EventEdge {  node: Event    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Event):   cursor(String!):    Required by EventConnection:  Events list   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/eventtype/",
	"title": "EventType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum EventType{   OK,    ALERTING,   }   Required by EventData:  Event data   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/eventtype/",
	"title": "EventType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum EventType{   OK,    ALERTING,   }   Required by EventData:  Event data   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/exchange/",
	"title": "Exchange",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Exchange {  currency: Currency!    rate: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!):   rate(Float!):    Required by Price:    Markup:    Priceable:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/inputobjects/expiredateinput/",
	"title": "ExpireDateInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields month(Int!):   year(Int!):    Required by PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/expiredateinput/",
	"title": "ExpireDateInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExpireDateInput {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields month(Int!):   year(Int!):    Required by PaymentCardInput:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String): External Code  message(String!): External Message   Required by AdviseMessage:  List of advise messages.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String):   message(String!):    Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String):   message(String!):    Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String):   message(String!):    Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String):   message(String!):    Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/externalmessage/",
	"title": "ExternalMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ExternalMessage {  code: String    message: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String):   message(String!):    Required by AdviseMessage:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/feature/",
	"title": "Feature",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Feature {  code: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):    "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/fee/",
	"title": "Fee",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Fee {  amount: AmountType    descText: TextType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields amount(AmountType):   descText(TextType):    Required by FlightPrice:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/file/",
	"title": "File",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type File {  fileName: String!    fileId: Int!    uploadTime: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileName(String!):   fileId(Int!):   uploadTime(String!):    Required by GetUploadedFilesData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/file/",
	"title": "File",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type File {  fileName: String!    fileId: Int!    uploadTime: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileName(String!):   fileId(Int!):   uploadTime(String!):    Required by GetUploadedFilesData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/filterinput/",
	"title": "FilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type FilterInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(AccessFilterInput):   rateRules(RateRulesFilterInput):    "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/flightnumber/",
	"title": "FlightNumber",
	"tags": [],
	"description": "",
	"content": " 4 digits or less that are unique flight codes in a day.\nGraphQL schema definition scalar FlightNumber   "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightoffer/",
	"title": "FlightOffer",
	"tags": [],
	"description": "Information about a proposal to sell a specific set of products or Services under specific conditions, for a certain price.",
	"content": " GraphQL schema definition type FlightOffer {  code: ID!    flightOfferData: FlightOfferData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   flightOfferData(FlightOfferData):   createdAt(DateTime!):   updatedAt(DateTime!):   adviseMessage([AdviseMessage!]):    Required by FlightOfferEdge:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightofferconnection/",
	"title": "FlightOfferConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type FlightOfferConnection {  edges: [FlightOfferEdge]    pageinfo: PageInfo!    error: [AdviseMessage!]    totalCount: int!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([FlightOfferEdge]):   pageinfo(PageInfo!):   error([AdviseMessage!]):   totalCount(int!):   updatedAt(DateTime!):    Required by  "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightofferdata/",
	"title": "FlightOfferData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type FlightOfferData {  code: ID!    supplier: Supplier    totalPrice: AmountType    offeritems: [FlightOfferItem]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplier(Supplier):   totalPrice(AmountType):   offeritems([FlightOfferItem]):    Required by FlightOffer:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightofferedge/",
	"title": "FlightOfferEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type FlightOfferEdge {  node: FlightOffer    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(FlightOffer):   cursor(String!):    Required by FlightOfferConnection:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightofferitem/",
	"title": "FlightOfferItem",
	"tags": [],
	"description": "Information about a priced grouping of one or more services within an Offer.",
	"content": " GraphQL schema definition type FlightOfferItem {  code: ID!    OfferItemData: FlightOfferItemData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   OfferItemData(FlightOfferItemData):   createdAt(DateTime!):   updatedAt(DateTime!):   adviseMessage([AdviseMessage!]):    Required by FlightOfferData:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightofferitemdata/",
	"title": "FlightOfferItemData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type FlightOfferItemData {  code: ID!    price: FlightPrice!    service: FlightService!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   price(FlightPrice!):   service(FlightService!):    Required by FlightOfferItem:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/inputobjects/flightofferwhereinput/",
	"title": "FlightOfferWhereInput",
	"tags": [],
	"description": "FlightOfferWhereInput are the criteria we set for our query. All offers returned by Search will have those characteristics in case there are no offers that meet those requirements an error will be returned.",
	"content": " GraphQL schema definition type FlightOfferWhereInput {  AND: [FlightOfferWhereInput!]    OR: [FlightOfferWhereInput!]    NOT: [FlightOfferWhereInput!]    originDestCriteria_in: [FlightOriginDestCriteriaInput!]    age_in: [int!]    discount_in: [Discount!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([FlightOfferWhereInput!]): It has not been developed yet.  OR([FlightOfferWhereInput!]): It has not been developed yet.  NOT([FlightOfferWhereInput!]): It has not been developed yet.  originDestCriteria_in([FlightOriginDestCriteriaInput!]):   age_in([int!]): Passengers ages  discount_in([Discount!]): It has not been developed yet.   Required by FlightXQuery:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/inputobjects/flightorigindestcriteriainput/",
	"title": "FlightOriginDestCriteriaInput",
	"tags": [],
	"description": "The Origin and Destination airport/city pair wich restrict a passenger journey or a flight.",
	"content": " GraphQL schema definition type FlightOriginDestCriteriaInput {  departure: Departure!    arrival: Arrival!    departureAt: [DateTime!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields departure(Departure!):   arrival(Arrival!):   departureAt([DateTime!]): /flight-x/reference/scalars/datetime   Required by FlightOfferWhereInput:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightpax/",
	"title": "FlightPax",
	"tags": [],
	"description": "Passenger information as age and passegner type",
	"content": " GraphQL schema definition type FlightPax {  age: int!    type: IATA_PTC_CodeType    paxID: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields age(int!):   type(IATA_PTC_CodeType):   paxID(ID!):    Required by FlightServiceData:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightprice/",
	"title": "FlightPrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type FlightPrice {  baseAmount: AmountType    fee: [Fee]    surcharge: [FlightSurcharge]    taxSummary: [TaxSummaryType]    totalAmount: AmountType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields baseAmount(AmountType):   fee([Fee]):   surcharge([FlightSurcharge]):   taxSummary([TaxSummaryType]):   totalAmount(AmountType):    Required by FlightOfferItemData:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightsegment/",
	"title": "FlightSegment",
	"tags": [],
	"description": "Transportation of a passenger on a Dated Operating Segment",
	"content": " GraphQL schema definition type FlightPax {  arrival: TransportArrival!    departure: TransportDeparture!    carrier: AirlineCode    flightNumber: FlightNumber   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields arrival(TransportArrival!):   departure(TransportDeparture!):   carrier(AirlineCode):   flightNumber(FlightNumber):    Required by FlightServiceData:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightservice/",
	"title": "FlightService",
	"tags": [],
	"description": "The instance of a specific flight or Service Definition as it has been offered (and eventually ordered and consumed) in the context of a specific Offer and/or Order.",
	"content": " GraphQL schema definition type FlightService {  code: ID!    flightServiceData: FlightServiceData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   flightServiceData(FlightServiceData):   createdAt(DateTime!):   updatedAt(DateTime!):   adviseMessage([AdviseMessage!]):    Required by FlightOfferItemData:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightservicedata/",
	"title": "FlightServiceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type FlightServiceData {  code: ID!    type: ID!    description: String!    pax: [FlightPax]!    segments( where: FlightSegmentWhereInput, orderBy: FlightSegmentOrderByInput, ): [FlightSegment!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(ID!):   description(String!):   pax([FlightPax]!):   segments([FlightSegment!]!):    Required by FlightServiceData:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/inputobjects/flightsettingsinput/",
	"title": "FlightSettingsInput",
	"tags": [],
	"description": "Configuration of the request.",
	"content": " GraphQL schema definition type FlightSettingsInput {  supplierCode_in: [FlightSupplierInput!]    groupCode: ID    clientCode_in: ID    timeout: int    auditTransactions: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierCode_in([FlightSupplierInput!]):   groupCode(ID):   clientCode_in(ID): It has not been developed yet.  timeout(int): It has not been developed yet.  auditTransactions(Boolean): It has not been developed yet.   Required by FlightXQuery:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/inputobjects/flightsupplierinput/",
	"title": "FlightSupplierInput",
	"tags": [],
	"description": "Supplier to request",
	"content": " GraphQL schema definition type FlightSupplierInput {  Code: ID!    accessCode_in: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields Code(ID!):   accessCode_in([ID!]): It has not been developed yet.   Required by FlightXQuery:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/flightsurcharge/",
	"title": "FlightSurcharge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type FlightSurcharge {  totalAmount: AmountType    breakdown: [Fee]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields totalAmount(AmountType):   breakdown([Fee]):    Required by FlightPrice:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/schema/query/",
	"title": "FlightXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type FlightXQuery {  search(    where: FlightOfferWhereInput,     settings: FlightSettingsInput,     orderBy: FlightOfferOrderByInput,     ): FlightOfferConnection    audit( code: ID!, ): AuditData!    quote: FlightOffer   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(FlightOfferConnection): Returns the flight offers available  audit(AuditData!): It has not been developed yet.  quote(FlightOffer): It has not been developed yet.   "
},
{
	"uri": "https://travelgatex.com/integrations/flights/",
	"title": "Flights",
	"tags": [],
	"description": "Flight integrations",
	"content": "   AA - American Airlines American Airlines integration\n     AERT - AERTiCKET AERTiCKET integration\n     AMD - Amadeus Amadeus integration\n     DE - Condor Condor integration\n     EFT - Esferatur Esferatur integration\n     EI - Aer Lingus Aer Lingus integration\n     HV - Transavia Transavia integration\n     IG - MeridianaFly MeridianaFly integration\n     LH - Lufthansa Lufthansa integration\n     NAS - Norwegian Norwegian integration\n     SBR - Sabre Sabre integration\n     VY - Vueling Vueling integration\n    "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/float/",
	"title": "Float",
	"tags": [],
	"description": "",
	"content": " The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.\nGraphQL schema definition scalar Float   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/float/",
	"title": "Float",
	"tags": [],
	"description": "",
	"content": " The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.\nGraphQL schema definition scalar Float   Required by Coordinates:    PriceStatic:    AuditData:    Stat:    Price:    Exchange:    Markup:    Priceable:    Rule:    CancelPenalty:    PriceChange:    DeltaPriceInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/foldertemplate/",
	"title": "FolderTemplate",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum FolderTemplate{   FOLDER_DEFAULT,   }   Required by SuitFolderInput:     "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/faq/free-children-baby/",
	"title": "Free children and Free baby option ",
	"tags": [],
	"description": "Know how the free children and baby option works",
	"content": " Currently, there are some Channel Managers that are not able to load their prices indicating free charges for child and baby occupancies. To avoid this problem, we have developed a new functionality that allows buyers to indicate that specific rates work with free child/baby.\nWhen creating/editing a rate you will be allowed to set passenger conditions in contract terms.\nIn order to avoid any disruption with the existing product, both check-boxes are going to be unchecked by default. It means that, by default, the system behaviour will remain the same as now.\n\nPrice Calculation As you may know, Inventory-X works with three different types of price, and each Channel Manager loads their product using one of them.\nRoom Price The Room Price is not going to be affected by this new feature.\nAll the room occupancies have the same price unless there are pax supplements loaded.\nOccupancy Price The Occupancy Price is not going to be affected by this new feature.\nThis price already allows to update the final price for each occupancy with no additional calculations from the InventoryX system.\nStandard Occupancy Price On the contrary, this type of price is going to be affected. The child and baby passengers are going to be considered as a free pax depending on the Free of Charge set value.\nPlease, see the below study case for the new price calculation.\nStudy case The Standard Occupancy value is 3.\n\nPax supplements When a free of charge checkbox is checked, the pax supplement is always going to be considered as an Exclusive type regardless of if the supplement is Amount or Percent type.\nExample:\n The Standard Occupancy value is 3 3-0-0 = 300‚Ç¨ Child supplement = 50‚Ç¨ Baby supplement = 10‚Ç¨  \nChannel Manager Updates When the Channel Manager updates product for a particular rate that has Free of Charge configured, the Free of Charge value set will always prevail over the update. It means that our system always will consider the specific pax as a free pax regardless of the Channel Manager update.\nDetail Price Calculation Study Case Using the following room occupations:\n\nAnd the same occupancy price for all the rates:\n\nThe following price calculation logic will be applied for these example occupations:\n\n\n "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/rules/general-rules/",
	"title": "General rules",
	"tags": [],
	"description": "Configurate general rules and filters by different conditions",
	"content": " Considerations It is an absolute load, so bear in mind these considerations:\n If there is any problem with the file or its data then the load is cancelled and no rules are modified. If a rule is not referenced on the file then its value is not modified (only rules explicitly referenced on the file are affected). If you want to set the default value of a rule you just have to delete that rule.   \nSpecifications  File name: Rules_GeneralRules.csv.\n Each line represents a unique temporary pricing rule and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line, by default fields and subfields are separated using the characters #, | and ;. None of these characters can\u0026rsquo;t be used inside data because fields and subfields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nThe fields are separated by #. And if a field is a list of values it also has its values separated by ;.\n\n   Case Example Description     Field without data \u0026hellip;##\u0026hellip; We have the separator # and nothing inside.   Field directly with data and no lists \u0026hellip;#12#\u0026hellip; It is just the value 12.   Field with a list of elements \u0026hellip;#AS;XF;TR#\u0026hellip; Its value is a list and its elements are separated with ; (\u0026ldquo;AS\u0026rdquo;, \u0026ldquo;XF\u0026rdquo; and \u0026ldquo;TR\u0026rdquo;).    \nData Line fields    Position Mandatory Field Mandatory Data Type Description/Value     0 Yes Yes enumeration Defines the rule type we want to operate with. It may be one of the following values: COM: Comission/Markup. To define a comission to a set of agenciesDEF_MAR: Default/Fixed Market. To define a default/fixed market to a set of agenciesSEL_REL: Selling Release. To define a selling release to a set of agencies.RATE: Rate Type. To define the rate type filter to a set of agenciesCLO_REL: Closing Release. To define a closing release to a set of agencies.FIL_NRF: Filter NRF. To define the NRF/RF filter to a set of agencies.ALW_CUR: Allowed Currencies. To define a list of allowed currencies to a set of agencies.FRC_CUR: Force Currency. To define if the currency on the RQ has to be forced to a set of agencies.FIL_BIND: Filter Binding. To define the binding filter to a set of agencies.CUR_EXC: Allow Currency Exchange. To define if currency exchange is allowed or not, and to define a set of currencies to accomplish.ADD_MRK_PRC: Add Markup to Pricing. To define if we add the markup to the price after the pricing rules.MAX_TQ: Max Time to Quote. To define the maximum amount of minutes between Availability and Quote.MAX_TB: Max Time to Book. To define the maximum amount of minutes between Quote and Book.MIN_COM: Minimum Selling Pricing Rules: To define a Minimum Selling Price and how to act in sellings with lower pricing. It can choosen to set the Minimum Selling Price value or to discard the selling.   1 Yes Yes enumeration Defines the type of operation that will be done with the rule. U: Update. Updates the rule\u0026rsquo;s current value removing any previous definition.D: Delete. Removes the rule\u0026rsquo;s current value and sets it to its default value   2 Yes Yes/- complex Value to set to the rule. This field\u0026rsquo;s data is mandatory if we want to update the value of a rule (if not then an error will be generated).This field must be empty If we want to delete a rule (if not then an error will be generated).Note: Depending on the type of rule that is applied, this list can contain a different number of elements. Also, depending on the type of rule, the content of the values can be different. Check the table *Rules to know the available values for this field.   3 Yes Yes enumeration Defines if the rule is applied in general (affecting all agencies) or only for a list of concrete agencies. GEN = in general (the rule will be set on the general settings and will affect all agencies).LIST = a list of concrete agencies (the rule will be set only to these agencies). Not all rules can be set always as GEN and as LIST, it depends on the rule type. All rules can be a LIST, and rules that can be a GEN are: ADD_MRK_PRC, MAX_TQ, MAX_TB, MIN_COM.   4 Yes/- Yes list of strings List of agencies for which the rule is applied, separated with \u0026ldquo;;\u0026rdquo;. ****: If the operation is defined for a list of agencies then this field must contain a list (it can not be empty).If the operation is defined in general then this field must be empty.    Apendix: Rules table    Rule Type Values     COM Decimal value.   DEF_MAR String value. It is the market.   SEL_REL Integer value.   RATE Integer value that has to be one of the folllowing: 0 = All (no filter) 1 = Only B2B rates2 = Only B2C rates   CLO_REL Integer value.   FIL_NRF Integer value that has to be one of the folllowing: 0 = = All (no filter)1 = Only NRF2 = Only RF   ALW_CUR List of string, separated with \u0026ldquo;;\u0026rdquo;. It is a list of currencies (at least one).   FRC_CUR Boolean value (true/false).   FIL_BIND Integer value that has to be one of the folllowing: 0 = All (no filter) 1 = Only binding prices2 = Only not binding prices   CUR_EXC Complex value: See Apendix CUR_EXC   ADD_MRK_PRC Values when set for agencies: -1: Add markup to pricing0: Use general definition (default value)1: Do not add markup to pricing Values when set in general: -1: Add markup to pricing (default value)1: Do not add markup to pricing   MAX_TQ Values when set for agencies: -1: Not limit0: Use organization limit (default value)\u0026gt;0: Defines the limit (integer, represents minutes). Values when set in general: -1: No limit (default value)\u0026gt;0: Defines the limit (integer, represents minutes).   MAX_TB Values when set for agencies: -1: No limit0: Use organization limit (default value)\u0026gt;0: Defines the limit (integer, represents minutes). Values when set in general: -1: No limit (default value)\u0026gt;0: Defines the limit (integer, represents minutes).   MIN_COM Complex value: it is composed of a Type and a Value separated with \u0026lsquo;;\u0026rsquo;. Type values when set for agencies: -1: Use Organization Setting (only for agencies)0: Do not set minimum1: Define minimum and discard selling with lower pricing2: Define a minimum and apply it for sellings with lower pricing Type values when set in general: 0: Do not set minimum1: Define minimum and discard selling with lower pricing2: Define a minimum and apply it for sellings with lower pricing Value (for agencies and in general): It is a decimal. Example of line: MIN_COM#U#2;5.2 Type 2 and it is set a minimum of 5.2    Apendix: CUR_EXC The value to set (field position 2) for the CUR_EXC rule is a complex one. Tt is composed of 3 items:\n A type, to allow or not the currency exchange. A list of currencies. A list of countries with a sublist of currencies.  This field includes information about these items (subfields) using \u0026ldquo;|\u0026rdquo; as separator.\nEach subfields has the following format:\n   Subfield Position Mandatory subfield Mandatory Data Type Description/Value     0 Yes Yes int Indicates if currency exchange is allowed or not, with the following values. 0 = Allow any currency exchange. (we don\u0026rsquo;t have to add the following subfields)1 = Do not allow exchange and apply filters (we have to add the following subfields)2 = Allow currency exchange but only to the given currencies (we have to add the following subfields)   1 No No list List of admitted currencies. Example: 1   2 No No list List of countries and their admitted currencies. Example: 2    \nExamples of complete lines:\n Exchange is allowed CUR_EXC#U#0#LIST#Agency1;Agency2 Exchange is not allowed and only have a general list of currencies CUR_EXC#U#1|*;GBP;USD#LIST#Agency1;Agency2 Exchange is not allowed and we have currencies by country CUR_EXC#U#1|*;GBP;USD|ES;EUR#LIST#Agency1;Agency2 Exchange is allowed and only have a general list of currencies CUR_EXC#U#2|*;GBP;USD#LIST#Agency1;Agency2 Exchange is allowed and we have currencies by country CUR_EXC#U#2|*;GBP;USD|ES;EUR#LIST#Agency1;Agency2   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/geoname/",
	"title": "Geoname",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Geoname {  code: ID!    geonameData: GeonameData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   geonameData(GeonameData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by GeonameData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/geonamedata/",
	"title": "GeonameData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GeonameData {  code: ID!    name: String!    parent: Geoname!    country: Country    type: String!    coordinates: Coordinates!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   parent(Geoname!):   country(Country):   type(String!):   coordinates(Coordinates!):    Required by Geoname:     "
},
{
	"uri": "https://travelgatex.com/core/getting-started/getaccesses/",
	"title": "Get Accesses",
	"tags": [],
	"description": "Admin Get Accesses tool",
	"content": " Get accesses. List of all of your accesses available. query { admin { accesses { edges { node { accessData { name isActive code } error { code type description } } } } } }  Get accesses with filters. List of all of your accesses available choosing the filters, the filters are expecified in DOCS in the playground. query { admin { accesses(filter: { accessID: \u0026quot;0\u0026quot; }) { edges { node { accessData { name isActive code } error { code type description } } } } } }  "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/getmappeastatsdata/",
	"title": "GetMappeaStatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsData {  supplierMapped: String    startTime: String    endTime: String    organizationHotels: Int    contextHotels: Int    suggestedHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierMapped(String):   startTime(String):   endTime(String):   organizationHotels(Int):   contextHotels(Int):   suggestedHotels(Int):    Required by GetMappeaStatsResponse:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/getmappeastatsdata/",
	"title": "GetMappeaStatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsData {  supplierMapped: String    startTime: String    endTime: String    organizationHotels: Int    contextHotels: Int    suggestedHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierMapped(String):   startTime(String):   endTime(String):   organizationHotels(Int):   contextHotels(Int):   suggestedHotels(Int):    Required by GetMappeaStatsResponse:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/getmappeastatsresponse/",
	"title": "GetMappeaStatsResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsResponse {  data: [GetMappeaStatsData]    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data([GetMappeaStatsData]):   error(Error):   warnings([Warning]):    Required by MappeaQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/getmappeastatsresponse/",
	"title": "GetMappeaStatsResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsResponse {  data: [GetMappeaStatsData]    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data([GetMappeaStatsData]):   error(Error):   warnings([Warning]):    Required by MappeaQuery:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/getuploadedfilesdata/",
	"title": "GetUploadedFilesData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetUploadedFilesData {  files: [File]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields files([File]):    Required by GetUploadedFilesResponse:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/getuploadedfilesdata/",
	"title": "GetUploadedFilesData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetUploadedFilesData {  files: [File]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields files([File]):    Required by GetUploadedFilesResponse:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/getuploadedfilesresponse/",
	"title": "GetUploadedFilesResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetUploadedFilesResponse {  data: GetUploadedFilesData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data(GetUploadedFilesData):   error(Error):   warnings([Warning]):    Required by MappeaQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/getuploadedfilesresponse/",
	"title": "GetUploadedFilesResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetUploadedFilesResponse {  data: GetUploadedFilesData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data(GetUploadedFilesData):   error(Error):   warnings([Warning]):    Required by MappeaQuery:     "
},
{
	"uri": "https://travelgatex.com/product_template/howtos/quickstart/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/gettingstarted/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": " Getting Started   Credentials      Resources     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/giatadata/",
	"title": "GiataData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GiataData {  id: ID!    source: URI!    href: URI!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   source(URI!):   href(URI!):   updatedAt(DateTime!):    Required by HotelData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/grantmacropermissioninput/",
	"title": "GrantMacroPermissionInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GrantMacroPermissionInput {  group: ID!    member: ID!    macroPermission: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields group(ID!):   member(ID!):   macroPermission(ID!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/grantpermissionsinput/",
	"title": "GrantPermissionsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GrantPermissionsInput {  member: ID!    group: ID!    api: ID    role: ID!    resources: [ID!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields member(ID!):   group(ID!):   api(ID):   role(ID!):   resources([ID!]!):    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/bestpractices/graphql_to_rest/",
	"title": "GraphQL to Rest",
	"tags": [],
	"description": "",
	"content": "In case you expect to be returned +5k options per search response, we suggest using our GraphQL to Rest feature to keep performance at the highest level.\nTo implement this feature, please follow below steps:\n Check that your JSON parser is updated to the last schema as the Array Fields previously defined as single Scalars can produce unexpected JSON marshalling Add the HTTP header to your request(s): TGX-Content-Type:graphqlx/json Test a sample call for every request using the header Enjoy the performancePlease take a look at our blog    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " Groups are organized hierarchically.\nGraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by GroupEdge:    GroupData:    ManagedGroupData:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by SystemData:    GroupData:    ManagedGroupData:    ProfileData:    GroupEdge:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by GroupEdge:    GroupData:    ManagedGroupData:    SystemData:    ClientData:    ProfileData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ClientData:    GroupData:    ManagedGroupData:    ProfileData:    GroupEdge:    SystemData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by PaymentXStoredCardData:    GroupData:    GroupEdge:    ManagedGroupData:    SystemData:    ClientData:    ProfileData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Group {  code: ID!    groupData: GroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   groupData(GroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by SystemData:    GroupData:    ManagedGroupData:    ClientData:    ProfileData:    GroupEdge:    PaymentXStoredCardData:    AdminMutation:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):    "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):    Required by AccessData:    SupplierData:    OrganizationData:    GroupCommonData:    MemberData:    APIData:    GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by AccessData:    SupplierData:    GroupData:    GroupCommonData:    MemberData:    APIData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by MemberData:    GroupData:    GroupCommonData:    APIData:    AccessData:    SupplierData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by SupplierData:    AccessData:    GroupData:    GroupCommonData:    MemberData:    APIData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    MemberData:    APIData:    AccessData:    SupplierData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([GroupEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by AdminQuery:    AccessData:    SupplierData:    GroupData:    GroupCommonData:    MemberData:    APIData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection): Only responses children.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   members(MemberConnection): Only responses members in this group  apis(APIConnection): APIs assigned to this group. Products have APIs.  managedGroups(ManagedGroupConnection): Responses all managed groups by this group.  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically),  accesses(AccessConnection): Access resources in a group  suppliers(SupplierConnection): Supplier resources in a group  clients(ClientConnection): Clients resources in a group  roles(RoleConnection): You can grant roles to members, which define the roles catalog for a group.   Required by Group:  Groups are organized hierarchically.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     codeStartsWith: String,     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    siblings(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   siblings(GroupConnection):   members(MemberConnection):   apis(APIConnection):   managedGroups(ManagedGroupConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   roles(RoleConnection):   profiles(ProfileConnection):    Required by Group:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     codeStartsWith: String,     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    siblings(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   siblings(GroupConnection):   members(MemberConnection):   apis(APIConnection):   managedGroups(ManagedGroupConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   roles(RoleConnection):   profiles(ProfileConnection):    Required by Group:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     codeStartsWith: String,     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    siblings(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   siblings(GroupConnection):   members(MemberConnection):   apis(APIConnection):   managedGroups(ManagedGroupConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   roles(RoleConnection):   profiles(ProfileConnection):    Required by Group:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     codeStartsWith: String,     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    siblings(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   siblings(GroupConnection):   members(MemberConnection):   apis(APIConnection):   managedGroups(ManagedGroupConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   roles(RoleConnection):   profiles(ProfileConnection):    Required by Group:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     codeStartsWith: String,     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    productId: Int    resourceId: Int    siblings(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    managedGroups(    group: [ID!],     api: [ID!],     resource: [ID!],     role: [ID!],     codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ManagedGroupConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   parent(Group):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   productId(Int):   resourceId(Int):   siblings(GroupConnection):   members(MemberConnection):   apis(APIConnection):   managedGroups(ManagedGroupConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   roles(RoleConnection):   profiles(ProfileConnection):    Required by Group:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {  node: Group    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Group):   cursor(String!):    Required by GroupConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/groupinput/",
	"title": "GroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupInput {  id: ID!    groups: [ID]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   groups([ID]):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by OrganizationData:    GroupCommonData:    GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/grouptypeinput/",
	"title": "GroupTypeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum GroupTypeInput{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,    FOLDER,    PRODUCT,    RESOURCE,    SPECIFIC_RESOURCE,   }   Required by CreateGroupInput:    UpdateGroupInput:     "
},
{
	"uri": "https://travelgatex.com/integrations/flights/hv/",
	"title": "HV - Transavia",
	"tags": [],
	"description": "Transavia integration",
	"content": "   HV - Transavia Changelog     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/holder/",
	"title": "Holder",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   surname(String!):    Required by PaymentXStoredCardData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/holder/",
	"title": "Holder",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Holder {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   surname(String!):    Required by HotelBookingDetail:    PaymentCardData:    PaymentXStoredCardData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/inputobjects/holderinput/",
	"title": "HolderInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   surname(String!):    Required by PaymentXStoredCardFilterInput:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/holderinput/",
	"title": "HolderInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HolderInput {  name: String!    surname: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   surname(String!):    Required by PaymentXStoredCardFilterInput:    HotelBookInput:    PaymentCardInput:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/staticcontent/hotel/",
	"title": "Hotel",
	"tags": [],
	"description": "Hotels from a supplier",
	"content": " Hotels Hotels Query returns a hotel list from one supplier\u0026rsquo;s access. This entity contains static data about the hotel requested, such as code, name, location, and other information - You can find all these fields in the graphQL api documentation. This query allows many types of search. You can receive hotels with hotel codes or with minimal destination codes, you can also filter the results based on rank. In this sense, note that there are mandatory and optional fields that allow filtering the hotels returned to the response. As for the response, if the number of hotels that have the selected provider is greater than 1000, these hotels will be returned in paginated responses. The full response is split into pages: By default, the maximum number of hotels returned in each page (response) is 1000, but it allows requesting between 1 and 1000 hotels by filling in the field maxSize in the criteria. In order to obtain the next page of hotels, you need to fill in the token field, accordingly.\nIn order to enable all kind of search, input parameters must be filled and in some cases its possible to combine them for more accurate search. Also, there is some input parameters that must not be combined. This characteristic is explained later.\nCriteria Criteria fields allow select provider (access) and allow to select the entity which will be used for search (search by hotel codes, search by destinations, search by countries,\u0026hellip;).\nFields for selecting the access or a supplier\n access: it represents the access for which you want to receive the hotel\u0026rsquo;s information. group: only for internal processes. Please do not use. supplierCode: this field allows to request the portfolio of a supplier. Only supplier\u0026rsquo;s owner can request it.  Only one of these fields can be included\nFields for selecting the entity of search\nThese fields cannot be combined among themselves and all can be nil. In case that no one field is filled, all access hotels will be returned in a non paginated or paginated response/s.\n hotelCodes: it allows searching by hotel codes. These codes are the same that are used in search query. ranks: it allows filtering by rank/s. Note: not implemented in 2020-03-02 supplierHotelCodes: used for search by hotel codes in supplier\u0026rsquo;s context. destinationCodes: it allows searching hotels by minimal destination/s. A minimal destination is a destination that doesn\u0026rsquo;t contain smaller destinations, only contains hotels. countries: it allows searching hotels by country. Country/ies will be specified in ISO 3466-1 alpha-2 format(i.e \u0026ldquo;ES\u0026rdquo;)  Field for configure the response - maxSize: it allows to specify the number of elements per page. The number of elements per page is maxSize if the number of hotels returned by the query sent is greater than maxSize. In this case, will be necessary to retrieve next/s page/s using token field. This use case will be explained later.\nToken The token allows to request the next page of hotels. The correct way of obtaining multiple pages of hotels is, in the first query: - fill the query with input parameters necessary for perform the query - maintain the parameter token empty in the request - request the field token in the graph response.\nThe value stored in the field token in HotelConnection element in response must be used in the subsequent query putting it in token input parameter. This process must be repeated setting the token of the previous response in the query parameter until the query return \u0026ldquo;Hotels not found\u0026rdquo;. In token queries, only token parameter must be filled.\nFilter This field allows to make a more accurate query. Please consider that is not necessary that AND and OR fields be filled, multiple filters can be used without the use of these fields. There are two kinds of fields inside this filter:\n Date filters: in this API, a hotel can be created, updated and deleted. These date filters allow searching by dates in which the hotels have been created, updated or deleted.\n Field filters: these fields allow searching hotels that have information in indicated fields. It is possible to indicate these field filters: country, category, destination, name, coordinates.\n  Relay This field allows searching by relay type search. More about relay in: relay\nNote: not implemented in 2020-03-02\nOther particularities  Count field in HotelConnection informs of the number of hotels that will be returned to the complete response for this specific query (it includes pagination).\n PageInfo element inside response must be used for relay search queries.\n  GIATA Data GIATA information can be retrieved in the node GiataData inside HotelData node. This information is not returned by default, please contact us if you need this information.\nMapping Mapping in this API differs slightly of booking flow mapping process. Booking Flow Mapping\nAmenity Map This functionality allows returning amenity codes in the context that the client wants. This functionality needs a .csv file that will be loaded in our FTP system (same file for this API and Booking Flow).\nFormat File The file must be in the below format:\n Encoding: UTF-8¬† File Name: [Context Source]_[Context Destination]_amenity_map.csv Header Row: Code Source,Code Destination¬† Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Maps/  Sample File Name: contextSource_contextDestination_amenity_map.csv Data:\nCode Source,Code Destination 1,X 1,Y 1,Z 2,X1 2,X2 3,X3 4,X4 5,X5  Input Example For using amenity mapping in Content API is necessary to include a parameter called \u0026ldquo;mapOptions\u0026rdquo; as array in allAmenities node. This array indicates all the pairs group-context that will be used to map amenity code. If amenity map is found for some group-context pair of mapOptions input, the code mapped will appear inside mappings field as code.\nQuery mapping node example mappings { context code } ```` #### Query parameter example ```json allAmenities(mapOptions: [{groupCode: \u0026quot;HotelX_XXX\u0026quot;, context: \u0026quot;CTX\u0026quot;}, {groupCode: \u0026quot;HotelX_YYY\u0026quot;, context: \u0026quot;CTX2\u0026quot;}]) { edges { cursor node { code amenityData { code amenityCode type texts { text language } value { text language } mappings { context code } } adviseMessage { code level description } } } }  Output Examples { \u0026quot;edges\u0026quot; : [ { \u0026quot;cursor\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;node\u0026quot; : { \u0026quot;code\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;amenityData\u0026quot; : { \u0026quot;code\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;amenityCode\u0026quot; : \u0026quot;amenityCode1\u0026quot;, \u0026quot;type\u0026quot; : \u0026quot;GENERAL\u0026quot;, \u0026quot;texts\u0026quot; : [ { \u0026quot;text\u0026quot; : \u0026quot;24 hour front desk\u0026quot;, \u0026quot;language\u0026quot; : \u0026quot;en\u0026quot; } ], \u0026quot;value\u0026quot; : [ { \u0026quot;text\u0026quot; : \u0026quot;Amenity value example\u0026quot;, \u0026quot;language\u0026quot; : \u0026quot;en\u0026quot; } ], \u0026quot;mappings\u0026quot; : null }, \u0026quot;adviseMessage\u0026quot; : [ { \u0026quot;code\u0026quot; : \u0026quot;22600\u0026quot;, \u0026quot;level\u0026quot; : \u0026quot;WARN\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;Amenity map code not found for group HotelX_XXX and context CTX1\u0026quot; }, { \u0026quot;code\u0026quot; : \u0026quot;22401\u0026quot;, \u0026quot;level\u0026quot; : \u0026quot;WARN\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;No permissions found over group HotelX_YYYY.\u0026quot; } ] } }, { \u0026quot;cursor\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;node\u0026quot; : { \u0026quot;code\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;amenityData\u0026quot; : { \u0026quot;code\u0026quot; : \u0026quot;\u0026quot;, \u0026quot;amenityCode\u0026quot; : \u0026quot;amenityCode2\u0026quot;, \u0026quot;type\u0026quot; : \u0026quot;GENERAL\u0026quot;, \u0026quot;texts\u0026quot; : [ { \u0026quot;text\u0026quot; : \u0026quot;Restaurant\u0026quot;, \u0026quot;language\u0026quot; : \u0026quot;en\u0026quot; } ], \u0026quot;value\u0026quot; : [ { \u0026quot;text\u0026quot; : \u0026quot;Amenity value example\u0026quot;, \u0026quot;language\u0026quot; : \u0026quot;en\u0026quot; } ], \u0026quot;mappings\u0026quot; : [ { \u0026quot;context\u0026quot; : \u0026quot;CTX\u0026quot;, \u0026quot;code\u0026quot; : \u0026quot;codeInCTXContext\u0026quot; } ], \u0026quot;adviseMessage\u0026quot; : [ { \u0026quot;code\u0026quot; : \u0026quot;22401\u0026quot;, \u0026quot;level\u0026quot; : \u0026quot;WARN\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;No permissions found over group HotelX_YYYY.\u0026quot; } ] } } } ] }  The query of the response above is the response of the previous example identified as: \u0026ldquo;Query parameter example\u0026rdquo;. There we can see that we send two mapping options, one requesting group HotelX_XXX with context CTX and the other with group HotelX_YYY and context CTX2.\nFor this example, we suppose that:\n the Apikey has no permission over group HotelX_YYY. For this reason, we find one adviseMessage with the description: \u0026ldquo;No permissions found over group HotelX_YYY\u0026rdquo; in each amenity nodes. the amenity with code amenityCode1 has not been found in amenity mapping file. For this reason we find one adviseMessage in first amenity node indicating that no mapping has been found for this amenityCode.  Samples        #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"b1462010e27808c03ecb6d82afe2ebd7\",\"n\":\"Basic Hotels Query\",\"o\":[\"graphiql\"],\"u\":\"mikimartin88\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"bba03939c4fe470215a8cb127b871d87\",\"n\":\"Hotels by HotelCodes\",\"o\":[\"graphiql\"],\"u\":\"mikimartin88\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"f3574688964f9a8a44e177fd6edc2b76\",\"n\":\"Hotels by CountryCodes\",\"o\":[\"graphiql\"],\"u\":\"mikimartin88\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"d2862124a70cc6fa13259862705d1b64\",\"n\":\"Hotels by DestinationCodes\",\"o\":[\"graphiql\"],\"u\":\"mikimartin88\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"1375b762dbcf08c1c130ee3bb8529c23\",\"n\":\"Hotels by Rank\",\"o\":[\"graphiql\"],\"u\":\"mikimartin88\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"dd0ffb2f6cae6567cf5598963830e085\",\"n\":\"Hotels with dates filter\",\"o\":[\"graphiql\"],\"u\":\"mikimartin88\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"6d20d054c9e21f77fe046dafb544e25a\",\"n\":\"Hotels with fields filter\",\"o\":[\"graphiql\"],\"u\":\"mikimartin88\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "https://travelgatex.com/integrations/hotel/",
	"title": "Hotel",
	"tags": [],
	"description": "Hotel integrations",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotel/",
	"title": "Hotel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Hotel {  code: ID!    hotelData: HotelData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   error: : [AdviseMessage!] // Deprecated from 2019-07-03     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   hotelData(HotelData):   error([AdviseMessage!]):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by HotelEdge:     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/",
	"title": "Hotel Pull Sellers API",
	"tags": [],
	"description": "Read documentation on Hotel Pull Sellers API",
	"content": "   Methods API Methods\n     Release notes Release notes\n     How to guides How to guides\n     Data Structure      Lists of Data      Overview Develop our API and connect your system to the markeplace\n     FAQ     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/",
	"title": "Hotel-X Buyers API",
	"tags": [],
	"description": "Hotel-X: NextGen Hotel Search API",
	"content": "Hotel-X API is a powerful aggregation solution that allows you to get results from the largest network of Sellers with just one request. You have the possibility to aggregate (or not!) at different levels like hotel, room type and rate plan among others.\nYou can build on your connectivity a robust business logic by using easily a first-in-industry plugin architecture. Leverage the power and flexibility of Hotel-X plugins to get an edge over your competitors. Hotel-X will replace the business logic in your system as you will get an already processed response. For example, you will get the cheapest options among all your suppliers, or different options in the currency that you prefer.\nA plugin is a piece of code that is executed inside our application that gives you an extra functionality over the requests/responses such as currency conversion.Plugins are a core package in the Go Programming language. You can learn more about how to use plugins here . Using Hotel-X, you will be able to empower your travel websites and apps, expand your catalogue of hotel booking services and improve hotel search times and accuracy by customizing aggregated responses based on your prefered criteria.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/product-load/hotelavailnotif/",
	"title": "HotelAvailNotif",
	"tags": [],
	"description": "HotelAvailNotif message",
	"content": " Providers will send a HotelAvailNotifRQ message to push availabilities for seller. TGX will process the data and respond with an error code if needed or success if everything is correct.\nHotelAvailNotifRQ Example for a RatePlan\n\u0026lt;HotelAvailNotif\u0026gt; \u0026lt;request\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;\u0026gt;\u0026lt;/RequestorID\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;\u0026gt;\u0026lt;/CompanyName\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;AvailStatusMessages HotelCode = \u0026quot;12\u0026quot;\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;9\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-25\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; InvCode = \u0026quot;APT\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;2\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;8\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus Status = \u0026quot;Open\u0026quot; SellThroughOpenIndicator = \u0026quot;false\u0026quot; MinAdvancedBookingOffset = \u0026quot;5\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;12\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-21\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;false\u0026quot; Tue = \u0026quot;false\u0026quot; Weds = \u0026quot;false\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;RestrictionStatus Restriction = \u0026quot;Master\u0026quot; Status = \u0026quot;Close\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;12\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-22\u0026quot; End = \u0026quot;2013-12-25\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;false\u0026quot; Sat = \u0026quot;false\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;RestrictionStatus Status = \u0026quot;Close\u0026quot; Restriction = \u0026quot;Arrival\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;7\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-25\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; InvCode = \u0026quot;STD1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;3\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;9\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus SellThroughOpenIndicator = \u0026quot;true\u0026quot; MinAdvancedBookingOffset = \u0026quot;6\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;5\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-26\u0026quot; End = \u0026quot;2013-12-27\u0026quot; InvCode = \u0026quot;STD1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;/AvailStatusMessages\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelAvailNotif\u0026gt;  **Example for a Derived RatePlan**\n\u0026lt;HotelAvailNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;POS xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;\u0026gt;\u0026lt;/RequestorID\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;\u0026gt;\u0026lt;/CompanyName\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;AvailStatusMessages HotelCode = \u0026quot;1\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;AvailStatusMessage\u0026gt; \u0026lt;StatusApplicationControl Sun = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Fri = \u0026quot;true\u0026quot; Thur = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Mon = \u0026quot;true\u0026quot; RatePlanCode = \u0026quot;DRV\u0026quot; Start = \u0026quot;2014-07-01\u0026quot; End = \u0026quot;2014-07-31\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;3\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;3\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus MinAdvancedBookingOffset = \u0026quot;5\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage\u0026gt; \u0026lt;StatusApplicationControl Sun = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Fri = \u0026quot;true\u0026quot; Thur = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Mon = \u0026quot;true\u0026quot; RatePlanCode = \u0026quot;DRV\u0026quot; Start = \u0026quot;2014-08-01\u0026quot; End = \u0026quot;2014-08-15\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;5\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;10\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus Restriction=\u0026quot;Master\u0026quot; Status=\u0026quot;Close\u0026quot; /\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;/AvailStatusMessages\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelAvailNotif\u0026gt;     Element Number Type Description     HotelAvailNotif/request 1  Root Node.   AvailStatusMessages 1     @HotelCode 1 String Hotel code whose information is provided by the method.   AvailStatusMessages/AvailStatusMessage 1..n     @BookingLimit 0..1 Integer Identifies the number of available rooms per Room \u0026amp; RatePlan for the indicated dates. Not mandatory when the @Status is Close. Not used for derived rates.   AvailStatusMessages/AvailStatusMessage/StatusApplicationControl 1     @Start 1 Date Start date.   @End 1 Date End date.   @RatePlanCode 1 String Rate Plan Code.   @InvCode 0..1 String Room Code. Not used for derived rates.   @InvType 0..1 String Product type (ROOM). Not used for derived rates.   @Mon 1 Boolean Indicates whether the AvailStatusMessage data applies to Mondays.   @Tue 1 Boolean Indicates whether the AvailStatusMessage data applies to Tuesdays.   @Weds 1 Boolean Indicates whether the AvailStatusMessage data applies to Wednesdays.   @Thur 1 Boolean Indicates whether the AvailStatusMessage data applies to Thursdays.   @Fri 1 Boolean Indicates whether the AvailStatusMessage data applies to Fridays.   @Sat 1 Boolean Indicates whether the AvailStatusMessage data applies to Saturdays.   @Sun 1 Boolean Indicates whether the AvailStatusMessage data applies to Sundays.   AvailStatusMessages/AvailStatusMessage/LengthsOfStay 0..1     @ArrivalDateBased 0..1 Boolean When its true, the minimum and maximum stay is checked ONLY the first day of the availability, when false or not indicated, the minimum and maximum stay is checked all the availability days. If both values are needed two AvailStatusMessage must be send.   AvailStatusMessages/AvailStatusMessage/LengthsOfStay/LengthOfStay 1..2     @Time 1 Integer Indicates the number of @TimeUnit for this stay.   @TimeUnit 1 String Day.   @MinMaxMessageType 1 String (MinLOS, MaxLOS) Indicates the minimum or maximum stay for his AvailStatusMessage.   AvailStatusMessages/AvailStatusMessage/RestrictionStatus 0..1     @Status 0..1 String (Open, Close).   @Restriction 0..1 String Master. This is the master availability. If master availability is ‚ÄòClosed‚Äô, the product is not bookable if any of the stay dates includes one of the dates specified by the Application Control element. If master availability is ‚ÄòOpen‚Äô, additional restrictions on arrival and departure may be placed (Master, Arrival, Departure).   @MinAdvancedBookingOffset 0..1 Integer Minimum number of days before the check-in date after which the product is not available to be booked. This restriction is usually used to offer discounts on early bookings.   @MaxAdvancedBookingOffset 0..1 Integer Maximum number of days before the check-in date after which the product is not available to be booked. This restriction is usually used to offer last minute discounts on unsold inventory.   @SellThroughOpenIndicator 0..1 Boolean When @Status is open, in this element you can indicate this room or room/ratePlan can be sold without limit(like BookingLimit=MaxInteger). Not used for derived rates.    HotelAvailNotifRS Success Response\n\u0026lt;HotelAvailNotifResponse xmlns=\u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelAvailNotifResult\u0026gt; \u0026lt;Success xmlns=\u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;/\u0026gt; \u0026lt;/HotelAvailNotifResult\u0026gt; \u0026lt;/HotelAvailNotifResponse\u0026gt;  Error Response\n\u0026lt;HotelAvailNotifResponse xmlns=\u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelAvailNotifResult\u0026gt; \u0026lt;Errors xmlns=\u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Error ShortText=\u0026quot;AvailStatusMessages not found\u0026quot; Code=\u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Errors\u0026gt; \u0026lt;/HotelAvailNotifResult\u0026gt; \u0026lt;/HotelAvailNotifResponse\u0026gt;  "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelbookinput/",
	"title": "HotelBookInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBookInput {  optionRefId: String!    language: Language    clientReference: String!    deltaPrice: DeltaPriceInput    paymentCard: PaymentCardInput    remarks: String    holder: HolderInput!    rooms: [BookRoomInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionRefId(String!):   language(Language):   clientReference(String!):   deltaPrice(DeltaPriceInput):   paymentCard(PaymentCardInput):   remarks(String):   holder(HolderInput!):   rooms([BookRoomInput!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelbookpayload/",
	"title": "HotelBookPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBookPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    booking: HotelBookingDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest):   auditData(AuditData):   booking(HotelBookingDetail):   errors([Error!]):   warnings([Warning!]):    Required by HotelXMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelbooking/",
	"title": "HotelBooking",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBooking {  stats( token: String!, ): StatsRequest    auditData: AuditData    bookings: [HotelBookingDetail!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest):   auditData(AuditData):   bookings([HotelBookingDetail!]):   errors([Error!]):   warnings([Warning!]):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelbookingdetail/",
	"title": "HotelBookingDetail",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBookingDetail {  reference: Reference!    holder: Holder    hotel: BookingHotel    price: Price    quotePrice: PriceChange    cancelPolicy: CancelPolicy    remarks: String    status: BookStatusType!    billingSupplierCode: String    payable: String    addOns: AddOns    paymentCard: PaymentCard   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(Reference!):   holder(Holder):   hotel(BookingHotel):   price(Price):   quotePrice(PriceChange):   cancelPolicy(CancelPolicy):   remarks(String):   status(BookStatusType!):   billingSupplierCode(String):   payable(String):   addOns(AddOns):   paymentCard(PaymentCard):    Required by HotelBookPayload:    HotelCancelDetail:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelcanceldetail/",
	"title": "HotelCancelDetail",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCancelDetail {  reference: Reference    cancelReference: String    status: BookStatusType    price: Price    booking: HotelBookingDetail   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(Reference):   cancelReference(String):   status(BookStatusType):   price(Price):   booking(HotelBookingDetail):    Required by HotelCancelPayload:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelcancelinput/",
	"title": "HotelCancelInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCancelInput {  accessCode: String!    language: Language    hotelCode: String!    reference: BookReferenceInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessCode(String!):   language(Language):   hotelCode(String!):   reference(BookReferenceInput!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelcancelpayload/",
	"title": "HotelCancelPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCancelPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    cancellation: HotelCancelDetail    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest):   auditData(AuditData):   cancellation(HotelCancelDetail):   errors([Error!]):   warnings([Warning!]):    Required by HotelXMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelcommitdetails/",
	"title": "HotelCommitDetails",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCommitDetails {  reference: Reference!    status: BookStatusType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(Reference!):   status(BookStatusType!):    Required by HotelCommitPayload:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelcommitinput/",
	"title": "HotelCommitInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCommitInput {  accessCode: String!    language: Language    commitReference: String    reference: HotelXCommitReferenceInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessCode(String!):   language(Language):   commitReference(String):   reference(HotelXCommitReferenceInput):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelcommitpayload/",
	"title": "HotelCommitPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCommitPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    commitDetails: HotelCommitDetails    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest):   auditData(AuditData):   commitDetails(HotelCommitDetails):   errors([Error!]):   warnings([Warning!]):    Required by HotelXMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelconnection/",
	"title": "HotelConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelConnection {  edges: [HotelEdge]    count: Int!    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([HotelEdge]):   count(Int!):   token(String):   pageInfo(PageInfo!):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelcriteriabookinginput/",
	"title": "HotelCriteriaBookingInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCriteriaBookingInput {  accessCode: String!    language: Language    typeSearch: BookingCriteriaType!    references: CriteriaBookingReferencesInput    dates: CriteriaBookingDatesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessCode(String!):   language(Language):   typeSearch(BookingCriteriaType!):   references(CriteriaBookingReferencesInput):   dates(CriteriaBookingDatesInput):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelcriteriaquoteinput/",
	"title": "HotelCriteriaQuoteInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCriteriaQuoteInput {  optionRefId: String!    language: Language   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionRefId(String!):   language(Language):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelcriteriasearchinput/",
	"title": "HotelCriteriaSearchInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCriteriaSearchInput {  checkIn: Date!    checkOut: Date!    hotels: [String!]    destinations: [String!]    occupancies: [RoomInput!]!    language: Language    currency: Currency    nationality: Country    market: String    markets: [String!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields checkIn(Date!):   checkOut(Date!):   hotels([String!]):   destinations([String!]):   occupancies([RoomInput!]!):   language(Language):   currency(Currency):   nationality(Country):   market(String):   markets([String!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hoteldata/",
	"title": "HotelData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelData {  code: ID!    hotelCode: String!    hotelCodeSupplier: String    giataData: GiataData    hotelName: String    categoryCode: String    chainCode: String    exclusiveDeal: Boolean!    location: Location!    contact: Contact    rank: [Int!]!    cardTypes: [PaymentCardType!]    amenities: [AmenityStatic!]    medias: [Media!]    descriptions( types: [DescriptionType!], languages: [Language!], ): [Description!]    rooms: RoomConnection    propertyType: PropertyType    mandatoryFees: [MandatoryFee!]    checkIn: CheckInformation    checkOut: CheckInformation    allAmenities( mapOptions: [HotelXMapOptionInput!], ): HotelXAmenityConnection   Show deprecated fields   property: : Property // Deprecated from 2019-10-16 Redundant information     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   hotelCode(String!):   hotelCodeSupplier(String):   giataData(GiataData):   hotelName(String):   categoryCode(String):   property(Property):   chainCode(String):   exclusiveDeal(Boolean!):   location(Location!):   contact(Contact):   rank([Int!]!):   cardTypes([PaymentCardType!]):   amenities([AmenityStatic!]):   medias([Media!]):   descriptions([Description!]):   rooms(RoomConnection):   propertyType(PropertyType):   mandatoryFees([MandatoryFee!]):   checkIn(CheckInformation):   checkOut(CheckInformation):   allAmenities(HotelXAmenityConnection):    Required by Hotel:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hoteledge/",
	"title": "HotelEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelEdge {  node: Hotel    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Hotel):   cursor(String!):    Required by HotelConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hoteloptionquote/",
	"title": "HotelOptionQuote",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelOptionQuote {  optionRefId: String!    status: StatusType!    price: Price!    searchPrice: PriceChange    cancelPolicy: CancelPolicy!    remarks: String    surcharges: [Surcharge!]    cardTypes: [PaymentCardType!]    addOns: AddOns   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionRefId(String!):   status(StatusType!):   price(Price!):   searchPrice(PriceChange):   cancelPolicy(CancelPolicy!):   remarks(String):   surcharges([Surcharge!]):   cardTypes([PaymentCardType!]):   addOns(AddOns):    Required by HotelQuote:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hoteloptionsearch/",
	"title": "HotelOptionSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelOptionSearch {  supplierCode: String!    accessCode: String!    markets: [String!]!    hotelCode: String!    hotelCodeSupplier: String!    hotelName: String    boardCode: String!    boardCodeSupplier: String!    paymentType: PaymentType!    status: StatusType!    occupancies: [Occupancy!]!    rooms: [Room!]!    price: Price!    supplements: [Supplement!]    surcharges: [Surcharge!]    rateRules: [RateRulesType!]    cancelPolicy: CancelPolicy    remarks: String    addOns: AddOns    id: String!    amenities: [Amenity!]   Show deprecated fields   market: : String // deprecated from 2019-12-11     token: : String! // deprecated from 2019-02-05     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierCode(String!):   accessCode(String!):   market(String):   markets([String!]!):   hotelCode(String!):   hotelCodeSupplier(String!):   hotelName(String):   boardCode(String!):   boardCodeSupplier(String!):   paymentType(PaymentType!):   status(StatusType!):   occupancies([Occupancy!]!):   rooms([Room!]!):   price(Price!):   supplements([Supplement!]):   surcharges([Surcharge!]):   rateRules([RateRulesType!]):   cancelPolicy(CancelPolicy):   remarks(String):   addOns(AddOns):   token(String!):   id(String!):   amenities([Amenity!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/hoteloptiontype/",
	"title": "HotelOptionType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum HotelOptionType{   HOTEL,    HOTEL_SKIPASS,    HOTEL_SKIPASS_LESSONS,    HOTEL_SKIPASS_LESSONS_MEALS,    HOTEL_SKIPASS_EQUIPMENT_LESSONS,    HOTEL_SKIPASS_EQUIPMENT_LESSONS_MEALS,    HOTEL_TICKET,    HOTEL_TICKET_TRANSFERS,    GALA,    HOTEL_SKIPASS_EQUIPMENT,    HOTEL_SKIPASS_MEALS,    HOTEL_SKIPASS_EQUIPMENT_MEALS,    HOTEL_ACTIVITY,   }   Required by ReviewedHotelOptionType:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/hotelpaxtype/",
	"title": "HotelPaxType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum HotelPaxType{   ADULT,    CHILD,    INFANT,   }   Required by MetadataCandidate:    AgeRange:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelquote/",
	"title": "HotelQuote",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelQuote {  stats( token: String!, ): StatsRequest    auditData: AuditData    optionQuote: HotelOptionQuote    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest):   auditData(AuditData):   optionQuote(HotelOptionQuote):   errors([Error!]):   warnings([Warning!]):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/set-up/hotelrateplaninventoryretrieve/",
	"title": "HotelRatePlanInventoryRetrieve",
	"tags": [],
	"description": "HotelRatePlanInventoryRetrieve message",
	"content": " Providers send a HotelRatePlanInventoryRetrieveRQ message to retrieve a list of hotels, rate plans and rooms and their configurations. TGX then returns a list of all active rooms and configurations. Inactive rate plans and rooms will not be returned in these messages.\nHotelRatePlanInventoryRetrieveRQ XML Example\n\u0026lt;HotelRatePlanInventoryRetrieve\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot;\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;/\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;/\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;TPA_Extensions\u0026gt; \u0026lt;Params\u0026gt; \u0026lt;Param key = \u0026quot;onlyActive\u0026quot; value = \u0026quot;0\u0026quot;/\u0026gt; \u0026lt;/Params\u0026gt; \u0026lt;/TPA_Extensions\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;RatePlans\u0026gt; \u0026lt;RatePlan\u0026gt; \u0026lt;HotelRef HotelCode = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanInventoryRetrieve\u0026gt;     Element Number Type Description     HotelRatePlan/request 1  Root Node   @PrimaryLangID 1 String ISO Code Language   POS/Source/TPA_Extensions 0..1  Optional, if empty only active inventory will be received.   POS/Source/TPA_Extensions/Params 0..1     POS/Source/TPA_Extensions/Param/Param 0..N     @key 1 String onlyActive   @value 1 String 1 - You will receive all active inventory data. 0 - Active and deactivated inventory will be received. (Same case as without TPA_Extensions node.)   RatePlans/RatePlan/HotelRef 0..1  Contains hotel filter   @HotelCode 0..1 String If the hotel is not specified, it returns Rooms and Rates of all user‚Äôs hotels.    HotelRatePlanInventoryRetrieveRS Example for a Rate Plan\n\u0026lt;HotelRatePlanInventoryRetrieveResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelRatePlanInventoryRetrieveResult Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;Success xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;/\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelName = \u0026quot;Hotel Travelgate\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;PACK\u0026quot; RatePlanType = \u0026quot;11\u0026quot; YieldableIndicator = \u0026quot;false\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; Start = \u0026quot;2016-01-01\u0026quot; End = \u0026quot;2016-05-01\u0026quot;\u0026gt; \u0026lt;BookingRules\u0026gt; \u0026lt;BookingRule Code = \u0026quot;1 Noche\u0026quot;\u0026gt; \u0026lt;CancelPenalties\u0026gt; \u0026lt;CancelPenalty NonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Deadline OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;1\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent NmbrOfNights = \u0026quot;1,00\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;BookingRule\u0026gt; \u0026lt;Viewerships\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LocationCode CountryCode = \u0026quot;ES\u0026quot;/\u0026gt; \u0026lt;/LocationCodes\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;/Viewerships\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;/BookingRules\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Packaged Rate\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount AgeQualifyingCode = \u0026quot;8\u0026quot; MaxAge = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount AgeQualifyingCode = \u0026quot;8\u0026quot; MaxAge = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount AgeQualifyingCode = \u0026quot;7\u0026quot; MaxAge = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;PaymentPolicies\u0026gt; \u0026lt;GuaranteePayment PaymentCode=\u0026quot;MerchantPayment\u0026quot;/\u0026gt; \u0026lt;GuaranteePayment PaymentCode=\u0026quot;DirectPayment\u0026quot;\u0026gt; \u0026lt;AcceptedPayments\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode = \u0026quot;VI\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard\u0026gt; \u0026lt;PaymentCard CardCode = \u0026quot;CA\u0026quot; /\u0026gt; \u0026lt;/PaymentCard\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;/AcceptedPayments\u0026gt; \u0026lt;/GuaranteePayment\u0026gt; \u0026lt;/PaymentPolicies\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Offers\u0026gt; \u0026lt;Offer OfferCode=\u0026quot;Offer1FN\u0026quot; OfferStatusType=\u0026quot;Active\u0026quot;\u0026gt; \u0026lt;OfferRules\u0026gt; \u0026lt;OfferRule\u0026gt; \u0026lt;DateRestriction Start=\u0026quot;9/1/2017 12:00:00 AM\u0026quot; End=\u0026quot;9/1/2017 12:00:00 AM\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time=\u0026quot;2\u0026quot; MinMaxMessageType=\u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time=\u0026quot;5\u0026quot; MinMaxMessageType=\u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;DOW_Restrictions\u0026gt; \u0026lt;AvailableDaysOfWeek Mon=\u0026quot;true\u0026quot; Tue=\u0026quot;true\u0026quot; Weds=\u0026quot;true\u0026quot; Thur=\u0026quot;true\u0026quot; Fri=\u0026quot;true\u0026quot; Sat=\u0026quot;true\u0026quot; Sun=\u0026quot;true\u0026quot;/\u0026gt; \u0026lt;/DOW_Restrictions\u0026gt; \u0026lt;/OfferRule\u0026gt; \u0026lt;/OfferRules\u0026gt; \u0026lt;Discount NightsDiscounted=\u0026quot;1\u0026quot; DiscountPattern=\u0026quot;First\u0026quot;/\u0026gt; \u0026lt;OfferDescription\u0026gt; \u0026lt;Text\u0026gt;Offer 1 Night Free\u0026lt;/Text\u0026gt; \u0026lt;/OfferDescription\u0026gt; \u0026lt;/Offer\u0026gt; \u0026lt;/Offers\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvTypeCode=\u0026quot;ROOMSTD1\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD2\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Deactivated\u0026quot; InvTypeCode=\u0026quot;\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD2\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Deactivated\u0026quot; InvTypeCode=\u0026quot;\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;AdditionalDetails\u0026gt; \u0026lt;AdditionalDetail Code=\u0026quot;REP\u0026quot; Type=\u0026quot;39\u0026quot;\u0026gt; \u0026lt;DetailDescription\u0026gt; \u0026lt;Text\u0026gt;Repsol\u0026lt;/Text\u0026gt; \u0026lt;/DetailDescription\u0026gt; \u0026lt;/AdditionalDetail\u0026gt; \u0026lt;/AdditionalDetails\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanInventoryRetrieveResult\u0026gt; \u0026lt;/HotelRatePlanInventoryRetrieveResponse\u0026gt;  If your Rate Plan has information about Meal Plans included in it, this will be shown in the MealsIncluded tag.\nIn the previous example we received one hotel, one Rate Plan and 2 rooms. One of the rooms appears twice because each appearance shows the different occupancies. STD2 room has 2 possible occupations: 2 adults + 1 child or 2 adults.\n**Example for a Derived Rate Plan**\n\u0026lt;HotelRatePlanInventoryRetrieveResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelRatePlanInventoryRetrieveResult Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;Success xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;/\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelName = \u0026quot;Hotel Test Pruebas Travelgate\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRVT\u0026quot; BaseRatePlanCode = \u0026quot;SRATE2\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;TRP\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;3\u0026quot; MaxOccupancy = \u0026quot;3\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;TRP\u0026quot; RoomID = \u0026quot;44\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Triple\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;TRP\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;4\u0026quot; MaxOccupancy = \u0026quot;4\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;TRP\u0026quot; RoomID = \u0026quot;44\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Triple\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;TRP\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;TRP\u0026quot; RoomID = \u0026quot;44\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Triple\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Derivada Test\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;BookingRules\u0026gt; \u0026lt;BookingRule\u0026gt; \u0026lt;CancelPenalties\u0026gt; \u0026lt;CancelPenalty NonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Deadline OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;10\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent Amount = \u0026quot;2.00\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;BookingRule\u0026gt; \u0026lt;Viewerships\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LocationCode CountryCode = \u0026quot;ES\u0026quot;/\u0026gt; \u0026lt;/LocationCodes\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;/Viewerships\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;/BookingRules\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;TarifaDerivada\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanInventoryRetrieveResult\u0026gt; \u0026lt;/HotelRatePlanInventoryRetrieveResponse\u0026gt;     Element Number Type Description     HotelRatePlanResponse/HotelRatePlanResult 1  Root Node   Success 0..1  Should only be present if it was a successful response. The Errors node should not be present if the Success node is present.   RatePlans 0..1  Present when sucess   @HotelCode 1 String Hotel code whose information is provided by the method.   @HotelName 1 String Hotel name.   @HotelStatusType 1 String Active or Deactivated.   RatePlans/RatePlan 0..n  Present when rates exists.   @RatePlanCode 1 String Rate plan code.   @RatePlanStatusType 1 String Active or Deactivated.   @RatePlanType 0..1 Integer OTA RPT Code (0 Not Selected, 7 - Large Family, 8 - Public Servant, 10 - Negotiated, 11 - Package, 34 - Canary Resident, 35 - Balearic Resident, 36 - Honeymoon ).   @YieldableIndicator 0..1 Boolean Used to indicate the rate plan is subject to yield management logic. When false, the rate plan is not yieldable. When true or it\u0026rsquo;s not returned, the rate plan is yieldable.   @CurrencyCode 0..1 String ISO Currency (EUR). Only null for derived rates.   @Start 0..1 Date Start date of the rate booking window (Booking Dates for wich the rate will be available).   @End 0..1 Date End date of the rate booking window (Booking Dates for wich the rate will be available).   @Duration 0..1 String Duration of the rate booking window. Only present if Start and End are not. When present value is always 0 and means the rate has no booking window (available all dates).   @BaseRatePlanCode 0..1 String Rate plan code of the base rate plan. Only returned for derived rates.   @RatePlanStatusType 1 String Indicates if the rate plan is active or not for this dates. Possible values: \u0026ldquo;Active\u0026rdquo;, \u0026ldquo;Deactivated\u0026rdquo;.   @PromotionCode 0..1 String Promotion code to apply. 0 - NoPromotion, 25 - Senior55 26 - Senior60, 27 - Senior65. If the attribute is not present or its value is 0 there is no promotion   @FreeBaby 1 Boolean Free babies promotion   @FreeChild 1 Boolean Free children promotion   RatePlans/RatePlan/Description/Text 1  Description of rate.   RatePlans/BookingRules 0..1  Present if exists booking rules for the given RatePlan.   BookingRules/BookingRule 1..n  Booking rules.   @Code 0..1 String Code of the booking rule (empty if are viewships conditions).   BookingRule/CancelPenalties 1  Cancel penalties of the current booking rule.   CancelPenalties/CancelPenalty 1..n  Cancel penalty.   @NonRefundable 1 Boolean Indicates if the rateplan is refundable or not.   CancelPenalty/Deadline 1  Contains information about the the deadline of the cancel penalty.   @OffsetTimeUnit 1 String Indicates the units of time that apply to the deadline.   @OffsetUnitMultiplier 1 Integer The number of units of DeadlineTimeUnit.   @OffsetDropTime 1 String Indicating when the deadline drop time goes into effect.   CancelPenalty/AmountPercent 1  Contains information about the the deadline of the cancel penalty.   @NmbrOfNights 0..1 Integer Number of nights that will be charged in case of cancellation applying the current cancel penalty. NmbrOfNights, Percent or Amount must be present.   @Percent 0..1 Decimal Percent of the total amount that will be charged in case of cancellation applying the current cancel penalty. NmbrOfNights, Percent or Amount must be present.   @Amount 0..1 Decimal Amount that will be charged in case of cancellation applying the current cancel penalty. NmbrOfNights, Percent or Amount must be present.   @CurrencyCode 0..1 String Currency code of the amount. Must be present if amount is present.   BookingRule/Viewerships 0..1  Present if exits viewerships conditions.   BookingRule/Viewerships/Viewership 1..n     BookingRule/Viewerships/Viewership/LocationCodes 1  One node for each viewership condition.   @LocationCodesInclusive 1 Boolean When its true this rate can be request for next countryCode, when false can not be requested from this country.   BookingRule/Viewerships/Viewership/LocationCodes/LocationCode 0..1  If is missing, applies to all countryCode againthe other viewership condition.   @CountryCode 1 String Country ISO2 code from can or can not be requested this rate.   RatePlan/Rate 0..1  Node that contains information about the rate. Only null for derived rates.   Rate/AdditionalGuestAmounts 1  Node that contains static information about additional guests.   AdditionalGuestAmounts/AdditionalGuestAmount 1..n  Static information about additional guests.   @AgeQualifyingCode 1  String Age qualifying code of the additional guest.   @MaxAge 1 Integer Max age not inclusive of the additional guest.   Rate/PaymentPolicies 1  Node that contains the accepted payments information.   PaymentPolicies/GuaranteePayment 1..n  Node that contains information about an accepted payment.   @PaymentCode 1  Contains the payment method accepted by the rate. See Payment Type Codes list in section 7.6.3.   GuaranteePayment/AcceptedPayments 0..1  Node that contains the accepted payments information. Only present if PaymentCode is not \u0026ldquo;MerchantPayment\u0026rdquo;.   AcceptedPayments/AcceptedPayment 1..n  Node that contains the credit card accepted.   AcceptedPayment/PaymentCard 1..n  Node that contains the credit card accepted.   @CardCode 1 String Contains the credit card code. See Credit Card Codes list in section 7.6.4.   RatePlans/RatePlan/Rates/Rate/MealsIncluded 0..1  Present if board is included with this rate.   @MealPlanCodes 1 Integer OTA MPT Code.   RatePlans/RatePlan/Offers 0..1  Node that contains the offers a rate can have   RatePlans/RatePlan/Offers/Offer 1..n  Offer itself   @OfferCode 1 Integer Code to identify the Offer   @OfferStatusType 1 String Active or Deactivated   RatePlans/RatePlan/Offers/Offer/OfferRules 1  Node that contains the OfferRules   RatePlans/RatePlan/Offers/Offer/OfferRules/OfferRule 1  Rules that need to happen in order to apply the offer   RatePlans/RatePlan/Offers/Offer/OfferRules/OfferRule/DateRestriction 0..1  Dates that restrict the offer   @Start 1 Date Date in which the offer starts   @End 1 Date Date in which the offer ends   RatePlans/RatePlan/Offers/Offer/OfferRules/OfferRule/LenghtsOfStay 0..1  Node that contains Lengh of Stays   @ArrivalDateBased 1 Boolean    RatePlans/RatePlan/Offers/Offer/OfferRules/OfferRule/LenghtsOfStay/LengthOfStay 1..n  Length of Stay Restrictions   @Time 1 Integer Days of the Lenght of Stay   @MinMaxMessageType 1 String MinLOS or MaxLOS   RatePlans/RatePlan/Offers/Offer/OfferRules/OfferRule/DOW_Restrictions 1  Node that contains Days of The Week rules   RatePlans/RatePlan/Offers/Offer/OfferRules/OfferRule/DOW_Restrictions/AvailableDaysOfWeek 1  Offer days available   @Mon\u0026hellip;Sun 1 Boolean Days from Monday to Sunday. If false, the offer does not apply on that day   RatePlans/RatePlan/Offers/Offer/Discount 1  Discount that the offer would have. Currently, only free nights allowed   @NightsDiscounted 1 Integer Number of nights that would be substracted from the final price   @DiscountPattern 1 String First, last or cheapest night/s to be discounted   RatePlans/RatePlan/Offers/Offer/OfferDescription 1  Description of the Offer   RatePlans/RatePlan/Offers/Offer/OfferDescription/Text 1 String Where the text goes   RatePlans/RatePlan/SellableProducts 0..1  List of sellable products. In derived rates, if it is not present it applies to all rooms. In other cases, it informs the rooms that applies.   RatePlans/RatePlan/SellableProducts/SellableProduct 0..n  Present if rooms associed with this rate.   @InvCode 1 Integer Sellable Product Code.   @InvType 1 Integer Sellable product type (ROOM).   @InvStatusType 1 String Active or Deactivated.   @InvTypeCode 1 String Sellers internal Product Code. Channels can ignore.   RatePlans/RatePlan/SellableProduct/GuestRoom 1..n     RatePlans/RatePlan/SellableProduct/GuestRoom/Quantities 1     @StandardNumBeds 1 Integer Standard occupation of room.   RatePlans/RatePlan/SellableProduct/GuestRoom/Occupancy 1     @MinOccupancy 1 Integer Min occupation.   @MaxOccupancy 1 Integer Max occupation.   @AgeQualifyingCode 1 Integer (10 - Adult,8 - Child,7 - Infant).   RatePlans/RatePlan/SellableProduct/GuestRoom/Description/Text 1 String Room description.   RatePlans/RatePlan/AdditionalDetails 0..1  Rate plan additional details   RatePlans/RatePlan/AdditionalDetails/AdditionalDetail 0..n  List of additional details   @Code 1 String Trading partner code associated with the detail.   @Type 1 String Define the information. Only allowed \u0026ldquo;39\u0026rdquo; (Contract/negotiated booking information)   RatePlans/RatePlan/AdditionalDetails/AdditionalDetail/DetailDescription 1  Details Description   RatePlans/RatePlan/AdditionalDetails/AdditionalDetail/DetailDescription/Text 1 String Description. If additional details type is \u0026ldquo;39\u0026rdquo;, the name of the trading partner for this rate.    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/booking-flow/hotelresretrieve/",
	"title": "HotelResRetrieve",
	"tags": [],
	"description": "HotelResRetrieve message",
	"content": " Providers will send a HotelResRetrieveRQ message to retrieve a list of a seller\u0026rsquo;s reservations.\nYou can find the authentication method for these messages here\n HotelResRetrieveRQ XML Example\n\u0026lt;HotelResRetrieve\u0026gt; \u0026lt;request\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;/\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;/\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;UniqueID ID = \u0026quot;123456\u0026quot; ID_Context = \u0026quot;Client\u0026quot;/\u0026gt; \u0026lt;ReadRequests\u0026gt; \u0026lt;HotelReadRequest HotelCode=\u0026quot;1608\u0026quot;\u0026gt; \u0026lt;SelectionCriteria Start=\u0026quot;2013-11-25\u0026quot; End=\u0026quot;2013-11-28\u0026quot; DateType=\u0026quot;DepartureDate\u0026quot;/\u0026gt; \u0026lt;/HotelReadRequest\u0026gt; \u0026lt;HotelReadRequest\u0026gt; \u0026lt;SelectionCriteria Start = \u0026quot;2015-12-23\u0026quot; End = \u0026quot;2015-12-28\u0026quot; DateType = \u0026quot;ArrivalDate\u0026quot;/\u0026gt; \u0026lt;/HotelReadRequest\u0026gt; \u0026lt;/ReadRequests\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelResRetrieve\u0026gt;     Element Number Type Description     HotelResRetrieve/request 1  Root Node.   UniqueID 0..1  If present filter by UniqueID content.   @ID 1 String Booking ID.   @IDContext 1 String (Client, Provider, Internal).   ReadRequests 0..1  If present filter by its content.   ReadRequests/HotelReadRequest 1..n  Node containing the read request data.   @HotelCode 0..1 String Hotel code.   HotelReadRequest/SelectionCriteria 1     @Start 1 DateTime Start date to search bookings. DateTime Format is yyyy-MM-ddThh:mm:ss Date must be in UTC.   @End 1 DateTime End date to search bookings. DateTime Format is yyyy-MM-ddThh:mm:ss Date must be in UTC.   @DateType 1 String (ArrivalDate, CreateDate, DepartureDate, LastUpdateDate).    HotelResRetrieveRS \u0026lt;HotelResRetrieveResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/client/2012/10\u0026quot;\u0026gt; \u0026lt;HotelResRetrieveResult Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;Success xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;/\u0026gt; \u0026lt;HotelReservations xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;HotelReservation ResStatus = \u0026quot;Confirmed\u0026quot; CreateDateTime = \u0026quot;2013-09-01T11:09:57.5387811Z\u0026quot;\u0026gt; \u0026lt;RoomStays\u0026gt; \u0026lt;RoomStay\u0026gt; \u0026lt;RoomTypes\u0026gt; \u0026lt;RoomType RoomTypeCode = \u0026quot;STD1\u0026quot; RoomID = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;RoomDescription\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/RoomDescription\u0026gt; \u0026lt;/RoomType\u0026gt; \u0026lt;/RoomTypes\u0026gt; \u0026lt;RatePlans\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;BAR\u0026quot;\u0026gt; \u0026lt;RatePlanDescription\u0026gt; \u0026lt;Text\u0026gt;Best Available Rate\u0026lt;/Text\u0026gt; \u0026lt;/RatePlanDescription\u0026gt; \u0026lt;Commission Percent = \u0026quot;15.00\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;RoomRates\u0026gt; \u0026lt;RoomRate BookingCode=\u0026quot;1|30#30|12|2013-09-03|13|4510741|4510747|3|0|0\u0026quot; EffectiveDate = \u0026quot;2013-09-03\u0026quot; ExpireDate = \u0026quot;2013-09-07\u0026quot; RoomTypeCode = \u0026quot;STD1\u0026quot; InvBlockCode = \u0026quot;7\u0026quot; NumberOfUnits=\u0026quot;5\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; RoomID = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2013-09-03\u0026quot; ExpireDate = \u0026quot;2013-09-07\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;200.00\u0026quot; AmountAfterTax = \u0026quot;200.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;CancelPolicies\u0026gt; \u0026lt;CancelPenalty PolicyCode = \u0026quot;0912f3bc-40cc-4566-a5d7-0d2833ab62de\u0026quot;/\u0026gt; \u0026lt;CancelPenalty PolicyCode = \u0026quot;cd4aa15e-82e4-420a-937e-63e802ba352a\u0026quot;/\u0026gt; \u0026lt;/CancelPolicies\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Total AmountBeforeTax = \u0026quot;200.00\u0026quot; AmountAfterTax = \u0026quot;200.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/RoomRate\u0026gt; \u0026lt;/RoomRates\u0026gt; \u0026lt;CancelPenalties\u0026gt; \u0026lt;CancelPenalty PolicyCode = \u0026quot;0912f3bc-40cc-4566-a5d7-0d2833ab62de\u0026quot; NonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Deadline AbsoluteDeadline = \u0026quot;2013-08-29\u0026quot; OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;5\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent Percent = \u0026quot;15.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty PolicyCode = \u0026quot;cd4aa15e-82e4-420a-937e-63e802ba352a\u0026quot; NonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Deadline AbsoluteDeadline = \u0026quot;2013-08-31\u0026quot; OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;3\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent NmbrOfNights = \u0026quot;2\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;BasicPropertyInfo HotelCode = \u0026quot;12\u0026quot; HotelName = \u0026quot;Adagio City Aparthotel Annecy Centre\u0026quot;/\u0026gt; \u0026lt;ServiceRPHs\u0026gt; \u0026lt;ServiceRPH RPH = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;ServiceRPH RPH = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/ServiceRPHs\u0026gt; \u0026lt;/RoomStay\u0026gt; \u0026lt;/RoomStays\u0026gt; \u0026lt;ResGuests\u0026gt; \u0026lt;ResGuest ResGuestRPH = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;\u0026gt; \u0026lt;Profiles\u0026gt; \u0026lt;ProfileInfo\u0026gt; \u0026lt;Profile\u0026gt; \u0026lt;Customer\u0026gt; \u0026lt;PersonName\u0026gt; \u0026lt;NamePrefix\u0026gt;Mr\u0026lt;/NamePrefix\u0026gt; \u0026lt;GivenName\u0026gt;Test11\u0026lt;/GivenName\u0026gt; \u0026lt;Surname\u0026gt;TestAp11\u0026lt;/Surname\u0026gt; \u0026lt;/PersonName\u0026gt; \u0026lt;/Customer\u0026gt; \u0026lt;/Profile\u0026gt; \u0026lt;/ProfileInfo\u0026gt; \u0026lt;/Profiles\u0026gt; \u0026lt;GuestCounts\u0026gt; \u0026lt;GuestCount Age = \u0026quot;30\u0026quot;/\u0026gt; \u0026lt;/GuestCounts\u0026gt; \u0026lt;/ResGuest\u0026gt; \u0026lt;ResGuest ResGuestRPH = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;\u0026gt; \u0026lt;Profiles\u0026gt; \u0026lt;ProfileInfo\u0026gt; \u0026lt;Profile\u0026gt; \u0026lt;Customer\u0026gt; \u0026lt;PersonName\u0026gt; \u0026lt;NamePrefix\u0026gt;Mr\u0026lt;/NamePrefix\u0026gt; \u0026lt;GivenName\u0026gt;Test22\u0026lt;/GivenName\u0026gt; \u0026lt;Surname\u0026gt;TestAp22\u0026lt;/Surname\u0026gt; \u0026lt;/PersonName\u0026gt; \u0026lt;/Customer\u0026gt; \u0026lt;/Profile\u0026gt; \u0026lt;/ProfileInfo\u0026gt; \u0026lt;/Profiles\u0026gt; \u0026lt;GuestCounts\u0026gt; \u0026lt;GuestCount Age = \u0026quot;30\u0026quot;/\u0026gt; \u0026lt;/GuestCounts\u0026gt; \u0026lt;/ResGuest\u0026gt; \u0026lt;/ResGuests\u0026gt; \u0026lt;ResGlobalInfo\u0026gt; \u0026lt;Total AmountBeforeTax = \u0026quot;200.00\u0026quot; AmountAfterTax = \u0026quot;200.00\u0026quot; CurrencyCode = \u0026quot;USD\u0026quot;/\u0026gt; \u0026lt;Guarantee PaymentCode = \u0026quot;MerchantPayment\u0026quot;/\u0026gt; \u0026lt;HotelReservationIDs\u0026gt; \u0026lt;HotelReservationID ResID_Value = \u0026quot;123456\u0026quot; ResID_SourceContext = \u0026quot;Client\u0026quot;/\u0026gt; \u0026lt;HotelReservationID ResID_Value = \u0026quot;124\u0026quot; ResID_SourceContext = \u0026quot;Internal\u0026quot;/\u0026gt; \u0026lt;HotelReservationID ResID_Value = \u0026quot;115137\u0026quot; ResID_SourceContext = \u0026quot;Provider\u0026quot;/\u0026gt; \u0026lt;/HotelReservationIDs\u0026gt; \u0026lt;Profiles\u0026gt; \u0026lt;ProfileInfo\u0026gt; \u0026lt;Profile\u0026gt; \u0026lt;Customer\u0026gt; \u0026lt;PersonName\u0026gt; \u0026lt;NamePrefix\u0026gt;Mr\u0026lt;/NamePrefix\u0026gt; \u0026lt;GivenName\u0026gt;Test12\u0026lt;/GivenName\u0026gt; \u0026lt;Surname\u0026gt;TestAp12\u0026lt;/Surname\u0026gt; \u0026lt;/PersonName\u0026gt; \u0026lt;Telephone PhoneTechType = \u0026quot;1\u0026quot; PhoneNumber = \u0026quot;1212121212\u0026quot; FormattedInd = \u0026quot;false\u0026quot; DefaultInd = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;Email DefaultInd = \u0026quot;true\u0026quot; EmailType = \u0026quot;1\u0026quot;\u0026gt;test@yourdomain.com\u0026lt;/Email\u0026gt; \u0026lt;Address Type = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;AddressLine\u0026gt;B-15, Sector-57\u0026lt;/AddressLine\u0026gt; \u0026lt;CityName\u0026gt;NOIDA\u0026lt;/CityName\u0026gt; \u0026lt;PostalCode\u0026gt;201301\u0026lt;/PostalCode\u0026gt; \u0026lt;StateProv StateCode = \u0026quot;UP\u0026quot;\u0026gt;Uttar Pradesh\u0026lt;/StateProv\u0026gt; \u0026lt;CountryName Code = \u0026quot;IN\u0026quot;\u0026gt;INDIA\u0026lt;/CountryName\u0026gt; \u0026lt;/Address\u0026gt; \u0026lt;/Customer\u0026gt; \u0026lt;/Profile\u0026gt; \u0026lt;/ProfileInfo\u0026gt; \u0026lt;/Profiles\u0026gt; \u0026lt;/ResGlobalInfo\u0026gt; \u0026lt;/HotelReservation\u0026gt; \u0026lt;/HotelReservations\u0026gt; \u0026lt;/HotelResRetrieveResult\u0026gt; \u0026lt;/HotelResRetrieveResponse\u0026gt;     Element Number Type Description     HotelResRetrieveResponse 1  Root Node.   HotelResRetrieveResponse/HotelResRetrieveResult 1  Contains the result of reservation retrieve.   HotelResRetrieveResult/Success 0..1  Should only be present if it was a successful response. The Errors node should not be present if the Success node is present.   HotelResRetrieveResult/HotelReservations 0..1  Node containing the reservation.   HotelReservations/HotelReservation 1  Node containing information about the reservation.   @ResStatus 1 String Status of the reservation. Possible status are: \u0026lsquo;Confirmed\u0026rsquo;, \u0026lsquo;Requested\u0026rsquo; and \u0026lsquo;Cancelled\u0026rsquo;.   @CreateDateTime 1 DateTime Date and time when the reservation was made.   @LastModifyDateTime 0..1 DateTime Date and time when the reservation was modified. Should only be present if the reservation status is \u0026lsquo;Cancelled\u0026rsquo;.   HotelReservation/RoomStays 1  Node containing the RoomStays of the reservation.   RoomStays/RoomStay 1..n  Node containing RoomStay information.   RoomStay/RoomTypes 1  Node containing information about rooms.   RoomTypes/RoomType 1  Node containing information about one room.   @RoomTypeCode 1 String Room code.   @RoomID 1 String Id of the room.   RoomType/RoomDescription 1  Node containing the description of the room.   RoomDescription/Text 1 String Description of the room.   RoomStay/RatePlans 1  Node containing information about RatePlans.   RatePlans/RatePlan 1  Node containing information about one RatePlan.   @RatePlanCode 1  RatePlan code.   RatePlan/RatePlanDescription 1  Node containing information the RatePlan description one RatePlan.   RatePlanDescription/Text 1 String Description of the RatePlan.   RatePlan/Commission 1  Node containing the commission of the RatePlan.   Percent 1 Decimal Commission of the RatePlane.   RoomStay/RoomRates 1  Node containing information about RoomRates.   RoomRates/RoomRate 1  Node containing information about one RoomRate.   @BookingCode 1 String TravelgateX internal data. Do not use.   @EffectiveDate 1 Date Effective date when the RoomRate start applying.   @ExpireDate 1 Date Expire date when the RoomRate ends applying. Check out night minus 1.   @RoomTypeCode 1 String Code of the Room.   @InvBlockCode 1 String Inventary block code.   @RatePlanCode 1 String Code of the RatePlan.   @RoomID 1 String Id of the room.   @NumberOfUnits 1 String Number of rooms available for this room type.   RoomRate/Rates 1  Node containing information about the rates.   Rates/Rate 1  Node containing information about one rate.   @EffectiveDate 1 Date Effective date when the Rate start applying.   @ExpireDate 1 Date Expire date when the Rate ends applying.   Rate/Base 1  Node containing core information about the rate.   @AmountBeforeTax 0..1 Decimal Amount before tax of the rate.   @AmountAfterTax 1 Decimal Amount after tax of the rate.   @CurrencyCode 1 String Currency code of the rate.   Rate/CancelPolicies 1  Node containing information about cancel policies which are applied to the rate.   CancelPolicies/CancelPenalty 0..n  Node containing information about one cancel penalty.   @PolicyCode 1 String Policy code of the cancel penalty.   RoomRate/Total 1  Node containing information about the total price of the RoomRate.   @AmountBeforeTax 0..1 Decimal Amount before tax of the RoomRate.   @AmountAfterTax 1 Decimal Amount after tax of the RoomRate.   @CurrencyCode 1 String Currency code of the RoomRate.   RoomStay/CancelPenalties 1  Node containing all cancel penalties of the RoomStay.   CancelPenalties/CancelPenalty 0..n  Node containing information about one cancel penalty.   @PolicyCode 1 String Policy code of the cancel penalty.   @NonRefundable 1 Boolean Indicates whether the Rate is refundable or not.   CancelPenalty/Deadline 0..n  Node containing information about the deadline of the cancel penalty.   @AbsoluteDeadline 1 DateTime Indicates when the absolute deadline.   @OffsetTimeUnit 1 String Time unit of the offset for the absolute deadline.   @OffsetUnitMultiplier 1 Integer Number of time units of offset for the absolute ege deadline.   @OffsetDropTime 1 String Indicates when the deadline is applied.   CancelPenalty/AmountPercent 0..n  Amount of the cancel penalty.   @Percent 1 String Percent of the total charged as a cancel penalty amount. Percent or NmbrOfNights must be present.   @NmbrOfNights 1 String Number of nights charged as a cancel penalty amount.   @CurrencyCode 1 String Currency code of the cancel penalty amount.   RoomStay/BasicPropertyInfo 1  Node containing basic information of the property.   RoomStay/ServiceRPHs 1  Node containing information of the guests of the room.   ServiceRPHs/ServiceRPH 1..n  Node containing information of a guest of the room.   @RPH 1 String Code of a guest of the room. Match with @ResGuestRPH at the ResGuests node.   HotelCode 1 Integer Hotel code.   HotelName 1 String Hotel name.   HotelReservation/ResGuests 1  Node containing all reservation guests.   ResGuests/ResGuest 1..n  Node containing information about one of the guests.   ResGuest/ResGuest 1..n  Node containing information about one of the guests.   @ResGuestRPH 1 Integer RPH of the guest.   @AgeQualifyingCode 1 Integer Age qualifying code of the guest.   ResGuest/Profiles 1  Node containing information about the profiles of the guest.   Profiles/ProfileInfo 1  Node containing information about the profile of the guest.   ProfileInfo/Customer 1  Node containing customer information of the guest.   Customer/PersonName 1  Node containing the person name of the guest.   PersonName/NamePrefix 1 String Prefix/Traitement name of the guest.   PersonName/GivenName 1 String Given name of the guest.   PersonName/Surname 1 String Surname of the guest.   ResGuest/GuestCounts 1  Node containing quantity informations for the guest.   GuestCounts/GuestCount 1  Node containing quantity information for the guest.   @Age 1 Integer Age of the guest.   ResGlobalInfo 1  Node containing general information about the reservation.   ResGlobalInfo/Total 1  Node containing the total price.   @AmountBeforeTax 0..1 Decimal Amount before tax of the Reservation.   @AmountAfterTax 1 Decimal Amount after tax of the Reservation.   @CurrencyCode 1 String Currency code of the Reservation.   ResGlobalInfo/Guarantee 0..1  Node containing the Guarantee provided with the reservation.   @PaymentCode 1  Contains the payment method accepted by the rate. See Payment Type Codes list in section 7.6.3.   Guarantee/GuaranteesAccepted 0..1  Node containing the Guarantee provided with the reservation.   GuaranteesAccepted/GuaranteeAccepted 1  Node that contains the booking payment details accepted.   GuaranteeAccepted/PaymentCard 1  Node that contains the credit card accepted. The credit card information can be a URL with the information(in TPA_Extension tag) or the details in the PaymentCard tags and attributes.   @CardCode 1 String Contains the credit card code. See Credit Card Codes list in section 7.6.4.   @ExpireDate 0..1 String This is the expiry date of the credit card used for deposit/prepayment. Format MMyy.   PaymentCard/CardHolderName 0..1 String PaymentCard / CardHolderName.   PaymentCard/CardNumber/PlainText 0..1 String This is actual number of the credit card used for deposit/prepayment.   PaymentCard/SeriesCode/PlainText 0..1 String The SeriesCode attribute is used (Optionally) for the security number of the card.   PaymentCard/TPA_Extensions 0..1  Optional, contains credit card URL.   Param 1     @key 1 String URL.   @value 1 String URL where the Credit card details are stored.   ResGlobalInfo/HotelReservationIDs 1  Node containing the ids of the reservation.   HotelReservationIDs/HotelReservationID 2  Node containing information of one reservation id.   @ResIDValue_ 1 String Value of the id.   @ResIDSourceContext_ 1 String Id context.   ResGlobalInfo/Profiles 1  Node containing information about the profiles of the reservation.   Profiles/ProfileInfo 1  Node containing information about the profile of the reservation.   ProfileInfo/Profile 1  Node containing information about the profile of the reservation.   Profile/Customer 1  Node containing information about the customer of the reservation. The customer of the reservation can be or not a pax of the reservation. If it\u0026rsquo;s a pax will be present in ResGuests node.   Customer/PersonName 1  Node containing the person name of the customer of the reservation.   PersonName/NamePrefix 1 String Name prefix of the customer.   PersonName/GivenName 1 String Given name of the customer.   PersonName/Surname 1 String Surname of the customer.   Customer/Telephone 1  Node containing information about the telephone of the customer.   @PhoneTechType 1 String Phone technology type.   @PhoneNumber 1 String Phone number.   @FormattedInd 1 String Indicates whether associated data is formatted or not.   @DefaultInd 1 String When true, indicates a default value should be used.   Customer/Email 1  Node containing information about the email of the customer.   @DefaultInd 1 String When true, indicates a default value should be used.   @EmailType 1 String Indicates the type of the email.   Value 1 String Email of the customer.   Customer/Address 1  Node containing information about the address of the customer.   Address/AddressLine 1 String Address of the customer.   Address/CityName 1 String City name.   Address/PostalCode 1 String Postal code.   Address/StateProv 1 String Node containing information about the state or the province of the customer.   @StateCode 1 String State code.   Value 1 String State or province name.   Address/CountryName 1 String Country name.   @Code 1 String Country code.   Value 1 String Country name.    Example Guarantee object with credit card details\n\u0026lt;Guarantee PaymentCode=\u0026quot;DirectPayment\u0026quot;\u0026gt; \u0026lt;GuaranteesAccepted\u0026gt; \u0026lt;GuaranteeAccepted\u0026gt; \u0026lt;PaymentCard ExpireDate=\u0026quot;0614\u0026quot; CardCode =\u0026quot;VI\u0026quot;\u0026gt; \u0026lt;CardHolderName\u0026gt;John Smith\u0026lt;/CardHolderName\u0026gt; \u0026lt;CardNumber\u0026gt; \u0026lt;PlainText\u0026gt;4321432143214327\u0026lt;/PlainText\u0026gt; \u0026lt;/CardNumber\u0026gt; \u0026lt;SeriesCode\u0026gt; \u0026lt;PlainText\u0026gt;123\u0026lt;/PlainText\u0026gt; \u0026lt;/SeriesCode\u0026gt; \u0026lt;/PaymentCard\u0026gt; \u0026lt;/GuaranteeAccepted\u0026gt; \u0026lt;/GuaranteesAccepted\u0026gt; \u0026lt;/Guarantee\u0026gt;  Example Guarantee object with URL for credit card details\n\u0026lt;Guarantee PaymentCode=\u0026quot;DirectPayment\u0026quot;\u0026gt; \u0026lt;GuaranteesAccepted\u0026gt; \u0026lt;GuaranteeAccepted\u0026gt; \u0026lt;PaymentCard\u0026gt; \u0026lt;TPA_Extensions\u0026gt; \u0026lt;Param key = \u0026quot;URL\u0026quot; value = \u0026quot;http://www.exampleUrl.com/\u0026quot;/\u0026gt; \u0026lt;/TPA_Extensions\u0026gt; \u0026lt;/PaymentCard\u0026gt; \u0026lt;/GuaranteeAccepted\u0026gt; \u0026lt;/GuaranteesAccepted\u0026gt; \u0026lt;/Guarantee\u0026gt;  "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelruntimeconfiguration/",
	"title": "HotelRuntimeConfiguration",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelRuntimeConfiguration {  code: ID!    hotelRuntimeConfigurationData: HotelRuntimeConfigurationData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   hotelRuntimeConfigurationData(HotelRuntimeConfigurationData):   createdAt(DateTime!):   updatedAt(DateTime!):   adviseMessage([AdviseMessage!]):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelruntimeconfigurationdata/",
	"title": "HotelRuntimeConfigurationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelRuntimeConfigurationData {  hotelRuntimeParameters: [HotelRuntimeParameter!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotelRuntimeParameters([HotelRuntimeParameter!]!):    Required by HotelRuntimeConfiguration:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelruntimeparameter/",
	"title": "HotelRuntimeParameter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelRuntimeParameter {  tagRuntime: TagRuntimeType!    providerTagName: String!    show: Boolean!    pattern: String    description: String!    type: MetadataType!    key: String    defaultValue: String    exampleValue: String    possibleValues: [String]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields tagRuntime(TagRuntimeType!):   providerTagName(String!):   show(Boolean!):   pattern(String):   description(String!):   type(MetadataType!):   key(String):   defaultValue(String):   exampleValue(String):   possibleValues([String]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelsearch/",
	"title": "HotelSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelSearch {  context: String    stats( token: String!, ): StatsRequest    auditData: AuditData    requestCriteria: CriteriaSearch    options: [HotelOptionSearch!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String):   stats(StatsRequest):   auditData(AuditData):   requestCriteria(CriteriaSearch):   options([HotelOptionSearch!]):   errors([Error!]):   warnings([Warning!]):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelsettingsinput/",
	"title": "HotelSettingsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelSettingsInput {  context: String    useContext: Boolean    connectUser: String    client: ID    group: ID    timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    suppliers: [HotelXSupplierInput!]    plugins: [PluginStepInput!]    testMode: Boolean    clientTokens: [String!]    commitRequired: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String):   useContext(Boolean):   connectUser(String):   client(ID):   group(ID):   timeout(Int):   auditTransactions(Boolean):   businessRules(BusinessRulesInput):   suppliers([HotelXSupplierInput!]):   plugins([PluginStepInput!]):   testMode(Boolean):   clientTokens([String!]):   commitRequired(Boolean):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxaccessinput/",
	"title": "HotelXAccessInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXAccessInput {  accessId: ID!    configuration: ConfigurationInput    settings: SettingsBaseInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields accessId(ID!):   configuration(ConfigurationInput):   settings(SettingsBaseInput):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxamenity/",
	"title": "HotelXAmenity",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXAmenity {  code: ID!    amenityData: HotelXAmenityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   amenityData(HotelXAmenityData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by HotelXAmenityEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxamenityconnection/",
	"title": "HotelXAmenityConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXAmenityConnection {  edges: [HotelXAmenityEdge!]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([HotelXAmenityEdge!]):   pageInfo(PageInfo!):    Required by HotelData:    RoomData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxamenitydata/",
	"title": "HotelXAmenityData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXAmenityData {  code: ID!    amenityCode: String!    type: ApplicationAreaType!    texts( languages: [Language!], ): [Text!]!    value( languages: [Language!], ): [Text!]!    mappings: [HotelXMappedCode!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   amenityCode(String!):   type(ApplicationAreaType!):   texts([Text!]!):   value([Text!]!):   mappings([HotelXMappedCode!]):    Required by HotelXAmenity:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxamenityedge/",
	"title": "HotelXAmenityEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXAmenityEdge {  node: HotelXAmenity!    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(HotelXAmenity!):   cursor(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxboardqueryinput/",
	"title": "HotelXBoardQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXBoardQueryInput {  boardCodes: [String!]    access: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields boardCodes([String!]):   access(ID!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxbusinessrulesinput/",
	"title": "HotelXBusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXBusinessRulesInput {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields optionsQuota(Int!):   businessRulesType(BusinessRulesType!):    Required by HotelXDefaultSettingsDataInput:    HotelXCommonSettingsDataInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxcategoryqueryinput/",
	"title": "HotelXCategoryQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCategoryQueryInput {  categoryCodes: [String!]    access: ID    group: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields categoryCodes([String!]):   access(ID):   group(ID):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxcommitreferenceinput/",
	"title": "HotelXCommitReferenceInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommitReferenceInput {  supplier: String    client: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplier(String):   client(String):    Required by HotelCommitInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxcommonsettings/",
	"title": "HotelXCommonSettings",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommonSettings {  settings: HotelXCommonSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields settings(HotelXCommonSettingsData):   adviseMessage([AdviseMessage!]):    Required by HotelXQuery:    HotelXMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxcommonsettingsdata/",
	"title": "HotelXCommonSettingsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommonSettingsData {  currency: Currency    businessRules: BusinessRules    timeout: Timeout   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency):   businessRules(BusinessRules):   timeout(Timeout):    Required by HotelXCommonSettings:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxcommonsettingsdatainput/",
	"title": "HotelXCommonSettingsDataInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCommonSettingsDataInput {  currency: Currency!    businessRules: HotelXBusinessRulesInput!    timeout: TimeoutInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!):   businessRules(HotelXBusinessRulesInput!):   timeout(TimeoutInput!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxdefaultplugin/",
	"title": "HotelXDefaultPlugin",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPlugin {  step: PluginStepType!    type: PluginType!    name: String!    run: [HotelXParameter!]    init: [HotelXParameter!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!):   run([HotelXParameter!]):   init([HotelXParameter!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxdefaultplugininput/",
	"title": "HotelXDefaultPluginInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPluginInput {  step: PluginStepType!    type: PluginType!    name: String!    run: [ParameterInput!]    init: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   type(PluginType!):   name(String!):   run([ParameterInput!]):   init([ParameterInput!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxdefaultpluginstep/",
	"title": "HotelXDefaultPluginStep",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPluginStep {  step: String!    plugins: [HotelXDefaultPlugin!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(String!):   plugins([HotelXDefaultPlugin!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxdefaultpluginstepinput/",
	"title": "HotelXDefaultPluginStepInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultPluginStepInput {  step: PluginStepType!    plugins: [HotelXDefaultPluginInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   plugins([HotelXDefaultPluginInput!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxdefaultsettings/",
	"title": "HotelXDefaultSettings",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultSettings {  settings: HotelXDefaultSettingsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields settings(HotelXDefaultSettingsData):   adviseMessage([AdviseMessage!]):    Required by HotelXQuery:    HotelXMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxdefaultsettingsdata/",
	"title": "HotelXDefaultSettingsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultSettingsData {  context: String!    language: Language!    currency: Currency!    nationality: Country!    markets: [String!]!    timeout: Timeout!    businessRules: BusinessRules!    accesses: [String!]    cache: [String!]    plugins: [HotelXDefaultPluginStep!]   Show deprecated fields   market: : String // deprecated from 2019-12-11     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String!):   language(Language!):   currency(Currency!):   nationality(Country!):   market(String):   markets([String!]!):   timeout(Timeout!):   businessRules(BusinessRules!):   accesses([String!]):   cache([String!]):   plugins([HotelXDefaultPluginStep!]):    Required by HotelXDefaultSettings:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxdefaultsettingsdatainput/",
	"title": "HotelXDefaultSettingsDataInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDefaultSettingsDataInput {  context: String!    language: Language!    currency: Currency!    nationality: Country!    market: String    markets: [String!]    timeout: TimeoutInput!    businessRules: HotelXBusinessRulesInput!    defaultAccesses: [ID!]    defaultPlugins: [HotelXDefaultPluginStepInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String!):   language(Language!):   currency(Currency!):   nationality(Country!):   market(String):   markets([String!]):   timeout(TimeoutInput!):   businessRules(HotelXBusinessRulesInput!):   defaultAccesses([ID!]):   defaultPlugins([HotelXDefaultPluginStepInput!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxdestinationlistinput/",
	"title": "HotelXDestinationListInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDestinationListInput {  access: ID    group: ID    destinationCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID):   group(ID):   destinationCodes([String!]):   maxSize(Int):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxdestinationsearcherinput/",
	"title": "HotelXDestinationSearcherInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDestinationSearcherInput {  access: ID!    text: String!    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID!):   text(String!):   maxSize(Int):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxfilterinput/",
	"title": "HotelXFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXFilterInput {  plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields plugin(HotelXPluginFilterInput):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxfilterplugintypeinput/",
	"title": "HotelXFilterPluginTypeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXFilterPluginTypeInput {  step: PluginStepType!    type: String!    name: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   type(String!):   name(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxfiltersearchinput/",
	"title": "HotelXFilterSearchInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXFilterSearchInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput    plugin: HotelXPluginFilterInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(AccessFilterInput):   rateRules(RateRulesFilterInput):   plugin(HotelXPluginFilterInput):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxhotelfilterinput/",
	"title": "HotelXHotelFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXHotelFilterInput {  AND: [HotelXHotelFilterInput!]    OR: [HotelXHotelFilterInput!]    createdAt_in: [DateTime!]    createdAt_not_in: [DateTime!]    createdAt_lt: DateTime    createdAt_lte: DateTime    createdAt_gt: DateTime    createdAt_gte: DateTime    updatedAt_in: [DateTime!]    updatedAt_not_in: [DateTime!]    updatedAt_lt: DateTime    updatedAt_lte: DateTime    updatedAt_gt: DateTime    updatedAt_gte: DateTime    deletedAt_in: [DateTime!]    deletedAt_not_in: [DateTime!]    deletedAt_lt: DateTime    deletedAt_lte: DateTime    deletedAt_gt: DateTime    deletedAt_gte: DateTime    country_in: Boolean    category_in: Boolean    destination_in: Boolean    name_in: Boolean    coordinates_in: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([HotelXHotelFilterInput!]):   OR([HotelXHotelFilterInput!]):   createdAt_in([DateTime!]):   createdAt_not_in([DateTime!]):   createdAt_lt(DateTime):   createdAt_lte(DateTime):   createdAt_gt(DateTime):   createdAt_gte(DateTime):   updatedAt_in([DateTime!]):   updatedAt_not_in([DateTime!]):   updatedAt_lt(DateTime):   updatedAt_lte(DateTime):   updatedAt_gt(DateTime):   updatedAt_gte(DateTime):   deletedAt_in([DateTime!]):   deletedAt_not_in([DateTime!]):   deletedAt_lt(DateTime):   deletedAt_lte(DateTime):   deletedAt_gt(DateTime):   deletedAt_gte(DateTime):   country_in(Boolean):   category_in(Boolean):   destination_in(Boolean):   name_in(Boolean):   coordinates_in(Boolean):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxhotellistinput/",
	"title": "HotelXHotelListInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXHotelListInput {  access: ID    hotelCodes: [String!]    destinationCodes: [String!]    countries: [Country!]    ranks: [Int!]    maxSize: Int    group: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID):   hotelCodes([String!]):   destinationCodes([String!]):   countries([Country!]):   ranks([Int!]):   maxSize(Int):   group(ID):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxmapoptioninput/",
	"title": "HotelXMapOptionInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXMapOptionInput {  groupCode: ID!    context: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields groupCode(ID!):   context(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxmappedcode/",
	"title": "HotelXMappedCode",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXMappedCode {  context: String!    code: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields context(String!):   code(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxmetadataqueryinput/",
	"title": "HotelXMetadataQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXMetadataQueryInput {  supplierCodes: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierCodes([ID!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxmutation/",
	"title": "HotelXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXMutation {  createDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateDefaultSettings(    group: ID!,     clientName: ID,     settings: HotelXDefaultSettingsDataInput!,     ): HotelXDefaultSettings    updateStatus(    group: ID!,     access: ID,     supplier: ID,     clientName: ID,     isActive: Boolean!,     ): HotelXUpdateStatus    createCommonSettings(    group: ID!,     access: ID,     supplier: ID,     settings: HotelXCommonSettingsDataInput!,     ): HotelXCommonSettings    updateCommonSettings(    group: ID!,     access: ID,     supplier: ID,     settings: HotelXCommonSettingsDataInput!,     ): HotelXCommonSettings    book(    input: HotelBookInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelBookPayload    cancel(    input: HotelCancelInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelCancelPayload    commit( input: HotelCommitInput!, settings: HotelSettingsInput, ): HotelCommitPayload   Show deprecated fields   loadFile( input: String!, ): String!    }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields createDefaultSettings(HotelXDefaultSettings):   updateDefaultSettings(HotelXDefaultSettings):   updateStatus(HotelXUpdateStatus):   createCommonSettings(HotelXCommonSettings):   updateCommonSettings(HotelXCommonSettings):   book(HotelBookPayload):   cancel(HotelCancelPayload):   commit(HotelCommitPayload):   loadFile(String!):    Required by Mutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxparameter/",
	"title": "HotelXParameter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXParameter {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(String!):   value(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxpluginfilterinput/",
	"title": "HotelXPluginFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXPluginFilterInput {  includes: [HotelXFilterPluginTypeInput!]    excludes: [HotelXFilterPluginTypeInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields includes([HotelXFilterPluginTypeInput!]):   excludes([HotelXFilterPluginTypeInput!]):    Required by HotelXFilterSearchInput:    HotelXFilterInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxquery/",
	"title": "HotelXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXQuery {  hotelConfigurationStatusService: ServiceStatus!    defaultSettings( group: ID!, clientName: ID, ): HotelXDefaultSettings    commonSettings(    group: ID!,     access: ID,     supplier: ID,     ): HotelXCommonSettings    boards( criteria: HotelXBoardQueryInput!, relay: RelayInput!, ): BoardConnection!    categories( criteria: HotelXCategoryQueryInput!, relay: RelayInput!, ): CategoryConnection!    hotels(    criteria: HotelXHotelListInput!,     relay: RelayInput!,     token: String,     filter: HotelXHotelFilterInput,     ): HotelConnection!    rooms(    criteria: HotelXRoomQueryInput!,     relay: RelayInput!,     token: String,     ): RoomConnection!    destinations(    criteria: HotelXDestinationListInput!,     relay: RelayInput!,     token: String,     ): DestinationConnection!    destinationSearcher( criteria: HotelXDestinationSearcherInput!, ): [DestinationSearchResult]!    metadata( criteria: HotelXMetadataQueryInput!, relay: RelayInput!, ): MetadataConnection!    search(    criteria: HotelCriteriaSearchInput,     settings: HotelSettingsInput,     filter: FilterInput,     filterSearch: HotelXFilterSearchInput,     ): HotelSearch    quote(    criteria: HotelCriteriaQuoteInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelQuote    booking(    criteria: HotelCriteriaBookingInput!,     settings: HotelSettingsInput,     filter: HotelXFilterInput,     ): HotelBooking    searchStatusService: ServiceStatus!    quoteStatusService: ServiceStatus!    bookStatusService: ServiceStatus!    cancelStatusService: ServiceStatus!    bookingStatusService: ServiceStatus!    commitStatusService: ServiceStatus!    mapping( groupCode: String!, ): Mapping!    runtimeConfiguration( supplierCode: ID!, ): HotelRuntimeConfiguration   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hotelConfigurationStatusService(ServiceStatus!):   defaultSettings(HotelXDefaultSettings):   commonSettings(HotelXCommonSettings):   boards(BoardConnection!):   categories(CategoryConnection!):   hotels(HotelConnection!):   rooms(RoomConnection!):   destinations(DestinationConnection!):   destinationSearcher([DestinationSearchResult]!):   metadata(MetadataConnection!):   search(HotelSearch):   quote(HotelQuote):   booking(HotelBooking):   searchStatusService(ServiceStatus!):   quoteStatusService(ServiceStatus!):   bookStatusService(ServiceStatus!):   cancelStatusService(ServiceStatus!):   bookingStatusService(ServiceStatus!):   commitStatusService(ServiceStatus!):   mapping(Mapping!):   runtimeConfiguration(HotelRuntimeConfiguration):    Required by Query:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxroomqueryinput/",
	"title": "HotelXRoomQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXRoomQueryInput {  access: ID!    roomCodes: [String!]    maxSize: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(ID!):   roomCodes([String!]):   maxSize(Int):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hotelxsupplierinput/",
	"title": "HotelXSupplierInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXSupplierInput {  settings: SettingsBaseInput    code: String!    accesses: [HotelXAccessInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields settings(SettingsBaseInput):   code(String!):   accesses([HotelXAccessInput!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxupdatestatus/",
	"title": "HotelXUpdateStatus",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXUpdateStatus {  code: ID!    hotelXUpdateStatusData: HotelXUpdateStatusData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   hotelXUpdateStatusData(HotelXUpdateStatusData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by HotelXMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/hotelxupdatestatusdata/",
	"title": "HotelXUpdateStatusData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXUpdateStatusData {  code: ID!    isActive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   isActive(Boolean!):    Required by HotelXUpdateStatus:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/hubstatus/",
	"title": "HubStatus",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum HubStatus{   OK,    EXCEPTION,    TIMEOUT,    UNDEFINED,   }   Required by HubStatusInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/hubstatus/",
	"title": "HubStatus",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum HubStatus{   OK,    EXCEPTION,    TIMEOUT,    UNDEFINED,   }   Required by HubStatusInput:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/hubstatusinput/",
	"title": "HubStatusInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HubStatusInput {  code: HubStatus!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(HubStatus!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/hubstatusinput/",
	"title": "HubStatusInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HubStatusInput {  code: HubStatus!    isInclusive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(HubStatus!):   isInclusive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/enums/iata_ptc_codetype/",
	"title": "IATA_PTC_CodeType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum IATA_PTC_CodeType{   ADT,    CHD,    INF,   }   Required by  "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by Stats:  The service used to access the stats of every connection that uses the HUB  AdviseMessage:  List of advise messages.  Node:    Access:  An Access is a set of credentials and configuration in order to access the system of a Supplier.  Client:  Client identifies who is making the request and holds the configuration assigned to it.  AccessData:    Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers  Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.  SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  OrganizationData:    Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.  Domain:    GroupCommonData:    MemberData:    Role:  Permissions determine what operations are allowed on a resource  RoleData:    Resource:  Resources are those used in APIs and Products.  ResourceData:    API:    APIData:    Operation:    OperationData:    Product:  An APIs collection.  ProductData:    DomainData:    Group:  Groups are organized hierarchically.  GroupData:    ManagedGroup:    ManagedGroupData:    ClientData:    StatsInfo:  Details of an specific error   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by AdviseMessage:    Stats:    Node:    Access:    Client:    AccessData:    Supplier:    Parameter:    Organization:    SupplierData:    Provider:    AccessFilter:    ClientFilter:    System:    SystemData:    Group:    SupplierFilter:    GroupData:    Member:    GroupCommonData:    MemberData:    MacroPermission:    MacroPermissionData:    Role:    Resource:    API:    RoleData:    ResourceData:    APIData:    Operation:    OperationData:    ManagedGroup:    ManagedGroupData:    Profile:    ProfileData:    Entity:    OrganizationData:    Domain:    Product:    ProductData:    DomainData:    ClientData:    StatsInfo:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by Alert:   Alert node  AlertData:    AdviseMessage:    Node:    Member:    MemberData:    Group:    GroupData:    GroupCommonData:    API:    APIData:    Resource:    ResourceData:    Operation:    OperationData:    ManagedGroup:    ManagedGroupData:    Role:    RoleData:    Access:    AccessData:    Supplier:    Parameter:    Organization:    SupplierData:    Provider:    AccessFilter:    ClientFilter:    System:    SystemData:    SupplierFilter:    OrganizationData:    Domain:    Product:    ProductData:    DomainData:    Client:    ClientData:    Profile:    ProfileData:    Entity:    MacroPermission:    MacroPermissionData:    Event:  Event triggered  EventData:  Event data  AlertInput:  Alert information. Only one configuration has to be set at once.  EmailInput:    AlertObjectInput:    AlertGroupInput:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   "
},
{
	"uri": "https://travelgatex.com/mappea/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by MappeaMapSupplierInput:    MappeaSupplierConfirmedInput:    SupplierDetected:    Supplier:    SupplierData:    Node:    Provider:    AccessFilter:    Organization:    ClientFilter:    System:    AdviseMessage:    Access:    AccessData:    Parameter:    Client:    ClientData:    Group:    SupplierFilter:    GroupData:    Member:    GroupCommonData:    MemberData:    MacroPermission:    MacroPermissionData:    Role:    Resource:    API:    RoleData:    ResourceData:    APIData:    Operation:    OperationData:    ManagedGroup:    ManagedGroupData:    Profile:    ProfileData:    Entity:    OrganizationData:    Domain:    Product:    ProductData:    DomainData:    SystemData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by AdviseMessage:    PaymentXStoredCardIDInput:    PaymentXStoredCard:    Node:    Group:    PointOfSale:    GroupData:    Member:    GroupCommonData:    MemberData:    MacroPermission:    MacroPermissionData:    Role:    Resource:    API:    RoleData:    ResourceData:    APIData:    Operation:    OperationData:    ManagedGroup:    ManagedGroupData:    Access:    AccessData:    Supplier:    Parameter:    Organization:    SupplierData:    Provider:    AccessFilter:    ClientFilter:    System:    SystemData:    SupplierFilter:    OrganizationData:    Domain:    Product:    ProductData:    DomainData:    Client:    ClientData:    Profile:    ProfileData:    Entity:    PointOfSaleData:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID   Required by AccessFilter:    SupplierFilter:    ClientFilter:    ServiceApi:    PointOfSaleFilter:    ProfileFilter:    SystemFilter:    AdviseMessage:    Access:    AccessData:    Node:    Supplier:    Parameter:    Organization:    SupplierData:    Provider:    System:    SystemData:    Group:    GroupData:    Member:    GroupCommonData:    MemberData:    MacroPermission:    MacroPermissionData:    Role:    Resource:    API:    RoleData:    ResourceData:    APIData:    ManagedGroup:    ManagedGroupData:    OrganizationData:    Domain:    DomainData:    Client:    ClientData:    ServiceOperation:    PointOfSale:    PointOfSaleData:    Profile:    ProfileData:    Entity:    Product:    ProductData:    Operation:    OperationData:    HotelXBoardQueryInput:    HotelXCategoryQueryInput:    HotelXHotelListInput:    HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:    HotelRuntimeConfiguration:    Board:    BoardData:    Category:    CategoryData:    Hotel:    HotelData:    GiataData:    HotelXMapOptionInput:    DestinationData:    Airport:    Geoname:    AirportData:    GeonameData:    HotelXAmenity:    HotelXAmenityData:    RoomStatic:    RoomData:    Destination:    Metadata:    MetadataData:    HotelXAccessInput:    PaymentCard:    PaymentXStoredCardIDInput:    PaymentXStoredCard:    Stats:    StatsInfo:    Alert:   Alert node  AlertData:    Event:  Event triggered  EventData:  Event data  LoggingLegacyFilterInput:  Filters needed to do a search. From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss),   LoggingLegacy:  The service used to access the stats of every connection that uses the HUB  LoggingLegacyData:    AccessInput:    GroupInput:    CreateClientInput:    UpdateClientInput:    UpdateProfileInput:    DeleteProfileInput:    UpdateEntitiesInput:    CreateSystemInput:    UpdateSystemInput:    CreateOrganizationInput:    SuitOrganizationInput:    SuitFolderInput:    CreateMemberInput:    CreateGroupInput:    UpdateMemberInput:    GrantPermissionsInput:    ClonePermissionsInput:    UpdateGroupInput:    DeleteMemberInput:    DeleteGroupInput:    UpdateGroupAPISInput:    GrantMacroPermissionInput:    LegacyLinkInput:    HotelXUpdateStatus:    HotelXUpdateStatusData:    MappeaMapSupplierInput:    MappeaSupplierConfirmedInput:    SupplierDetected:    PaymentXStoredCardInput:    AlertInput:  Alert information. Only one configuration has to be set at once.  EmailInput:    AlertObjectInput:    AlertGroupInput:     "
},
{
	"uri": "https://travelgatex.com/integrations/flights/ig/",
	"title": "IG - MeridianaFly",
	"tags": [],
	"description": "MeridianaFly integration",
	"content": "   IG - MeridianaFly Changelog     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by Ratios:  Ratios details  OperationDetailed:  Stats information per operation  SupplierData:    GroupData:    StatsInfo:  Details of an specific error  StatsAsset:  Asset of an specific error   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by Ratios:    AccessData:    GroupConnection:    SupplierData:    AccessConnection:    ClientConnection:    SupplierFilter:    GroupData:    MemberConnection:    SupplierConnection:    ProfileConnection:    StatsInfo:    StatsAsset:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by RelayInput:    AlertConnection:  Alert list  AlertConfiguration:    EventConnection:  Events list  AlertTypeConfiguration:  Depending on the talert type, typeConfiguration will use some fields   AlertPrice:  Price contains the specific configuration for Price alert Type  GroupConnection:    GroupData:    MemberConnection:    AccessConnection:    SupplierConnection:    ClientConnection:    ProfileConnection:    AccessData:    SupplierData:    SupplierFilter:    AlertConfigurationInputNoTraffic:  Configuration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertConfigurationInputErrorRate:  Configuration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.  AlertConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertConfigurationInputPeakTraffic:  Configuration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertConfigurationInputPrice:    ErrorCodeInput:    AlertPriceInput:  Price input  AlertUpdateConfigurationInputNoTraffic:  Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertUpdateConfigurationInputErrorRate:  Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.  AlertUpdateConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertUpdateConfigurationInputPeakTraffic:  Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertUpdateConfigurationInputPrice:    AlertPriceUpdateInput:  Price update   "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   "
},
{
	"uri": "https://travelgatex.com/mappea/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by File:    GetMappeaStatsData:    MappeaConfirmUploadInput:    MappeaMapSupplierInput:    UploadFileData:    SupplierDetected:    SupplierData:    AccessConnection:    GroupConnection:    ClientConnection:    AccessData:    SupplierFilter:    SupplierConnection:    GroupData:    MemberConnection:    ProfileConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by PaymentXExpireDate:    GroupData:    GroupConnection:    MemberConnection:    AccessConnection:    SupplierConnection:    ClientConnection:    ProfileConnection:    AccessData:    SupplierData:    SupplierFilter:    ExpireDateInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int   Required by AccessConnection:    SupplierFilter:    SupplierConnection:    ClientConnection:    ProfileConnection:    OrganizationConnection:    MemberConnection:    GroupConnection:    AccessData:    SupplierData:    GroupData:    ServiceOperation:    RelayInput:    HotelXHotelListInput:    HotelConnection:    HotelXRoomQueryInput:    HotelXDestinationListInput:    HotelXDestinationSearcherInput:    HotelSettingsInput:    Timeout:    BusinessRules:    CheckInformation:    BedStatic:    OccupancyRange:    ReviewedInt:    MetadataCandidate:    AgeRange:    PaxInput:    BusinessRulesInput:    SettingsBaseInput:    StatsRequest:    StatAccess:    Pax:    Occupancy:    Room:    Supplement:    Bed:    CancelPenalty:    BookingRoom:    File:    GetMappeaStatsData:    PaymentXExpireDate:    Ratios:    StatsInfo:    StatsAsset:    AlertConnection:  Alert list  AlertConfiguration:    EventConnection:  Events list  AlertTypeConfiguration:  Depending on the talert type, typeConfiguration will use some fields   AlertPrice:  Price contains the specific configuration for Price alert Type  LoggingLegacyFilterInput:  Filters needed to do a search. From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss),   RangeFilter:    LoggingLegacyData:    AccessInput:    TimeoutInput:    HotelXBusinessRulesInput:    BookRoomInput:    ExpireDateInput:    BookPaxInput:    MappeaConfirmUploadInput:    MappeaMapSupplierInput:    UploadFileData:    SupplierDetected:    AlertConfigurationInputNoTraffic:  Configuration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertConfigurationInputErrorRate:  Configuration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.  AlertConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertConfigurationInputPeakTraffic:  Configuration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertConfigurationInputPrice:    ErrorCodeInput:    AlertPriceInput:  Price input  AlertUpdateConfigurationInputNoTraffic:  Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.  AlertUpdateConfigurationInputErrorRate:  Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.  AlertUpdateConfigurationInputAverageTime:  Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.  AlertUpdateConfigurationInputPeakTraffic:  Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .   AlertUpdateConfigurationInputPrice:    AlertPriceUpdateInput:  Price update   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/int64/",
	"title": "Int64",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Int64   Required by StatsData:    OperationDetailed:    StatsInfo:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/int64/",
	"title": "Int64",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Int64   Required by StatsData:    OperationDetailed:    StatsInfo:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar JSON   Required by AddOns:    AddOn:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/jwt/",
	"title": "JWT",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar JWT   Required by AdminQuery:     "
},
{
	"uri": "https://travelgatex.com/integrations/flights/lh/",
	"title": "LH - Lufthansa",
	"tags": [],
	"description": "Lufthansa integration",
	"content": "   LH - Lufthansa Changelog     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/language/",
	"title": "Language",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Language   Required by HotelCriteriaSearchInput:    HotelCriteriaQuoteInput:    HotelCriteriaBookingInput:    HotelXDefaultSettingsData:    Text:    CriteriaSearch:    HotelXDefaultSettingsDataInput:    HotelBookInput:    HotelCancelInput:    HotelCommitInput:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/legacylink/",
	"title": "LegacyLink",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LegacyLink {  hubUser: Client!    hubProvider: Supplier!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hubUser(Client!):   hubProvider(Supplier!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/legacylink/",
	"title": "LegacyLink",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LegacyLink {  hubUser: Client!    hubProvider: Supplier!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hubUser(Client!):   hubProvider(Supplier!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/legacylink/",
	"title": "LegacyLink",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LegacyLink {  hubUser: Client!    hubProvider: Supplier!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hubUser(Client!):   hubProvider(Supplier!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/legacylink/",
	"title": "LegacyLink",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LegacyLink {  hubUser: Client!    hubProvider: Supplier!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hubUser(Client!):   hubProvider(Supplier!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/legacylink/",
	"title": "LegacyLink",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LegacyLink {  hubUser: Client!    hubProvider: Supplier!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hubUser(Client!):   hubProvider(Supplier!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/legacylinkinput/",
	"title": "LegacyLinkInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LegacyLinkInput {  hubUser: ID!    hubProvider: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hubUser(ID!):   hubProvider(ID!):    Required by AccessInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/location/",
	"title": "Location",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Location {  address: String    city: String    zipCode: String    country: Country    coordinates: Coordinates    closestDestination: DestinationData    airports: [Airport!]    geoNames: [Geoname!]!    state: State   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields address(String):   city(String):   zipCode(String):   country(Country):   coordinates(Coordinates):   closestDestination(DestinationData):   airports([Airport!]):   geoNames([Geoname!]!):   state(State):    Required by HotelData:    AirportData:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/locationcode/",
	"title": "LocationCode",
	"tags": [],
	"description": "",
	"content": " IATA Location Code.\nGraphQL schema definition scalar LocationCode   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/logginglegacy/",
	"title": "LoggingLegacy",
	"tags": [],
	"description": "",
	"content": " The service used to access the stats of every connection that uses the HUB\nGraphQL schema definition type LoggingLegacy {  code: ID!    LoggingLegacyData: LoggingLegacyData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   LoggingLegacyData(LoggingLegacyData):   adviseMessage([AdviseMessage!]): Errors that will lead the service to abort  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date   Required by LoggingLegacyEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/logginglegacyconnection/",
	"title": "LoggingLegacyConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LoggingLegacyConnection {  edges: [LoggingLegacyEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([LoggingLegacyEdge]):   pageInfo(PageInfo!):    Required by LoggingQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/logginglegacydata/",
	"title": "LoggingLegacyData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LoggingLegacyData {  code: ID!    timestamp: DateTime!    sessionID: ID!    access: Access!    client: Client!    operation: Operation!    trafficType: TrafficType!    cloudEnvironment: Environment!    statusType: StatsInfoTypes!    errorCode: ID!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   timestamp(DateTime!): Date of search  sessionID(ID!): Return session id  access(Access!): Owner access  client(Client!): Owner client  operation(Operation!): Return group operation  trafficType(TrafficType!): Responsible for the execution of the this stats. If TRUE then cache, else client  cloudEnvironment(Environment!): Return environment  statusType(StatsInfoTypes!): return hub status  errorCode(ID!): Return if exist error code  execTime(Int!): Return execTime  url(URI!): Return the URL to download   Required by LoggingLegacy:  The service used to access the stats of every connection that uses the HUB   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/logginglegacyedge/",
	"title": "LoggingLegacyEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LoggingLegacyEdge {  cursor: String!    node: LoggingLegacy   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields cursor(String!):   node(LoggingLegacy):    Required by LoggingLegacyConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/logginglegacyfilterinput/",
	"title": "LoggingLegacyFilterInput",
	"tags": [],
	"description": "",
	"content": " Filters needed to do a search. From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss),\nGraphQL schema definition type LoggingLegacyFilterInput {  from: DateTime    to: DateTime    timeRange: TimeRangeInput    requestMode: ModeType!    trafficType: [TrafficType!]    cloudEnvironments: [CloudEnvironment!]    apiCode: ID!    operationCodes: [ID!]    operationTypes: [OperationType!]    sessionIDs: [String!]    accessCodes: [ID!]    clientCodes: [ID!]    clientNames: [ID!]    supplierCodes: [ID!]    groups: [ID!]    errors: [ErrorFilter!]    first: Int    reference: ReferenceFilter    rangeFilters: [RangeFilter!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields from(DateTime): From date of search  to(DateTime): To date of search  timeRange(TimeRangeInput): Range of the time  requestMode(ModeType!): Buyer or Seller  trafficType([TrafficType!]): To serch in Speed  cloudEnvironments([CloudEnvironment!]): List of environments  apiCode(ID!): List of API codes  operationCodes([ID!]): List of operation codes  operationTypes([OperationType!]): List of operation types  sessionIDs([String!]): List of sessions  accessCodes([ID!]): List of access codes  clientCodes([ID!]): List of client codes  clientNames([ID!]): List of client names  supplierCodes([ID!]): List of supplier codes  groups([ID!]): List of groups  errors([ErrorFilter!]): List of error codes  first(Int): Works like LIMIT of SQL  reference(ReferenceFilter): Locator to search in Insights  rangeFilters([RangeFilter!]): Filter of the execution time   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/loggingquery/",
	"title": "LoggingQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type LoggingQuery {  retrieveStats( filter: LoggingLegacyFilterInput!, ): LoggingLegacyConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields retrieveStats(LoggingLegacyConnection!): retrieveLogsService(filter: LoggingFilterInput!): LoggingConnection!   Required by Query:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/macropermission/",
	"title": "MacroPermission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermission {  code: ID!    macroPermissionData: MacroPermissionData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   macroPermissionData(MacroPermissionData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by MacroPermissionEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/macropermission/",
	"title": "MacroPermission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermission {  code: ID!    macroPermissionData: MacroPermissionData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   macroPermissionData(MacroPermissionData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by MacroPermissionEdge:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/macropermission/",
	"title": "MacroPermission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermission {  code: ID!    macroPermissionData: MacroPermissionData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   macroPermissionData(MacroPermissionData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by MacroPermissionEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/macropermission/",
	"title": "MacroPermission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermission {  code: ID!    macroPermissionData: MacroPermissionData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   macroPermissionData(MacroPermissionData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by MacroPermissionEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/macropermission/",
	"title": "MacroPermission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermission {  code: ID!    macroPermissionData: MacroPermissionData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   macroPermissionData(MacroPermissionData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by MacroPermissionEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/macropermissiondata/",
	"title": "MacroPermissionData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionData {  id: ID!    code: ID!    productID: ID!    group: ID!    label: String    permissions: [Permission]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   productID(ID!):   group(ID!):   label(String):   permissions([Permission]):    Required by MacroPermission:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/macropermissiondata/",
	"title": "MacroPermissionData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionData {  id: ID!    code: ID!    productID: ID!    group: ID!    label: String    permissions: [Permission]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   productID(ID!):   group(ID!):   label(String):   permissions([Permission]):    Required by MacroPermission:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/macropermissiondata/",
	"title": "MacroPermissionData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionData {  id: ID!    code: ID!    productID: ID!    group: ID!    label: String    permissions: [Permission]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   productID(ID!):   group(ID!):   label(String):   permissions([Permission]):    Required by MacroPermission:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/macropermissiondata/",
	"title": "MacroPermissionData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionData {  id: ID!    code: ID!    productID: ID!    group: ID!    label: String    permissions: [Permission]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   productID(ID!):   group(ID!):   label(String):   permissions([Permission]):    Required by MacroPermission:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/macropermissiondata/",
	"title": "MacroPermissionData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionData {  id: ID!    code: ID!    productID: ID!    group: ID!    label: String    permissions: [Permission]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   productID(ID!):   group(ID!):   label(String):   permissions([Permission]):    Required by MacroPermission:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/macropermissionedge/",
	"title": "MacroPermissionEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionEdge {  node: MacroPermission    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(MacroPermission):   cursor(String!):    Required by MacroPermissionsConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/macropermissionedge/",
	"title": "MacroPermissionEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionEdge {  node: MacroPermission    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(MacroPermission):   cursor(String!):    Required by MacroPermissionsConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/macropermissionedge/",
	"title": "MacroPermissionEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionEdge {  node: MacroPermission    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(MacroPermission):   cursor(String!):    Required by MacroPermissionsConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/macropermissionedge/",
	"title": "MacroPermissionEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionEdge {  node: MacroPermission    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(MacroPermission):   cursor(String!):    Required by MacroPermissionsConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/macropermissionedge/",
	"title": "MacroPermissionEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionEdge {  node: MacroPermission    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(MacroPermission):   cursor(String!):    Required by MacroPermissionsConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/macropermissionsconnection/",
	"title": "MacroPermissionsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionsConnection {  edges: [MacroPermissionEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MacroPermissionEdge]):   pageInfo(PageInfo!):    Required by MemberData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/macropermissionsconnection/",
	"title": "MacroPermissionsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionsConnection {  edges: [MacroPermissionEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MacroPermissionEdge]):   pageInfo(PageInfo!):    Required by MemberData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/macropermissionsconnection/",
	"title": "MacroPermissionsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionsConnection {  edges: [MacroPermissionEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MacroPermissionEdge]):   pageInfo(PageInfo!):    Required by MemberData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/macropermissionsconnection/",
	"title": "MacroPermissionsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionsConnection {  edges: [MacroPermissionEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MacroPermissionEdge]):   pageInfo(PageInfo!):    Required by MemberData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/macropermissionsconnection/",
	"title": "MacroPermissionsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MacroPermissionsConnection {  edges: [MacroPermissionEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MacroPermissionEdge]):   pageInfo(PageInfo!):    Required by MemberData:    ProductData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by ManagedGroupEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ManagedGroupEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ManagedGroupEdge:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ManagedGroupEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ManagedGroupEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/managedgroup/",
	"title": "ManagedGroup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroup {  code: ID!    managedGroupData: ManagedGroupData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   managedGroupData(ManagedGroupData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ManagedGroupEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/managedgroupconnection/",
	"title": "ManagedGroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupConnection {  edges: [ManagedGroupEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ManagedGroupEdge]):   pageInfo(PageInfo!):    Required by GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):    Required by ManagedGroup:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):    Required by ManagedGroup:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):    Required by ManagedGroup:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):    Required by ManagedGroup:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):    Required by ManagedGroup:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/managedgroupdata/",
	"title": "ManagedGroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupData {  code: ID!    group: Group!    api: API!    resource: Resource!    role: Role!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   group(Group!):   api(API!):   resource(Resource!):   role(Role!):    Required by ManagedGroup:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/managedgroupedge/",
	"title": "ManagedGroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ManagedGroupEdge {  node: ManagedGroup    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(ManagedGroup):   cursor(String!):    Required by ManagedGroupConnection:     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/reservationmanagement/",
	"title": "Management",
	"tags": [],
	"description": "Management operations for bookings performed via TGX",
	"content": " Reservation Management  Cancel     ReservationList     ReservationRead     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/reservationmanagement/",
	"title": "Management",
	"tags": [],
	"description": "Management operations for bookings performed via TGX",
	"content": " Reservation Management   Cancel      ReservationList      ReservationRead     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/mandatoryfee/",
	"title": "MandatoryFee",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MandatoryFee {  duration: String    mandatoryFeeCode: String!    price: PriceStatic!    scope: String    name: String    text: String    included: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields duration(String):   mandatoryFeeCode(String!):   price(PriceStatic!):   scope(String):   name(String):   text(String):   included(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/map/",
	"title": "Map",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Map {  code: String!    maps: [String!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   maps([String!]):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/inputobjects/mappeaconfirmuploadinput/",
	"title": "MappeaConfirmUploadInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaConfirmUploadInput {  fileId: Int!    suppliers: [MappeaSupplierConfirmedInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileId(Int!):   suppliers([MappeaSupplierConfirmedInput!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/mappeaconfirmuploadinput/",
	"title": "MappeaConfirmUploadInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaConfirmUploadInput {  fileId: Int!    suppliers: [MappeaSupplierConfirmedInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileId(Int!):   suppliers([MappeaSupplierConfirmedInput!]!):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/inputobjects/mappeagetmappeastatsinput/",
	"title": "MappeaGetMappeaStatsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaGetMappeaStatsInput {  organizationName: String!    supplierMapped: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields organizationName(String!):   supplierMapped(String):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/mappeagetmappeastatsinput/",
	"title": "MappeaGetMappeaStatsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaGetMappeaStatsInput {  organizationName: String!    supplierMapped: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields organizationName(String!):   supplierMapped(String):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/inputobjects/mappeamapsupplierinput/",
	"title": "MappeaMapSupplierInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaMapSupplierInput {  requestId: ID!    access: ID!    fileId: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestId(ID!):   access(ID!):   fileId(Int!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/mappeamapsupplierinput/",
	"title": "MappeaMapSupplierInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaMapSupplierInput {  requestId: ID!    access: ID!    fileId: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestId(ID!):   access(ID!):   fileId(Int!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/mappeamutation/",
	"title": "MappeaMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaMutation {  confirmUpload( input: MappeaConfirmUploadInput!, ): OnlyStatusResponse!    uploadFile( input: MappeaUploadFileInput!, ): UploadFileResponse!    mapSupplier( input: MappeaMapSupplierInput!, ): OnlyStatusResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields confirmUpload(OnlyStatusResponse!):   uploadFile(UploadFileResponse!):   mapSupplier(OnlyStatusResponse!):    Required by Mutation:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/schema/query/",
	"title": "MappeaQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaQuery {  getUploadedFiles: GetUploadedFilesResponse!    getMappeaStats( input: MappeaGetMappeaStatsInput!, ): GetMappeaStatsResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields getUploadedFiles(GetUploadedFilesResponse!):   getMappeaStats(GetMappeaStatsResponse!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/mappeaquery/",
	"title": "MappeaQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaQuery {  getUploadedFiles: GetUploadedFilesResponse!    getMappeaStats( input: MappeaGetMappeaStatsInput!, ): GetMappeaStatsResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields getUploadedFiles(GetUploadedFilesResponse!):   getMappeaStats(GetMappeaStatsResponse!):    Required by Query:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/inputobjects/mappeasupplierconfirmedinput/",
	"title": "MappeaSupplierConfirmedInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaSupplierConfirmedInput {  code: ID!    supplier: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplier(ID!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/mappeasupplierconfirmedinput/",
	"title": "MappeaSupplierConfirmedInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaSupplierConfirmedInput {  code: ID!    supplier: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplier(ID!):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/inputobjects/mappeauploadfileinput/",
	"title": "MappeaUploadFileInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaUploadFileInput {  requestId: String!    fileName: String    delimiter: String!    fileContent: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestId(String!):   fileName(String):   delimiter(String!):   fileContent(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/mappeauploadfileinput/",
	"title": "MappeaUploadFileInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaUploadFileInput {  requestId: String!    fileName: String    delimiter: String!    fileContent: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requestId(String!):   fileName(String):   delimiter(String!):   fileContent(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Mapping {  contexts( codes: [String!], ): [MappingContext!]    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields contexts([MappingContext!]):   errors([Error!]):   warnings([Warning!]):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/mappingcontext/",
	"title": "MappingContext",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappingContext {  code: String!    hotels( codes: [String!], ): [MappingEntity!]    rooms( codes: [String!], ): [MappingEntity!]    boards( codes: [String!], ): [MappingEntity!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   hotels([MappingEntity!]):   rooms([MappingEntity!]):   boards([MappingEntity!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/mappingentity/",
	"title": "MappingEntity",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappingEntity {  code: String!    contexts( codes: [String!], ): [Map!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   contexts([Map!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/markup/",
	"title": "Markup",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Markup {  channel: String    currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    rules: [Rule!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields channel(String):   currency(Currency!):   binding(Boolean!):   net(Float!):   gross(Float):   exchange(Exchange!):   rules([Rule!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/markupruletype/",
	"title": "MarkupRuleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MarkupRuleType{   PERCENT,    IMPORT,   }   Required by Rule:     "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/",
	"title": "Masters",
	"tags": [],
	"description": "Master information about your hotels, meal plans, currencies...",
	"content": "   Agencies Create and configurate your agencies\n     Offices Create and configurate offices for your agencies\n     Hotels Create and update your hotels\n     Hotel Info Add extra information to your hotels: images, descriptions...\n     MealPlans Create and configurate your mealplans\n     Currencies Currencies exchanges\n     Room List Create and update your room list\n     Providers Create and update your prpviders\n     Hotels portfolio by Agency Set concrete hotels portfolios by agency\n     Destinations Create and update your destinations and destinations groups\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/media/",
	"title": "Media",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Media {  code: String    order: String    type: ApplicationAreaType!    updatedAt: DateTime!    url: URI!    texts( languages: [Language!], ): [Text!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String):   order(String):   type(ApplicationAreaType!):   updatedAt(DateTime!):   url(URI!):   texts([Text!]):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.\nGraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by OrganizationData:    GroupCommonData:    MemberEdge:    GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by GroupData:    GroupCommonData:    MemberEdge:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AlertData:    GroupData:    GroupCommonData:    MemberEdge:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by GroupData:    GroupCommonData:    MemberEdge:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by GroupData:    GroupCommonData:    MemberEdge:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Member {  code: ID!    memberData: MemberData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   memberData(MemberData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by GroupData:    GroupCommonData:    OrganizationData:    MemberEdge:    AlertData:    AdminMutation:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MemberEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by AdminQuery:    GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!): Can members does queries in the platform?  type(MemberType!): Member Type  groups(GroupConnection): which groups the member is in?  roles(RoleConnection): which roles the member has in?   Required by Member:  You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!):   type(MemberType!):   groups(GroupConnection):   roles(RoleConnection):   macroPermissions(MacroPermissionsConnection):    Required by Member:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!):   type(MemberType!):   groups(GroupConnection):   roles(RoleConnection):   macroPermissions(MacroPermissionsConnection):    Required by Member:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!):   type(MemberType!):   groups(GroupConnection):   roles(RoleConnection):   macroPermissions(MacroPermissionsConnection):    Required by Member:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!):   type(MemberType!):   groups(GroupConnection):   roles(RoleConnection):   macroPermissions(MacroPermissionsConnection):    Required by Member:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    isActive: Boolean!    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   isActive(Boolean!):   type(MemberType!):   groups(GroupConnection):   roles(RoleConnection):   macroPermissions(MacroPermissionsConnection):    Required by Member:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {  node: Member    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Member):   cursor(String!):    Required by MemberConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Required by MemberData:    CreateMemberInput:     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/channel-x/api-reference/messages/",
	"title": "Messages",
	"tags": [],
	"description": "Notif messages",
	"content": " Global Details In this section you can find the three methods you need to implement to receive from Channel-X and all its specifications:\n HotelRatePlanInventoryNotif HotelRatePlanNotif HotelAvailNotif  \nProtocol and Headers All requests are expected to be standard HTTP POST requests in which the POST body is the request XML and the Content-Type header is set to \u0026quot;application/xml\u0026quot;.\nAuthentication Requests will be sent with a authentication encoded in Base-64. Credentials may be found in Authorization header tag, with value Basic (encoded credentials) as follows:\nAuthorization: Basic aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1RWWg2bVlJSkcyWQ==\nSummary BR = Only used for: \u0026lsquo;Basic Rates\u0026rsquo;\nDV = Only used for: \u0026lsquo;Derived Rates\u0026rsquo;\nN = Names allowed for a specific element\n\nHotelRatePlanInventoryNotif The HotelRatePlanInventoryNotif message contains information about the inventory setup information that should be followed by the structure: Hotel \u0026gt; Rate \u0026gt; Room.\n\u0026lt;HotelRatePlanInventoryNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot; Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan Duration = \u0026quot;0\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; FreeChild = \u0026quot;true\u0026quot; FreeBaby = \u0026quot;false\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; RatePlanNotifType = \u0026quot;New\u0026quot; YieldableIndicator=\u0026quot;true\u0026quot; RatePlanType = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;BookingRules\u0026gt; \u0026lt;BookingRule\u0026gt; \u0026lt;CancelPenalties\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;Deadline OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;20\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent NmbrOfNights = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty Start = \u0026quot;2018-03-01\u0026quot; End = \u0026quot;2018-03-06\u0026quot;\u0026gt; \u0026lt;Deadline OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;10\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent Amount = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty NonRefundable = \u0026quot;true\u0026quot; Start = \u0026quot;2018-03-13\u0026quot; End = \u0026quot;2018-03-15\u0026quot;/\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;BookingRule\u0026gt; \u0026lt;Viewerships\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LocationCode CountryCode = \u0026quot;ES\u0026quot;/\u0026gt; \u0026lt;/LocationCodes\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;/Viewerships\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;/BookingRules\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount AgeQualifyingCode = \u0026quot;8\u0026quot; MaxAge = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount AgeQualifyingCode = \u0026quot;7\u0026quot; MaxAge = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;PaymentPolicies\u0026gt; \u0026lt;GuaranteePayment PaymentCode = \u0026quot;BookingDatePayment\u0026quot;\u0026gt; \u0026lt;AcceptedPayments\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode = \u0026quot;VI\u0026quot;/\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode = \u0026quot;AX\u0026quot;/\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;/AcceptedPayments\u0026gt; \u0026lt;/GuaranteePayment\u0026gt; \u0026lt;/PaymentPolicies\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;14\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;STD\u0026quot; RoomID = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;STD\u0026quot; RoomID = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Taxes\u0026gt; \u0026lt;Tax Amount = \u0026quot;20\u0026quot; ChargeFrequency = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;TaxDescription\u0026gt; \u0026lt;Text\u0026gt;city\u0026lt;/Text\u0026gt; \u0026lt;/TaxDescription\u0026gt; \u0026lt;/Tax\u0026gt; \u0026lt;/Taxes\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;bb\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;TPA_Extensions xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Attribute key = \u0026quot;HotelNotifType\u0026quot; value = \u0026quot;New\u0026quot;/\u0026gt; \u0026lt;/TPA_Extensions\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanInventoryNotif\u0026gt;  Example for Derived RatePlan\n\u0026lt;HotelRatePlanInventoryNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot; Version = \u0026quot;0\u0026quot;/\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan BaseRatePlanCode = \u0026quot;BAR\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; RatePlanCode = \u0026quot;DERIVED\u0026quot; RateReturn = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;RatePlanInclusionsType\u0026gt; \u0026lt;RatePlanInclusionDescription\u0026gt; \u0026lt;Name\u0026gt;BaseMealPlanSupplement\u0026lt;/Name\u0026gt; \u0026lt;/RatePlanInclusionDescription\u0026gt; \u0026lt;/RatePlanInclusionsType\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Derived Rate\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanInventoryNotif\u0026gt;  Example for Offers\n\u0026lt;HotelRatePlanInventoryNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot; Version = \u0026quot;0\u0026quot;/\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan BaseRatePlanCode = \u0026quot;BAR\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; RatePlanCode = \u0026quot;DERIVED\u0026quot; RateReturn = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Offers\u0026gt; \u0026lt;Offer OfferCode = \u0026quot;offer\u0026quot; OfferStatusType = \u0026quot;Active\u0026quot; OfferNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;OfferRules\u0026gt; \u0026lt;OfferRule\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;2\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;6\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;DOW_Restrictions\u0026gt; \u0026lt;AvailableDaysOfWeek Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;true\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;/DOW_Restrictions\u0026gt; \u0026lt;Inventories\u0026gt; \u0026lt;Inventory InvCode = \u0026quot;1BDAPT\u0026quot;/\u0026gt; \u0026lt;/Inventories\u0026gt; \u0026lt;/OfferRule\u0026gt; \u0026lt;/OfferRules\u0026gt; \u0026lt;Discount NightsDiscounted = \u0026quot;1\u0026quot; DiscountPattern = \u0026quot;Last\u0026quot;/\u0026gt; \u0026lt;OfferDescription\u0026gt; \u0026lt;Text\u0026gt;Offer Test\u0026lt;/Text\u0026gt; \u0026lt;/OfferDescription\u0026gt; \u0026lt;/Offer\u0026gt; \u0026lt;/Offers\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanInventoryNotif\u0026gt;     Element Rel Type Description     HotelRatePlanInventoryNotif 1     ../request 1     ../RatePlans 1     @HotelCode 1 String    @HotelStatusType 1 String N: Active, Deactivated   ../RatePlan 0..n     @FreeChild 1 Boolean Indicates if the child is free at that rate. Find here the price calculation   @FreeBaby 1 Boolean Indicates if the baby is free at that rate. Find here the price calculation   @RatePlanCode 1 String Rate code   @BaseRatePlanCode 0..1 String DV. Rate code of the base RatePlan   @RateReturn 0..1 String -   @RatePlanNotifType 0..1 String N: New, Delta, Remove   @RatePlanStatusType 1 String N: Active, Deactivated   @CurrencyCode 0..1 String BR. ISO Currency (EUR)   @YieldableIndicator 0..1 Boolean Used to indicate the rate plan is subject to yield management logic. When false, the rate plan is not yieldable. When true or it\u0026rsquo;s not returned, the rate plan is yieldable.   @Start 0..1 Date Booking Start Date for which the rate will be available.   @End 0..1 Date Booking Start Date for which the rate will be available.   @RatePlanType 0..1 String Rate rule to apply. 0 - No selected, 7 - Large Family, 8 - Public Servant, 10 - Negotiated, 11 - Package, 34 - Canary Resident, 35 - Balearic Resident, 36 - Honeymoon. If the attribute is not present and it is a base rate, the value is 0, if it is a derived rate, the value is the same as the parent rate.   @PromotionCode 0..1 String Promotion code to apply. 0 - NoPromotion, 25 - Senior55 26 - Senior60, 27 - Senior65. If the attribute is not present or its value is 0 there is no promotion   RatePlan/BookingRules 0..1     ../BookingRule 1..n     @Code 0..1 String Empty if there are viewships conditions   ../CancelPenalties 1     ../CancelPenalty 1..n     @NonRefundable 1 Boolean    CancelPenalty/Deadline 1     @OffsetTimeUnit 1 String    @OffsetUnitMultiplier 1 Integer    @OffsetDropTime 1 String    CancelPenalty/AmountPercent 1  NmbrOfNights, Percent or Amount tag must be present   @NmbrOfNights 0..1 Integer Number of nights that will be charged   @Percent 0..1 Decimal Percent of the total amount that will be charged in case of cancellation applying the current cancel penalty   @Amount 0..1 Decimal Amount that will be charged   @CurrencyCode 0..1 String Must be present if amount tag is present   ../Viewerships 0..1     ../Viewership 1..n     ../LocationCodes 1     @LocationCodesInclusive 1 Boolean Can or cannot be requested from this countryCode   /LocationCode 0..1  If it is missing, applies to all countryCodes   @CountryCode 1 String Country ISO2 code can or cannot be requested from this rate.   RatePlan/Rates 1     ../Rate 1..n     Rate/AdditionalGuestAmounts 1     ../AdditionalGuestAmount 1..2     @AgeQualifyingCode 1 Integer N: 8, 7. Child, Baby   @MaxAge 1 Integer Max age (not inclusive) of the additional guest   Rate/PaymentPolicies 1     ../GuaranteePayment 1..n  Information about an accepted payment   @PaymentCode 1  Payment method accepted by the rate. Check Documentation \u0026gt; Code Lists \u0026gt; Payment Type Codes   ../AcceptedPayments 0..1  Accepted payments information. Only present if PaymentCode is not \u0026ldquo;MerchantPayment\u0026rdquo;   /AcceptedPayment 1..n     ../PaymentCard 1..n     @CardCode 1 String Check Documentation \u0026gt; Code Lists \u0026gt; Credit Cards   Rate/MealsIncluded 0..1  Present if board is included within the rate   @MealPlanCodes 1 Integer Check Documentation \u0026gt; Code Lists \u0026gt; Meal Plan Codes (OTA MPT)   RatePlan/SellableProducts 0..1  List of sellable products. When derived rate and not present, it applies to all rooms. In other cases, it informs about the rooms to which it applies   ../SellableProduct 0..n  Present if rooms are associated with this rate   @InvCode 1 String Sellable Product Code   @InvTypeCode 0..1 String External information about the room (own code, own description, etc.)   @InvType 1 String N: ROOM   @InvStatusType 1 String N: Active, Deactivated.   @InvNotifType 0..1 String N: New, Delta, Remove   ../GuestRoom 1..n     GuestRoom/Quantities 1     @StandardNumBeds 1 Integer Standard occupation of the room   GuestRoom/Occupancy 1     @MinOccupancy 1 Integer    @MaxOccupancy 1 Integer    @AgeQualifyingCode 1 Integer N: 10, 8, 7. Adult, Child, Infant.   GuestRoom/Room 1     @RoomTypeCode 1 String Room Code   @RoomID 1 Integer    GuestRoom/Description 0..1  Room description   Text 1 String    RatePlan/Taxes 0..1     ../Tax 1..n  Tax that applies to the room prices of the rate   @Amount/Percent 1 Decimal Tax will be applied relative to an amount or a percentage   @ChargeFrequency 0..1 Boolean Tax is/isn\u0026rsquo;t applied relative to the Amount of Nights booked   @ChargeUnit 0..1 Boolean Tax is/isn\u0026rsquo;t applied relative to the Amount of Paxes booked   @Type 0..1 String If Inclusive indicates that tax has to be added to the final price. If Type is different than Inclusive or is not present the tax is only informative.   ../TaxDescription 1     ../Text 1 String Description of tax type   ../RatePlanInclusionsType 0..1  DV   ../RatePlanInclusionDescription 1  DV   ../Name 1  DV.   RatePlan/Description 0..1  Rate description   ../Text 1 String    RatePlan/Offers 0..1     ../Offer 1..n     @OfferCode 1 String    @OfferStatusType 1 String N: Active, Deactivated   @OfferNotifType 0..1 String N: New, Delta, Remove   ../OfferRules 1     ../OfferRule 1     ../LengthsOfStay 1     ../LengthOfStay 1..2     @Time 1 Integer It indicates the number of nights for this stay   @MinMaxMessageType 1 String N: MinLOS, MaxLOS. Minimum or Maximum stay for the Offer   ../DOW_Restrictions 1     ../AvailableDaysOfWeek 1  It indicates whether the Offer data applies to a certain day of the week   @Mon 1 Boolean    @Tue 1 Boolean    @Weds 1 Boolean    @Thur 1 Boolean    @Fri 1 Boolean    @Sat 1 Boolean    @Sun 1 Boolean    ../Inventories 0..1  Rooms to which the offer will apply. If no Inventories are sent, the offer will apply to all the rooms in the Rate   ../Inventory 1..n     @InvCode 1 String Room code   ../Discount 1     @NightsDiscounted 1 String Nights discounted by the offer from the total stay amount   @DiscountPattern 1 String N: First, Last, Cheapest. Booking night/s the offer will dicount   ../OfferDescription 0..1  Offer description   ../Text 1 String    ../TPA_Extensions 0..1  Only added when creating or deleting a hotel   ../TPA_Extensions/Attribute 1     @key 1 String N: HotelNotifType   @value 1 String N: New, Remove. To create a hotel or remove all the hotel setup.    \nHotelRatePlanNotif The HotelRatePlanNotif message contains information about rate prices.\n\u0026lt;HotelRatePlanNotif\u0026gt; \u0026lt;request\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;/\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;/\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;HOT123\u0026quot;\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;TAR333\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; FreeChild = \u0026quot;true\u0026quot; FreeBaby = \u0026quot;false\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax = \u0026quot;80.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;43\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Amount = \u0026quot;20.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;10.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;TAR333\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; Code = \u0026quot;2-0-0\u0026quot; AmountAfterTax = \u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; Code = \u0026quot;3-0-0\u0026quot; AmountAfterTax = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;43\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Amount = \u0026quot;20.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;10.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanNotif\u0026gt;  Example for Derived RatePlan\n\u0026lt;HotelRatePlanNotif\u0026gt; \u0026lt;request Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;\u0026gt;\u0026lt;/RequestorID\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;\u0026gt;\u0026lt;/CompanyName\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-07-01\u0026quot; End = \u0026quot;2014-07-31\u0026quot; AdjustedPercentage = \u0026quot;10\u0026quot; AdjustUpIndicator = \u0026quot;0\u0026quot;\u0026gt;\u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-08-01\u0026quot; End = \u0026quot;2014-08-31\u0026quot; AdjustedPercentage = \u0026quot;10\u0026quot; AdjustUpIndicator = \u0026quot;0\u0026quot;\u0026gt;\u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanNotif\u0026gt;     Element Rel Type Description     HotelRatePlanNotif 1  Root Node   ../request 1     request/RatePlans 1     @HotelCode 1 String    ../RatePlan 1..n     @RatePlanCode 1 String    @FreeChild 1 Boolean Indicates if the child is free at that rate. Find here the price calculation   @FreeBaby 1 Boolean Indicates if the baby is free at that rate. Find here the price calculation   @RatePlanStatusType 0..1 String N: Active, Deactivated. Informative tag that indicates wheter RatePlan is active or not   @BaseRatePlanCode 0..1 String DV. Rate code of the base RatePlan   @CurrencyCode 0..1 String BR. ISO Currency   RatePlan/Rates 1     ../Rate 1..n     @Start 1 Date Start date of rate   @End 1 Date End date of rate   @AdjustedPercentage 0..1 Decimal DV. The percentage off the base rate plan amount used to determine the price of the Derived RatePlan   @AdjustedAmount 0..1 Decimal DV. The amount which should be added to the Base RatePlan to determine the price of the Derived RatePlan   @AdjustUpIndicator 0..1 Boolean DV: true: the adjusted amount/percentage is added to the amount specified for the Base RatePlan to determine the Derived RateAmount. false: the adjusted amount or adjusted percentage is subtracted from the amount specified for the Base RatePlan to determine the Derived RatePlan amount   Rate/BaseByGuestAmts 0..1  Different types of price can come in the same BaseByGuestAmts element.   ../BaseByGuestAmt 1..n     @AmountAfterTax 1 Decimal Total amount for the @NumberOfGuests indicated per day. This amount doesn\u0026rsquo;t include tax. When value is -1, price should be deleted from the system.   @NumberOfGuests 0..1 Integer How many adults are indicated per day. If @NumberOfGuests is not informed then @Type must be informed. The maximum @NumberOfGuests is the standard occupancy of the room   @Type 0..1 Integer If amounts are per Room or per Occupancy instead of per Pax. @Type=25: price is per Room. @Type=14: price is per occupancy, @Code is mandatory, AdditionalGuestAmounts are not allowed   @Code 0..1 String Mandatory if @Type=14.   Rate/AdditionalGuestAmounts 0..1  BR   ../AdditionalGuestAmount 1..n  Price and information about the additional pax (children, infants or extra adults   @MaxAdditionalGuests 1 Integer Number of the additional pax   @AgeQualifyingCode 1 Integer N: 10, 8, 7. Adult, child or baby   @Type 0..1 String N: Exclusive. If present price is absolute and price tag is @Amount   @Amount 0..1 Decimal Price for each additional pax   @Percent 0..1 Decimal Percent for each additional pax   RatePlan/Supplements 0..1  BR. Present if supplements by board exists   ../Supplement 1..n     @Start 1 Date Start date of this supplement   @End 1 Date End date of this supplement   @AgeQualifyingCode 0..1 Integer N: 10, 8, 7. Adult, child, baby. Not allowed if charging Supplement Board by Occupancy   @ChargeTypeCode 0..1 String Occupancy Supplement Board. Only allowed if charging Supplement Board by Occupancy.   @Amount 1 Decimal Amount of the supplement   @SupplementType 1 String N: Board   @InvCode 1 String OTA MPT Code if @SupplementType is Board. Check Documentation \u0026gt; Code Lists \u0026gt; Meal Plan Codes (OTA MPT)   RatePlan/SellableProducts 0..1  BR. List of sellable products   ../SellableProduct 1..n     @InvCode 1 Integer Sellable Product Code   @InvType 1 Integer N: ROOM. Sellable product type.    \nHotelAvailNotif The HotelAvailNotif message contains information about rate availability and allotment conditions.\n\u0026lt;HotelAvailNotif\u0026gt; \u0026lt;request\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;\u0026gt;\u0026lt;/RequestorID\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;\u0026gt;\u0026lt;/CompanyName\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;AvailStatusMessages HotelCode = \u0026quot;12\u0026quot;\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;9\u0026quot; BookingSold = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-25\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; InvCode = \u0026quot;APT\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;2\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;-1\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus SellThroughOpenIndicator = \u0026quot;false\u0026quot; MinAdvancedBookingOffset = \u0026quot;5\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;12\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-21\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;RestrictionStatus Restriction = \u0026quot;Master\u0026quot; Status = \u0026quot;Close\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;/AvailStatusMessages\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelAvailNotif\u0026gt;     Element Rel Type Description     HotelAvailNotif 1     ../request 1     request/AvailStatusMessages 1     @HotelCode 1 String    ../AvailStatusMessage 1..n     @BookingLimit 0..1 Integer DV. Number of available rooms per Room-RatePlan for the indicated dates   @BookingSold 0..1 Integer DV. Number of booked rooms per Room-RatePlan for the indicated dates. The available allotment is the difference between BookingLimit and BookingSold   AvailStatusMessage/StatusApplicationControl 1     @Start 1 Date Start date   @End 1 Date End date   @RatePlanCode 1 String    @InvCode 0..1 String BR. Room Code   @InvType 0..1 String BR. N: ROOM   AvailStatusMessage/LengthsOfStay 0..1     @ArrivalDateBased 0..1 Boolean true: the Minimum and Maximum Stay is checked ONLY the first day of the availability. false or null: the Minimum and Maximum Stay is checked all the availability days. If both values are needed, two AvailStatusMessage will be sent.   ../LengthOfStay 1..2     @Time 1 Integer Indicates the number of @TimeUnit for this stay. When value is 0 or -1, condition should be deleted from the system.   @TimeUnit 1 String N: Day   @MinMaxMessageType 1 String N: MinLOS, MaxLOS. Minimum or maximum stay   AvailStatusMessage/RestrictionStatus 0..1     @Status 0..1 String N: Open Close   @Restriction 0..1 String N: Master, Arrival, Departure.   @MinAdvancedBookingOffset 0..1 Integer Minimum number of days before the check-in date to be available to be booked. This restriction is usually used to offer discounts on early bookings. When value is 0 or -1, condition should be deleted from the system.   @MaxAdvancedBookingOffset 0..1 Integer Maximum number of days before the check-in date to be available to be booked. This restriction is usually used to offer last minute discounts on unsold inventory. When value is -1, condition should be deleted from the system.   @SellThroughOpenIndicator 0..1 Boolean BR. Room-RatePlan can be sold with no limit if @Status is Open    \nResponse messages Each request should provide a response for the same type of element that has been sent. For example, if a HotelRatePlanNotif request is received, a HotelRatePlanNotif response should be sent and so on.\n   Possible combination Elements regarding Request     HotelAvailNotifResponse / HotelAvailNotifResult   HotelRatePlanNotifResponse / HotelRatePlanNotifResult   HotelRatePlanInventoryNotifResponse / HotelRatePlanInventoryNotifResult    \nSuccess For all successful requests is expected to be returned a Success element in the response. On a HotelAvailNotif request it should be looking like the following:\n\u0026lt;HotelAvailNotifResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelAvailNotifResult\u0026gt; \u0026lt;Success xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;/\u0026gt; \u0026lt;/HotelAvailNotifResult\u0026gt; \u0026lt;/HotelAvailNotifResponse\u0026gt;  \nError On the other hand, when request provides any error, the response should look like:\n\u0026lt;HotelAvailNotifResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelAvailNotifResult\u0026gt; \u0026lt;Errors xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Error ShortText = \u0026quot;AvailStatusMessages not found\u0026quot; Code = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Errors\u0026gt; \u0026lt;/HotelAvailNotifResult\u0026gt; \u0026lt;/HotelAvailNotifResponse\u0026gt;     Element Rel Type Description     Errors 1     Error 1..n  Displays error information that has occurred in the system   @ShortText 1 String Brief description of the error   @Code 1 Integer Check General Details \u0026gt; Error Table     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/",
	"title": "Messages",
	"tags": [],
	"description": "Notif and Retrieve messages",
	"content": " Public Soap WebService Methods: https://pushprovider.xmltravelgate.com/Service/Hotel/Provider/ProviderGEN.svc?wsdl\n  Set Up Messages Configuration messages\n     Product Load Messages Messages to load product\n     Booking Flow Messages Booking Flow Messages\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/staticcontent/metadata/",
	"title": "Metadata",
	"tags": [],
	"description": "Supplier restriction and configuration",
	"content": " The metadata query returns information about the metadata or restriction of supplier. In addition, the fields belows are used to verify the Search request input in order to avoid the unnecessary request to the supplier.\n maxNumberHotels: Maximum number of hotels that can be requested. recommendedNumberHotels: Recommended number of hotels that can be requested. release: Minimum days required in between booking date and checking date ( days in advance ). If the value is zero then there is no limitation. minimumStay: Minimum number of days required for booking. If the value is zero then there is no limitation. maxStay: Maximum number of days allowed for booking. maxNumberRoomCandidates: Maximum number of room candidates that can be requested in the same search request. paxTypeRangeInRoomCandidates: Contains information about the age restrictions of the guests in a room. ageRange: The age range used by the supplier. maxPaxInRoomCandidates: Maximum number paxs in same room that can be requested in the same search request. maxPaxInAllRooms: Maximum number of sum of paxs that can be requested in the same search request. requiredRoomWithSamePaxConfiguration: Indicates whether all room must have the same configuration, same ages or same number of paxs.  Criteria Mandatory fields\n- suppliers code -\u0026gt; List of suppliers codes for which you want to receive the metadata.\nHow to request        #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"2ea2d08eb776766450a374719a10603e\",\"n\":\"Entire metadata\",\"o\":[\"graphiql\"],\"u\":\"rubencaballero\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"961ae376289f0eb9b3c17dbca0b40175\",\"n\":\"Fields checked in search\",\"o\":[\"graphiql\"],\"u\":\"zechao\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"280ca1ea08377335838553518022d510\",\"n\":\"Supplier without metadata\",\"o\":[\"graphiql\"],\"u\":\"zechao\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"175238573a34da7808da5c275591336c\",\"n\":\"Supplier not accessible for current user\",\"o\":[\"graphiql\"],\"u\":\"rubencaballero\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadata/",
	"title": "Metadata",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Metadata {  code: ID!    metadataData: MetadataData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   metadataData(MetadataData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by MetadataEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatabeds/",
	"title": "MetadataBeds",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataBeds {  informNumberOfUnits: ReviewedBool!    informSharedBed: ReviewedBool!    informBedType: ReviewedBool!    informNumberOfBeds: ReviewedBool!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields informNumberOfUnits(ReviewedBool!):   informSharedBed(ReviewedBool!):   informBedType(ReviewedBool!):   informNumberOfBeds(ReviewedBool!):    Required by MetadataRoomCandidates:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatabook/",
	"title": "MetadataBook",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataBook {  allowsDeltaPrice: ReviewedBool!    requiredAllPassengers: ReviewedBool!    allowsRemarks: ReviewedBool!    allowsUrlCard: ReviewedBool!    informBillingSupplier: ReviewedBool!    informPropertyReservationNumber: ReviewedBool!    informPrice: ReviewedBool!    allowsPreferences: ReviewedAllowsBookPreferences   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields allowsDeltaPrice(ReviewedBool!):   requiredAllPassengers(ReviewedBool!):   allowsRemarks(ReviewedBool!):   allowsUrlCard(ReviewedBool!):   informBillingSupplier(ReviewedBool!):   informPropertyReservationNumber(ReviewedBool!):   informPrice(ReviewedBool!):   allowsPreferences(ReviewedAllowsBookPreferences):    Required by MetadataData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatabooking/",
	"title": "MetadataBooking",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataBooking {  implemented: ReviewedBool!    allowsProvideLocator: ReviewedBool    allowsClientLocator: ReviewedBool    informPropertyReservationNumber: ReviewedBool    informCancelPolicies: ReviewedBool    informPriceCancel: ReviewedBool   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields implemented(ReviewedBool!):   allowsProvideLocator(ReviewedBool):   allowsClientLocator(ReviewedBool):   informPropertyReservationNumber(ReviewedBool):   informCancelPolicies(ReviewedBool):   informPriceCancel(ReviewedBool):    Required by MetadataData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatabookinglist/",
	"title": "MetadataBookingList",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataBookingList {  implemented: ReviewedBool!    allowsCreationDate: ReviewedBool    allowsCheckDate: ReviewedBool    informPropertyReservationNumber: ReviewedBool    informCancelPolicies: ReviewedBool    informPriceCancel: ReviewedBool   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields implemented(ReviewedBool!):   allowsCreationDate(ReviewedBool):   allowsCheckDate(ReviewedBool):   informPropertyReservationNumber(ReviewedBool):   informCancelPolicies(ReviewedBool):   informPriceCancel(ReviewedBool):    Required by MetadataData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatacancel/",
	"title": "MetadataCancel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataCancel {  implemented: ReviewedBool!    allowsProvideLocator: ReviewedBool    allowsClientLocator: ReviewedBool    informPriceCancel: ReviewedBool   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields implemented(ReviewedBool!):   allowsProvideLocator(ReviewedBool):   allowsClientLocator(ReviewedBool):   informPriceCancel(ReviewedBool):    Required by MetadataData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatacandidate/",
	"title": "MetadataCandidate",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataCandidate {  min: Int!    max: Int!    type: HotelPaxType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields min(Int!):   max(Int!):   type(HotelPaxType!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadataconnection/",
	"title": "MetadataConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataConnection {  edges: [MetadataEdge]    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([MetadataEdge]):   adviseMessage([AdviseMessage!]):   pageInfo(PageInfo!):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatacontent/",
	"title": "MetadataContent",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataContent {  informExclusiveDeal: ReviewedBool!    hotels: MetadataStatic    destinations: MetadataStatic    rooms: MetadataStatic    boards: MetadataStatic    categories: MetadataStatic    markets: MetadataStatic    currencies: MetadataStatic    amenities: MetadataStatic   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields informExclusiveDeal(ReviewedBool!):   hotels(MetadataStatic):   destinations(MetadataStatic):   rooms(MetadataStatic):   boards(MetadataStatic):   categories(MetadataStatic):   markets(MetadataStatic):   currencies(MetadataStatic):   amenities(MetadataStatic):    Required by MetadataData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatadata/",
	"title": "MetadataData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataData {  supplierCode: ID!    search: MetadataSearch!    quote: MetadataQuote!    book: MetadataBook!    booking: MetadataBooking!    bookingList: MetadataBookingList!    cancel: MetadataCancel!    content: MetadataContent!    generic: MetadataGeneric!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierCode(ID!):   search(MetadataSearch!):   quote(MetadataQuote!):   book(MetadataBook!):   booking(MetadataBooking!):   bookingList(MetadataBookingList!):   cancel(MetadataCancel!):   content(MetadataContent!):   generic(MetadataGeneric!):    Required by Metadata:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadataedge/",
	"title": "MetadataEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataEdge {  node: Metadata    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Metadata):   cursor(String!):    Required by MetadataConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatageneric/",
	"title": "MetadataGeneric",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataGeneric {  requiredNationality: ReviewedBool    allowsOnRequest: ReviewedBool    allowsNationality: ReviewedBool   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields requiredNationality(ReviewedBool):   allowsOnRequest(ReviewedBool):   allowsNationality(ReviewedBool):    Required by MetadataData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadataquote/",
	"title": "MetadataQuote",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataQuote {  allowsBlockOption: ReviewedBool!    informBindingPrice: ReviewedBool!    informNRFRate: ReviewedBool!    informRemarks: ReviewedBool!    informCancelPolicies: ReviewedBool!    informCancelPoliciesDescription: ReviewedBool!    informFees: ReviewedBool!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields allowsBlockOption(ReviewedBool!):   informBindingPrice(ReviewedBool!):   informNRFRate(ReviewedBool!):   informRemarks(ReviewedBool!):   informCancelPolicies(ReviewedBool!):   informCancelPoliciesDescription(ReviewedBool!):   informFees(ReviewedBool!):    Required by MetadataData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadataroomcandidates/",
	"title": "MetadataRoomCandidates",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataRoomCandidates {  maxNumberRoomCandidates: ReviewedInt!    paxTypeRangeInRoomCandidates: ReviwedPaxTypeRangeInRoomCandidates    maxPaxInRoomCandidates: ReviewedInt!    maxPaxInAllRooms: ReviewedInt!    requiredRoomWithSamePaxConfiguration: RequiredRoomWithSamePaxConfiguration!    rateRules: [ReviewedRateRule!]!    beds: MetadataBeds!    ageRange: ReviewedAgeRanges!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields maxNumberRoomCandidates(ReviewedInt!):   paxTypeRangeInRoomCandidates(ReviwedPaxTypeRangeInRoomCandidates):   maxPaxInRoomCandidates(ReviewedInt!):   maxPaxInAllRooms(ReviewedInt!):   requiredRoomWithSamePaxConfiguration(RequiredRoomWithSamePaxConfiguration!):   rateRules([ReviewedRateRule!]!):   beds(MetadataBeds!):   ageRange(ReviewedAgeRanges!):    Required by MetadataSearch:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatasearch/",
	"title": "MetadataSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataSearch {  destinations: MetadataSearchDestinations!    allowsCurrency: ReviewedBool!    allowsBusinessRules: ReviewedBool!    implementsCombination: ReviewedBool!    numMarketsAllowed: ReviewedInt    release: ReviewedInt!    minimumStay: ReviewedInt!    maxStay: ReviewedInt!    roomCandidates: MetadataRoomCandidates!    informBindingPrice: ReviewedBool!    informCancelPolicies: ReviewedBool!    informRoomCancelPolicies: ReviewedBool!    informRemarks: ReviewedBool!    paymentTypes: [ReviewedPaymentType!]!    optionTypes: [ReviewedHotelOptionType!]!    languages: [ReviewedText!]!    informDailyPrice: ReviewedBool!    informDailyRatePlan: ReviewedBool!    informOffers: ReviewedBool!    informNRFRateByRoom: ReviewedBool!    informFees: ReviewedBool!    informRoomFees: ReviewedBool!    informHotelName: ReviewedBool!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields destinations(MetadataSearchDestinations!):   allowsCurrency(ReviewedBool!):   allowsBusinessRules(ReviewedBool!):   implementsCombination(ReviewedBool!):   numMarketsAllowed(ReviewedInt):   release(ReviewedInt!):   minimumStay(ReviewedInt!):   maxStay(ReviewedInt!):   roomCandidates(MetadataRoomCandidates!):   informBindingPrice(ReviewedBool!):   informCancelPolicies(ReviewedBool!):   informRoomCancelPolicies(ReviewedBool!):   informRemarks(ReviewedBool!):   paymentTypes([ReviewedPaymentType!]!):   optionTypes([ReviewedHotelOptionType!]!):   languages([ReviewedText!]!):   informDailyPrice(ReviewedBool!):   informDailyRatePlan(ReviewedBool!):   informOffers(ReviewedBool!):   informNRFRateByRoom(ReviewedBool!):   informFees(ReviewedBool!):   informRoomFees(ReviewedBool!):   informHotelName(ReviewedBool!):    Required by MetadataData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatasearchdestinations/",
	"title": "MetadataSearchDestinations",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataSearchDestinations {  maxNumberHotels: ReviewedInt!    maxNumberCities: ReviewedInt!    maxNumberZones: ReviewedInt!    maxNumberGeoCodes: ReviewedInt!    hotelSameDestinationRestriction: ReviewedBool!    destinationSameCountryRestriction: ReviewedBool!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields maxNumberHotels(ReviewedInt!):   maxNumberCities(ReviewedInt!):   maxNumberZones(ReviewedInt!):   maxNumberGeoCodes(ReviewedInt!):   hotelSameDestinationRestriction(ReviewedBool!):   destinationSameCountryRestriction(ReviewedBool!):    Required by MetadataSearch:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/metadatastatic/",
	"title": "MetadataStatic",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MetadataStatic {  languages: [ReviewedText!]!    implemented: ReviewedBool!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields languages([ReviewedText!]!):   implemented(ReviewedBool!):    Required by MetadataContent:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/metadatatype/",
	"title": "MetadataType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum MetadataType{   STRING,    NUMERIC,    BOOLEAN,    XML,    URI,   }   Required by HotelRuntimeParameter:     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/",
	"title": "Methods",
	"tags": [],
	"description": "API Methods",
	"content": "   Booking Flow How to perform a booking\n     Management Management operations for bookings performed via TGX\n     Content How to manage content: HotelList, MealplanList, CategoryList, Metadata...\n    Common Elements     SOAP Examples     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/",
	"title": "Methods",
	"tags": [],
	"description": "API Methods",
	"content": "   Booking Flow Booking Flow\n     Management Management operations for bookings performed via TGX\n     Content How to manage content: HotelList, MealplanList, CategoryList, Metadata...\n     Common Elements      Examples     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/modeprice/",
	"title": "ModePrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ModePrice{   UNIT,    PERCENTAGE,   }   Required by AlertPrice:  Price contains the specific configuration for Price alert Type  AlertPriceInput:  Price input  AlertPriceUpdateInput:  Price update   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/modeprice/",
	"title": "ModePrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ModePrice{   UNIT,    PERCENTAGE,   }   Required by AlertPrice:  Price contains the specific configuration for Price alert Type  AlertPriceInput:  Price input  AlertPriceUpdateInput:  Price update   "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/modetype/",
	"title": "ModeType",
	"tags": [],
	"description": "",
	"content": " Mode to select which kind of stats do you want query\nGraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:  Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/modetype/",
	"title": "ModeType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:    ActiveFilterInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/modetype/",
	"title": "ModeType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ModeType{   BUYER,    SELLER,   }   Required by StatsFilterInput:    ActiveFilterInput:    LoggingLegacyFilterInput:  Filters needed to do a search. From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss),    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/howtos/multimedia/",
	"title": "Multimedia",
	"tags": [],
	"description": "",
	"content": " Multimedia  "
},
{
	"uri": "https://travelgatex.com/integrations/flights/nas/",
	"title": "NAS - Norwegian",
	"tags": [],
	"description": "Norwegian integration",
	"content": "   Nas - Norwegian Changelog     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): ID code  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {  code: ID!    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   createdAt(DateTime!):   updatedAt(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/occupancy/",
	"title": "Occupancy",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Occupancy {  id: Int!    paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(Int!):   paxes([Pax!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/occupancyrange/",
	"title": "OccupancyRange",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OccupancyRange {  min: Int    max: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields min(Int):   max(Int):    Required by OccupancyStatic:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/occupancystatic/",
	"title": "OccupancyStatic",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OccupancyStatic {  total: OccupancyRange    infants: OccupancyRange    children: OccupancyRange    adults: OccupancyRange   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields total(OccupancyRange):   infants(OccupancyRange):   children(OccupancyRange):   adults(OccupancyRange):    Required by RoomData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/onlystatusresponse/",
	"title": "OnlyStatusResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OnlyStatusResponse {  error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields error(Error):   warnings([Warning]):    Required by MappeaMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/onlystatusresponse/",
	"title": "OnlyStatusResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OnlyStatusResponse {  error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields error(Error):   warnings([Warning]):    Required by MappeaMutation:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by OperationDetailed:  Stats information per operation  OperationEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by OperationDetailed:    OperationEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by OperationEdge:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by OperationEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by OperationEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   operationData(OperationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by OperationEdge:    OperationDetailed:    LoggingLegacyData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by APIData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by APIData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by APIData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by APIData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by APIData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OperationEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:    APIData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):    Required by Operation:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):    Required by Operation:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):    Required by Operation:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):    Required by Operation:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):    Required by Operation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):    Required by Operation:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/operationdetailed/",
	"title": "OperationDetailed",
	"tags": [],
	"description": "",
	"content": " Stats information per operation\nGraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    cache: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields operation(Operation!): Operation information  totalHits(Int!): Total hits.  detailedHits([StatsInfo!]): Hits grouped depending on their status  cache(Boolean!): Responsible for the execution of the this stats. If TRUE then cache, else client   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/operationdetailed/",
	"title": "OperationDetailed",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int64!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    trafficType: TrafficType!   Show deprecated fields   cache: : Boolean! // deprecated from 2019-04-03 Added new field trafficType.     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields operation(Operation!):   totalHits(Int64!):   detailedHits([StatsInfo!]):   cache(Boolean!):   trafficType(TrafficType!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/operationdetailed/",
	"title": "OperationDetailed",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int64!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    trafficType: TrafficType!   Show deprecated fields   cache: : Boolean! // deprecated from 2019-04-03 Added new field trafficType.     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields operation(Operation!):   totalHits(Int64!):   detailedHits([StatsInfo!]):   cache(Boolean!):   trafficType(TrafficType!):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {  node: Operation    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Operation):   cursor(String!):    Required by OperationConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "https://travelgatex.com/mappea/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OperationType{   SEARCH,    QUOTE,    BOOKING,    CANCEL,    SCHEDULER,    CREATE,    READ,    UPDATE,    DELETE,    EXECUTE,    OTHER,   }   "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.\nGraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by AccessData:    SupplierData:    DomainData:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessData:    SupplierData:    SystemData:    ProfileData:    DomainData:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessData:    SupplierData:    SystemData:    DomainData:    ClientData:    ProfileData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by SupplierData:    AccessData:    ClientData:    ProfileData:    DomainData:    SystemData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessData:    SupplierData:    SystemData:    DomainData:    ClientData:    ProfileData:    PointOfSaleData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   organizationData(OrganizationData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessData:    SupplierData:    SystemData:    DomainData:    ClientData:    PointOfSaleData:    ProfileData:    OrganizationEdge:    AdminMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/organizationconnection/",
	"title": "OrganizationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationConnection {  edges: [OrganizationEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([OrganizationEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by AdminQuery:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    domains: [Domain]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection): Only responses folders.(non-hierarchically)  descendents(GroupConnection): Response all descendents groups nodes in this group (nom-hierarchically)  parents(GroupConnection): Response all parents groups nodes for this group (nom-hierarchically)  owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection): APIs assigned to this group. Products have APIs.  products(ProductConnection): Products asign to a organization  allMembers(MemberConnection): Response all members in this group\u0026#39;s childrens (hierarchically)  accesses(AccessConnection): Access resources in a organization  suppliers(SupplierConnection): Supplier resources in a organization  clients(ClientConnection): Clients resources in a organization  domains([Domain]!):    Required by Organization:  Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection    domains: [Domain]!    template: String    country: Country!    allAccesses: AccessConnection    allSuppliers: SupplierConnection    allClients: ClientConnection    allProfiles: ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   products(ProductConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   profiles(ProfileConnection):   domains([Domain]!):   template(String):   country(Country!):   allAccesses(AccessConnection):   allSuppliers(SupplierConnection):   allClients(ClientConnection):   allProfiles(ProfileConnection):    Required by Organization:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection    domains: [Domain]!    template: String    country: Country!    allAccesses: AccessConnection    allSuppliers: SupplierConnection    allClients: ClientConnection    allProfiles: ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   products(ProductConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   profiles(ProfileConnection):   domains([Domain]!):   template(String):   country(Country!):   allAccesses(AccessConnection):   allSuppliers(SupplierConnection):   allClients(ClientConnection):   allProfiles(ProfileConnection):    Required by Organization:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection    domains: [Domain]!    template: String    country: Country!    allAccesses: AccessConnection    allSuppliers: SupplierConnection    allClients: ClientConnection    allProfiles: ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   products(ProductConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   profiles(ProfileConnection):   domains([Domain]!):   template(String):   country(Country!):   allAccesses(AccessConnection):   allSuppliers(SupplierConnection):   allClients(ClientConnection):   allProfiles(ProfileConnection):    Required by Organization:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection    domains: [Domain]!    template: String    country: Country!    allAccesses: AccessConnection    allSuppliers: SupplierConnection    allClients: ClientConnection    allProfiles: ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   products(ProductConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   profiles(ProfileConnection):   domains([Domain]!):   template(String):   country(Country!):   allAccesses(AccessConnection):   allSuppliers(SupplierConnection):   allClients(ClientConnection):   allProfiles(ProfileConnection):    Required by Organization:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    descendents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     codeStartsWith: String,     ): GroupConnection    parents(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    owner: Member    isEditable: Boolean!    members(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    allMembers(    codes: [ID!],     type: MemberType,     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    accesses(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): AccessConnection    suppliers(    codes: [ID!],     accessID: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): SupplierConnection    clients(    codes: [ID!],     name: [ID!],     isActive: Boolean,     first: Int,     last: Int,     before: String,     after: String,     ): ClientConnection    profiles(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProfileConnection    domains: [Domain]!    template: String    country: Country!    allAccesses: AccessConnection    allSuppliers: SupplierConnection    allClients: ClientConnection    allProfiles: ProfileConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   type(GroupType!):   info(String):   children(GroupConnection):   descendents(GroupConnection):   parents(GroupConnection):   owner(Member):   isEditable(Boolean!):   members(MemberConnection):   apis(APIConnection):   products(ProductConnection):   allMembers(MemberConnection):   accesses(AccessConnection):   suppliers(SupplierConnection):   clients(ClientConnection):   profiles(ProfileConnection):   domains([Domain]!):   template(String):   country(Country!):   allAccesses(AccessConnection):   allSuppliers(SupplierConnection):   allClients(ClientConnection):   allProfiles(ProfileConnection):    Required by Organization:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/organizationedge/",
	"title": "OrganizationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationEdge {  node: Organization    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Organization):   cursor(String!):    Required by OrganizationConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/organizationorderbyinput/",
	"title": "OrganizationOrderByInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OrganizationOrderByInput{   code_ASC,    code_DESC,    name_ASC,    name_DESC,    owner_ASC,    owner_DESC,    domain_ASC,    domain_DESC,    country_ASC,    country_DESC,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/organizationtemplate/",
	"title": "OrganizationTemplate",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum OrganizationTemplate{   ORGANIZATION_DEFAULT,   }   Required by CreateOrganizationInput:    SuitOrganizationInput:     "
},
{
	"uri": "https://travelgatex.com/applications/insights/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Insights Overview",
	"content": " In order to analyze and produce useful insights, Insights extracts, loads and consolidates data from our Marketplace.\nOnce the data is consolidated in our data warehouse, we can share data with Partners already connected to our platform. You will have access to accurate data regarding your performance, ratios, prices, product usage\u0026hellip; With these insights an accurate benchmarking against competitors is provided so that our partners can gain a competitive advantage.\nWe don\u0026rsquo;t expose our partners‚Äô data because we use anonymous competitive sets.   Datasets Insights will allow access to different datasets with structured data to perform any kind of analysis, supported in different dataset publication formats.\nTooling If you don\u0026rsquo;t have your own reporting tool, the easiest way to interact with Insights datasets is via our free Google Data Studio Templates.\nFind out more about TravelgateX free tools in Dataset tooling.\n"
},
{
	"uri": "https://travelgatex.com/applications/logging/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Logging Overview",
	"content": " In order to analyze useful metrics about performance, Logging extracts, loads and stores data from all TravelgateX products.\nOnce the metrics are stored in our infrastructure, you can query and analyze your performance using API Logging query or TravelgateX Logging Web.\n  Working with Logging The most important use case working with Logging is to query about your performance.\n"
},
{
	"uri": "https://travelgatex.com/applications/stats/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Stats Overview",
	"content": " In order to analyze useful metrics about performance, Stats extracts, loads and stores data from all TravelgateX products.\nOnce the metrics are stored in our infrastructure, you can query and analyze your performance using API stats query or TravelgateX Stats Web\n  Working with Stats The most important use case working with Stats is to query about your performance.\n"
},
{
	"uri": "https://travelgatex.com/alerts-x/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Alerts Overview",
	"content": " In order to analyze useful metrics about performance, Alerts extracts, loads and stores data from all TravelgateX marketplace.\nOnce the metrics are stored in our infrastructure, our service-alerts analyze your performance according to a configuration alert which can be created/updated or viewed using API alertsWorking with Alerts The most important use case working with Alerts is to query about your performance.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/channel-x/overview/",
	"title": "Overview",
	"tags": [],
	"description": "ChannelX Information",
	"content": " Channel-X extracts the product loaded by Channel Managers into our Inventory system and sends it to a third partner, normally an OTA. As a Buyer, you will have the option of loading all the product into your system by selecting the Full Copy tab in Inventory\u0026rsquo;s extranet, having the possibility to only select the hotels you are interested in copying. Also, each update the Channel Manager does, will be notified in a smaller product request, as you will only receive information that has changed. This is due to the ability of Channel-X to detect what information has changed and which is duplicated.\nThe connection with Channel Managers through TravelgateX has a previous step where the Buyer, using the Inventory extranet, configures the SetUp of the hotels, rates and rooms contracted with the hoteliers so the Channel Manager can map all this information and load availability and prices for you.\n  What can I receive Delta: will keep information up to date, sending the different updates that the hotels can have (prices, availability, inventory). Its main use is to receive real time changes in order to have the product up to date.\nFullCopy: sends a complete copy of the product of a hotel or a bunch of them. Its main use is to get a full refresh of the product in case something happens (data base dropped, server down for a period of time\u0026hellip;) or simply as a precaution measure.\nOnce you have received the first element of the Full Copy, please bear in mind that you will have to drop the loaded information, overwrite it with all the incoming information for that hotel or do a proper merge with the changing information.\nHow it works ChannelX is defined by 3 main parts. Each one has its own functionality and helps to define the global flow of the service.\n Product to service: every time a message arrives to the Inventory service (either inventory notification, availability load, price load\u0026hellip;) and it belongs to a Channel-X relation, the message will be sent to this service. At first, this message will be converted from Inventory API to an own Channel-X object. Once we have this, the message is sent to a storage database.\n Aggregation of the product: this process will be based on reading each one of the messages stored into application memory. Each of them will be added to a final message structure which will get the product with the final changes. In other words, this process aggregates the different changes received in a period of time and sends one unique Channel-X message. With this, we help the system to reduce message workload, compacting several messages into one in a period of time.\n Product Delivery: once the compacted message is created, application gets ready to send it to the Client.\n  What should I expect from Channel-X API has three main methods/messages:\n1. HotelRatePlanInventoryNotif Each element can have one of these three states: \u0026lsquo;New\u0026rsquo;, \u0026lsquo;Delta\u0026rsquo;, \u0026lsquo;Remove\u0026rsquo;, each one will be indicated in its correspondent tag.\n New: it means the element was not added before. You should add the element in your system with the information provided. Delta (Edit): it means the element was created before but it has been edited. The element should be already created in your system and you should change the information of it with the new one. Note: here you will get all the information of the element, as we need to provide it, but it is not extrictly necessary that all of this info has changed, it could only change a part of it. You can override all the information already loaded for that specific element and reload it with the new one or have control of what has changed. Remove: it means the element has been removed. You should delete the element in your system and all its dependences. When deleting an element (Hotel, rate, derived rate or room), all the information you will receive about the element in the request is the code. If this happens, you should remove from your system all the elements that are depending on the one to delete.  2. HotelAvailNotif It loads availability and conditions for the different elements. No rate information will be returned except code.\n3. HotelRatePlanNotif It loads prices and supplements for the different elements. No rate information will be returned except Code, currency and status.\nThings to keep in mind  Our system works with up to 3 types of prices: per room, per occupancy and per standard occupancy. Although it is unusual that a channel works with more than one, it can happen. If this is the case, the 3 price types can coexist and the system should always return the lowest one at availability response. Once conditions are loaded they cannot be deleted, they can only modified by sending same dates with different values. If you do not get information for a certain range of dates that you got previously loaded in the system, do not overwrite them, as this means these days conditions that don\u0026rsquo;t appear in the request have not changed.  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Plugins Overview. What they are, when they get executed and how to execute them.",
	"content": " Introduction HotelX Plugins are a separate Go application that get compiled into the main application and run natively in our servers that add or modify specific functionalities. Plugins are specified at the request level, or be configured by default.\nFlows HotelX query or mutation determine what flow is executed. Plugins can be executed in different Queries or Mutations:\n Search Quote Book Booking Cancel  Steps Step is the minium container where plugins are executed sequentially.\n   Step When it\u0026rsquo;s executed     Request After Client requests message to HotelX.   Request Access Before send request to Supplier using Access and after Accesses has been calculated.   Response Option After Supplier responds message. For every option returned.   Response Access After all Access options has been responded.   Response Before HotelX responds message to to Client.    Plugin Types Plugin types supported by HotelX:\n [PRE_STEP]: First execution on every step. HOTEL_MAP: Hotel mapping codes. BOARD_MAP: Board mapping codes. ROOM_MAP: Room mapping codes. PROMOTION_MAP: Promotion mapping codes. AMENITY_MAP: Amenity mapping codes. CURRENCY_CONVERSION: Currency rate conversion. COMMISSION: Calculate the net price.¬† AGGREGATION: Aggregate multiple supplier options. MARKETS_GROUP: Groups the Search result by markets that share the same product. [POST_STEP]: Last execution on every step.  Plugin Names  hotel_map: Hotel mapping codes. board_mapX: Board mapping codes. room_mapX: Room mapping codes. promotion_mapX: Promotion mapping codes. amenity_mapX: Amenity mapping codes. currency_exchange: Currency rate conversion. commission: Calculate the net price. cheapest_price: Aggregate multiple supplier options. search_by_destination: Enables search query to request per destinations by converting destination codes to hotel codes. add_parameterX: Allows Add Parameter to the access created for a supplier. blacklist: Filter out specific hotels from the Search query. booking_detail_persistence: Allows to store and avoid duplicated bookings. market_groupX: Groups the Search result by markets that share the same product. preference: To give preference to the options that match the preference rules. safety_margin: Discards those options that have a commission higher than expected. genvcc: Creates a virtual credit card at Book step.  Plugin Context Execution Once message hits HotelX, it flows over different flows and steps. That\u0026rsquo;s why plugins are executed in different contexts.\nContext allows:\n Read objects involved in current query and/or mutations. Read objects available in all HotelX operations.  Plugin Step Execution HotelX determines the order and the plugins executed for each step. Notice that not all the plugins available in HotelX have a plugin type. The following table shows the plugins with plugin types and also the rest of the plugins with their corresponding plugin name.\n    search quote hotelBook hotelCancel hotelBooking     Request [PRE_STEP]\nHOTEL_MAP\n[POST_STEP] [PRE_STEP]\n[POST_STEP] [PRE_STEP]\nbooking_detail_persistence\ngenvcc\n[POST_STEP] [PRE_STEP] [POST_STEP] [PRE_STEP] [POST_STEP]   Request Access [PRE_STEP]\nadd_parameterX\nMARKETS_GROUP\nblacklist\n[POST_STEP] [PRE_STEP]\nadd_parameterX\n[POST_STEP] [PRE_STEP]\nadd_parameterX\n[POST_STEP] [PRE_STEP]\nadd_parameterX\n[POST_STEP] [PRE_STEP]\nadd_parameterX\n[POST_STEP]   Response Option [PRE_STEP]\nBOARD_MAP\nROOM_MAP\nAMENITY_MAP\nPROMOTION_MAP\nCURRENCY_CONVERSION\nCOMMISSION\nsafety_margin\n[POST_STEP] [PRE_STEP]CURRENCY_CONVERSION\nCOMMISSION\n[POST_STEP] [PRE_STEP]\nCURRENCY_CONVERSION\nCOMMISSION\n[POST_STEP] [PRE_STEP]\nCURRENCY_CONVERSION\nCOMMISSION\n[POST_STEP] [PRE_STEP]\nCURRENCY_CONVERSION\nCOMMISSION\n[POST_STEP]   Response [PRE_STEP]\nAGGREGATION\npreference[POST_STEP] [PRE_STEP] [POST_STEP] [PRE_STEP] [POST_STEP] [PRE_STEP] [POST_STEP] [PRE_STEP] [POST_STEP]    Ftp Endpoint ftp://ftp.xmltravelgate.com\nYou will receive access credentials to the FTP server with your Onboarding Welcome Pack\n Directory Format Root path The structure of the directory should be in the below format, all files should be inside this directory\n/F[Folder code]_[Unique code]/HotelX_[Unique code]/\n F[Folder code]_[Unique code]\n Folder code: corresponds to the folder number. Unique code: corresponds to the folder unique code in our system.  HotelX_[Unique code]\n Unique code: corresponds to the HotelX unique code in our system.   Example  /F**0**\\_**178**/HotelX\\_**179**  Updating ftp data We have two options:\n Reprocessing the same data by renaming the file and just removing \u0026ldquo;_processed\u0026rdquo;.\nExample: SourceContext_DestinationContext_entity_map_processed.csv \u0026ndash;\u0026gt; example.csv Changing the data by deleting the processed file and uploading a new one with new information.   Deleting ftp data Uploading a new file only with headers (no information).\nCode Source, Code Destination  Entities processed types: Sequential Type of processing sequentially, the first rule that coincides will be the one applied.\nSupplier Rules applied or indexed at the supplier level.\nAccess Rules applied or indexed at the access level.\nHotel The key to indexing is of the hotel type, we hope that the reference is by a hotel code where the type will be given by the context.\nDestination Idem hotel.\nWe have different combinations values from entities values this table show this combinations:\n   entity chainCodes destinationCodes hotelCodes     chain Yes No No   hotel No No Yes   destination No Yes No    How to execute a plugin A plugin execution can be specified in any request‚Äôs HotelSettingsInput and it must specify in which step it should be executed. The plugin type and name are mandatory in order to identify a plugin instance.\n\u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;PluginStepType\u0026quot;, \u0026quot;pluginsType\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;plugin name (its unique)\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;PluginType\u0026quot;, \u0026quot;parameters\u0026quot;: [] } } ]  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Inventory Overview",
	"content": " Inventory Overview Inventory allows Channel Managers and Hotel Product Distributors to push their product into a TravelgateX database, thus making it available for the TravelgateX Buyers.\nHow does it work? Channel Managers and Hotels will push data to Inventory.\n Inventory receives the data from the different channels and stores it in a common structure.\n Then, this product can be consumed in 3 different ways by TravelgateX Buyers:\n Via Pull with our Hotel-X solution. Via Push with our Channel-X solution. Via a Flat File solution.   I want to buy from Channel Managers If you are a Buyer and you want to connect with different Channel Managers you will need the following:\n Be a Buyer in TravelgateX platform Request the activation in our connectform. Once the connection is made and delivered to you, use our Inventory extranet to create the SetUp of the hotels, rates and rooms contracted with the hoteliers so the Channel Manager can map all this information and load availability and prices for you. We always recommend to start with a real pilot hotel before going live.  I want to sell my inventory If you are a Channel Manager or a supplier who wants to be integrated in a push connection, you have two options tojoin our marketplace:\n Push API: Integrate with Inventory API and load your availability and prices for your different buyers trough a unique integration.\n Extranet: If you don\u0026rsquo;t have an API and want to load your product manually, you can use our Inventory extranet.\n  "
},
{
	"uri": "https://travelgatex.com/core/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Admin Overview",
	"content": " In this documentation we will describe what the App Admin is and what it does.\nAccesses An Access is a set of credentials and the authentication configuration that enables a Buyer to access a Supplier. To gain access, a Buyer needs to confirm with TravelgateX that they have an agreement in place with each Supplier with whom they want to integrate.\n"
},
{
	"uri": "https://travelgatex.com/distribution/extranet/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Extranet rules Overview",
	"content": " Extranet Overview Distribution-X extranet allows you to manage business configurations of your organization and their correspondent agencies. You will have access to different tools, components and panels to create, modify or edit business rules, add filters to your product and more.\nYou have also the option to generate reports, search for suppliers and hotels and check the rules historic.\nOn this extranet you can configurate as many users as you want from your organization with different permissions (viewer or editor).\nSections Once you are logged in, you will be redirected to the home page or Landpage, where you will be able to see the logo of your organization and changelog of Distribution-X.\nIn order to be able to see and access the different sections of the web you can display the left sidebar:\n\nA brief summary of these sections:\n Landpage: Home page. General Settings: To manage the rules that apply to the organization. Tools: Additional tools as masters information, reports or token decrypter. Bookings: To check and list books and its details. Agencies: To manage the rules that apply to a specific agency.  "
},
{
	"uri": "https://travelgatex.com/distribution/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Distribution Overview",
	"content": " In this documentation we will describe what the App Distribution is, what it does and also what it doesn\u0026rsquo;t do!\nDistribution: it‚Äôs a rules engine Distribution is a rules engine for the distribution of hotel products. The main rules that this solution offers are grouped into:\nPricing Rules The main potential of Distribution lies in the versatility when it comes to defining complex rules to define the sales price. The different rules are calculated to obtain a percentage to be applied to the purchase price: it is not possible to define a fixed amount (fee). Rules can be defined to set both positive and negative percentages, but Distribution will never sell below the purchase price.\nBlacklist rules By default Distribution works in such a way that everything is open for sale, so it offers a mechanism to define what we do not want to sell (based on different characteristics of the sale). Thus, the sale of everything that comes from the supplier is allowed and if there is no explicit rule, no element will be blocked.\nThe reverse way would be to work with WhiteList rules and not allow selling unless explicitly enabled. This is a more restrictive method. Rules with additional functionality Apart from the main functions to establish the sale price or close sales (blacklist), Distribution also offers a set of rules such as filters, modifiers and currency exchanges to adapt the sale to certain needs not directly linked to the sale price but to characteristics of the sale itself. Examples would be applying filters on the type of rate, the type of cancellation policies, etc\u0026hellip;\nThe entire set of rules and their behaviour is described in the documentation for the Rules Management Extranet. \nOne aspect to keep in mind is that Distribution only modifies the price of the product and the price of the cancellation policies, but it does not modify the rest of the product\u0026rsquo;s characteristics: rooms, cancellation policies conditions, rates, etc. are not changed.\nDistribution: not a stand-alone product Distribution is not a stand-alone product, it\u0026rsquo;s a module within the TravelgateX ecosystem and to be able to operate it, it is necessary to use other products as per below:\n To access Distribution it must be done through our Hotel Buyers Legacy API or Hotel-X Buyers API. This means that the Buyers must integrated to TravelgateX using one of the two APIs (each TravelgateX API has its specific technical characteristics, data model and specific configuration).\n Connecting to the final supplier must be done through Hotel-X. Distribution does not connect directly with the supplier, but rather uses Hotel-X and the TravelgateX ecosytem: this implies that in order to include a supplier\u0026rsquo;s product in the distribution module, it is mandatory that the supplier‚Äôs integration is part of the ecosystem of TravelgateX.\n  In summary, all Buyers must have integrated either our Hotel Buyers Legacy API or Hotel-X Buyers API and since both have connectivity with Distribution then Distribution will apply the entire set of rules configured for the distribution of the product and will access through Hotel-X to suppliers integrated with TravelgateX.\nDistribution: it is a reservation storage The main objective of Distribution is to act as a distribution module, mainly establishing the selling prices of the product and for this reason it also stores the reservations. The product information is saved both with the configuration received from the supplier, and also with the business rules with which the reservation (or cancellation) has been made. At this point it\u0026rsquo;s important to remember that the information stored in Distribution will be out of sync with the supplier if any modification is made directly to the supplier without using the TravelgateX reservation flow: if the reservation is modified directly with the supplier, the reservation stored in Distribution will not be updated automatically (no self-sync mechanism is included). Distribution offers basic functionalities to modify reservations (either manually through the web or for an application through an API) but also in these cases reservations are modified within the Distribution storage system and are not synchronized with the supplier. It is the responsibility of the Distribution customer to maintain synchronization between systems in the case of actions outside the normal reservation flow.\nDistribution: it is a master entities storage Distribution is also a master entities storage (static information specific to the organization, such as meal plan codes, suppliers, hotels, \u0026hellip;) for the following reasons:\n To support static information operations: All the information linked to the static information operations (list of hotels with basic information, list of meal plans, list of suppliers, etc.) is extracted directly from the master entities storage of Distribution so that no queries or requests are made to suppliers or other external systems. It is a way of having information controlled without depending on other systems.\n To support the Rules Management Extranet\n To facilitate usability, the Distribution interface (web in which the different rules that define the behavior of the distribution are managed) relies on the master entities storage to show names to users so that they do not have to work with codes.\n To make use of metadata in the rules There are different rules that are based on entities metadata. For example, in order to set rules on specific countries or cities, we need to know the country and city of the hotels we need to apply these rules to, and this information is included in the hotel master.\n  The loading of this information is done mainly through files located in FTP directories and built based on detailed specifications. There are master entities that can be managed directly on the extranet.\nSpecifically, we must load the following information into Distribution:\n Complete portfolio of hotels. Buyers / Agencies / Clients / distribution channels. Currencies exchange. MealPlans. Suppliers.  We also offer the following options:\n Hotel portfolio by Buyer (agency / client / distribution channel). Offices by agency. Destination tree and destination groups. Detailed hotel information. Room information.  Distribution: not a log management system Although Distribution stores reservations and cancellation logs, it does not store the entire set of transactions.\nDistribution: not an aggregator and no direct access to suppliers Distribution does not access the system of suppliers directly (Hotel-X does that) nor does it aggregate product. These functionalities are available in the Hotel-X API (which includes a set of rules to control this behavior). Hotel-X accesses different suppliers asynchronously, collecting their product and carrying out the aggregation to generate a unique response, which will be the one that Distribution will feed from and over which the set of rules will apply.\nDistribution: no mapping Distribution is located in the sales part, so it always works with sales codes and always expects to receive sales codes from Hotel-X. So, where is the mapping done between supplier codes and sales codes? It is done at Hotel-X. Therefore, it\u0026rsquo;s important to remember that Distribution rules are always defined on sales entities and sales codes.\nDistribution: not a product storage Another important point to keep in mind is that Distribution is not a product storage. Distribution enforces distribution rules on the product it receives from Hotel-X. At Distribution we do not load quotas, fees, rates, nor perform quota blocks: the product is already received to be distributed. The fact that Distribution is a reserve storage without being a product storage is due to the fact that Distribution modifies the sale price and the other modules of the TravelgateX ecosystem are unaware of its behaviour, actions and results.\n"
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Reservation API Overview",
	"content": "The Reservation API is a solution included for Distribution-X clients who want to search, consult and update their reservation logs. With this API, you will be able to consum all its operations using json format.\nIn order to call any operation, it would be necessary the following data:\n AccesToken (encripted data). User. Password.  "
},
{
	"uri": "https://travelgatex.com/flight-x/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Flight-X Overview",
	"content": " Flight-X is TravelgateX‚Äôs first product for its Aviation Industry disruption proposition, built on top of a proprietary API, based on IATA‚Äôs NDC standard, for direct sellers and airlines integration. By using Flight-X you can direct access differentiated and personalized Airlines dynamic offers and products (flights, ancillaries, fare families) and Prices.\nFlight-X High Level Architecture Suppliers Currently we are seamlessly connected to more than 45 Suppliers (being direct and indirect airlines, GDSs, Aggregators, Consolidators among others), and we keep them all optimized so that response times are super fast and reliable.\n"
},
{
	"uri": "https://travelgatex.com/getting-started/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Understanding our marketplace",
	"content": "TravelgateX is an online B2B marketplace providing seamless connectivity between travel companies across the world. We have 3 APIs available for integration:\n Hotel-X is our Buyer\u0026rsquo;s API, completely built in GraphQL from our many years of experience with travel XML integrations, it offers state of the art, cutting edge API technology that is quick to learn and makes integration simple and fast.\n Hotel Pull Sellers API is our generic pull API to which any hotel and accomodation supplier can connect to and immediately get access to 1000s of potential clients.\n Hotel Push Sellers API is our generic push API to which channel managers connect to in order to get access to 1000s of potential clients with one single integration.\n                                                                                                                                                                                         \nIn our Network, we call Partners all the travel companies connected to our APIS. Our Partners are Buyers, Sellers and Tech Partners.\nBUYERS are companies that come to TGX to source hotel \u0026amp; accomodation product.\nBuyers can be:\n Online travel agents Travel Tech Service Providers Tour operators Wholesalers  As a Buyer, you connect once to our HotelX API and get access to a wide selection of realtime, hotel bed booking databases into your applications.\nOur Buyers need to have their own commercial agreement with the hotel accomodation supplier in place before requesting access to their system via TGX. Once that has been arranged, we will activate the connection between your system and the Seller\u0026rsquo;s system in order to begin displaying hotel bed availability directly in your client applications and interfaces.\n SELLERS are hotel and accomodation suppliers/providers that have an inventory of hotel beds available for online booking.\nSellers are:\n B2B travel aggregators Wholesalers Travel metasearch engines Large hotel chains Incoming Agencies/DMCs Travel Tech Service Providers  As a Seller, TravelgateX connects your realtime booking databases and make them available to Buyers. Where you have made set pricing arrangements with particular Buyers, specific pricing is displayed as per your agreements. TravelgateX supports suppliers to reach new Buyers by helping make it easy for them to sign up for hotel and travel service contracts via our marketplace.\n"
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Inventory extranet Overview",
	"content": " Extranet Overview The Inventory extranet allows the Buyer to access and configure the SetUp of the dynamic inventory from all the Channel Managers connected to you. You will have access to different tools, components and panels to create, modify or edit hotels, rates, rooms and sales conditions.\nInventory is also available to load your own static contracts as a Seller: load allotment, prices, discounts, supplements\u0026hellip;\nSections Once you are logged in, you will be redirected to the home page where you\u0026rsquo;ll see the following tabs.\n Inventory Product Manage Permissions  Inventory has different user permissions, so the functionalities will be shown in the extranet depending on your user type. Check our documentation to know how to work with the multiple functionalities in the extranet. You can also check our short tutorial videos video tutorials. "
},
{
	"uri": "https://travelgatex.com/inventory-x/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Inventory Overview",
	"content": " Inventory Overview Inventory allows Channel Managers and Hotel Product Distributors to push their product into a TravelgateX database, thus making it available for the TravelgateX Buyers.\nHow does it work? Channel Managers and Hotels will push data to Inventory.\n Inventory receives the data from the different channels and stores it in a common structure.\n Then, this product can be consumed in 3 different ways by TravelgateX Buyers:\n Via Pull with our Hotel-X solution. Via Push with our Channel-X solution. Via a Flat File solution.   I want to buy from Channel Managers If you are a Buyer and you want to connect with different Channel Managers you will need the following:\n Be a Buyer in TravelgateX platform Request the activation of the Channel Manager logging into our App Once the connection is made and delivered to you, use our Inventory extranet to create the SetUp of the hotels, rates and rooms contracted with the hoteliers so the Channel Manager can map all this information and load availability and prices for you. We always recommend to start with a real pilot hotel before going live.  I want to sell my inventory If you are a Channel Manager or a supplier who wants to be integrated in a push connection, you have two options tojoin our marketplace:\n Push API: Integrate with Inventory API and load your availability and prices for your different buyers trough a unique integration.\n Extranet: If you don\u0026rsquo;t have an API and want to load your product manually, you can use our Inventory extranet.\n  "
},
{
	"uri": "https://travelgatex.com/mappea/overview/",
	"title": "Overview",
	"tags": [],
	"description": "ChannelX Information",
	"content": "{{ % wip % }}\n"
},
{
	"uri": "https://travelgatex.com/travelgatex/overview/",
	"title": "Overview",
	"tags": [],
	"description": "TravelgateX Platform Information",
	"content": " This page provides an overview of the TravelgateX platform.\nGraphQL Gateway TravelgateX is the travel API completely based in GraphQL. Unlike many legacy XML Soap APIs, GraphQL enables each client to ask for and receive exactly the data that is needed. Learn more by reading our Learning GraphQL guides.\nOur Gateway is the only endpoint to access all of our APIs. It is written in NodeJS. This makes it fast, stable, secure, fault tolerant and load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime.\nUsing the API There are two types of allowed operations in the TravelgateX GraphQL APIs:\n Queries: Queries are \u0026ldquo;read only\u0026rdquo; and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a Query Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a Mutation.  GraphQL Endpoint One of the benefits of using GraphQL is that there is only a single endpoint. You can use this endpoint for all the operations you want to perform.\nOur GraphQL API endpoint for all operations is: https://api.travelgatex.com Communicating with the Server To communicate with our GraphQL server, you\u0026rsquo;ll need an access token with the right scopes. You are able to create a token by following the steps mentioned in the Security Overview.\nMaking Requests The best place to test how to make GraphQL queries in TravelgateX is to start with our interactive API Playground. You can also use curl or any other HTTP-speaking library.\nAll LIVE traffic MUST enable GZIP compression in the HTTP header Accept-Encoding: gzip  To query GraphQL using curl, make a POST request with a JSON payload. The payload must contain a string called query:\ncurl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey 8626cf56-e364-4fd1-4fe0-311e23ac6355\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{hotelX{searchStatusService{code description}}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  GraphQL Reference There are several ways you can learn more about the full capabilities of our TravelgateX GraphQL data model\n Reference Documentation provides complete reference documentation for all resources, fields and objects in our GraphQL data model (called a Schema).\n API Playground provides an interactive, multi-column schema definition based on the GraphiQL tool, but with many additional features.\n GraphQL-voyager displays our GraphQL API as an interactive relational database-like graph to help you understand the different parent and child tables within our schema.\n Learning GraphQL is a set of resources to get to know GraphQL and to understand our schema.\n  Examples Check out our GraphQL Playground to get started with making your first query and to work thropugh other query examples.\nKeep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey 8626cf56-e364-4fd1-4fe0-311e23ac6355\u0026quot;\n You can easily share your Queries with others by generating a link using the share button available in the API Playground. This share function works as a Pastebin for your GraphQL query and includes the context (endpoint, HTTP headers, open tabs, etc) so you can share exactly what your Playground query setup looks like.\nConventions TravelgateX follows some conventions about schema definition:\n Relay schema implementation Definition of custom scalar types Token Based Authentication  "
},
{
	"uri": "https://travelgatex.com/travelgatex/security/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Learn platform security",
	"content": " This page describes the how security is implemented in TravelgateX platform.\nIntroduction TravelgateX offers a fine-grained access control and visibility for centrally managing Resources, which are granted to Partners belonging to Organizations.\nAuthentication Authentication is the process of authorizing or making sure that the Partner is the correct one. Every request to TravelgateX GraphQL API must carry an Access Token whether it\u0026rsquo;s an API Key or a JSON Web Token (JWT).\nAPI Key The API key takes cares of the authentication of applications, normally created as a Service Account with limited scopes. The correct way to send it to GraphQL server is via HTTP Header:\nAll queries must include a HTTP Header with the API key inserted in the format: * API key:¬†\u0026quot;Authorization: Apikey xxxxxxxxx\u0026quot;\nIf you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey 8626cf56-e364-4fd1-4fe0-311e23ac6355\u0026quot;\n curl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey 8626cf56-e364-4fd1-4fe0-311e23ac6355\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{searchStatusService{code description}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  Creating an API Key For development and testing purposes, please use the following Test API Key¬†8626cf56-e364-4fd1-4fe0-311e23ac6355\n JSON Web Token (JWT) The JSON Web Token takes cares of the authentication of users, normally created as User.\nWhenever the user wants to access a protected resource, the user agent should send the JWT, in the Authorization header using the Bearer schema. The content of the header should look like the following:\nAll queries to a protected resources must include an Authorization Header using the Bearer schema. The content of the header should look like the following: \u0026quot;Authorization: Bearer xxxxxxxxx\u0026quot;\n Authorization Once the Member is authenticated we must authorize the Partner to use the requested Resource.\nTravelgateX Identity and Access Management let Partner administrators authorize who can take action on specific resources. This gives you full control and internal visilibity to manage your resources centrally.\n"
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):    Required by StatsConnection:    GroupConnection:    AccessConnection:    MemberConnection:    APIConnection:    ProductConnection:    SupplierConnection:    ClientConnection:    RoleConnection:    ResourceConnection:    OperationConnection:    ManagedGroupConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String    endCursor: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String):   endCursor(String):    Required by StatsConnection:    ConnectionConnection:    GroupConnection:    AccessConnection:    ClientConnection:    MemberConnection:    APIConnection:    ManagedGroupConnection:    SupplierConnection:    RoleConnection:    ProfileConnection:    MacroPermissionsConnection:    ResourceConnection:    OperationConnection:    EntityConnection:    ProductConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String    endCursor: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String):   endCursor(String):    Required by AlertConnection:  Alert list  EventConnection:  Events list  GroupConnection:    RoleConnection:    MacroPermissionsConnection:    MemberConnection:    APIConnection:    ManagedGroupConnection:    AccessConnection:    SupplierConnection:    ClientConnection:    ProfileConnection:    ResourceConnection:    OperationConnection:    ProductConnection:    EntityConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String    endCursor: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String):   endCursor(String):    Required by AccessConnection:    GroupConnection:    ClientConnection:    SupplierConnection:    MemberConnection:    APIConnection:    ManagedGroupConnection:    RoleConnection:    ProfileConnection:    MacroPermissionsConnection:    ResourceConnection:    OperationConnection:    EntityConnection:    ProductConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String    endCursor: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String):   endCursor(String):    Required by PaymentXStoredCardConnection:    GroupConnection:    MemberConnection:    APIConnection:    ManagedGroupConnection:    AccessConnection:    SupplierConnection:    ClientConnection:    RoleConnection:    ProfileConnection:    MacroPermissionsConnection:    ResourceConnection:    OperationConnection:    ProductConnection:    EntityConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String    endCursor: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String):   endCursor(String):    Required by AccessConnection:    SupplierConnection:    ClientConnection:    PointOfSaleConnection:    ProfileConnection:    EntityConnection:    SystemConnection:    OrganizationConnection:    ProductConnection:    MemberConnection:    GroupConnection:    APIConnection:    ResourceConnection:    RoleConnection:    OperationConnection:    ManagedGroupConnection:    MacroPermissionsConnection:    BoardConnection:    CategoryConnection:    HotelConnection:    RoomConnection:    DestinationConnection:    MetadataConnection:    HotelXAmenityConnection:    PaymentXStoredCardConnection:    StatsConnection:    ConnectionConnection:    AlertConnection:  Alert list  EventConnection:  Events list  LoggingLegacyConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.   Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!):   value(String!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!):   value(String!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!):   value(String!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!):   value(String!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Parameter {  key: ID!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(ID!):   value(String!):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/parameterinput/",
	"title": "ParameterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ParameterInput {  key: String!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields key(String!):   value(String!):    Required by AccessInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/pax/",
	"title": "Pax",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Pax {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields age(Int!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/paxinput/",
	"title": "PaxInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaxInput {  age: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields age(Int!):    "
},
{
	"uri": "https://travelgatex.com/integrations/payment/",
	"title": "Payment",
	"tags": [],
	"description": "Payment integrations",
	"content": "   BCMR - Bancomer Bancomer integration\n     RSYS - Redsys Redsys integration\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/paymentcard/",
	"title": "PaymentCard",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentCard {  code: ID!    paymentCardData: PaymentCardData!    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   paymentCardData(PaymentCardData!):   createdAt(DateTime!):   updatedAt(DateTime!):   adviseMessage([AdviseMessage!]):    Required by HotelBookingDetail:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/paymentcarddata/",
	"title": "PaymentCardData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentCardData {  type: PaymentCardType!    holder: Holder!    number: CardNumber!    CVC: CVC!    supplier: Supplier!    expire: Date!    active: Date!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(PaymentCardType!):   holder(Holder!):   number(CardNumber!):   CVC(CVC!):   supplier(Supplier!):   expire(Date!):   active(Date!):    Required by PaymentCard:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/paymentcardinput/",
	"title": "PaymentCardInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentCardInput {  cardType: String    type: PaymentCardType    holder: HolderInput!    number: String!    CVC: String!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields cardType(String):   type(PaymentCardType):   holder(HolderInput!):   number(String!):   CVC(String!):   expire(ExpireDateInput!):    Required by HotelBookInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/paymentcardtype/",
	"title": "PaymentCardType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum PaymentCardType{   VI,    AX,    BC,    CA,    CB,    CU,    DS,    DC,    T,    R,    N,    L,    E,    JC,    TO,    S,    EC,    EU,    TP,    OP,    ER,    XS,    O,   }   Required by PaymentCardData:    PaymentCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/paymenttype/",
	"title": "PaymentType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum PaymentType{   MERCHANT,    DIRECT,    CARD_BOOKING,    CARD_CHECK_IN,    PAYX,   }   Required by ReviewedPaymentType:    HotelOptionSearch:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/paymentxexpiredate/",
	"title": "PaymentXExpireDate",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXExpireDate {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields month(Int!):   year(Int!):    Required by PaymentXStoredCardData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/paymentxexpiredate/",
	"title": "PaymentXExpireDate",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXExpireDate {  month: Int!    year: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields month(Int!):   year(Int!):    Required by PaymentXStoredCardData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/paymentxmutation/",
	"title": "PaymentXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXMutation {  storeCard( input: PaymentXStoredCardInput!, ): PaymentXStoredCard!    deleteStoredCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields storeCard(PaymentXStoredCard!):   deleteStoredCard(PaymentXStoredCard!):    Required by Mutation:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/schema/query/",
	"title": "PaymentXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXQuery {  vaultStatusService: AdviseMessage!    allStoredCards( filter: PaymentXStoredCardFilterInput!, instanceCode: String!, ): PaymentXStoredCardConnection!    storedCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields vaultStatusService(AdviseMessage!):   allStoredCards(PaymentXStoredCardConnection!):   storedCard(PaymentXStoredCard!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/paymentxquery/",
	"title": "PaymentXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXQuery {  vaultStatusService: AdviseMessage!    allStoredCards( filter: PaymentXStoredCardFilterInput!, instanceCode: String!, ): PaymentXStoredCardConnection!    storedCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields vaultStatusService(AdviseMessage!):   allStoredCards(PaymentXStoredCardConnection!):   storedCard(PaymentXStoredCard!):    Required by Query:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/paymentxstoredcard/",
	"title": "PaymentXStoredCard",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCard {  code: ID!    storedCardData: PaymentXStoredCardData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   storedCardData(PaymentXStoredCardData):   createdAt(DateTime!):   updatedAt(DateTime!):   adviseMessage([AdviseMessage!]):    Required by PaymentXStoredCardEdge:    PaymentXQuery:    PaymentXMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/paymentxstoredcard/",
	"title": "PaymentXStoredCard",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCard {  code: ID!    storedCardData: PaymentXStoredCardData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   storedCardData(PaymentXStoredCardData):   createdAt(DateTime!):   updatedAt(DateTime!):   adviseMessage([AdviseMessage!]):    Required by PaymentXQuery:    PaymentXStoredCardEdge:    PaymentXMutation:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/paymentxstoredcardconnection/",
	"title": "PaymentXStoredCardConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardConnection {  edges: [PaymentXStoredCardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([PaymentXStoredCardEdge]):   pageInfo(PageInfo!):    Required by PaymentXQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/paymentxstoredcardconnection/",
	"title": "PaymentXStoredCardConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardConnection {  edges: [PaymentXStoredCardEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([PaymentXStoredCardEdge]):   pageInfo(PageInfo!):    Required by PaymentXQuery:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/paymentxstoredcarddata/",
	"title": "PaymentXStoredCardData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardData {  instance: Group!    pointOfSale: PointOfSale!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: Holder    number: CardNumber    CVC: CVC    expire: PaymentXExpireDate   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instance(Group!):   pointOfSale(PointOfSale!):   bookingReference(String!):   checkOut(Date):   checkIn(Date):   cardType(String):   holder(Holder):   number(CardNumber):   CVC(CVC):   expire(PaymentXExpireDate):    Required by PaymentXStoredCard:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/paymentxstoredcarddata/",
	"title": "PaymentXStoredCardData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardData {  instance: Group!    pointOfSale: PointOfSale!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: Holder    number: CardNumber    CVC: CVC    expire: PaymentXExpireDate   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instance(Group!):   pointOfSale(PointOfSale!):   bookingReference(String!):   checkOut(Date):   checkIn(Date):   cardType(String):   holder(Holder):   number(CardNumber):   CVC(CVC):   expire(PaymentXExpireDate):    Required by PaymentXStoredCard:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/paymentxstoredcardedge/",
	"title": "PaymentXStoredCardEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardEdge {  cursor: String!    node: PaymentXStoredCard   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields cursor(String!):   node(PaymentXStoredCard):    Required by PaymentXStoredCardConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/paymentxstoredcardedge/",
	"title": "PaymentXStoredCardEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardEdge {  cursor: String!    node: PaymentXStoredCard   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields cursor(String!):   node(PaymentXStoredCard):    Required by PaymentXStoredCardConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/inputobjects/paymentxstoredcardfilterinput/",
	"title": "PaymentXStoredCardFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardFilterInput {  AND: [PaymentXStoredCardFilterInput!]    OR: [PaymentXStoredCardFilterInput!]    checkIn_in: [DateTime!]    checkIn_not_in: [DateTime!]    checkIn_lt: DateTime    checkIn_lte: DateTime    checkIn_gt: DateTime    checkIn_gte: DateTime    checkOut_in: [DateTime!]    checkOut_not_in: [DateTime!]    checkOut_lt: DateTime    checkOut_lte: DateTime    checkOut_gt: DateTime    checkOut_gte: DateTime    holder_like: HolderInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([PaymentXStoredCardFilterInput!]):   OR([PaymentXStoredCardFilterInput!]):   checkIn_in([DateTime!]):   checkIn_not_in([DateTime!]):   checkIn_lt(DateTime):   checkIn_lte(DateTime):   checkIn_gt(DateTime):   checkIn_gte(DateTime):   checkOut_in([DateTime!]):   checkOut_not_in([DateTime!]):   checkOut_lt(DateTime):   checkOut_lte(DateTime):   checkOut_gt(DateTime):   checkOut_gte(DateTime):   holder_like(HolderInput):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/paymentxstoredcardfilterinput/",
	"title": "PaymentXStoredCardFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardFilterInput {  AND: [PaymentXStoredCardFilterInput!]    OR: [PaymentXStoredCardFilterInput!]    checkIn_in: [DateTime!]    checkIn_not_in: [DateTime!]    checkIn_lt: DateTime    checkIn_lte: DateTime    checkIn_gt: DateTime    checkIn_gte: DateTime    checkOut_in: [DateTime!]    checkOut_not_in: [DateTime!]    checkOut_lt: DateTime    checkOut_lte: DateTime    checkOut_gt: DateTime    checkOut_gte: DateTime    holder_like: HolderInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields AND([PaymentXStoredCardFilterInput!]):   OR([PaymentXStoredCardFilterInput!]):   checkIn_in([DateTime!]):   checkIn_not_in([DateTime!]):   checkIn_lt(DateTime):   checkIn_lte(DateTime):   checkIn_gt(DateTime):   checkIn_gte(DateTime):   checkOut_in([DateTime!]):   checkOut_not_in([DateTime!]):   checkOut_lt(DateTime):   checkOut_lte(DateTime):   checkOut_gt(DateTime):   checkOut_gte(DateTime):   holder_like(HolderInput):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/inputobjects/paymentxstoredcardidinput/",
	"title": "PaymentXStoredCardIDInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardIDInput {  instanceCode: ID    pointOfSaleCode: ID    bookingReference: String    code: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instanceCode(ID):   pointOfSaleCode(ID):   bookingReference(String):   code(ID):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/paymentxstoredcardidinput/",
	"title": "PaymentXStoredCardIDInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardIDInput {  instanceCode: ID    pointOfSaleCode: ID    bookingReference: String    code: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instanceCode(ID):   pointOfSaleCode(ID):   bookingReference(String):   code(ID):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/inputobjects/paymentxstoredcardinput/",
	"title": "PaymentXStoredCardInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardInput {  instanceCode: ID!    pointOfSaleCode: ID!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: HolderInput    number: CardNumber!    CVC: CVC!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instanceCode(ID!):   pointOfSaleCode(ID!):   bookingReference(String!):   checkOut(Date):   checkIn(Date):   cardType(String):   holder(HolderInput):   number(CardNumber!):   CVC(CVC!):   expire(ExpireDateInput!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/paymentxstoredcardinput/",
	"title": "PaymentXStoredCardInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXStoredCardInput {  instanceCode: ID!    pointOfSaleCode: ID!    bookingReference: String!    checkOut: Date    checkIn: Date    cardType: String    holder: HolderInput    number: CardNumber!    CVC: CVC!    expire: ExpireDateInput!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields instanceCode(ID!):   pointOfSaleCode(ID!):   bookingReference(String!):   checkOut(Date):   checkIn(Date):   cardType(String):   holder(HolderInput):   number(CardNumber!):   CVC(CVC!):   expire(ExpireDateInput!):    "
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/dataset-content/benchmark/benchmark-performance/",
	"title": "Performance Benchmark Dataset",
	"tags": [],
	"description": "Understand Performance Benchmark Dataset",
	"content": " On this page you will learn how the data is stored in Performance Benchmark Dataset and how to interpret the differents table fields. This dataset is updated daily.\nTables Descriptions of each table and their correspondent fields are found below:\nperformance_(daily|weekly|monthly)_(seller|buyer) This table contains the total of ok and nok searches, quotes, bookings and cancellation requests and responses times for the buyer|seller and for TravelgateX. The buyers|sellers that aren\u0026rsquo;t connected are aggregated in \u0026ldquo;others\u0026rdquo; for the seller case and \u0026ldquo;OTHERS\u0026rdquo; for the buyers case.\nFields\n search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. search_ok (NUMBER). Quantity of searches with searchable results. search_ok_tgx (NUMBER). Quantity of searches with searchable results for TravelgateX. search_nok(NUMBER). Quantity of searches with errors. search_nok_tgx (NUMBER). Quantity of searches with errors for TravelgateX. search_time (NUMBER). Total response time (in milliseconds) for all searches. search_time_tgx (NUMBER). Total response time (in milliseconds) for all searches for TravelgateX. quote_ok (NUMBER). Quantity of quotes with searchable results. quote_ok_tgx (NUMBER). Quantity of quotes with searchable results for TravelgateX. quote_nok (NUMBER). Quantity of quotes with errors. quote_nok_tgx (NUMBER). Quantity of quotes with errors for TravelgateX. quote_time (NUMBER). Total response time (in milliseconds) for all quotes. quote_time_tgx (NUMBER). Total response time (in milliseconds) for all quotes for TravelgateX. booking_ok (NUMBER). Quantity of correct bookings. booking_ok_tgx (NUMBER). Quantity of correct bookings for TravelgateX. booking_nok (NUMBER). Quantity of bookings with an error. booking_nok_tgx (NUMBER). Quantity of bookings with an error for TravelgateX. booking_time (NUMBER. Total response time (in milliseconds) for bookings. booking_time_tgx (NUMBER. Total response time (in milliseconds) for bookings for TravelgateX. cancel_ok (NUMBER). Quantity of correct cancellations. cancel_ok_tgx (NUMBER). Quantity of correct cancellations for TravelgateX. cancel_nok (NUMBER). Quantity of cancellations with an error. cancel_nok_tgx (NUMBER). Quantity of cancellations with an error for TravelgateX. cancel_time (NUMBER). Total response time (in milliseconds) for cancellations. cancel_time_tgx (NUMBER). Total response time (in milliseconds) for cancellations for TravelgateX.  Preview\n   search_date provider_id client_id provider_owner client_owner search_ok search_ok_tgx search_nok search_nok_tgx search_time search_time_tgx quote_ok quote_ok_tgx quote_nok quote_nok_tgx quote_time quote_time_tgx booking_ok booking_ok_tgx booking_nok booking_nok_tgx booking_time booking_time_tgx cancel_ok cancel_ok_tgx cancel_nok cancel_nok_tgx cancel_time cancel_time_tgx     2019-05-31 00:00:00 UTC Provider 1 Client 1 Org Name 1 Org Name 1 2739 2739 5435 5435 15143760 15143760 19 19 0 0 54151 54151 2 2 1 1 31747 31747 0 0 0 0 0 0   2019-05-31 00:00:00 UTC Provider 2 Client 2 Org Name 2 Org Name 2 22631 1079375 4964 669086 2308465 256855044 1694 7708 0 80 157269 3539127 8 18 1 1 5441 15815 1 7 0 0 625 5925   2019-05-31 00:00:00 UTC Provider 3 Client 3 Org Name 3 Org Name 3 131116 192822 68270 106039 581904466 1168506957 6386 8220 1232 1511 32997644 41012522 93 193 1 1 3468668 7259187 32 40 0 0 334721 399424    "
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/dataset-content/performance/",
	"title": "Performance Dataset",
	"tags": [],
	"description": "Learn about how the information is stored in our Performance Dataset",
	"content": " On this page you will learn how the data is stored in Performance Dataset.\nTables Data is stored in multiple tables depending on the kind of information that wants to be queried and different level of aggregation:\n Daily (agregation stored every day) Monthly (aggregation stored the first day of the month)  This dataset is updated daily.\nstats_(daily|monthly)_(buyer|seller) This table contains transactional information (e.g. response status, response time) of requests between clients and providers.\nfields\n search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss) client_id (STRING). Client unique ID provider_id (STRING). Provider unique ID client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. speed (BOOLEAN). It indicates if the source of request was the client or Speed-X to load info in cache (0=Client, 1=Speed-X). search_ok (NUMBER). Quantity of searches with searchable results. search_nok_no_results (NUMBER). Quantity of searches without searchable results. search_nok_provider_error (NUMBER). Quantity of searches with generic error from provider. search_nok_bad_request (NUMBER). Quantity of searches with error due a wrong request. search_nok_integration_error (NUMBER). Quantity of searches with error due a failure in the connector. search_nok_communication_error (NUMBER). Quantity of searches with error due a timeout. search_nok_others (NUMBER). Quantity of searches with errors different to those above. search_time (NUMBER). Total response time (in milliseconds) for all searches. quote_ok (NUMBER). Quantity of quotes with searchable results. quote_nok_no_results (NUMBER). Quantity of quotes without searchable results. quote_nok_provider_error (NUMBER). Quantity of quotes with generic error from provider. quote_nok_bad_request (NUMBER). Quantity of quotes with error due to a wrong request. quote_nok_integration_error (NUMBER). Quantity of quotes with error due a failure in the connector. quote_nok_communication_error (NUMBER). Quantity of quotes with error due to a timeout. quote_nok_others (NUMBER). Quantity of quotes with errors different to those above. quote_time (NUMBER). Total response time (in milliseconds) for all quotes. booking_ok (NUMBER). Quantity of correct bookings. booking_nok (NUMBER). Quantity of bookings with an error. booking_time (NUMBER. Total response time (in milliseconds) for bookings. cancel_ok (NUMBER). Quantity of correct cancellations. cancel_nok (NUMBER). Quantity of cancellations with an error. cancel_time (NUMBER). Total response time (in milliseconds) for cancellations. other_ok (NUMBER). Quantity of transactions that cannot be included in one of the groups above and that didn\u0026rsquo;t receive an error. other_nok (NUMBER). Quantity of other transactions with an error. other_time (NUMBER). Total response time (in milliseconds) for other transactions.  Preview\n   search_date client_id provider_id provider_owner client_owner speed search_ok search_nok_no_results search_nok_provider_error search_nok_bad_request search_nok_integration_error search_nok_communication_error search_nok_others search_time quote_ok quote_nok_no_results quote_nok_provider_error quote_nok_bad_request quote_nok_integration_error quote_nok_communication_error quote_nok_others quote_time bookinging_ok bookinging_nok bookinging_time cancel_ok cancel_nok cancel_time other_ok other_nok other_time     2018-03-28 12:00:00 UTC client 1 provider 1 Org Name 1 Org Name 1 false 372408 159272 571 30093 0 40 0 206883360 182 0 0 0 0 0 0 38166 3 0 31848 0 0 0 0 0 0   2018-03-28 12:00:00 UTC client 1 provider 2 Org Name 2 Org Name 2 false 50 10 0 0 0 0 0 48754 419 6 0 0 0 4 0 374301 5 0 41257 1 0 6080 172 0 5116   2018-03-28 12:00:00 UTC client 2 provider 1 Org Name 3 Org Name 3 false 548214 0 577 0 714 0 0 47457579 3719 32 0 0 0 0 0 327425 18 0 81757 6 4 31803 230 0 42614     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/permission/",
	"title": "Permission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Permission {  role: Role!    resource: Resource!    api: API!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields role(Role!):   resource(Resource!):   api(API!):    Required by MacroPermissionData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/permission/",
	"title": "Permission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Permission {  role: Role!    resource: Resource!    api: API!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields role(Role!):   resource(Resource!):   api(API!):    Required by MacroPermissionData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/permission/",
	"title": "Permission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Permission {  role: Role!    resource: Resource!    api: API!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields role(Role!):   resource(Resource!):   api(API!):    Required by MacroPermissionData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/permission/",
	"title": "Permission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Permission {  role: Role!    resource: Resource!    api: API!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields role(Role!):   resource(Resource!):   api(API!):    Required by MacroPermissionData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/permission/",
	"title": "Permission",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Permission {  role: Role!    resource: Resource!    api: API!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields role(Role!):   resource(Resource!):   api(API!):    Required by MacroPermissionData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/pluginstepinput/",
	"title": "PluginStepInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PluginStepInput {  step: PluginStepType!    pluginsType: [PluginsInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields step(PluginStepType!):   pluginsType([PluginsInput!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/pluginsteptype/",
	"title": "PluginStepType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum PluginStepType{   REQUEST,    REQUEST_ACCESS,    RESPONSE_OPTION,    RESPONSE_ACCESS,    RESPONSE,   }   Required by HotelXDefaultPlugin:    PluginStepInput:    HotelXFilterPluginTypeInput:    HotelXDefaultPluginStepInput:    HotelXDefaultPluginInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/plugintype/",
	"title": "PluginType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum PluginType{   PRE_STEP,    HOTEL_MAP,    BOARD_MAP,    ROOM_MAP,    CURRENCY_CONVERSION,    MARKUP,    AGGREGATION,    POST_STEP,    COMMISSION,    MARKETS_GROUP,    AMENITY_MAP,   }   Required by HotelXDefaultPlugin:    PluginsInput:    HotelXDefaultPluginInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/pluginsinput/",
	"title": "PluginsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PluginsInput {  type: PluginType!    name: String!    parameters: [ParameterInput!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields type(PluginType!):   name(String!):   parameters([ParameterInput!]):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/pointofsale/",
	"title": "PointOfSale",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSale {  code: ID!    pointOfSaleData: PointOfSaleData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   pointOfSaleData(PointOfSaleData):   createdAt(DateTime!):   updatedAt(DateTime!):   adviseMessage([AdviseMessage!]):    Required by PaymentXStoredCardData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/pointofsale/",
	"title": "PointOfSale",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSale {  code: ID!    pointOfSaleData: PointOfSaleData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   pointOfSaleData(PointOfSaleData):   createdAt(DateTime!):   updatedAt(DateTime!):   adviseMessage([AdviseMessage!]):    Required by PointOfSaleEdge:    PaymentXStoredCardData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/pointofsaleconnection/",
	"title": "PointOfSaleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleConnection {  edges: [PointOfSaleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([PointOfSaleEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/pointofsaledata/",
	"title": "PointOfSaleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleData {  code: ID!    name: String    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String):   owner(Organization):    Required by PointOfSale:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/pointofsaledata/",
	"title": "PointOfSaleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleData {  code: ID!    name: String    owner: Organization   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String):   owner(Organization):    Required by PointOfSale:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/pointofsaleedge/",
	"title": "PointOfSaleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleEdge {  node: PointOfSale    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(PointOfSale):   cursor(String!):    Required by PointOfSaleConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/pointofsalefilter/",
	"title": "PointOfSaleFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PointOfSaleFilter {  code: [ID]    groupID: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code([ID]):   groupID([ID]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/price/",
	"title": "Price",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Price {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float!    exchange: Exchange!    markups: [Markup!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!):   binding(Boolean!):   net(Float!):   gross(Float!):   exchange(Exchange!):   markups([Markup!]):    Required by HotelOptionSearch:    Supplement:    Surcharge:    RoomPrice:    PriceBreakdown:    HotelOptionQuote:    HotelBookingDetail:    BookingRoom:    HotelCancelDetail:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/pricebreakdown/",
	"title": "PriceBreakdown",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PriceBreakdown {  start: Date!    end: Date!    price: Price!   Show deprecated fields   effectiveDate: : Date! // deprecated from 2018-02-28 Incorrect date format.     expireDate: : Date! // deprecated from 2018-02-28 Incorrect date format.     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields effectiveDate(Date!):   expireDate(Date!):   start(Date!):   end(Date!):   price(Price!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/pricechange/",
	"title": "PriceChange",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PriceChange {  currency: String!    net: Float!    gross: Float!    binding: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(String!):   net(Float!):   gross(Float!):   binding(Boolean!):    Required by HotelOptionQuote:    HotelBookingDetail:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/pricestatic/",
	"title": "PriceStatic",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PriceStatic {  amount: Float!    currency: Currency!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields amount(Float!):   currency(Currency!):    Required by MandatoryFee:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/interfaces/priceable/",
	"title": "Priceable",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Priceable {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields currency(Currency!):   binding(Boolean!):   net(Float!):   gross(Float):   exchange(Exchange!):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " An APIs collection.\nGraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by ProductEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProductEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProductEdge:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProductEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProductEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Product {  code: ID!    productData: ProductData!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   productData(ProductData!):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProductEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProductEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection): A Product has many APIs   Required by Product:  An APIs collection.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection):   macroPermissions(MacroPermissionsConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by Product:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection):   macroPermissions(MacroPermissionsConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by Product:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection):   macroPermissions(MacroPermissionsConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by Product:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection):   macroPermissions(MacroPermissionsConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by Product:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    macroPermissions(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): MacroPermissionsConnection    adviseMessageCatalog( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection):   macroPermissions(MacroPermissionsConnection):   adviseMessageCatalog([AdviseMessage!]):    Required by Product:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {  node: Product    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Product):   cursor(String!):    Required by ProductConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/profile/",
	"title": "Profile",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Profile {  code: ID!    profileData: ProfileData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   profileData(ProfileData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProfileEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/profile/",
	"title": "Profile",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Profile {  code: ID!    profileData: ProfileData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   profileData(ProfileData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProfileEdge:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/profile/",
	"title": "Profile",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Profile {  code: ID!    profileData: ProfileData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   profileData(ProfileData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProfileEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/profile/",
	"title": "Profile",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Profile {  code: ID!    profileData: ProfileData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   profileData(ProfileData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProfileEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/profile/",
	"title": "Profile",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Profile {  code: ID!    profileData: ProfileData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   profileData(ProfileData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ProfileEdge:    AdminMutation:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/profileconnection/",
	"title": "ProfileConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileConnection {  edges: [ProfileEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProfileEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/profileconnection/",
	"title": "ProfileConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileConnection {  edges: [ProfileEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProfileEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/profileconnection/",
	"title": "ProfileConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileConnection {  edges: [ProfileEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProfileEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/profileconnection/",
	"title": "ProfileConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileConnection {  edges: [ProfileEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProfileEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/profileconnection/",
	"title": "ProfileConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileConnection {  edges: [ProfileEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ProfileEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by AdminQuery:    GroupData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/profiledata/",
	"title": "ProfileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileData {  code: ID!    label: String    type: [ProfileType!]!    entities: EntityConnection    group: Group    owner: Organization    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   label(String):   type([ProfileType!]!):   entities(EntityConnection):   group(Group):   owner(Organization):   isActive(Boolean):   isPublished(Boolean):    Required by Profile:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/profiledata/",
	"title": "ProfileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileData {  code: ID!    label: String    type: [ProfileType!]!    entities: EntityConnection    group: Group    owner: Organization    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   label(String):   type([ProfileType!]!):   entities(EntityConnection):   group(Group):   owner(Organization):   isActive(Boolean):   isPublished(Boolean):    Required by Profile:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/profiledata/",
	"title": "ProfileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileData {  code: ID!    label: String    type: [ProfileType!]!    entities: EntityConnection    group: Group    owner: Organization    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   label(String):   type([ProfileType!]!):   entities(EntityConnection):   group(Group):   owner(Organization):   isActive(Boolean):   isPublished(Boolean):    Required by Profile:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/profiledata/",
	"title": "ProfileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileData {  code: ID!    label: String    type: [ProfileType!]!    entities: EntityConnection    group: Group    owner: Organization    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   label(String):   type([ProfileType!]!):   entities(EntityConnection):   group(Group):   owner(Organization):   isActive(Boolean):   isPublished(Boolean):    Required by Profile:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/profiledata/",
	"title": "ProfileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileData {  code: ID!    label: String    type: [ProfileType!]!    entities: EntityConnection    group: Group    owner: Organization    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   label(String):   type([ProfileType!]!):   entities(EntityConnection):   group(Group):   owner(Organization):   isActive(Boolean):   isPublished(Boolean):    Required by Profile:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/profileedge/",
	"title": "ProfileEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileEdge {  node: Profile    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Profile):   cursor(String!):    Required by ProfileConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/profileedge/",
	"title": "ProfileEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileEdge {  node: Profile    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Profile):   cursor(String!):    Required by ProfileConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/profileedge/",
	"title": "ProfileEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileEdge {  node: Profile    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Profile):   cursor(String!):    Required by ProfileConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/profileedge/",
	"title": "ProfileEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileEdge {  node: Profile    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Profile):   cursor(String!):    Required by ProfileConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/profileedge/",
	"title": "ProfileEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileEdge {  node: Profile    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Profile):   cursor(String!):    Required by ProfileConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/profilefilter/",
	"title": "ProfileFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProfileFilter {  profileIDs: [ID]    groupIDs: [ID]    entityIDs: [ID]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields profileIDs([ID]):   groupIDs([ID]):   entityIDs([ID]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/profiletype/",
	"title": "ProfileType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ProfileType{   BUYER,    SELLER,   }   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/profiletype/",
	"title": "ProfileType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ProfileType{   BUYER,    SELLER,   }   "
},
{
	"uri": "https://travelgatex.com/mappea/reference/enums/profiletype/",
	"title": "ProfileType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ProfileType{   BUYER,    SELLER,   }   "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/enums/profiletype/",
	"title": "ProfileType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ProfileType{   BUYER,    SELLER,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/profiletype/",
	"title": "ProfileType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ProfileType{   BUYER,    SELLER,   }   Required by UpdateProfileInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/promotion/",
	"title": "Promotion",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Promotion {  code: String!    name: String    start: Date    end: Date   Show deprecated fields   effectiveDate: : Date // deprecated from 2018-02-28 Incorrect date format.     expireDate: : Date // deprecated from 2018-02-28 Incorrect date format.     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   name(String):   effectiveDate(Date):   expireDate(Date):   start(Date):   end(Date):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/property/",
	"title": "Property",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Property {  name: String    code: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String):   code(String):    Required by HotelData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/propertytype/",
	"title": "PropertyType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PropertyType {  propertyCode: String    name: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields propertyCode(String):   name(String):    Required by HotelData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " Temporary type to use only during SQL server\u0026rsquo;s lifetime\nGraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/schema/query/",
	"title": "Query",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Query {  admin: AdminQuery    hotelX: HotelXQuery    mappea: MappeaQuery    paymentX: PaymentXQuery    stats: StatsQuery    alertsX: AlertsXQuery    logging: LoggingQuery   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields admin(AdminQuery):   hotelX(HotelXQuery):   mappea(MappeaQuery):   paymentX(PaymentXQuery):   stats(StatsQuery):   alertsX(AlertsXQuery):   logging(LoggingQuery):    "
},
{
	"uri": "https://travelgatex.com/getting-started/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "How to get support for using our APIs",
	"content": "   Four steps to using our API If you\u0026rsquo;re ready to start searching for a hotel, getting a quote and booking it right away, try out the TravelgateX API by following the steps below:\n STEP 1: Get to know our APIs. Read through our documentation and test some sample calls in our API Playground. You can use a test API key and start experimenting with our APIs straight away. STEP 2: Sign an agreement with a hotel Seller to get access to their booking databases. You can see a full list of Sellers and contact the ones you want to connect with by visiting our Seller portfolio. STEP 3: Sign up for TravelgateX API access https://www.travelgatex.com/ STEP 4: Start generating new business! Read through our integration guides and start integrating our HotelX API into your booking applications. BONUS STEP: TravelgateX is using one of the latest and most advanced API technologies, GraphQL. It is quick to learn and immensely powerful. Check out our free GraphQL guides to learn more about this cutting edge technology.  Interactive, user-friendly documentation All of our endpoint reference documentation is generated from our GraphQL schema. Use¬†the schema column in the navigation of the API Playground to see and understand what information will be returned by each query.\nBe part of the community The TravelgateX community of developers are creative, clever, data-driven, fun, and helpful. Join our Community and contribute to the conversation, learn from other developers working in the travel industry, and share your own best practices and unique insights. Feel connected and be part of a bigger industry sector by participating in our forums. It is also a great place to learn and share new GraphQL practices and to learn about our other tools, including our payments platform, and how other developers are connecting with our 600+ suppliers.\nOur developers team also actively participate in our forums, so when you post a query, we are quick to respond and solve your integration challenge. The GraphQL playground has all of our API functionalities baked in, so you can quickly explore making queries and testing calls, but if you need more help, you can contact us through our Help Center\nAlthough the API has been designed to be very intuitive and easy to read, we are aware that some concepts can be confusing. That\u0026rsquo;s why we\u0026rsquo;re here to help! You have access to complete API documentation guide, an interactive version available inside the Playground, a large community of experienced members ready to answer your questions, and a support team ready to solve any doubts that you might have during the process.\nGot a great idea? Share it with us at the TGX Community Forum\nCan\u0026rsquo;t find your answer? Got any technical questions or need tech support from our team? We‚Äôre here to help. Get in touch\n"
},
{
	"uri": "https://travelgatex.com/integrations/payment/rsys/",
	"title": "RSYS - Redsys",
	"tags": [],
	"description": "Redsys integration",
	"content": "   RSYS - Redsysx Changelog     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/rangefilter/",
	"title": "RangeFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RangeFilter {  term: TermType!    value: Int!    condition: ConditionType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields term(TermType!):   value(Int!):   condition(ConditionType!):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/rangeprice/",
	"title": "RangePrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RangePrice{   LESS,    GREATER,   }   Required by AlertPrice:  Price contains the specific configuration for Price alert Type  AlertPriceInput:  Price input  AlertPriceUpdateInput:  Price update   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/rangeprice/",
	"title": "RangePrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RangePrice{   LESS,    GREATER,   }   Required by AlertPrice:  Price contains the specific configuration for Price alert Type  AlertPriceInput:  Price input  AlertPriceUpdateInput:  Price update   "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/load-product/manual-load/rate-load/",
	"title": "Rate: Availability and Price load",
	"tags": [],
	"description": "Load allotment, availability conditions and prices to your rates",
	"content": " Rate First, please select the client and the Channel Manager in order to continue the process of loading conditions. Then indicate the hotel to which you want to load availability conditions or prices and finally select Rates in the Choose your Load field. Once the rate is specified in the selectable, select either prices or conditions using the Load Type field.\n Load availability/allotment Load prices  How to load Availability To load availability, select Availability.\nThe new panel allows you to indicate the date range, rooms, allotment (number of rooms available) and conditions to be applied. Once you have introduced the data you want to apply, clicking Load Rate saves the changes. Doing this will overwrites the data loaded previously for those dates, if any.\n From - To: Date range when the conditions will be applied. Applicable Days of Week: Days of week in which the condition in the previous date range applies. All Rooms: Rooms to which the conditions apply. In case the checkbox is not selected, a new field pop ups, allowing you to select the rooms you want it to apply Booking Limit: Maximum number of rooms available to be sold. Free sales: Sign of free sales: there is no limit in the number of rooms to be sold. If you check \u0026ldquo;On\u0026rdquo; you will apply the free sales condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a free sales if one was previously loaded. If you check unspecified you won\u0026rsquo;t apply any change (on/off) in the free sales condition. If the \u0026ldquo;Booking Limit\u0026rdquo; field is indicated and the \u0026ldquo;Free sales\u0026rdquo; is \u0026ldquo;On\u0026rdquo;, the free sales status will have priority and the booking limit will be ignored. Close On Arrival: Stop sales on arrival date: in the date range specified before it\u0026rsquo;s not possible to check-in. If you check \u0026ldquo;On\u0026rdquo; you will apply the close on arrival condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a close on arrival condition if one was previously loaded. If you check unspecified, you won\u0026rsquo;t apply any change (on/off) in the close on arrival condition. Close On Departure: Stop sales on departure date: in the date range specified before is not possible to do a check-out. If you check \u0026ldquo;On\u0026rdquo; you will apply the close on departure condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a close on departure condition if one was previously loaded. If you check unspecified you won\u0026rsquo;t apply any change (on/off) in the close on departure condition. Close Master: Stop sales: in the date range specified before is not possible to stay, so the client will not receive availability for any stay that include those days. If you check \u0026ldquo;On\u0026rdquo; you will apply the close master condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a close master condition if one was previously loaded. If you check unspecified you won\u0026rsquo;t apply any change (on/off) in the close master condition. Min LOS on Stay: Minimum stay number of nights for this rate and rooms to be available. Max LOS on Stay: Maximum stay number of nights for this rate and rooms to be available. Min LOS on Arrival: Minimum stay number of nights for this rate and rooms to be available. Only depending on the arrival date. Max LOS on Arrival: Maximum stay number of nights for this rate and rooms to be available. Only depending on the arrival date. Min Release: Minimum number of days before the check-in date for which the product will be available to be booked. Max Release: Maximum number of days before the check-in date for which the product will be available to be booked.  How to load Prices To load price you should select Price in the load type field.\nThis allows you to load the 3 different types of price and extra passengers and meal plan supplements.\n From - To: Date range when the price applies. Applicable Days of Week: Days of week that the price in the previous date range applies All Rooms: Rooms to which the prices apply. In case the checkbox is not selected, a new field pops up to allow you to select the rooms you want the prices to apply. Price Type: Inventory-X system allows three different types of price:  Price per Room Price per Standard Occupancy Price per Occupancy   \nPrice per Room Price per room allows you to load a price for the whole room and the option to add occupancy and meal plan supplements.\nIf you want a unique price for the whole room and you don\u0026rsquo;t use occupancy supplements, you can load your price in the Room Price field. That way, no matter the occupancy uses your room has, the final price will be the one indicated in the Room Price field.\nFor example, if you load 100‚Ç¨ in Room Price and your room in the SetUp has several uses (as 1 adult, 2 adults, 3 adults, 2 adults and 1 child and more), the price will be still 100‚Ç¨.\nOccupancy supplements In case you want to add supplements by pax you have to consider the standard occupancy indicated in the SetUp. For example, a Double Room with standard occupancy 2 and multiple occupancy uses would work as per below:\nAll occupancies uses equal and below the room standard occupancy will have the price loaded in the Room Price field:\n 1 adult (1-0-0): 100‚Ç¨ (room price) 2 adults (2-0-0): 100‚Ç¨ (room price)  If the room allows occupancies uses above the standard occupancy you can control the price for these extra passengers using the Occupancy Supplements option. You can add different supplements by adult, child and baby. The supplement type defines how the calculation is done:\n Amount: This price is the amount added to the average price per pax calculated by the system. If the price per room is 100‚Ç¨ and the first extra adult has an amount supplement, the final price in our example for different occupancies would be:\n 1 adult (1-0-0): 100‚Ç¨ (room price) 2 adults (2-0-0): 100‚Ç¨ (room price) 1 adult and 1 child (1-1-0): 100‚Ç¨ (room price) 3 adults (3-0-0): 100‚Ç¨ (room price) + 50‚Ç¨ (average price per pax: room price / standard occupancy, 100\u0026frasl;2) + 50‚Ç¨ (adult amount supplement) = 200‚Ç¨ 2 adults and 1 child (2-1-0): 100‚Ç¨ (room price) + 0‚Ç¨ (child exclusive supplement) = 100‚Ç¨  Percent: This price is the percent obtained from the average price per pax calculated from the room price. If the price per room is 100‚Ç¨ and the first extra adult has a percent of 10% supplement, the final price in our example for different occupancies would be:\n 1 adult (1-0-0): 100‚Ç¨ (room price) 2 adults (2-0-0): 100‚Ç¨ (room price) 1 adult and 1 child (1-1-0): 100‚Ç¨ (room price) 3 adults (3-0-0): 100‚Ç¨ (room price) + 50‚Ç¨ (average price per pax: room price / standard occupancy, 100\u0026frasl;2) + 5‚Ç¨ (10% from 50 - average price per pax) = 155‚Ç¨ 2 adults and 1 child (2-1-0): 100‚Ç¨ (room price) + 0‚Ç¨ (child exclusive supplement) = 100‚Ç¨  Exclusive: This price is absolute. If the price per room is 100‚Ç¨ and the first extra adult has an exclusive supplement, the final price in our example for different occupancies would be:\n 1 adult (1-0-0): 100‚Ç¨ (room price) 2 adults (2-0-0): 100‚Ç¨ (room price) 1 adult and 1 child (1-1-0): 100‚Ç¨ (room price) 3 adults (3-0-0): 100‚Ç¨ (room price) + 50‚Ç¨ (adult exclusive supplement) = 150‚Ç¨ 2 adults and 1 child (2-1-0): 100‚Ç¨ (room price) + 0‚Ç¨ (child exclusive supplement) = 100‚Ç¨   Meal plan supplements In the SetUp section you have specified a unique meal plan for your rate, but here you can load meal plan supplements if you wish. You can indicate them by pax type (adult, child or baby), the meal plan and the amount to be added to the final price.\nIf you want to load a meal plan supplement type \u0026ldquo;free\u0026rdquo;, you should load it with a price of 0. \nPrice per Standard Occupancy Price per standard occupancy allows you to load price for all occupancy uses under or equal to the standard occupancy and the option to add occupancy and meal plan supplements.\nPlease bear in mind that the prices here are calculated using the room standard occupancy and that all passangers under this value will be treated as an adult, so occupancies with children under the standard occupancy will have the same price as only adults with the same pax count. That means that, in order to calculate the final amount, it is always necessary for the paxes to reach the number of adults indicated by the standard occupancy.\nFor example, if the room standard occupancy is 2 and the occupancy use is 1 adult and 2 children (1-2-0), the first two passengers will be treated as adults and the remaining will be treated as what they actually are, in this case as a child. In this example, the occupancy use of 1 adult and 2 children (1-2-0) will be treated as 2 adults and 1 child (2-1-0).\nLet\u0026rsquo;s check some examples to know how prices are calculated for different occupancy uses. First, we\u0026rsquo;ll check the standard occupancy and uses from our Double Room set in the SetUp section:\nIn this case, our standard occupancy is 2 adults, but the room allows different occupancy uses as 3 adults, 1 adult, 2 adults and 1 child, 2 adults and 1 baby\u0026hellip;\nIf we load price for this room using price per standard occupancy we will be able to load price for all occupancies under or equal the standard occupancy:\nIf we load 50‚Ç¨ for 1 adult and 100‚Ç¨ for 2 adults, let\u0026rsquo;s check how all occupancy uses will be priced:\n 1 adult (1-0-0): 50‚Ç¨ (occupancy below the standard occupancy and price loaded specific for this use case). 2 adults (2-0-0): 100‚Ç¨ (occupancy equal to the standard occupancy and price loaded specific for this use case). 1 adult and 1 child (1-1-0): 100‚Ç¨. Children and babies are trated as adult until the standard occupancy is fulfilled, so in this case we have 1 adult + 1 child converted as an adult because we need to have 2 adults (standard occupancy), that way the price will be the one loaded for two adults. 1 adult and 2 children (1-2-0): 100‚Ç¨ (for two adults) + 25‚Ç¨ (child supplement) = 125‚Ç¨. Children and babies are treated as adult until the standard occupancy is fulfilled, so in this case we have 1 adult + 1 child converted as an adult + 1 child, that way the price will be the one loaded for two adults and the price for the first extra child. 3 adults (3-0-0): 100‚Ç¨ (for two adults) + 30‚Ç¨ (adult supplement) = 130‚Ç¨. In this case, all paxes are adults, as the standard occupancy is 2, we use that price and the supplement for the third adult.  All prices for occupancy uses below and equal to the room standard occupancy must be loaded ir order to return availability to the Buyers. If for example, price for 1 adult is not loaded, there won\u0026rsquo;t be availability response for that occupancy use. Check the occupancy supplements sections explained earlier to know how different types of supplements work. \nPrice per Occupancy Price per occupancy allows you to load exactly the amount for each occupancy use that your room allows. In this case, our system doesn\u0026rsquo;t do any calculation and we don\u0026rsquo;t use the standard occupancy, only the occupancy uses.\nAs you can indicate an specific amount for each occupancy, it doesn\u0026rsquo;t make sense to have occupancy supplements, but you can load meal plan supplements explained before.\n "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/rateplan/",
	"title": "RatePlan",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RatePlan {  code: String!    supplierCode: String!    name: String    start: Date    end: Date   Show deprecated fields   effectiveDate: : Date // deprecated from 2018-02-28 Incorrect date format.     expireDate: : Date // deprecated from 2018-02-28 Incorrect date format.     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   supplierCode(String!):   name(String):   effectiveDate(Date):   expireDate(Date):   start(Date):   end(Date):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/raterulesfilterinput/",
	"title": "RateRulesFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RateRulesFilterInput {  includes: [RateRulesType!]    excludes: [RateRulesType!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields includes([RateRulesType!]):   excludes([RateRulesType!]):    Required by FilterInput:    HotelXFilterSearchInput:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " Rate Rules\nGraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "https://travelgatex.com/mappea/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   Required by ReviewedRateRule:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/ratios/",
	"title": "Ratios",
	"tags": [],
	"description": "",
	"content": " Ratios details\nGraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields lookToQuote(Int!): Searches needed to do a quote  lookToBook(Int!): Searches needed to do a booking  quoteToBook(Int!): Quotes needed to do a booking   Required by StatsData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/ratios/",
	"title": "Ratios",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields lookToQuote(Int!):   lookToBook(Int!):   quoteToBook(Int!):    Required by StatsData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/ratios/",
	"title": "Ratios",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields lookToQuote(Int!):   lookToBook(Int!):   quoteToBook(Int!):    Required by StatsData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Reference {  client: String    supplier: String    hotel: String   Show deprecated fields   commit: : String // deprecated from 2018-10-21 Please, use SupplierReference     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields client(String):   supplier(String):   commit(String):   hotel(String):    Required by HotelBookingDetail:    HotelCancelDetail:    HotelCommitDetails:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/referencefilter/",
	"title": "ReferenceFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReferenceFilter {  client: [String!]    supplier: [String!]    hotel: [String!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields client([String!]):   supplier([String!]):   hotel([String!]):    Required by LoggingLegacyFilterInput:  Filters needed to do a search. From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss),    "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/inputobjects/relativeinput/",
	"title": "RelativeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RelativeInput {  from: Duration!    to: Duration!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields from(Duration!):   to(Duration!):    Required by TimeRangeInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/relativeinput/",
	"title": "RelativeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RelativeInput {  from: Duration!    to: Duration!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields from(Duration!):   to(Duration!):    Required by TimeRangeInput:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/relayinput/",
	"title": "RelayInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RelayInput {  first: Int    last: Int    before: String    after: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields first(Int):   last(Int):   before(String):   after(String):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/relayinput/",
	"title": "RelayInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RelayInput {  first: Int    last: Int    before: String    after: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields first(Int):   last(Int):   before(String):   after(String):    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/release-notes/",
	"title": "Release notes",
	"tags": [],
	"description": "Release notes",
	"content": "  Change Log     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/release-notes/",
	"title": "Release notes",
	"tags": [],
	"description": "Release notes",
	"content": "   Change Log     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/requiredroomwithsamepaxconfiguration/",
	"title": "RequiredRoomWithSamePaxConfiguration",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RequiredRoomWithSamePaxConfiguration {  samePaxNumber: ReviewedBool!    samePaxAge: ReviewedBool!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields samePaxNumber(ReviewedBool!):   samePaxAge(ReviewedBool!):    Required by MetadataRoomCandidates:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/resort/",
	"title": "Resort",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Resort {  code: String!    name: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   name(String):   description(String):    Required by Supplement:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " Resources are those used in APIs and Products.\nGraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by ResourceEdge:    ManagedGroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    ResourceEdge:    ManagedGroupData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ResourceEdge:    ManagedGroupData:    Permission:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    ResourceEdge:    ManagedGroupData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    ResourceEdge:    ManagedGroupData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   resourceData(ResourceData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    ManagedGroupData:    ResourceEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by RoleData:    APIData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by RoleData:    APIData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by APIData:    RoleData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by RoleData:    APIData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by RoleData:    APIData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([ResourceEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:    RoleData:    APIData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection): which API have asigned this resource?  roles(RoleConnection): which roles are asigned or are possibles in this resource?   Required by Resource:  Resources are those used in APIs and Products.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection):   roles(RoleConnection):    Required by Resource:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection):   roles(RoleConnection):    Required by Resource:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection):   roles(RoleConnection):    Required by Resource:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection):   roles(RoleConnection):    Required by Resource:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!],     type: RoleType,     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   isEditable(Boolean!):   label(String):   apis(APIConnection):   roles(RoleConnection):    Required by Resource:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {  node: Resource    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Resource):   cursor(String!):    Required by ResourceConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/interfaces/response/",
	"title": "Response",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Response {  stats( token: String!, ): StatsRequest    auditData: AuditData    errors: [Error!]    warnings: [Warning!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields stats(StatsRequest):   auditData(AuditData):   errors([Error!]):   warnings([Warning!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reviewedageranges/",
	"title": "ReviewedAgeRanges",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReviewedAgeRanges {  reviewDate: Date!    ages: [AgeRange!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reviewDate(Date!):   ages([AgeRange!]!):    Required by MetadataRoomCandidates:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reviewedallowsbookpreferences/",
	"title": "ReviewedAllowsBookPreferences",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReviewedAllowsBookPreferences {  reviewDate: Date!    preferences: [BookPreferenceInfo!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reviewDate(Date!):   preferences([BookPreferenceInfo!]!):    Required by MetadataBook:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reviewedbool/",
	"title": "ReviewedBool",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReviewedBool {  reviewDate: Date!    value: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reviewDate(Date!):   value(Boolean!):    Required by MetadataSearch:    MetadataQuote:    MetadataBook:    MetadataBooking:    MetadataBookingList:    MetadataCancel:    MetadataContent:    MetadataGeneric:    MetadataSearchDestinations:    RequiredRoomWithSamePaxConfiguration:    MetadataBeds:    MetadataStatic:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reviewedhoteloptiontype/",
	"title": "ReviewedHotelOptionType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReviewedHotelOptionType {  reviewDate: Date!    value: HotelOptionType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reviewDate(Date!):   value(HotelOptionType!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reviewedint/",
	"title": "ReviewedInt",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReviewedInt {  reviewDate: Date!    value: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reviewDate(Date!):   value(Int!):    Required by MetadataSearch:    MetadataSearchDestinations:    MetadataRoomCandidates:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reviewedpaymenttype/",
	"title": "ReviewedPaymentType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReviewedPaymentType {  reviewDate: Date!    value: PaymentType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reviewDate(Date!):   value(PaymentType!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reviewedraterule/",
	"title": "ReviewedRateRule",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReviewedRateRule {  reviewDate: Date!    value: RateRulesType!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reviewDate(Date!):   value(RateRulesType!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reviewedtext/",
	"title": "ReviewedText",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReviewedText {  reviewDate: Date!    value: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reviewDate(Date!):   value(String!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/reviwedpaxtyperangeinroomcandidates/",
	"title": "ReviwedPaxTypeRangeInRoomCandidates",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ReviwedPaxTypeRangeInRoomCandidates {  reviewDate: Date!    candidates: [MetadataCandidate!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reviewDate(Date!):   candidates([MetadataCandidate!]!):    Required by MetadataRoomCandidates:     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/roadmap/",
	"title": "Roadmap",
	"tags": ["roadmap"],
	"description": "We have put together a GitHub Project where we will keep updating on the things we‚Äôve in our plans.",
	"content": "We have put together a GitHub Project where we will keep updating on the things we‚Äôve in our plans.\nHere is the GitHub project with Public Roadmap of TravelgateX.\nThe Project has a few columns that act as the status whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the HotelX, Documentation, etc\u0026hellip;\n"
},
{
	"uri": "https://travelgatex.com/flight-x/release-notes/roadmap/",
	"title": "Roadmap",
	"tags": ["roadmap"],
	"description": "Flight-X roadmap summarized",
	"content": " 2019 Q4  NDC API\n Availability/Shopping (AirShopping) Pricing/Quote (OfferPrice) Booking/Reservation (OrderCreate) Retrieve (OrderView) Ticketing/Issuance (AirDocIssue) Cancel (OrderCancel)  Backoffice + Web GUI\n Customer Setup Access configuration Monitoring \u0026amp; Statistics Dashboard  CLI\n  2020 Q1  NDC API\n Airline Profile (AirlineProfile) Preorder Ancillaries (AirShopping) Postorder Ancillaries (ServiceList, SeatAvailability, OrderRetrieve, OrderReshop, OrderChange)  Local Cache\n  "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/roadmap/",
	"title": "Roadmap",
	"tags": ["roadmap"],
	"description": "We have put together a GitHub Project where we will keep updating on the things we‚Äôve in our plans.",
	"content": "We have put together a GitHub Project where we will keep updating on the things we‚Äôve in our plans.\nHere is the GitHub project with Public Roadmap of TravelgateX.\nThe Project has a few columns that act as the status whereas cards are the items that we have in our plans. We have also labelled each issue so it would clarify if the item would be added in the HotelX, Documentation, etc\u0026hellip;\n"
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " Permissions determine what operations are allowed on a resource\nGraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by RoleEdge:    ManagedGroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    ManagedGroupData:    RoleEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by ManagedGroupData:    RoleEdge:    Permission:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    ManagedGroupData:    RoleEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    ManagedGroupData:    RoleEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Role {  code: ID!    roleData: RoleData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roleData(RoleData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by Permission:    ManagedGroupData:    RoleEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by MemberData:    ResourceData:    GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by GroupData:    MemberData:    ResourceData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by MemberData:    GroupData:    ResourceData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by GroupData:    MemberData:    ResourceData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by GroupData:    MemberData:    ResourceData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoleEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:    GroupData:    MemberData:    ResourceData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!): Has resource Create permission?  isRead(Boolean!): Has resource Create permission?  isUpdate(Boolean!): Has resource Update permission?  isDelete(Boolean!): Has resource Delete permission?  isEnable(Boolean!): Is role enabled or not?  isExecutable(Boolean!): Has resource Executable permission?  isSpecial(Boolean!): Has any other non-basic permission/s?  special(String): Special permission  resources(ResourceConnection): Resources used   Required by Role:  Permissions determine what operations are allowed on a resource   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!):   isRead(Boolean!):   isUpdate(Boolean!):   isDelete(Boolean!):   isEnable(Boolean!):   isExecutable(Boolean!):   isSpecial(Boolean!):   special(String):   resources(ResourceConnection):    Required by Role:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!):   isRead(Boolean!):   isUpdate(Boolean!):   isDelete(Boolean!):   isEnable(Boolean!):   isExecutable(Boolean!):   isSpecial(Boolean!):   special(String):   resources(ResourceConnection):    Required by Role:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!):   isRead(Boolean!):   isUpdate(Boolean!):   isDelete(Boolean!):   isEnable(Boolean!):   isExecutable(Boolean!):   isSpecial(Boolean!):   special(String):   resources(ResourceConnection):    Required by Role:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!):   isRead(Boolean!):   isUpdate(Boolean!):   isDelete(Boolean!):   isEnable(Boolean!):   isExecutable(Boolean!):   isSpecial(Boolean!):   special(String):   resources(ResourceConnection):    Required by Role:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(ID!):   code(ID!):   type(RoleType!):   isEditable(Boolean!):   label(String):   isCreate(Boolean!):   isRead(Boolean!):   isUpdate(Boolean!):   isDelete(Boolean!):   isEnable(Boolean!):   isExecutable(Boolean!):   isSpecial(Boolean!):   special(String):   resources(ResourceConnection):    Required by Role:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {  node: Role    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Role):   cursor(String!):    Required by RoleConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/roletype/",
	"title": "RoleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum RoleType{   VIEWER,    EDITOR,    ADMIN,    EXECUTOR,    SPECIFIC,   }   Required by RoleData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/room/",
	"title": "Room",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Room {  occupancyRefId: Int!    legacyRoomId: String!    code: String!    supplierCode: String!    description: String    refundable: Boolean    units: Int    roomPrice: RoomPrice!    beds: [Bed!]    ratePlans: [RatePlan!]    promotions: [Promotion!]    surcharges: [Surcharge!]    features: [Feature!]    amenities: [Amenity!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields occupancyRefId(Int!):   legacyRoomId(String!):   code(String!):   supplierCode(String!):   description(String):   refundable(Boolean):   units(Int):   roomPrice(RoomPrice!):   beds([Bed!]):   ratePlans([RatePlan!]):   promotions([Promotion!]):   surcharges([Surcharge!]):   features([Feature!]):   amenities([Amenity!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/roomconnection/",
	"title": "RoomConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoomConnection {  edges: [RoomEdge]    token: String    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([RoomEdge]):   token(String):   pageInfo(PageInfo!):    Required by HotelXQuery:    HotelData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/roomcriteria/",
	"title": "RoomCriteria",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoomCriteria {  paxes: [Pax!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields paxes([Pax!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/roomdata/",
	"title": "RoomData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoomData {  code: ID!    roomCode: String!    texts( languages: [Language!], ): [Text!]    source: String    occupancies: OccupancyStatic    amenities: [AmenityStatic!]    views: [View!]    medias: [Media!]    beds: [BedStatic!]    area: Area    allAmenities( mapOptions: [HotelXMapOptionInput!], ): HotelXAmenityConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roomCode(String!):   texts([Text!]):   source(String):   occupancies(OccupancyStatic):   amenities([AmenityStatic!]):   views([View!]):   medias([Media!]):   beds([BedStatic!]):   area(Area):   allAmenities(HotelXAmenityConnection):    Required by RoomStatic:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/roomedge/",
	"title": "RoomEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoomEdge {  node: RoomStatic    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(RoomStatic):   cursor(String!):    Required by RoomConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/roominput/",
	"title": "RoomInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoomInput {  paxes: [PaxInput!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields paxes([PaxInput!]!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/roomprice/",
	"title": "RoomPrice",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoomPrice {  price: Price!    breakdown: [PriceBreakdown!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields price(Price!):   breakdown([PriceBreakdown!]):    Required by Room:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/roomstatic/",
	"title": "RoomStatic",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoomStatic {  code: ID!    roomData: RoomData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   error: : [Error!] // Deprecated from 2019-07-03     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   roomData(RoomData):   error([Error!]):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by RoomEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/rule/",
	"title": "Rule",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Rule {  id: String!    name: String    type: MarkupRuleType!    value: Float!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id(String!):   name(String):   type(MarkupRuleType!):   value(Float!):    "
},
{
	"uri": "https://travelgatex.com/integrations/flights/sbr/",
	"title": "SBR - Sabre",
	"tags": [],
	"description": "Sabre integration",
	"content": "   SBR - Sabre Changelog     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‚Äòschema‚Äô in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are ‚Äúread only‚Äù and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a¬†Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a¬†Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‚Äòschema‚Äô in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are ‚Äúread only‚Äù and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a¬†Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a¬†Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‚Äòschema‚Äô in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are ‚Äúread only‚Äù and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a¬†Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a¬†Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‚Äòschema‚Äô in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are ‚Äúread only‚Äù and are used to get data from our system. For example, getting a list of available flight offers for a particular date, origin and destination is a¬†Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for an offer is a¬†Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "https://travelgatex.com/mappea/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‚Äòschema‚Äô in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are ‚Äúread only‚Äù and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a¬†Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a¬†Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‚Äòschema‚Äô in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are ‚Äúread only‚Äù and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a¬†Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a¬†Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": "The TravelgateX GraphQL API Schema is a powerful way to access all of our functionalities as you need them. GraphQL allows you to ask for the exact information you need, so that you get responses that can be used in your clients (applications, websites and other interfaces) directly, without having to parse information from long-winded or cluttered API responses.\nYou can also see our ‚Äòschema‚Äô in action by using our API playground. You can create sample queries and the schema will autocomplete with available fields. Check out our sample query guides to walk through some common queries to see how you can pick and choose from our Schema to get just the information you need. The Schema enables two main operations: - Queries: Queries are ‚Äúread only‚Äù and are used to get data from our system. For example, getting a list of available hotel vacancies for a particular date and location is a¬†Query - Mutations: Mutations change, add or delete the data in our system. For example, making a booking for a vacant hotel room is a¬†Mutation.\nIn GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/bookingflow/search/",
	"title": "Search",
	"tags": [],
	"description": "How to check availability",
	"content": " Search is the first step in our booking flow. The goal is to check availability in the date range and pax specified for the requested hotels or for the hotels in the destination requested. The call can search one or more sellers\u0026rsquo; accesses. It returns a list of available options according to your search criteria.\nAdvanced criteria There are different parameters that can be set up in the request. Below are the mandatory parameters:\n CheckIn: check-in date for the booking. Format: YYYY-MM-DD CheckOut: check-out date for the booking. Format YYYY-MM-DD Hotels: List of hotel codes Occupancies: The occupancy you are requesting for each room.  For multi-room bookings, this array will contain multiple elements (rooms). You will need to detail the occupancy for each room requested.   FilterSearch These filters can be used to accurate the response to your willingness. The possible filters are:\n By access: It is possible to indicate what accesses to use (includes) or excludes any of yours configured acccesses. Only one list can be specified (include or exclude lists). Using the access filter our system will only return options of those selected accesses. By raterule: It is possible to filter the options returned by the suppliers depending on what raterules you want to return or exclude: see our FAQ for more information. By status: It is possible to filter the options returned by the suppliers, filtering those status you may or not be excluding or including options with the selected status (possible status are OK and RQ).  How to request There are different ways to perform a search request. Below are shown different examples for different scenarios:\n       #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"765fa8dbddd6a17571feb012f9c876bc\",\"n\":\"1 Room - 2 Adults\",\"o\":[\"graphiql\"],\"u\":\"rubencaballero\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"16c1401dff3146bd4685c1a018dce96a\",\"n\":\"1 Room - 2 Adults 1 Child\",\"o\":[\"graphiql\"],\"u\":\"rubencaballero\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"b5db36ad7084adbdf100c9b4491d7d43\",\"n\":\"2 Rooms - 2 Adults + 2 Adults\",\"o\":[\"graphiql\"],\"u\":\"rubencaballero\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"f8a762bb1efc34f2ff61dd7929d7aa10\",\"n\":\"2 Rooms - 2 Adults 1 Child + 2 Adults\",\"o\":[\"graphiql\"],\"u\":\"rubencaballero\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \nImportant Info Please bear in mind that in the room structure response there is a refundable field. If that field is set to false, it means that the room has 100% cancellation cost, in other words, the room is NON-REFUNDABLE. If the field returns a null value, it means that the seller is not able to return this info at this step. Some sellers do not return cancellation policies in availabilit. You can find out the specifities of each seller in their metadata.\n "
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/api-methods/messages/search/",
	"title": "Search",
	"tags": [],
	"description": "Search basic reservation information ",
	"content": " Description This method allows us to search for reservations mainly based on date filters, retrieving basic information of each matching reservation.\n\nConsiderations  We have to set a bookingDate filter or a checkinDate filter but not both at the same time (or an error will be returned).\n For the bookingDate filter the dates range can\u0026rsquo;t be more than one week.\n For the checkinDate filter the dates range can\u0026rsquo;t be more than one week.\n  \nSearch Request (HTTP body) \n   Element Cardinality Data Type Description     access 1 node Acces information: It will be validated to grant acces to the API and to the operation.If there is any problem then an error will be returned.   access/accessToken 1 string Key to acces to the API.   access/user 1 string User.   access/password 1 string Password related to the user.   checkinDate 0,1 node Check-in filter. This node is set if we want to filter by check-in date.   checkinDate/from 1 date Check-in date range filter: from (inclusive).   checkinDate/to 1 date Check-in date range filter: to (inclusive).   bookingDate 0,1 node Booking filter. This node is set if we want to filter by booking date. (inclusive).   bookingDate/from 1 dateTime Booking date range filter: from (inclusive).   bookingDate/to 1 dateTime Booking date range filter: to (inclusive).   hotels 0..N list(string) Hotels filter:If we just want the reservations of concret hotels then we can set this list with the codes of those hotels.If not given or if it is empty then it will not be applied the filter by hotel code.   providers 0..N list(string) Providers filter:If we just want the reservations of a specific set of providers then we can set this list with the codes of those providers.If not given or if it is empty then the filter by provider code will not be applied.   clients 0..N list(string) Clients filter:If we just want the reservations of a specific set of clients then we can set this list with the codes of those clients.If not given or if it is empty then the filter by client code will not be applied.   includeCancellations 0,1 boolean Cancelations inclusion filter:If set to true then cancelled reservations that match the filters will be included in the response.If not set to true or not given then only not cancelled bookings will be returned.   onlyCancellations 0,1 boolean Cancellations filter:If set to true then only the bookings that have been cancelled in the specific time interval indicated will be returned.If not set to true, then (depending on the value of the includeCancellations tag) only the reservations booked between the time interval indicated will be returned.   onlyErrors 0,1 boolean Only Errors filter:If set to true then only the bookings that have a status indicating some type of error will be returned (bookings with status OK or CN will not be returned). Also, if this filter is applied, both includeCancellations and onlyCancellations will be ingnored.If not set to true, then (depending on the value of the includeCancellations tag) only the reservations booked between the time interval indicated will be returned.   isTest 0,1 boolean Test mode:If set to true the operation will be executed in test mode. This means that the response will include dummy information (no real reservations information.If not set to true or not given then the operation will execute as normally. In order to test the API, we still need to gie a real access information. Note that even in test mode all operations will execute its own request validations, so the requests must be well formed.    \nSearch request structure \n{ \u0026quot;access\u0026quot; : { \u0026quot;accessToken\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;user\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;password\u0026quot; : \u0026quot;string\u0026quot; }, \u0026quot;checkinDate\u0026quot; : { \u0026quot;from\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;to\u0026quot; : \u0026quot;string\u0026quot; }, \u0026quot;bookingDate\u0026quot; : { \u0026quot;from\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;to\u0026quot; : \u0026quot;string\u0026quot; }, \u0026quot;hotels\u0026quot; : [ \u0026quot;string\u0026quot; ], \u0026quot;includeCancellations\u0026quot; : false, \u0026quot;onlyCancellations\u0026quot; : true, \u0026quot;isTest\u0026quot; : true }  \nSearch Request example: bookingDate search for concrete hotels and including cancellations \n{ \u0026quot;access\u0026quot; : { \u0026quot;accessToken\u0026quot; : \u0026quot;xxxx\u0026quot;, \u0026quot;user\u0026quot; : \u0026quot;xxxx\u0026quot;, \u0026quot;password\u0026quot; : \u0026quot;xxxx\u0026quot; }, \u0026quot;bookingDate\u0026quot; : { \u0026quot;from\u0026quot; : \u0026quot;2018-07-18\u0026quot;, \u0026quot;to\u0026quot; : \u0026quot;2018-07-20\u0026quot; }, \u0026quot;hotels\u0026quot; : [ \u0026quot;1234\u0026quot;, \u0026quot;4534\u0026quot; ], \u0026quot;includeCancellations\u0026quot; : true }  \nSearch Request example: checkinDate search for any hotel and excluding cancellations \n{ \u0026quot;access\u0026quot; : { \u0026quot;accessToken\u0026quot; : \u0026quot;xxxx\u0026quot;, \u0026quot;user\u0026quot; : \u0026quot;xxxx\u0026quot;, \u0026quot;password\u0026quot; : \u0026quot;xxxx\u0026quot; }, \u0026quot;checkinDate\u0026quot; : { \u0026quot;from\u0026quot; : \u0026quot;2018-07-18\u0026quot;, \u0026quot;to\u0026quot; : \u0026quot;2018-07-20\u0026quot; } }  \nSearch Response (HTTP body) \n   Element Cardinality Data Type Description     reservationSearchRS 1 list Root node with the list of reservations.   locators 1 node This node contains the different locators of the reservation.   locators/tgx 1 string Travelgate locator.   locators/client 1 string Client locator.   locators/provider 0,1 string Provider locator. If the reservation has no provider locator then this node will be null.   bookingDate 1 dateTime Booking date.   checkinDate 1 date Check-in date.   checkoutDate 1 date Check-out date.   cancellationDate 0,1 dateTime If the reservation has been canceled this will be the cancelation date. If the reservation is not canceled this node will be null.   status 1 string Reservation status. Check reseravation status codes here.   summaryStatus 1 string Reservation summary status. Check reseravation status codes here.   mainGuestName 1 string Reservation\u0026rsquo;s main guest name.   hotelCode 1 string Code of the hotel of the reservation.   clientCode 1 string Code of the agency/client.   providerCode 1 string Code of the provider of the reservation.   sellingPrice 1 price node Selling price information.   quoteSellingPrice 1 price node Selling price at the quote/pre-booking step.   providerPrice 1 price node Provider price information.   quoteProviderPrice 1 price node Provider price at the quote/pre-booking step.   officeCode 0,1 string If returned then this will be the code of the office.   accessCodeHX 1 string Code of the access used in Hotel-X layer to access the provider.   hotelProvCodeHX 1 string Code of the hotel on the provider system (used by Hotel-X).   correlationID 0,1 string Correlation ID.   reservationError 0,1 string If the reservation is not on a well finished status (reservation or cancellation) then we can have some textual information about the error that caused that not well finished status.   reservationWarnings 0,1 list string If returned then it contains a list of tgx locators of reservations that have had problems registering on the main system and that have been stored on an auxiliary system. This information is indepent from the searching dates (will be given for any dates range).   cancellationWarnings 0,1 price node If returned then it contains a list of tgx locators of cancellations that have had problems registering on the main system and that have been stored on an auxiliary system. This information is indepent from the searching dates (will be given for any dates range).   error 0,1 node If there has been any error executing the operation we can receive this node with information about that error. We can also receive errors with the http status.   error/code 1 string Error code. Check error codes here.   error/description 1 string Error description. Check error descriptions here.    \nPrice node \n   Element Cardinality Data Type Description     amount 1 decimal Price amount.   currency 1 string Price currency.   binding 1 boolean Indicates if the price is binding.   commission 1 decimal Commission related to the price.    \nSearch response structure \n{ \u0026quot;reservationSearchRS\u0026quot; : [ { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;string\u0026quot; }, \u0026quot;bookingDate\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;checkinDate\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;checkoutDate\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;cancellationDate\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;status\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;mainGuestName\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;hotelCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;clientCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;providerCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;sellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;amount\u0026quot; : 0, \u0026quot;binding\u0026quot; : true, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;providerPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;amount\u0026quot; : 0, \u0026quot;binding\u0026quot; : true, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteSellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;amount\u0026quot; : 0, \u0026quot;binding\u0026quot; : true, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteProviderPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;amount\u0026quot; : 0, \u0026quot;binding\u0026quot; : true, \u0026quot;commission\u0026quot; : 0 } } ], \u0026quot;error\u0026quot; : { \u0026quot;code\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;string\u0026quot; } }  \nSearch response: dummy response (test mode) \n{ \u0026quot;reservationSearchRS\u0026quot; : [ { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;1\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;111-222\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;12312313\u0026quot; }, \u0026quot;bookingDate\u0026quot; : \u0026quot;2018-07-11 8:50:48\u0026quot;, \u0026quot;checkinDate\u0026quot; : \u0026quot;2018-08-14\u0026quot;, \u0026quot;checkoutDate\u0026quot; : \u0026quot;2018-08-21\u0026quot;, \u0026quot;status\u0026quot; : \u0026quot;OK\u0026quot;, \u0026quot;mainGuestName\u0026quot; : \u0026quot;Smith, Martin\u0026quot;, \u0026quot;hotelCode\u0026quot; : \u0026quot;h1\u0026quot;, \u0026quot;clientCode\u0026quot; : \u0026quot;c1\u0026quot;, \u0026quot;providerCode\u0026quot; : \u0026quot;p1\u0026quot;, \u0026quot;sellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;providerPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteSellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteProviderPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 } }, { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;2\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;222-333\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;456456456\u0026quot; }, \u0026quot;bookingDate\u0026quot; : \u0026quot;2018-08-21 10:11:17\u0026quot;, \u0026quot;checkinDate\u0026quot; : \u0026quot;2018-12-01\u0026quot;, \u0026quot;checkoutDate\u0026quot; : \u0026quot;2018-12-07\u0026quot;, \u0026quot;cancellationDate\u0026quot; : \u0026quot;2018-08-26 11:01:47\u0026quot;, \u0026quot;status\u0026quot; : \u0026quot;CN\u0026quot;, \u0026quot;mainGuestName\u0026quot; : \u0026quot;Redford, Charles\u0026quot;, \u0026quot;hotelCode\u0026quot; : \u0026quot;h2\u0026quot;, \u0026quot;clientCode\u0026quot; : \u0026quot;c2\u0026quot;, \u0026quot;providerCode\u0026quot; : \u0026quot;p2\u0026quot;, \u0026quot;sellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;providerPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteSellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteProviderPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 } }, { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;3\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;444-555\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;789-987-789\u0026quot; }, \u0026quot;bookingDate\u0026quot; : \u0026quot;2018-08-09 18:00:00\u0026quot;, \u0026quot;checkinDate\u0026quot; : \u0026quot;2019-01-26\u0026quot;, \u0026quot;checkoutDate\u0026quot; : \u0026quot;2019-01-27\u0026quot;, \u0026quot;status\u0026quot; : \u0026quot;OK\u0026quot;, \u0026quot;mainGuestName\u0026quot; : \u0026quot;Clancy, Tom\u0026quot;, \u0026quot;hotelCode\u0026quot; : \u0026quot;h3\u0026quot;, \u0026quot;clientCode\u0026quot; : \u0026quot;c3\u0026quot;, \u0026quot;providerCode\u0026quot; : \u0026quot;p3\u0026quot;, \u0026quot;sellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;providerPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteSellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteProviderPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 } }, { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;45\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;232-555\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;283-212-334\u0026quot; }, \u0026quot;status\u0026quot; : \u0026quot;ERROR\u0026quot; } ] }  "
},
{
	"uri": "https://travelgatex.com/flight-x/methods/bookingflow/search/",
	"title": "Search",
	"tags": [],
	"description": "Learn about the Search method",
	"content": " On this page you will learn more about the Flight-X\u0026rsquo;s Search method\nMethod Goals This method is the first step in order to perform a Flight-X\u0026rsquo;s booking flow. This method aims to return all the available flight offers matching the given request criteria. This method is equivalent to the IATA AirShopping method.\nIf you are not familiar to some concepts that are named in the following paragraphs you can take a look to our API reference and take a look to our schema\nHow to request Mainly, this method has three inputs where (FlightOfferWhereInput), orderBy (FlightOfferOrderByInput) and settings (FlightSettingsInput). At this time, the orderBy input has no efect. The where input is the criteria that all the offers returned by the Search has to accomplish. The settings input is the common configuration to use in order to build the request to the supplier/s. All the offers returned by the Search has those caracter√≠stics, if there are no offers that meet those requiremensts an error is returned.\nAt the moment, the only parameters from where that has effect are the originDestCriteria_in and the age_in.\nThe originDestCriteria_in is an array of objects (FlightOriginDestCriteriaInput) that must have at least one value. The parameters for this objects are two scalars departure and arrival, those scalars are IATA airport codes or city codes, with 3 characters. In addition, you has to fill the parameter departureAt with a date, it is the date when you want the offers, the date format is \u0026ldquo;yyyy-mm-dd\u0026rdquo;. There are no limit in the number of originDestCriteria_in, however the majority of the providers only accept two criterias.\nThe parameter age_in is an array of integers that must have at least one value, each value in the array is the age of a passenger that wants to flight.\nRegarding to the settings input, Flight-X for test purposes is only available with the parameter groupCode to FlightX_18728. If you do not specify any supplierCode_in value, Flight-X searh for all the accesses configurated to this group. Now, Flight-X have two accesess configurated, one for the supplier DE2 and the other for AERT. You can limit the search to one of those providers, using the named suppliers codes in the supplierCode_in. You can take a look to this page in order to learn more about the access, client and supplier concepts.\nFinally, keep in mind that it\u0026rsquo;s important to use the correct Headers in our requests. If you wish to test our product, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey 59de8cc0-830a-4023-7f5f-6b1bb336b864\u0026quot; You can learn more about the platform security in this page\n Here you can see some examples and play with our playground:\n       #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"59de8cc0-830a-4023-7f5f-6b1bb336b864\",\"g\":\"ddc242b85b1cd354a828f7522401bc16\",\"n\":\"Search OneWay - 1 Adults\",\"o\":[\"graphiql\"],\"u\":\"mmeliaXTG\"},{\"ak\":\"59de8cc0-830a-4023-7f5f-6b1bb336b864\",\"g\":\"2d44e3c15dcae6ec465a82f08b8ea73f\",\"n\":\"Search Round Trip - 1 Adults, 1 Child\",\"o\":[\"graphiql\"],\"u\":\"mmeliaXTG\"},{\"ak\":\"59de8cc0-830a-4023-7f5f-6b1bb336b864\",\"g\":\"4ab2de565b0b52cb5249688f3fc8aa16\",\"n\":\"Search Circle Trip - 1 Adults, 1 Child\",\"o\":[\"graphiql\"],\"u\":\"mmeliaXTG\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "https://travelgatex.com/distribution/extranet/tools/searches/",
	"title": "Searches",
	"tags": [],
	"description": "Search among your hotels, providers, currencies and meal plans",
	"content": " Overview This tool allows us to perform a search on our hotels and suppliers to see their static data.\nHotels From the component, by selecting filter, it lets us choose between one of the possible search fields:\n Hotel Name Hotel Code Hotel Chain Destination Country Code.  An example searching by hotel name: We choose the filter and its value, we add it and we can carry out the search. It is possible to specify as many filters as we want. The result would be the following:\nProviders In this case the list of providers is filled in automatically, and we can search on it, for example by default it would look like this:\nYou will be able to add providers using the extranet or a master file. To add a provider you can click on the + button. You need to indicate the following information:\n Code: The provider code in TravelgateX platform. Name: The provider name you want to have for this supplier in the extranet. Direct: You can specify if the supplier is direct or a third supplier. This will be useful when you add rules in Distribution and you want to filter by provider, because you will be able to indicate a specific provider or all providers that are \u0026ldquo;Third\u0026rdquo; or \u0026ldquo;Direct\u0026rdquo;.  Currencies You can check the current currencies list used by Distribution-X and its exchange:\nMeal Plans You can check the mealplan list with the code and name information:\n "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/serviceapi/",
	"title": "ServiceApi",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ServiceApi {  code: ID!    name: String!    operations: [ServiceOperation]    error: [Error!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   operations([ServiceOperation]):   error([Error!]):    Required by AdminQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/serviceapifilter/",
	"title": "ServiceApiFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ServiceApiFilter {  ApiName: String    OperationName: String    OperationType: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields ApiName(String):   OperationName(String):   OperationType(String):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/serviceapitype/",
	"title": "ServiceApiType",
	"tags": [],
	"description": "",
	"content": " Services Api available.\nGraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/serviceapitype/",
	"title": "ServiceApiType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/serviceapitype/",
	"title": "ServiceApiType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ServiceApiType{   HOTEL,    TRANSPORTATION,    CAR,    TRANSFERS,    ACTIVITIES,    VIRTUALACCOUNT,    PAYMENT,    PACKAGE,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/serviceoperation/",
	"title": "ServiceOperation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ServiceOperation {  code: ID!    name: String!    type: String!    travelOperation: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   type(String!):   travelOperation(Int!):    Required by ServiceApi:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/serviceoperationtype/",
	"title": "ServiceOperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/serviceoperationtype/",
	"title": "ServiceOperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/serviceoperationtype/",
	"title": "ServiceOperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum ServiceOperationType{   ALL,    SEARCH,    QUOTE,    BOOKING,    OTHER,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/servicestatus/",
	"title": "ServiceStatus",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ServiceStatus {  code: String    type: String    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String):   type(String):   description(String):    Required by HotelXQuery:     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/set-up/",
	"title": "Set Up Messages",
	"tags": [],
	"description": "Configuration messages",
	"content": "Providers needs to implement HotelRatePlanInventoryRetrieve meessages to retrieve Seller\u0026rsquo;s static inventory in order to map the hotelier inventory into their system. Optionally Providers can set up the product using HotelRatePlanInventoryNotif messages.\nFinally, in Authentication section you while find how to sent the authentication information in the set-up messages.\n  HotelRatePlanInventoryRetrieve HotelRatePlanInventoryRetrieve message\n     HotelRatePlanInventoryNotif HotelRatePlanInventoryNotif message\n     Authentication How to sign in\n    "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/load-product/setup/",
	"title": "SetUp",
	"tags": [],
	"description": "Configure the SetUp and structure of your inventory",
	"content": " SetUp The SetUp section enables you to configure the hotels you are going to buy from your connected channel managers or to create the main structure of your own product is you are going to use the extranet to load your static contracts.\n\nThe configuration of the main structure used in Inventory is as follows:\n Hotel Rate Room  There are a series of hotels available that can have one or more rates. Each rate can also have one or more rooms.\nOptionally, you will be able to configurate different discounts, supplements or night offers with the following:\n Derived Rate (Discounts/Supplements) Free night offers  All these structures can be activated/deactivated or deleted. See Activate/Deactivate/Delete section for more details.\nHotel How to view hotels already setup There are two ways of checking hotels already configured: you can view all the hotels for a relation Client ‚Äì Supplier, as in the previous image. Alternatively, you can search suppliers or channel managers that have a specific hotel. To filter is faster if you want to search for a particular hotel - tick the checkbox of filter by hotels, type either the hotel code or name and complete it with one of the options that the autocomplete offers (the field left as blank would be filled automatically).\n\nClick the button Filter Providers and a list of providers that offer the selected hotel will appear in the drop-down menu. Once you select one of those channels, only the configuration done for this hotel with this supplier will appear.\nHow to add a hotel To add a new hotel in your configuration you should click the Add Hotel button. A pop-up window will appear with information to fill in relation to the hotel you are about to add:\n\n Hotel name: This autocomplete field makes suggestions while you are typing the hotel‚Äôs name. Inventory\u0026rsquo;s system works with a master hotel database where we store all the basic information of the hotels setup by our Partners . If the hotel you require is not available in the autocomplete field you can create it yourself by clicking the Create Hotel button. See How to create a new hotel section to learn the basics on how to create a hotel. Notice that if the hotel you want to add has already been added to this client-channel relation, it will not appear as a suggestion in the autocomplete field.\n Hotel Email: Hotel email configurated in Inventory\u0026rsquo;s system. This is the email address that will be used to notify the hotel when a booking or cancellation is made. If you don\u0026rsquo;t want our system to send this notification to the hotel, you can uncheck the checkbox Notify Booking.\n CC Address: CC email address to which a notification is sent when a booking or cancellation is made. If the checkbox Use Client Email is checked, by default, the client email is added. If you want to change the cc email address, you have to uncheck the checkbox and then modify the email address.\n From Address: The notification email is always sent from a no-reply email address. Note that at the bottom of the email there is a message warning the reader that for any questions or queries, they should contact a specific email address. If the box is checked, the Buyer\u0026rsquo;s email is added there by default. If you want to configure the email that will be indicated at the bottom of the notification email, uncheck the checkbox.\n  Once added, the hotel will appear in a row in the SetUp menu, where you will be able to see its name and ID. You will be able to see this in a list among other hotels you have configured.\nThe following image is an example of an email notification and the information it contains such as the locators, client, room, price, etc. This email is only informative.\n\nIt is possible to add your logo to this email. To implement this functionality, please, contact with our CC landing page CC landing page sending the logo you want to use. How to create a new hotel If you cannotfind the hotel you want to add in the autocomplete field you\u0026rsquo;ll be given the option to create this hotel in our DataBase by clicking the button Create Hotel. You will need to indicate the hotel\u0026rsquo;s basic information in the following form:\n\nPlease complete the form using the hotel\u0026rsquo;s actual information. It\u0026rsquo;s mandatory that the email and telephone are those of the hotel and not from the supplier. Coordinates should be as accurate as possible. \nThis feature is available for client and provider administrator users. \nRate Now that you have added the hotel it is time to add the rates and then the rooms.\nHow to add a rate In order to add a new rate, click in the Add Rate button in the hotel row:\n\nThe information needed to add a rate is listed below:\n Code: Rate code. It needs to be unique per hotel. This code need to coincide with the rate code of the channel manager. Name: Rate name. Included board: Meal plan. Age Max Baby: The maximum age for a passenger to be considered a baby (indicated age not included, meaning if the Max Age for a baby is 3 you should indicate 4, that way any passenger aged 0-3 will be considered a baby). Free Baby: Check to indicate that babies are free of charge if you are working with Channel Managers that can\u0026rsquo;t load this kind of free baby condition. Use only if the Channel Manager works with Standard Occupancy price. See How to load free charges for child/baby pax section for more details. Age Max Child The maximum age for a passenger to be considered a child (indicated age not included, same as the maximum age for a baby). Free Child: Check to indicate that children are free of charge if you are working with Channel Managers that can\u0026rsquo;t load this kind of free child condition. Use only if the Channel Manager works with Standard Occupancy price. Currency: Currency applied to the rate. Commission: Percentage of commission applied. This is only informative. Binding Price: Must be checked if the price is binding. Rate Rule: Rate rule to apply to this rate. Not Selected (0), Large Family (7), Public Servant (8), Negotiated (10), Package (11), Canary Resident (34), Balearic Resident (35), Honeymoon (36). The default value is Not selected. Senior Rates: You must select the correct value if the rate is for people over 55, 60 or 65 years of age. The default value is Not selected. Active: Indicates whether or not the rate is active. All dates: By default it is checked. If it is checked, the rate will be available always. If you uncheck the checkbox, two new fields will appear: From and To. These fields are the initial and final dates for when the rate is available (dates when the availability request is done, not the stay dates). For example: if there is a date range from: 24/02/2020 to: 28/02/2020:  If an availability request is made between February 24 and February 28 (both days included) and if there is price and allotment loaded for this rate, there will be availability returned correctly in the search response. If the availability request is made before February 24 or after February 29 there will be no availability because the request would not have been made in the indicated range.  Markets: This is a market filter. Clicking the + button on both Include or Exclude, allows you to add the country code of the market that you want to include or exclude. For example, if a rate includes the market \u0026ldquo;ES\u0026rdquo; and an availability search is made for the market \u0026ldquo;IT\u0026rdquo;, there will not be availability returned, because \u0026ldquo;IT\u0026rdquo; is not an included market. On the other hand, if one market is excluded, for example \u0026ldquo;ES\u0026rdquo;, there will be availability returned for all other markets except the Spanish. In case no market is indicated in these fields, no market filter will be applied. Payment Type: Indicate the payment type to work with. If you don\u0026rsquo;t have this field in your panel it means that the supplier or Channel Manager your are working with doesn¬¥t allow credit payment and by default \u0026ldquo;MerchantPayment\u0026rdquo; is selected.  MerchantPayment: The customer pays the client and the client will pay the provider. DirectPayment: The customer will have to use a credit card as a guarantee for the hotel and the payment will be done by the customer at check-in. BookingDatePayment: The client will use a credit card with the exact amount of the booking so they can pay the provider/hotel. The provider will charge the payment on the day of the reservation. ArrivalDatePayment: The client will use a credit card with the exact amount of the booking so they can pay the provider/hotel. The provider will charge the payment on the day of the check-in.  Card Type: List with different card types. Select the cards allowed between the client and the provider. Taxes: Taxes that can be added to the rate. By default, there are no taxes in a rate, but they could be freely added once the checkbox of \u0026ldquo;Taxes\u0026rdquo; is checked:  Type: the type that would take the value of the tax, it can be a % or an amount. Value: the value of the tax. Description: the description that can be indicated for a tax: \u0026ldquo;City\u0026rdquo;, \u0026ldquo;Local\u0026rdquo;, \u0026ldquo;Resort fee\u0026rdquo; and \u0026ldquo;Supplement to be paid on spot\u0026rdquo;. Per Night: if checked, the tax will be applied for every night. Per Pax: if checked, the tax will be applied for every pax. Add to final price: if checked, the tax price will be included in the final price that the client will pay. If it is not checked, the tax will be informative to the final customer and should be paid for them at the hotel.  Cancellation policy ‚Äì Base: Cancellation policies that can be applied to the rate. The rate will be non refundable if the checkbox No refund is checked. It is possible to apply a different type of cancellation policy by clicking the + button. You can add as many policies as you need, all you need to do is indicate the days in advance before the arrival date, the type and the value of the policy. See How to configurate different cancel policies section for some examples. Cancellation policy - Calendar: This option will only appear once you have created your rate previously with base cancel policies. The cancellation policy by calendar allows you to create specific cancel policies by day or date range. You can click the Add range button to specify a date range and the cancel policies. This new cancel policies by day will override the base cancel policies specified at rate level. If you want to remove a cancel policy by date you can click the Delete range button and specify your dates. You can also delete or check the cancel policies by day clicking in the day\u0026rsquo;s number of the month. Specific Clients: If you want to inform that this rate is only for a list of specific clients check this option and add both Code (code that represent your client) and Description (normally the name of the client). You can add maximum 15 clients. The client codes have to be unique on the same rate.\n  When a rate is added, it appears in the hotel node when you click the arrow that appears on the left side of the hotel name.\n\nRoom The next step is to add and configurate rooms to each rate.\nHow to add a room In order to add a new room, click in the Add Room button in the hotel row and a pop-up window appears where you will find two options:\n All room types: Select from the autocomplete field a room code and description from your own room master list. Room code can be modified for this rate.  \n New room type: Create a new room type, enter a code and a description for your own reference. Once saved, this room type will be added to the room master list and will appear as an option in All room types.  \n Code: Room code. Must be unique per rate and has to coincide with the code used by the channel. Name: Room name. Text field that allows you to introduce the room description that will be shown to your buyers. This field is just informative. Standard Occupancy: This field is useful to calculate the room amount when prices are loaded per passenger. Normally, it indicates the maximum number of adults (only adults) allowed for the room. Occupancy only Adults: Defines the occupancies of adults allowed for this room. (Dark Blue icons are adults). Occupancy Adults with Children: Defines occupancies of adults and children allowed for this room. (Light Blue icons are children). Occupancy Adults with Babies (and children): Defines the occupancies of adults, children and babies allowed for this room. (Green icons are babies).  \nDerived Rates In Inventory you can create your own discounts or supplements using what we call Derived Rates. These are rates that descend from non-derived rates and they may or may not modify some of the values of the base rate, such as cancellation policies or markets. The main use of the derived rates is to permit the loading of supplements or discounts for specific rooms from its base rate.\nTo add a derived rate, first it is necessary to click the Add Derived Rate button for the same rate for which you want to create a derived rate and a pop-up window will appear for you to fill in the derived rate information.\n\nThe information needed to add a derived rate is listed below:\n Code: Derived rate code. Must be unique per hotel. (it cannot coincide with any other rate or derived rate code in the same hotel). Name: Derived rate name. Cancel policies from base rate: Checkbox that will apply the cancel policies from the base rate to the derived rate depending on whether it is checked or not. If it is not checked, a form appears like the one seen previously when adding a rate, letting you add the cancel policies you may want for this derived rate. Markets from base rate: Checkbox that will apply the markets from the base rate to the derived rate depending on whether it is checked or not. If unchecked, a form appears like the one seen previously when adding a rate, letting you select any markets you may want included or excluded for this derived rate. Apply Rate Rule from base rate: Checkbox that will apply the same rate rule from the base rate depending on whether it is checked or not. Rate Rule: Rate rule to select if you do not want apply the same than the base rate. Apply Senior Rate from base rate: Checkbox that will apply the same senior rate from the base rate depending on whether it is checked or not. Senior Rates: Senior rate to select if you do not want apply the same than the base rate. Active: Checkbox to activate or deactivate the derived rate. If it is checked the derived rate is active. Apply Dates from base rate: Checkbox used to apply the effective dates from the base rate. If unchecked, a form like the one explained previously when creating a rate will pop up. Board from base rate: Checkbox used to apply the meal plan from the base rate. If unchecked, the meal plan list will be enabled and you will be able to select the board of the derived rate. Apply to all rooms: Checkbox that will indicate whether the derived rate applies to all the rooms existing (or that will be added in the future) to the base rate. In case it is not selected, a list of rooms will appear, allowing you to select which rooms will be affected by the derived rate. It is mandatory to select at least one room in order to be able to save the derived rate. Bear in mind that if the derived rate only applies to a set of rooms, when a new room is added to the base rate, it will not have the derived rate‚Äôs conditions applied to it. To apply the conditions of the derived rate to said room, you have to edit the derived rate. Apply Payments from Base Rate: Checkbox that indicates if the ‚ÄúPayment Type‚Äù and ‚ÄúCard Type\u0026rdquo; are the same as the base rate. If so, it has to be selected. If not, you need to select this information from drop down menus, so that the derived rate can have its own payment types. Inform Base Rate: Checkbox that indicates that the retrieve functions would return the name of the Base Rate instead of the derived rate‚Äôs name, if checked. Apply MealPlan Supplement from Base Rate: Checkbox that allows the derived rate to have its own MealPlan Supplements. If checked, the derived rate would get the MealPlans of the base rate if any.  See How to create discounts and supplements section for a complete example. \nFree Night Offers The Inventory extranet allows you to add free night offers to the rates and its rooms, indicating that in case the end customer stays a specific number of nights, they will get another number of nights for free.\nFirs step would be to click in the Add Offer button over the base rate for which you want to add the offer. A pop-up window appears for you to complete the following information.\n\n Code: Offer code. It must be unique at rate level (it can not match with any other offer code in the same rate). Name: Offer name. Offer Type: Type of offer to apply. Currently the only available type is free night. Length Of Stay: Minimum and maximum length of stay that the booking has to comply with. Applicable Days of Week: Days of the week that the offer will apply to. Available Dates: Used to specify whether the offer is available for all the dates or just for a particular date range. Apply to all rooms: Used to specify whether the offer will apply to all the rooms of the rate or just to some of them.  \nActivate/Deactivate/Delete If a hotel, rate or room is deleted, it is erased in the system, and it\u0026rsquo;s not possible to retrieve it. The information is not recoverable, so if you deleted it by mistake, you will have to set it up it again and reload prices, allotment(number of rooms available), etc.\nIf you deactivate a hotel, rate or room it will remain in the system but it will not be visible when doing an availability search request. To have the hotel, rate or room available again you will have to re-activate it.\nIn the following image you will see the three action buttons to activate, deactivate or delete a element.\n\nIn case there are any hotels, rates, derived rates or rooms deactivated, they will appear on a red background, as you can see in the previous image for hotel \u0026ldquo;Just Sleep Jiaoxi\u0026rdquo;\n "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/settingsbaseinput/",
	"title": "SettingsBaseInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SettingsBaseInput {  timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    currency: Currency    commitRequired: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields timeout(Int):   auditTransactions(Boolean):   businessRules(BusinessRulesInput):   currency(Currency):   commitRequired(Boolean):    Required by HotelXSupplierInput:    HotelXAccessInput:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/sharedtype/",
	"title": "SharedType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum SharedType{   TGX,    GROUP,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/sharedtype/",
	"title": "SharedType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum SharedType{   TGX,    GROUP,   }   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/stat/",
	"title": "Stat",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Stat {  start: DateTime!    end: DateTime!    duration: Float   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields start(DateTime!):   end(DateTime!):   duration(Float):    Required by StatsRequest:    StatPlugin:    StatAccess:    StatTransaction:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/stataccess/",
	"title": "StatAccess",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatAccess {  name: String!    total: Stat!    staticConfiguration: Stat    hotels: Int!    zones: Int!    cities: Int!    requestAccess: StatPlugin    responseAccess: StatPlugin    transactions: [StatTransaction!]!    plugins: [StatPlugin!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   total(Stat!):   staticConfiguration(Stat):   hotels(Int!):   zones(Int!):   cities(Int!):   requestAccess(StatPlugin):   responseAccess(StatPlugin):   transactions([StatTransaction!]!):   plugins([StatPlugin!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/statplugin/",
	"title": "StatPlugin",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatPlugin {  name: String!    total: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields name(String!):   total(Stat!):    Required by StatsRequest:    StatAccess:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/stattransaction/",
	"title": "StatTransaction",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatTransaction {  reference: String!    total: Stat!    buildRequest: Stat!    workerCommunication: Stat!    parseResponse: Stat!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields reference(String!):   total(Stat!):   buildRequest(Stat!):   workerCommunication(Stat!):   parseResponse(Stat!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/state/",
	"title": "State",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar State   Required by Location:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/stats/",
	"title": "Stats",
	"tags": [],
	"description": "",
	"content": " The service used to access the stats of every connection that uses the HUB\nGraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   statsData(StatsData): The data returned by a Stats query.  adviseMessage([AdviseMessage!]): List of advise messages.  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date   Required by StatsEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/",
	"title": "Stats",
	"tags": [],
	"description": "Real-time connectivity performance dashboard",
	"content": "Stats is a real-time connectivity performance dashboardapp that helps you to monitor and evaluate the performance of each of your connections and accesses on a minute-by-minute basis. Check your performance metrics: volume requests, errors, response times, L2B.\n  Overview Stats Overview\n     How-to guides Perform specific tasks\n     Reference Reference Documentation\n     Release Notes New Updates \u0026amp; Releases\n    "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/stats/",
	"title": "Stats",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   statsData(StatsData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by StatsEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/stats/",
	"title": "Stats",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Stats {  code: ID!    statsData: StatsData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   statsData(StatsData):   adviseMessage([AdviseMessage!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by StatsEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/statsasset/",
	"title": "StatsAsset",
	"tags": [],
	"description": "",
	"content": " Asset of an specific error\nGraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields startTime(DateTime!): Start time of the request  execTime(Int!): Execution time of the request  url(URI!): Endpoint to download the full XML of the request with its response   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/statsasset/",
	"title": "StatsAsset",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields startTime(DateTime!):   execTime(Int!):   url(URI!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/statsasset/",
	"title": "StatsAsset",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsAsset {  startTime: DateTime!    execTime: Int!    url: URI!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields startTime(DateTime!):   execTime(Int!):   url(URI!):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/statsconnection/",
	"title": "StatsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):    Required by StatsQuery:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/statsconnection/",
	"title": "StatsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):    Required by StatsQuery:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/statsconnection/",
	"title": "StatsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([StatsEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):    Required by StatsQuery:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/statsdata/",
	"title": "StatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    ratios: Ratios!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(Access!): Owner access  client(Client!): Owner client  from(DateTime!): From date of search  to(DateTime!): To date of search  ratios(Ratios!): Ratios details  operations([OperationDetailed!]): Stats information per operation   Required by Stats:  The service used to access the stats of every connection that uses the HUB   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/statsdata/",
	"title": "StatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]    hits(    trafficType: TrafficType!,     statusType: StatsInfoTypes!,     operationType: OperationType!,     ): Int64!   Show deprecated fields   ratios( trafficType: TrafficType!, ): Ratios!  // Added hits fields to be able to calculate ratios at client side.   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(Access!):   client(Client!):   from(DateTime!):   to(DateTime!):   ratios(Ratios!):   operations([OperationDetailed!]):   hits(Int64!):    Required by Stats:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/statsdata/",
	"title": "StatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]    hits(    trafficType: TrafficType!,     statusType: StatsInfoTypes!,     operationType: OperationType!,     ): Int64!   Show deprecated fields   ratios( trafficType: TrafficType!, ): Ratios!  // Added hits fields to be able to calculate ratios at client side.   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields access(Access!):   client(Client!):   from(DateTime!):   to(DateTime!):   ratios(Ratios!):   operations([OperationDetailed!]):   hits(Int64!):    Required by Stats:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/statsedge/",
	"title": "StatsEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Stats):   cursor(String!):    Required by StatsConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/statsedge/",
	"title": "StatsEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Stats):   cursor(String!):    Required by StatsConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/statsedge/",
	"title": "StatsEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsEdge {  node: Stats    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Stats):   cursor(String!):    Required by StatsConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/inputobjects/statsfilterinput/",
	"title": "StatsFilterInput",
	"tags": [],
	"description": "",
	"content": " Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)\nGraphQL schema definition type StatsFilterInput {  groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!]    serviceOperations: [ID!]    from: DateTime!    to: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields groups([ID!]): Groups codes list  accesses([ID!]): List of accesses  suppliers([ID!]): List of suppliers  clients([ID!]): List of clients  mode(ModeType!): Buyer or Seller  serviceApis([ServiceApiType!]): List of services apis  operation([ServiceOperationType!]): List of services operations  serviceOperations([ID!]):   from(DateTime!): From date of search  to(DateTime!): To date of search   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/inputobjects/statsfilterinput/",
	"title": "StatsFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsFilterInput {  owners: [ID!]    groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!]    serviceOperations: [ID!]    from: DateTime    to: DateTime    timeRange: TimeRangeInput    retrieveAssets: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields owners([ID!]):   groups([ID!]):   accesses([ID!]):   suppliers([ID!]):   clients([ID!]):   mode(ModeType!):   serviceApis([ServiceApiType!]):   operation([ServiceOperationType!]):   serviceOperations([ID!]):   from(DateTime):   to(DateTime):   timeRange(TimeRangeInput):   retrieveAssets(Boolean):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/statsfilterinput/",
	"title": "StatsFilterInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsFilterInput {  owners: [ID!]    groups: [ID!]    accesses: [ID!]    suppliers: [ID!]    clients: [ID!]    mode: ModeType!    serviceApis: [ServiceApiType!]    operation: [ServiceOperationType!]    serviceOperations: [ID!]    from: DateTime    to: DateTime    timeRange: TimeRangeInput    retrieveAssets: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields owners([ID!]):   groups([ID!]):   accesses([ID!]):   suppliers([ID!]):   clients([ID!]):   mode(ModeType!):   serviceApis([ServiceApiType!]):   operation([ServiceOperationType!]):   serviceOperations([ID!]):   from(DateTime):   to(DateTime):   timeRange(TimeRangeInput):   retrieveAssets(Boolean):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/statsinfo/",
	"title": "StatsInfo",
	"tags": [],
	"description": "",
	"content": " Details of an specific error\nGraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int!    time: Int!    assets: [StatsAsset!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(StatsInfoTypes!): Stats type  hits(Int!): Total hits  time(Int!): Average time (ms)  assets([StatsAsset!]): Details about errors.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/statsinfo/",
	"title": "StatsInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int64!    averageTime: Int64!    totalTime: Int64!    assets: [StatsAsset!]   Show deprecated fields   time: : Int! // deprecated from 2019-04-03 Added new fields averageTime and totalTime.     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(StatsInfoTypes!):   hits(Int64!):   time(Int!):   averageTime(Int64!):   totalTime(Int64!):   assets([StatsAsset!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/statsinfo/",
	"title": "StatsInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int64!    averageTime: Int64!    totalTime: Int64!    assets: [StatsAsset!]   Show deprecated fields   time: : Int! // deprecated from 2019-04-03 Added new fields averageTime and totalTime.     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   type(StatsInfoTypes!):   hits(Int64!):   time(Int!):   averageTime(Int64!):   totalTime(Int64!):   assets([StatsAsset!]):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/statsinfotypes/",
	"title": "StatsInfoTypes",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:  Details of an specific error   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/statsinfotypes/",
	"title": "StatsInfoTypes",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/statsinfotypes/",
	"title": "StatsInfoTypes",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum StatsInfoTypes{   ALL,    OK,    INTEGRATION,    PROVIDER,    COMMUNICATION,    HUB,    OTHER,   }   Required by StatsInfo:    ErrorFilter:    LoggingLegacyData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/schema/query/",
	"title": "StatsQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields report(StatsConnection!): The report query, represents all of the entry points into our object graph   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/schema/query/",
	"title": "StatsQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!    getActiveConnection( filter: ActiveFilterInput!, ): ConnectionConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields report(StatsConnection!):   getActiveConnection(ConnectionConnection!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/statsquery/",
	"title": "StatsQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsQuery {  report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!    getActiveConnection( filter: ActiveFilterInput!, ): ConnectionConnection!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields report(StatsConnection!):   getActiveConnection(ConnectionConnection!):    Required by Query:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/statsrequest/",
	"title": "StatsRequest",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsRequest {  total: Stat!    validation: Stat!    process: Stat!    configuration: Stat!    request: Stat!    response: Stat!    requestPlugin: StatPlugin    responsePlugin: StatPlugin    hotels: Int!    zones: Int!    cities: Int!    dockerID: String!    Accesses: [StatAccess!]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields total(Stat!):   validation(Stat!):   process(Stat!):   configuration(Stat!):   request(Stat!):   response(Stat!):   requestPlugin(StatPlugin):   responsePlugin(StatPlugin):   hotels(Int!):   zones(Int!):   cities(Int!):   dockerID(String!):   Accesses([StatAccess!]!):    Required by HotelSearch:    HotelQuote:    HotelBooking:    Response:    HotelBookPayload:    HotelCancelPayload:    HotelCommitPayload:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/statustype/",
	"title": "StatusType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum StatusType{   OK,    RQ,   }   Required by HotelOptionSearch:    HotelOptionQuote:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by StatsEdge:    PageInfo:    AdviseMessage:  List of advise messages.  AccessData:    Error:  Application errors  Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  SupplierData:    Provider:  Temporary type to use only during SQL server\u0026#39;s lifetime  AccessEdge:    OrganizationData:    GroupCommonData:    MemberData:    RoleEdge:    RoleData:    ResourceEdge:    ResourceData:    MemberEdge:    APIEdge:    APIData:    OperationEdge:    OperationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    GroupEdge:    GroupData:    ManagedGroupEdge:    ExternalMessage:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by StatsEdge:    PageInfo:    AdviseMessage:    AccessData:    Error:    Parameter:    SupplierData:    Provider:    AccessEdge:    ClientEdge:    GroupData:    GroupCommonData:    MemberData:    MacroPermissionEdge:    MacroPermissionData:    RoleData:    ResourceEdge:    ResourceData:    APIData:    OperationEdge:    OperationData:    MemberEdge:    APIEdge:    ManagedGroupEdge:    SupplierEdge:    RoleEdge:    ProfileEdge:    ProfileData:    EntityEdge:    OrganizationData:    ProductEdge:    ProductData:    GroupEdge:    ExternalMessage:    ConnectionEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by RelayInput:    AlertEdge:    PageInfo:    AlertData:    AdviseMessage:    MemberData:    GroupEdge:    GroupData:    GroupCommonData:    MemberEdge:    APIEdge:    APIData:    ResourceEdge:    ResourceData:    OperationEdge:    OperationData:    ManagedGroupEdge:    RoleData:    AccessEdge:    AccessData:    Error:    Parameter:    SupplierData:    Provider:    OrganizationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    ProfileEdge:    ProfileData:    EntityEdge:    RoleEdge:    MacroPermissionEdge:    MacroPermissionData:    EventEdge:    EventData:  Event data  ExternalMessage:    AlertInput:  Alert information. Only one configuration has to be set at once.  AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   "
},
{
	"uri": "https://travelgatex.com/mappea/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by MappeaGetMappeaStatsInput:    Error:    Warning:    File:    GetMappeaStatsData:    MappeaUploadFileInput:    UploadFileData:    SupplierData:    Provider:    AccessEdge:    PageInfo:    AdviseMessage:    AccessData:    Parameter:    GroupData:    GroupCommonData:    MemberData:    MacroPermissionEdge:    MacroPermissionData:    RoleData:    ResourceEdge:    ResourceData:    APIData:    OperationEdge:    OperationData:    MemberEdge:    APIEdge:    ManagedGroupEdge:    RoleEdge:    ProfileEdge:    ProfileData:    EntityEdge:    SupplierEdge:    ExternalMessage:    OrganizationData:    ProductEdge:    ProductData:    GroupEdge:    ClientEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by AdviseMessage:    PaymentXStoredCardIDInput:    ExternalMessage:    HolderInput:    PaymentXStoredCardEdge:    PageInfo:    PaymentXStoredCardData:    Holder:    GroupData:    GroupCommonData:    GroupEdge:    MemberData:    MacroPermissionEdge:    MacroPermissionData:    RoleData:    ResourceEdge:    ResourceData:    APIData:    OperationEdge:    OperationData:    MemberEdge:    APIEdge:    ManagedGroupEdge:    AccessEdge:    AccessData:    Error:    Parameter:    SupplierData:    Provider:    OrganizationData:    ProductEdge:    ProductData:    SupplierEdge:    ClientEdge:    RoleEdge:    ProfileEdge:    ProfileData:    EntityEdge:    PointOfSaleData:    PaymentXStoredCardInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String   Required by ServiceApiFilter:    ServiceApi:    AccessEdge:    PageInfo:    AdviseMessage:    AccessData:    Error:    Parameter:    SupplierData:    Provider:    GroupData:    GroupCommonData:    MemberData:    MacroPermissionEdge:    MacroPermissionData:    RoleData:    ResourceData:    APIData:    ManagedGroupEdge:    OrganizationData:    ExternalMessage:    SupplierEdge:    ClientEdge:    ServiceOperation:    PointOfSaleEdge:    PointOfSaleData:    ProfileEdge:    ProfileData:    EntityEdge:    SystemEdge:    OrganizationEdge:    ProductEdge:    ProductData:    MemberEdge:    GroupEdge:    APIEdge:    ResourceEdge:    RoleEdge:    OperationEdge:    OperationData:    ServiceStatus:    RelayInput:    HotelConnection:    RoomConnection:    DestinationConnection:    HotelXDestinationSearcherInput:    HotelCriteriaSearchInput:    HotelSettingsInput:    HotelSearch:    HotelCriteriaQuoteInput:    HotelCriteriaBookingInput:    HotelXDefaultSettingsData:    HotelXDefaultPluginStep:    HotelXDefaultPlugin:    HotelXParameter:    BoardEdge:    BoardData:    Text:    CategoryEdge:    CategoryData:    HotelEdge:    HotelData:    Property:    Location:    Contact:    AmenityStatic:    Media:    PropertyType:    MandatoryFee:    HotelXMapOptionInput:    DestinationData:    AirportData:    GeonameData:    HotelXAmenityEdge:    HotelXAmenityData:    HotelXMappedCode:    RoomEdge:    RoomData:    View:    BedStatic:    DestinationEdge:    MetadataEdge:    ReviewedText:    BookPreferenceValue:    HotelXSupplierInput:    ConfigurationInput:    ParameterInput:    PluginsInput:    HotelXFilterPluginTypeInput:    StatsRequest:    CriteriaSearch:    HotelOptionSearch:    Warning:    StatPlugin:    StatAccess:    StatTransaction:    Transactions:    Room:    Supplement:    Surcharge:    Amenity:    BookableOptionSearch:    Bed:    RatePlan:    Promotion:    Feature:    Markup:    Rule:    Resort:    AddOn:    HotelOptionQuote:    PriceChange:    CriteriaBookingReferencesInput:    BookReferenceInput:    HotelBookingDetail:    Reference:    Holder:    BookingHotel:    BookingRoom:    MappingContext:    MappingEntity:    Map:    HotelRuntimeParameter:    MappeaGetMappeaStatsInput:    File:    GetMappeaStatsData:    PaymentXStoredCardIDInput:    HolderInput:    PaymentXStoredCardEdge:    PaymentXStoredCardData:    StatsEdge:    ConnectionEdge:    AlertEdge:    AlertData:    EventEdge:    EventData:  Event data  LoggingLegacyEdge:    HotelXMutation:    AccessInput:    CreateClientInput:    UpdateClientInput:    CreateProfileInput:    UpdateProfileInput:    CreateOrganizationInput:    CreateMemberInput:    CreateGroupInput:    UpdateMemberInput:    UpdateGroupInput:    HotelXDefaultSettingsDataInput:    HotelBookInput:    HotelCancelInput:    HotelCommitInput:    HotelXDefaultPluginInput:    PaymentCardInput:    BookPaxInput:    HotelCancelDetail:    HotelXCommitReferenceInput:    MappeaUploadFileInput:    UploadFileData:    PaymentXStoredCardInput:    AlertInput:  Alert information. Only one configuration has to be set at once.  AlertUpdateInput:     "
},
{
	"uri": "https://travelgatex.com/community/style-guide/",
	"title": "Style Guide",
	"tags": [],
	"description": "Community Style Guide",
	"content": " This document provides guidance for contributors to the TravelgateX Platform Community site.\n Caveats Types of documentation Designing a doc Visual assets File organization in GitHub General content guidelines General style guidelines Markdown usage Voice and tone Including source code API documentation Writing resources  Caveats Let\u0026rsquo;s get these things out of the way right up front:\n Don\u0026rsquo;t sell or do marketing. -\u0026gt; TBD Don\u0026rsquo;t editorialize. Document. Assure that the content you\u0026rsquo;re writting is not duplicated on another page, avoid incosistences. Unify. Don\u0026rsquo;t make assumptions about your reader unless you state the assumptions up front. Don\u0026rsquo;t use absolutes, such as \u0026ldquo;instantaneously,\u0026rdquo; \u0026ldquo;perfectly,\u0026rdquo; \u0026ldquo;absolutely,\u0026rdquo; \u0026ldquo;totally,\u0026rdquo; or \u0026ldquo;100%,\u0026rdquo; unless you can back up what you\u0026rsquo;re saying with documentation. Don\u0026rsquo;t use superlatives, such as \u0026ldquo;the best solution,\u0026rdquo; \u0026ldquo;the perfect answer,\u0026rdquo; and so on. Don\u0026rsquo;t use logos or trademarks unless you have explicit permission. Don\u0026rsquo;t make performance claims unless you back them up with current data. This means either external links, or links to benchmarking code. Don\u0026rsquo;t include diagrams or pictures that you have no legal rights to include. Don\u0026rsquo;t alter or truncate TravelgateX Platform product names. For example, it‚Äôs HotelX, not hotelX. Don\u0026rsquo;t alter or truncate other names. For example, it\u0026rsquo;s Cloud BigQuery, not BigQuery.  Types of documentation Documentation submitted by contributors is usually one of this types:\n Concept: Helps the user gain deeper understanding of a product or architecture. Concept docs answer questions such as \u0026ldquo;What is X?\u0026rdquo; and \u0026ldquo;How does X work?\u0026rdquo; They don\u0026rsquo;t provide specific walkthroughs. It\u0026rsquo;s common the use of blockquotes to quote people. They might contain numbered steps as generic examples, but this is rare.   More info at Writing a Concept doc.\n Tutorial: Walks a user through a real-world, industry-specific, or end-to-end development scenario that uses your product. Tutorials teach \u0026ldquo;how to do Y in the context of ABC.\u0026rdquo; Tutorials contain numbered steps that prescribe what to do. They can have enough supporting conceptual information, interspersed among the steps, to help the reader understand what they\u0026rsquo;re doing, why they\u0026rsquo;re doing it, and how and why it works. The end result is a working example. Usually, code on GitHub supports the document.   More info at Writing a Tutorial.\n Reference: Programming concept explanation. Reference relates to an specific topic. References must have a title, an overview with a general explanation and an generic example on a code block. They must be listed the fields available (if it applies) and will include if the field is required and optional values. Finally it will be related if it\u0026rsquo;s required by any other topic (if it applies).   More info at Writing a Reference doc\n Plugin: The plugins must have an explanation that indicates on a clear way the bennefits of using it and the improvements that it applies to the general HotelX behaviour. Plugins must have a title, general explanation and \u0026hellip; (This will be completed).   More info at Writing a Plugin doc\nDesigning a doc Just as you design an app before you start coding, designing how your doc works before you write saves you writing time, helps focus your document, and helps to make sure you\u0026rsquo;re giving the reader the right information. A good way to design your document is by outlining.\nAs you develop your outline, ask yourself:\n In one sentence, what is my doc about? You can reuse a version of this sentence as the opener in the doc. What does my reader need to know before they can understand the contents? This question can lead to a set of prerequisites. Why does the reader care? This information will be part of your introduction. Am I building concepts for the reader from most general to most specific? Am I introducing ideas in the right order? Is there anything I can remove? Is there anything missing? Have I made the right assumptions about my audience?  The following sections show the main, top-level organization for the concept and tutorial doc types. Use these sections to start your outlines.\nWriting a Concept doc A Concept doc has these major sections:\n Title Overview  Don\u0026rsquo;t use the heading \u0026ldquo;Overview\u0026rdquo; or any other heading. Just start at the first sentence.  Body  Provides the details. Contains headings and subheadings as needed to make the content easy to skim.   Example: GraphQL Overview\nWriting a Tutorial A Tutorial doc has these major sections. Items in bold below are literal heading names:\n Title Overview\n First sentence tells what the page is about Tell the user what they\u0026rsquo;re going to learn and provide any concise background information that\u0026rsquo;s helpful. Don\u0026rsquo;t use the heading \u0026ldquo;Overview.\u0026rdquo; Just get right to it.  Objectives\n A short, bulleted list of what the tutorial teaches the reader.  Before you begin\n A numbered list of steps required to set up for the tutorial. Any general prerequisites. Don\u0026rsquo;t assume anything about the user\u0026rsquo;s environment. Assume that the user has only basic operating system installed. If doing the tutorial requires the user to have a specific environment, state what is required. For easy-to-install environment bits, just give them the instructions, such as \u0026ldquo;Run apt-get install‚Ä¶\u0026rdquo;. For more complex setups, link to official documentation.  Costs (optional)\n Tell the reader which technologies will be used and what it costs to use them. Link to the Pricing Calculator, preconfigured, if possible. If there are no costs to be incurred, state that.  Body\n Use as many headings and subheadings as needed. Use numbered steps in each section. Start each step with the action: \u0026ldquo;Click,\u0026rdquo; \u0026ldquo;Run,\u0026rdquo; \u0026ldquo;Enter,\u0026rdquo; and so on. Keep numbered step lists to around 7 or less, if possible. If you need more steps, break it up into subheadings. Provide context and explain what\u0026rsquo;s going on. Use screenshots when they help the reader. Don\u0026rsquo;t provide a screenshot for every step. Show what success looks like along the way. For example, showing console output or describing what happens helps the reader to feel like they\u0026rsquo;re doing it right and help them know things are working so far.  Cleaning up\n Omit this section if you stated there are no costs in the Costs section. Tell the user how to shut down what they built to avoid incurring further costs.   Example: Configure HotelX Security Tutorial\nWriting a Reference doc A Reference doc has these major sections:\n Title Overview  Don\u0026rsquo;t use the heading \u0026ldquo;Overview\u0026rdquo; or any other heading. Just start at the first sentence.  Code block  You can wrap your code between \\\u0026ldquo;\u0026rsquo; and \\\u0026ldquo;\u0026rsquo;  Body  Provides the details. Contains headings and subheadings as needed to make the content easy to skim.   Example: GraphQL AdminMutation\nWriting a Plugin doc A Plugin doc has these major sections:\n Title Overview  Don\u0026rsquo;t use the heading \u0026ldquo;Overview\u0026rdquo; or any other heading. Just start at the first sentence.   (Provisional documentation not finished)\nExample: Aggregation plugin\nVisual assets TravelgateX offers a set of logos and architectural diagram assets for your use:\nhttps://cloud.google.com/icons/\nFile organization in GitHub Follow these guidelines for how to organize your documents:\n If necessary, create a new folder for your document. Name the folder by slugifying your doc\u0026rsquo;s title. You can omit articles such as \u0026ldquo;and\u0026rdquo; and \u0026ldquo;the.\u0026rdquo; Name your new doc index.md. Store media in the same folder. i.e. /images as discused here.  For example, if you submit a tutorial named \u0026ldquo;Identity and Access Management\u0026rdquo;:\n Folder name: security URL: https://cloud.google.com/travelgatex/security/identity-access-management  If you don\u0026rsquo;t have any additional files that go along with your tutorial, you can simply make a top-level Markdown file within the security/ folder, e.g. security/identity-access-management.md instead of security/identity-access-manangement/index.md.\nGeneral content guidelines This site seeks technical content. While it\u0026rsquo;s fine and often appropriate to point out the advantages of a particular product or TravelgateX Platform, don\u0026rsquo;t give sales pitches in the document. Here are some guidelines:\n Write for a technical audience. If the document looks like a sales brochure, it\u0026rsquo;s not appropriate as TGX content. Avoid superlatives. Don\u0026rsquo;t say \u0026ldquo;the best,\u0026rdquo; \u0026ldquo;amazing,\u0026rdquo; \u0026ldquo;fantastic,\u0026rdquo; and so on. No exclamation points.  Ambiguity Ambiguity is the enemy of technical content. Re-read what you\u0026rsquo;ve written to check whether it can be read to mean more than one thing.\nRepetition Avoid needless repetition. Telling the reader a fact one time usually suffices.\nGeneral style guidelines Here are style guidelines to help you craft a great article.\nAcronyms Don‚Äôt create acronyms from product or feature names. Only use acronyms that your audience is familiar with. The A‚ÄìZ word list has guidelines for many common acronyms, and some acronyms are so widely used that they‚Äôre in The American Heritage Dictionary.\nFor example: Conversation as a platform (CaaP) has the potential to make booking a flight as easy as sending a text message. Developers are also looking to CaaP to make computing more accessible to users of all abilities. Learn how to connect a USB device to your Microsoft Surface.\nHeadings Use headings to organize your page into sections and subsections. Headings make it easier for readers to skim and understand what the article is about. Capitalize only the first word and product names in your headings.\nAvoid using an acronym for the first time in a title or heading, unless it‚Äôs a keyword that you need to place in the title or heading for SEO. If the first use of the acronym is in a title or heading, introduce the acronym (in parentheses, following the spelled-out term) in the following body text.\nFor example:\nCreating a new object\nNot:\nCreating a New Object\nLists Lists help make your page more scannable.\nNumbered lists Use numbered lists when it\u0026rsquo;s essential that the items be done in a specific order. Otherwise, use a bulleted list. Don\u0026rsquo;t use a numbered list as a way to count the things in the list.\nFor example:\n Do this. Do that. Do another thing.  Not:\nThere are three colors that I like:\n Red Blue Yellow  Think about the order. When writing instructions, give the reader orientation cues in the proper order. Think about moving someone\u0026rsquo;s eyes around the screen.\nFor example:\n\u0026ldquo;Click the OK button in the Cloud Console, on the VM instances page, in the Compute Engine section.\u0026rdquo;\nNot this, because it causes someone to visually search backwards:\n\u0026ldquo;Click the OK button in the Compute Engine section of the VM instances page of the Cloud Console.\u0026rdquo;\nBulleted lists Use bulleted lists for lists that don\u0026rsquo;t imply a sequence. End each item with a period if the item is a sentence or a phrase. Don\u0026rsquo;t use periods for lists of single words or if the list contains only product names.\nFor example:\nI have three favorite colors:\n Red Blue Yellow  Parallelism Try to keep your language across list items in a similar format. For example, start each item with a noun or a verb, but don\u0026rsquo;t mix the formats.\nFor example:\n Write the docs. Write them well. Enjoy the process.  Not:\n Write the docs. The docs should be great. You can have fun writing the docs.  Tables Tables are a great way to help the reader compare a set of items, such as mutually exclusive options. Tables work well when there\u0026rsquo;s a consistent set of properties for each item in a list.\nUse the parallelism principle previously described for table headings and the first column.\nImages A well-designed diagram or a screen shot can save you a lot of writing and help the reader better understand a complex idea. Make sure any text is legible at the display size in the doc (800 pixels wide or less). If the image itself becomes too complex, consider breaking it up into more than one picture.\n Don\u0026rsquo;t use images you don\u0026rsquo;t have rights to use. Don\u0026rsquo;t store the images in the same folder where your document\u0026rsquo;s index.md file is stored, images must be saved in current_folder/images. Don\u0026rsquo;t embed SVG images on the .md files, so the SVG images must be in a separate svg file under /images dir.  Code Format code, command lines, paths, and file names as code font.\nLinking Provide inline links to relevant information, where appropriate. For example, link to:\n \u0026ldquo;One source of truth\u0026rdquo; content. Anything that\u0026rsquo;s likely to go out of date quickly if you copied it into your article. Information that gives more depth than is appropriate for the current context.  Provide direct links to pages in the Google Cloud Console when you give Cloud Console-based instructions. These deep links save the reader time spent looking for the right page and can save you time writing descriptions of how to find the page. Deep links open the page with the project set to the user\u0026rsquo;s last-used project.\n Write short link text (four or fewer words) that\u0026rsquo;s descriptive and includes keywords. If it works, use the title or description of the target page as link text. Link to background and related information rather than summarizing it.  Formatting common text elements    Element Convention Example     Database names Bold. The capitalization of database names varies Contoso database   Emphasis It‚Äôs OK to use italic formatting sparingly for emphasis Cybercriminals might call you and claim to be from Microsoft. Be aware that Microsoft will never call you to charge for security or software fixes.   New terms Italicize the first mention of a new term if you\u0026rsquo;re going to define it immediately in text Profile may consist of buyer or seller   Products, services, apps, and trademarks Usually title-style capitalization HotelX\nStats    Markdown usage This site uses Markdown when publishing tutorial content. The site recognizes basic Markdown with a few extensions and edge cases.\nAutolinks Publishing recognizes and adds links to URLs without http:// or https:// prefixes when they are delimited by whitespace, parentheses, or text formatting characters (*_~). Do not use \u0026lt; and \u0026gt; delimiters for these, as they will be stripped out as raw HTML.\nDisallowed Raw HTML Publishing strips all possible HTML from tutorial content, essentially anything contained within \u0026lt; and \u0026gt; delimiters. Note that this is stricter than standard GFM, which only strips certain \u0026ldquo;unsafe\u0026rdquo; HTML.\nStrikethrough Publishing formats text delimited in tildes (~) as strikethrough, making ~a bad example~ look like ~a bad example~ in your document.\nTables Publishing formats text blocks as tables if they have consistent pipe (|) separators and a second delimiter row with just hyphens (-), optionally using : to specify left, right, or centered alignment. Publishing converts this:\n| Table | header | row | default is centered | | :---- | :----: | --: | ------------------- | | Table | data | row | default is left |  into this:\n   Table header row default is centered     Table data row default is left    You cannot create multi-line cells (although other Markdown dialects allow this), and while you can omit both the initial and final pipe separators, it can break table recognition if the first cell looks like a list item.\nGraphics and Theme Learn enhances On our Hugo server we\u0026rsquo;ve got a theme that extends some shortcodes on Markdown.\nFlowchart example {{\u0026lt; mermaid align=\u0026quot;left\u0026quot; \u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] {{\u0026lt; /mermaid \u0026gt;}}  This code is rendered as:\ngraph LR;\rA[Hard edge] --|Link text| B(Round edge)\rB -- C{Decision}\rC --|One| D[Result one]\rC --|Two| E[Result two]\r Sequence example {{\u0026lt; mermaid \u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! {{\u0026lt; /mermaid \u0026gt;}}  This code is rendered as:\nsequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-John: Hello John, how are you?\rloop Healthcheck\rJohn-John: Fight against hypochondria\rend\rNote right of John: Rational thoughts prevail...\rJohn--Alice: Great!\rJohn-Bob: How about you?\rBob--John: Jolly good!\r Gantt example {{\u0026lt; mermaid \u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u0026lt; /mermaid \u0026gt;}}  This code is rendered as:\ngantt\rdateFormat YYYY-MM-DD\rtitle Adding GANTT diagram functionality to mermaid\rsection A section\rCompleted task :done, des1, 2014-01-06,2014-01-08\rActive task :active, des2, 2014-01-09, 3d\rFuture task : des3, after des2, 5d\rFuture task2 : des4, after des3, 5d\rsection Critical tasks\rCompleted task in the critical line :crit, done, 2014-01-06,24h\rImplement parser and jison :crit, done, after des1, 2d\rCreate tests for parser :crit, active, 3d\rFuture task in critical line :crit, 5d\rCreate tests for renderer :2d\rAdd to mermaid :1d\r More info on Hugo Theme Learn\nCode within lists The site\u0026rsquo;s Markdown parser does not understand code fences (triple backticks) within lists. You should instead use indentation to signify code within lists.\nVoice and tone Active voice Use active voice. Active voice makes it obvious who is performing the action, which makes your writing clearer and stronger.\nFor example:\n\u0026ldquo;The logging agent writes a line to the log file.\u0026rdquo;\nNot:\n\u0026ldquo;A line is written in the log file by the logging agent.\u0026rdquo;\nIt\u0026rsquo;s okay to use passive voice when you\u0026rsquo;d have to go out of your way to use active voice. For example, sometimes you don\u0026rsquo;t need to include the actor in the sentence because the actor isn\u0026rsquo;t relevant. Just use passive voice, instead.\nFor example:\n\u0026ldquo;RFID tag readers are typically positioned in multiple locations in a retail store.\u0026rdquo;\nNot:\n\u0026ldquo;System engineers typically place RFID tag readers in multiple locations in a retail store.\u0026rdquo;\nDirect Speak to the reader. Documentation reads better if you speak to the reader in the second person. That means use \u0026ldquo;you\u0026rdquo; and avoid \u0026ldquo;I\u0026rdquo; or \u0026ldquo;we.\u0026rdquo;\nFor example:\n\u0026ldquo;Now load your data into BigQuery. Follow these steps: \u0026hellip;\u0026rdquo;\nNot:\n\u0026ldquo;Now we\u0026rsquo;ll load the data into BigQuery.\u0026rdquo;\nPresent tense Keep to present tense. Avoid using future or past tenses.\nFor example:\n\u0026ldquo;The Cloud Console downloads a JSON file to your computer.\u0026rdquo;\nNot:\n\u0026ldquo;The Cloud Console will download a JSON file to your computer.\u0026rdquo;\nSimple Keep it simple. Use short, simple sentences. They are easier for readers to parse and understand. Omit unnecessary words.\nFor example:\n\u0026ldquo;Click Change to set a new owner.\u0026rdquo;\nNot:\n\u0026ldquo;It is possible for you to set a different owner by clicking the Change button.\u0026rdquo;\nAlso, keep your paragraphs short and to the point. On the web, people skim more and expect shorter content than when they read books. Five sentences or less per paragraph is a good guideline.\nIf a sentence is long, even with straightforward word choices, break it up into multiple, shorter sentences.\nRe-read what you wrote and then eliminate all the unnecessary words.\nIncluding source code If you would like to include source code within your tutorial, you have two options:\nOption 1 Just embed the source code directly in the tutorial. Wrap the code in three backticks or indent by four spaces to achieve proper formatting.\nThis option is the simplest, but offer no way to test the code, and does not allow the user to view actual source code files as they might exist in a real project.\nFor an example, see Run Koa.js on Google App Engine Flexible Environment.\nOption 2 Instead of a Markdown file in the tutorials/ directory, create a folder for your files. The Markdown for the tutorial should be in an index.md file within the new folder, and the rest of the source code files must be in the new folder as well. You can use EmbedMd to include snippets from the source code files in the Markdown file. You should run the embedmd program on index.md to actually include the code block in the Markdown source in one of the commits for your pull request.\nThis option is more complicated, but allows us to test the code, and allows the user to view real source code files.\nFor an example, see Using Node.js to Calculate the Size of a BigQuery Dataset.\nAPI Documentation Here we\u0026rsquo;ll fix some standarts on docummenting API\u0026rsquo;s:\nNested Nodes \u0026lt;a\u0026gt; \u0026lt;b\u0026gt; \u0026lt;c\u0026gt; \u0026lt;d\u0026gt;content\u0026lt;/d\u0026gt; \u0026lt;/c\u0026gt; \u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt;  For documenting this we\u0026rsquo;ll use a table with rows indicating the name of the node, all the path, the intermediate nodes will left the type empty:\n   Element number type description     a 1  [\u0026hellip;]   a/b 1  [\u0026hellip;]   a/b/c 1  [\u0026hellip;]   a/b/c/d 1 string [\u0026hellip;]    Writing resources Learn more about strong writing.\n What is plain language? Purdue Online Writing Lab (OWL) Grammar Girl The Elements of Style (book by Strunk and White) The Deluxe, Transitive Vampire (book by Karen Elizabeth Gordon) Markdown Syntax (Cheatsheet from GitHub)  "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/suitfolderinput/",
	"title": "SuitFolderInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SuitFolderInput {  code: ID!    template: FolderTemplate!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   template(FolderTemplate!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/suitorganizationinput/",
	"title": "SuitOrganizationInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SuitOrganizationInput {  user: ID!    organization: ID!    template: OrganizationTemplate!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields user(ID!):   organization(ID!):   template(OrganizationTemplate!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/supplement/",
	"title": "Supplement",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Supplement {  code: String!    name: String    description: String    supplementType: SupplementType!    chargeType: ChargeType!    mandatory: Boolean!    durationType: DurationType    quantity: Int    unit: UnitTimeType    start: Date    end: Date    resort: Resort    price: Price   Show deprecated fields   effectiveDate: : Date // deprecated from 2018-02-28 Incorrect date format.     expireDate: : Date // deprecated from 2018-02-28 Incorrect date format.     }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   name(String):   description(String):   supplementType(SupplementType!):   chargeType(ChargeType!):   mandatory(Boolean!):   durationType(DurationType):   quantity(Int):   unit(UnitTimeType):   effectiveDate(Date):   expireDate(Date):   start(Date):   end(Date):   resort(Resort):   price(Price):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/supplementtype/",
	"title": "SupplementType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum SupplementType{   SKI_PASS,    LESSONS,    MEALS,    EQUIPMENT,    TICKET,    TRANSFERS,    GALA,    ACTIVITY,   }   Required by Supplement:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers\nGraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated   Required by AccessData:    SupplierEdge:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessData:    LegacyLink:    SupplierEdge:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessData:    LegacyLink:    SupplierEdge:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by SupplierDetected:    AccessData:    LegacyLink:    SupplierEdge:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessData:    LegacyLink:    SupplierEdge:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplierData(SupplierData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by AccessData:    LegacyLink:    SupplierEdge:    PaymentCardData:    AdminMutation:    SupplierDetected:     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/concepts/basicconcepts/supplier-access-client-context/",
	"title": "Supplier, Access, Client and Context",
	"tags": [],
	"description": "Learn about entities used in HotelX",
	"content": " Previously, we introduced an overarching definition of the main Core Entities applying to Travelgate-X APIs core concepts that apply to all TravelgateX APIs.\nHere, we want to dig in further on how those concepts are applied to Hotel-X API.\nSupplier A party that supplies accommodation services through a Supplier API implementation. Each Supplier has a Supplier code. These are unique values and they are used consistently throughout all TravelgateX implementations.\nAccess Accesses are displayed as numeric codes in Hotel-X and represent Supplier configurations for a given credential. Those configurations include:\n URLs¬† Credentials¬† Markets¬† Rate Types¬† Specific Supplier settings¬†  An access is used by just a client exclusively. The same supplier has different access depends on the number of clients connected to him, even if the configuration is almost the same.\nClient A party that buys accommodation services through Hotel-X API implementation.Client codes are consistent throughout all TravelgateX implementations. These codes are used to identify the business that is making the request and to confirm that the business has a configuration assigned to it.\nContext Context is the way how a client/supplier define hotel, board and room codes among others. Each Profile (either a Buyer or Supplier) can manage their own contexts or reuse existing ones. Different buyers or sellers can also manage the same codes context. For example, the SupplierSmyRooms uses LOGI contexts for their implementations.\nContext applies to:\n Hotel Codes¬† Board Codes¬† Room Codes¬†  With our built-in solution, you are able to use your own context when requesting a Hotel-X operation. If you are a Buyer, you can map your context against your Seller/Supplier contexts.\nShould you be using the aggregator mode, we recommend that you use you own Context- in doing so, all supplier mappings will be solved/unified.\nFor more information on setting contexts, check out our Plugin guide on Mapping. "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):    Required by OrganizationData:    GroupCommonData:    GroupData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    OrganizationData:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    OrganizationData:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by ClientData:    GroupData:    GroupCommonData:    OrganizationData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by GroupData:    GroupCommonData:    OrganizationData:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    totalCount: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   adviseMessage([AdviseMessage!]):   totalCount(Int!):    Required by AdminQuery:    GroupData:    GroupCommonData:    OrganizationData:    ClientData:     "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection    owner: Organization    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!): unique identifier of a supplier  name(String!): Supplier complete name  isActive(Boolean!): indicates whether a supplier is active  provider(Provider!): instance to which this supllier is connected  context(String!): Context where the Supplier belongs to  serviceApi(Int!): Service API  supplierGroup(ID): SupplierGroup Internal Supplier grouping  accesses(AccessConnection): Accesses where the supplier is referenced  owner(Organization): Supplier owner  groups(GroupConnection): Groups where access belongs   Required by Supplier:  A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    owner: Organization!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection    system: System!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean!):   provider(Provider!):   context(String!):   serviceApi(Int!):   supplierGroup(ID):   accesses(AccessConnection):   owner(Organization!):   groups(GroupConnection):   clients(ClientConnection):   system(System!):    Required by Supplier:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    owner: Organization!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection    system: System!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean!):   provider(Provider!):   context(String!):   serviceApi(Int!):   supplierGroup(ID):   accesses(AccessConnection):   owner(Organization!):   groups(GroupConnection):   clients(ClientConnection):   system(System!):    Required by Supplier:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    owner: Organization!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection    system: System!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean!):   provider(Provider!):   context(String!):   serviceApi(Int!):   supplierGroup(ID):   accesses(AccessConnection):   owner(Organization!):   groups(GroupConnection):   clients(ClientConnection):   system(System!):    Required by Supplier:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    owner: Organization!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection    system: System!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean!):   provider(Provider!):   context(String!):   serviceApi(Int!):   supplierGroup(ID):   accesses(AccessConnection):   owner(Organization!):   groups(GroupConnection):   clients(ClientConnection):   system(System!):    Required by Supplier:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses(    first: Int,     last: Int,     before: String,     after: String,     filter: AccessFilter,     ): AccessConnection    owner: Organization!    groups(    first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    clients(    first: Int,     last: Int,     before: String,     after: String,     filter: ClientFilter,     ): ClientConnection    system: System!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String!):   isActive(Boolean!):   provider(Provider!):   context(String!):   serviceApi(Int!):   supplierGroup(ID):   accesses(AccessConnection):   owner(Organization!):   groups(GroupConnection):   clients(ClientConnection):   system(System!):    Required by Supplier:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/supplierdetected/",
	"title": "SupplierDetected",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierDetected {  code: ID!    supplier: Supplier    numberOfHotels: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplier(Supplier):   numberOfHotels(Int!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/supplierdetected/",
	"title": "SupplierDetected",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierDetected {  code: ID!    supplier: Supplier    numberOfHotels: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   supplier(Supplier):   numberOfHotels(Int!):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {  node: Supplier    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(Supplier):   cursor(String!):    Required by SupplierConnection:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/inputobjects/supplierfilter/",
	"title": "SupplierFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierFilter {  supplierID: [ID]    accessID: [ID]    groupID: [ID]    isActive: Boolean    serviceAPI: [Int]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierID([ID]):   accessID([ID]):   groupID([ID]):   isActive(Boolean):   serviceAPI([Int]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/supplierfilter/",
	"title": "SupplierFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierFilter {  supplierID: [ID]    accessID: [ID]    groupID: [ID]    isActive: Boolean    serviceAPI: [Int]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierID([ID]):   accessID([ID]):   groupID([ID]):   isActive(Boolean):   serviceAPI([Int]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/inputobjects/supplierfilter/",
	"title": "SupplierFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierFilter {  supplierID: [ID]    accessID: [ID]    groupID: [ID]    isActive: Boolean    serviceAPI: [Int]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierID([ID]):   accessID([ID]):   groupID([ID]):   isActive(Boolean):   serviceAPI([Int]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/inputobjects/supplierfilter/",
	"title": "SupplierFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierFilter {  supplierID: [ID]    accessID: [ID]    groupID: [ID]    isActive: Boolean    serviceAPI: [Int]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierID([ID]):   accessID([ID]):   groupID([ID]):   isActive(Boolean):   serviceAPI([Int]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/supplierfilter/",
	"title": "SupplierFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierFilter {  supplierID: [ID]    accessID: [ID]    groupID: [ID]    isActive: Boolean    serviceAPI: [Int]    owner: [ID!]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields supplierID([ID]):   accessID([ID]):   groupID([ID]):   isActive(Boolean):   serviceAPI([Int]):   owner([ID!]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/surcharge/",
	"title": "Surcharge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Surcharge {  code: String    chargeType: ChargeType!    mandatory: Boolean!    price: Price!    description: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String):   chargeType(ChargeType!):   mandatory(Boolean!):   price(Price!):   description(String):    "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/system/",
	"title": "System",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type System {  code: ID!    systemData: SystemData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   systemData(SystemData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/system/",
	"title": "System",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type System {  code: ID!    systemData: SystemData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   systemData(SystemData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/system/",
	"title": "System",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type System {  code: ID!    systemData: SystemData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   systemData(SystemData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/system/",
	"title": "System",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type System {  code: ID!    systemData: SystemData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   systemData(SystemData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by SupplierData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/system/",
	"title": "System",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type System {  code: ID!    systemData: SystemData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   systemData(SystemData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):    Required by SupplierData:    SystemEdge:    AdminMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/systemconnection/",
	"title": "SystemConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SystemConnection {  edges: [SystemEdge]    pageInfo: PageInfo!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields edges([SystemEdge]):   pageInfo(PageInfo!):    Required by AdminQuery:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/systemdata/",
	"title": "SystemData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SystemData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers( filter: SupplierFilter, ): [Supplier]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers([Supplier]!):    Required by System:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/systemdata/",
	"title": "SystemData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SystemData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers( filter: SupplierFilter, ): [Supplier]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers([Supplier]!):    Required by System:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/systemdata/",
	"title": "SystemData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SystemData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers( filter: SupplierFilter, ): [Supplier]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers([Supplier]!):    Required by System:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/systemdata/",
	"title": "SystemData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SystemData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers( filter: SupplierFilter, ): [Supplier]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers([Supplier]!):    Required by System:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/systemdata/",
	"title": "SystemData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SystemData {  code: ID!    name: ID!    isActive: Boolean!    group: Group    owner: Organization    suppliers( filter: SupplierFilter, ): [Supplier]!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID!):   isActive(Boolean!):   group(Group):   owner(Organization):   suppliers([Supplier]!):    Required by System:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/systemedge/",
	"title": "SystemEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SystemEdge {  node: System    cursor: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields node(System):   cursor(String!):    Required by SystemConnection:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/systemfilter/",
	"title": "SystemFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SystemFilter {  id: [ID]    supplier: [ID]    group: [ID]    isActive: Boolean    owner: [ID]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields id([ID]):   supplier([ID]):   group([ID]):   isActive(Boolean):   owner([ID]):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/tagruntimetype/",
	"title": "TagRuntimeType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum TagRuntimeType{   USER,    PASSWORD,    URLAVAIL,    URLVALUATION,    URLRESERVATION,    URLGENERIC,    PARAMETER,   }   Required by HotelRuntimeParameter:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/taxsummarytype/",
	"title": "TaxSummaryType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TaxSummaryType {  totalTaxAmount: AmountType    tax: [TaxType]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields totalTaxAmount(AmountType):   tax([TaxType]):    Required by FlightPrice:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/taxtype/",
	"title": "TaxType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TaxType {  amount: AmountType    descText: TexType   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields amount(AmountType):   descText(TexType):    Required by TaxSummaryType:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/template/",
	"title": "Template",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum Template{   FOLDER_DEFAULT,   }   Required by CreateGroupInput:     "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/rules/temporary-pricing-rules/",
	"title": "Temporary pricing rules",
	"tags": [],
	"description": "Apply commissions or markups for different market conditions",
	"content": " Considerations It is an absolute load, so bear in mind these considerations:\n If all the data on the file is correct then the existing definition of Temporary Pricing Rules is removed and file\u0026rsquo;s data is inserted into the system to define the new Temporary Pricing Rules.\n If there is any problem with the file or its data then the load is cancelled and the existing definition of Specific Stop Sales is not removed.\n  \nSpecifications  File name: Rules_TempPricingRules.csv.\n Each line represents a unique temporary pricing rule and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line, by default fields and subfields are separated using the characters #, | and ;. None of these characters can\u0026rsquo;t be used inside data because fields and subfields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nFor the complexity of the data the fields are not always directly unitary data many fields are complexe data so they have to be divided in other subfields.\nThe fields are separated by # and internally, if it needs it, its subfields are separated by |. And also if a subfield is a list of values it also has its values separated by ;, aslo by default. All these separators can be overwriten with control lines.\n\n   Case Example Description     Field without data \u0026hellip;##\u0026hellip; We have the separator # and nothing inside.   Field directly with data and no subfields \u0026hellip;#12#\u0026hellip; It is just the value 12.   Field with complex data (not needed) \u0026hellip;#0#\u0026hellip; The type is 0 and it does not need of any other data so there is no more information (it has not got any more subfield).   Field with complex data (simple value) \u0026hellip;#1 AS#\u0026hellip;   Field with complex data (simple values) \u0026hellip;#1 10-08-2018   Field with complex data (list) \u0026hellip;#1 AS;XF;TR#\u0026hellip;    \nControl Lines  Control lines allow us to determine how the content of the file has to be interpreted.\n This type of lines do not contain data, they contain orders for the process and these orders take effect from the control line forward, so control lines should be placed at the begining of the file (and after any header).\n Each control operation has to be given on a separate line (one line one control operation).\n  \n   Control Description     @CTRL:separator= With the control line @CTRL:separator= followed by a character or string it can be defined the fields separator to be used, overwriting the default one or any previous definition. The specified character or string cannot be used inside data because fields would be gathered in a wrong way. Example of line to set # as the fields separator: @CTRL:separator=#.   @CTRL:separatorsub= With the control line @CTRL:separatorsub= followed by a character or string it can be defined the subfields separator to be used, overwriting the default one or any previous definition. The specified character or string cannot be used inside data because fields and subfields would be gathered in a wrong way. Example of line to set - as the subfields separator: @CTRL:separatorsub=-.   @CTRL:separatorlist= With the control line** @CTRL:separatorlist=** followed by a character or string it can be defined the separator to be used with list items, overwriting the default one or any previous definition. The specified character or string cannot be used inside list data because list items would be gathered in a wrong way. Example of line to set # as the list items separator: @CTRL:separatorlist=#.   @CTRL:remove With the control line @CTRL:remove we order the process to remove all the specific stop sale rules that are currently on the system. See Remove Data section below. Example of line: @CTRL:remove.    \nData Line fields    Position Mandatory Field Subfield Position Mandatory Data Type Description/Value     0 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret agencies or if it applies to all agencies. 0 = All agencies.1 = List of agencies: in this case it is mandatory to receive a list of items.   0 Yes 1 - list of strings List of agency codes.   1 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines the type of Cancellation Policies. 0 = All (NRF + RF)1 = Only No refundable (NRF)2 = Only Refundable (RF)   2 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines the Rate Type. 0 = All (B2C + B2B)1 = Only B2C2 = Only B2B   3 Yes 0 Yes enumeration:0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret providers or if it applies to all providers or only to direct or third party providers. ul\u0026gt;0 = All providers1 = List of items: in this case it is mandatory to receive a list of items.2 = Only all Third Party providers3 = Only all Direct providers   3 Yes 1 - list of strings List of provider codes.   4 Yes 0 Yes enumeration:0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret hotels (and from countries, cities, chains or destinations) or if it applies to all hotels. 0 = All hotels1 = List of hotels2 = Hotels from a list of countries3 = Hotels from a list of cities4 = Hotels from a list of chains5 = Hotels from a list of destinations6 = Hotels from a list of groups of destinations   4 Yes 1 - list of strings List of codes: hotels, countries, cities, chains or destinations (just one type).   5 Yes 0 Yes enumeration:0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret markets or if it applies to all markets. 0 = All markets.1 = List of markets: in this case it is mandatory to receive a list of items.   5 Yes 1 - list of strings List of market codes.   6 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret meal plans or if it applies to all meal plans. 0 = All meal plans.1 = List of meal plans: in this case it is mandatory to receive a list of items.   6 Yes 1 - list of strings List of meal plans codes.   7 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a concret range of check-in dates or if it applies to any date. 0 = All check-in dates.1 = Range of check-in dates.   7 Yes 1 - date Check-in date: from (inclusive). Only the date is used. Time is ignored   7 Yes 2 - date Check-in date: to (inclusive).Only the date is used. Time is ignored.   8 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a concret range of booking dates or if it applies to any date. 0 = All booking dates.1 = Range of booking dates.   8 Yes 1 - date Booking date: from (inclusive). Only the date is used. Time is ignored.   8 Yes 2 - date Booking date: to (inclusive).Only the date is used. Time is ignored.   9 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a concret range of prices or if it applies to any price. 0 = All prices.1 = Range of prices.   9 Yes 1 - decimal Price: from (inclusive).   9 Yes 2 - decimal Price: to (inclusive).   10 Yes 0 Yes boolean Defines if the rules is an overriding rule or not. false or 0 = it is not an overriding rule.true or 1 = it is an overriding rule.   11 Yes 0 Yes decimal Commission/Markup of the rule.   12 Yes 0 Yes string Description of the rule.   13 - 0 - integer Defines the release. A zero value indicates that there is no release applied. By default it is considered 0 if this field does not exist or it is not defined.   14 - 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a concret range of days of release from check-in or if it applies to any release. 0 = No release. by default if this field does not exist or it is not defined.1 = Range of days of release from check-in.   14 - 1 - integer Release: from (inclusive).   14 - 2 - integer Release: to (inclusive).   15 - 0 Yes integer Defines if the rule is specific for a concret range of hours or if it applies to any hour. 0 = All hours. by default if this field does not exist or it is not defined.1 = Range of hours.   15 - 1 - hour Hour: from.   15 - 2 - hour Hour: to.   16 - 0 Yes integer Defines if the rule is specific for some day of the week or if it applies to any day. 0 = All days. by default if this field does not exist or it is not defined.1 = List of days.   16 - 1 - list of integers Days from 1 (Monday) to 7 (Sunday). i.e. 1;6;7 Monday, Saturday and Sunday    Notes  A decimal value has to be set using \u0026lsquo;.\u0026rsquo; as separator. A boolean value can be set using false/true or 0/1. A date value has to be set with the format \u0026ldquo;yyyy-MM-dd\u0026rdquo; (i.e. \u0026ldquo;2018-05-12\u0026rdquo;). An hour value has to be set with an integer between 0 and 23. Country and market are in ISO 3166-1 alpha-2 code format (i.e. \u0026ldquo;ES\u0026rdquo;, \u0026ldquo;PT\u0026rdquo;, \u0026ldquo;FR\u0026rdquo;,\u0026hellip;).  Remove Data If it is needed there is the possibility to remove all the temporary pricing rules that are currently on the system.\nTo do this we cannot use the previous line fields specifications as they are used to set data, not to remove it.\n We have to use the same file name. The file has to be composed of one line with the following control line: @CTRL:remove Any blank line will be skipped (without generating any error). If there is any other line with data on the file then an error will be generated and no data will be removed from the system   "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/termtype/",
	"title": "TermType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum TermType{   TEXECT,   }   Required by RangeFilter:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/text/",
	"title": "Text",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Text {  text: String!    language: Language!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields text(String!):   language(Language!):    "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/texttype/",
	"title": "TextType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Text {  text: String   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields text(String):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/time/",
	"title": "Time",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Time   Required by TimeRange:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/timerange/",
	"title": "TimeRange",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TimeRange {  startTime: Time!    endTime: Time!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields startTime(Time!):   endTime(Time!):    Required by CheckInformation:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/inputobjects/timerangeinput/",
	"title": "TimeRangeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TimeRangeInput {  relative: RelativeInput    absolute: AbsoluteInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields relative(RelativeInput):   absolute(AbsoluteInput):    Required by StatsFilterInput:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/timerangeinput/",
	"title": "TimeRangeInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TimeRangeInput {  relative: RelativeInput    absolute: AbsoluteInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields relative(RelativeInput):   absolute(AbsoluteInput):    Required by StatsFilterInput:    LoggingLegacyFilterInput:  Filters needed to do a search. From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss),    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/timeout/",
	"title": "Timeout",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Timeout {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(Int!):   quote(Int!):   book(Int!):    Required by HotelXDefaultSettingsData:    HotelXCommonSettingsData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/timeoutinput/",
	"title": "TimeoutInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TimeoutInput {  search: Int!    quote: Int!    book: Int!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(Int!):   quote(Int!):   book(Int!):    Required by HotelXDefaultSettingsDataInput:    HotelXCommonSettingsDataInput:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/traffictype/",
	"title": "TrafficType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum TrafficType{   BASIC,    SPEED,    SCHEDULER,    OPTIMIZED,   }   Required by OperationDetailed:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/traffictype/",
	"title": "TrafficType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum TrafficType{   BASIC,    SPEED,    SCHEDULER,    OPTIMIZED,   }   Required by OperationDetailed:    LoggingLegacyData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/transactions/",
	"title": "Transactions",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Transactions {  request: String!    response: String!    timeStamp: DateTime!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields request(String!):   response(String!):   timeStamp(DateTime!):    "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/transportarrival/",
	"title": "TransportArrival",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TransportArrival {  location: LocationCode   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields location(LocationCode):    Required by FlightSegment:     "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/transportdeparture/",
	"title": "TransportDeparture",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TransportDeparture {  location: LocationCode    AircraftScheduled: DateTime   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields location(LocationCode):   AircraftScheduled(DateTime):    Required by FlightSegment:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/",
	"title": "TravelgateX",
	"tags": [],
	"description": "TravelgateX - The Ultimate Platform For The Travel Trade",
	"content": "The TravelgateX platform lets you build lightening fast applications and websites that connect to a wide range of travel suppliers in realtime. Integrations to new suppliers take less than 2 days to connect, rather than 2 weeks. Once the integration is in place, response times for showing hotel bookings is in the milliseconds, regardless of the size of the hotel booking database.\n  Overview TravelgateX Platform Information\n     Concepts Understand TravelgateX basic concepts\n     Reference Reference Documentation\n     Security Authorization \u0026amp; Authentication\n     Data Automation Automate bulk data operations\n     Tutorials Walkthrouhgs of common applications\n     Release Notes New Updates \u0026amp; Releases\n     Resources New Updates \u0026amp; Releases\n     FAQs Do you have specific questions about TravelgateX? Check out the Business FAQs\n    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL schema definition scalar URI   Required by Urls:  Url\u0026#39;s  StatsAsset:  Asset of an specific error   "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar URI   Required by Urls:    StatsAsset:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar URI   Required by Urls:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar URI   Required by Urls:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar URI   Required by Urls:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar URI   Required by Urls:    GiataData:    Contact:    Media:    UrlsInput:    StatsAsset:    LoggingLegacyData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/unittimetype/",
	"title": "UnitTimeType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition  enum UnitTimeType{   DAY,    HOUR,   }   Required by Supplement:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/updateclientinput/",
	"title": "UpdateClientInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateClientInput {  code: ID!    name: String    isActive: Boolean    owner: ID   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(String):   isActive(Boolean):   owner(ID):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/updateentitiesinput/",
	"title": "UpdateEntitiesInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateEntitiesInput {  code: ID!    entities: EntitiesInput   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   entities(EntitiesInput):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/updategroupapisinput/",
	"title": "UpdateGroupAPISInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateGroupAPISInput {  api: [ID!]!    group: ID!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields api([ID!]!):   group(ID!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/updategroupinput/",
	"title": "UpdateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateGroupInput {  group: ID!    owner: ID    type: GroupTypeInput    info: String    label: String    country: Country   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields group(ID!):   owner(ID):   type(GroupTypeInput):   info(String):   label(String):   country(Country):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/updatememberinput/",
	"title": "UpdateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateMemberInput {  member: ID!    label: String!    isActive: Boolean!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields member(ID!):   label(String!):   isActive(Boolean!):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/updateprofileinput/",
	"title": "UpdateProfileInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateProfileInput {  code: ID!    label: String    type: [ProfileType]    isActive: Boolean    isPublished: Boolean   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   label(String):   type([ProfileType]):   isActive(Boolean):   isPublished(Boolean):    "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/updatesysteminput/",
	"title": "UpdateSystemInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateSystemInput {  code: ID!    name: ID    isActive: Boolean    group: ID    owner: ID    suppliers: [ID]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(ID!):   name(ID):   isActive(Boolean):   group(ID):   owner(ID):   suppliers([ID]):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/uploadfiledata/",
	"title": "UploadFileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileData {  fileId: String!    suppliers: [SupplierDetected!]    numberOfLines: Int    numberOfHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileId(String!):   suppliers([SupplierDetected!]):   numberOfLines(Int):   numberOfHotels(Int):    Required by UploadFileResponse:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/uploadfiledata/",
	"title": "UploadFileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileData {  fileId: String!    suppliers: [SupplierDetected!]    numberOfLines: Int    numberOfHotels: Int   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields fileId(String!):   suppliers([SupplierDetected!]):   numberOfLines(Int):   numberOfHotels(Int):    Required by UploadFileResponse:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/uploadfileresponse/",
	"title": "UploadFileResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileResponse {  data: UploadFileData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data(UploadFileData):   error(Error):   warnings([Warning]):    Required by MappeaMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/uploadfileresponse/",
	"title": "UploadFileResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileResponse {  data: UploadFileData    error: Error    warnings: [Warning]   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields data(UploadFileData):   error(Error):   warnings([Warning]):    Required by MappeaMutation:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/data-automation/uploading-strategies/",
	"title": "Uploading Strategies",
	"tags": [],
	"description": "How to Upload data",
	"content": " How to upload data to the platform There are two ways of uploading data to the platform:\n Secure File Transfer Protocol (SFTP) GraphQL mutation  We recommend continuing to use SFTP at present while we build out more GraphQL resources.\nWhile you can make your updates via a mutation, we have not yet written up resources to show you how to do that.\nIf you require these resources immediately, please contact us via help center\nSecure File Transfer Protocol (SFTP) SFTP, or Secure File Transfer Protocol, is a network protocol that provides secure access, transfer, and management of data files programmatically. This protocol is used by the largest organizations in finance, technology, and consulting to transfer data such as Personally Identifiable Information (PII) to ensure it remains 100% secure.\nSecurity To ensure the security of your data, we adhere to the highest standards in data security. Some of the advanced security measures we take include:\n Password-based authentication. IP Whitelisting: We whitelist the IP Addresses from where you\u0026rsquo;ll be accessing your SFTP server to ensure you are the only one allowed to access your account. Anomaly Detection: To ensure no loss of data, we detect anomalies in your uploads to the SFTP server and immediatly warn you when an upload is about to significantly change your account. Encryption: Data is encrypted, keeping your information safe and private.  Setup To get your FTP Credential Details raise a customer care request in Help Center.\nNaming Conventions Keep in mind that the file is loaded using a specific name, depending on the data being uploaded. For the appropriate file name, please see the specific file documentation in each API product section.\nRemember to always overwrite the last file, because only the last file will be loaded into the platform.\nIf in some case you need to revert to an old version, don\u0026rsquo;t worry because we keep a copy of the old files.\n GraphQL Mutation Resources to help you upload your data via GraphQL mutation are coming soon. Please submit an issue to our issue tracker if you require these resources immediately.\n  "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.  book(URI): Specific URL for Valuation method.  generic(URI): Supplier URL used for multiple methods.   Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI):   quote(URI):   book(URI):   generic(URI):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI):   quote(URI):   book(URI):   generic(URI):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI):   quote(URI):   book(URI):   generic(URI):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI):   quote(URI):   book(URI):   generic(URI):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI):   quote(URI):   book(URI):   generic(URI):    Required by AccessData:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/urlsinput/",
	"title": "UrlsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UrlsInput {  search: URI    quote: URI    book: URI    generic: URI   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields search(URI):   quote(URI):   book(URI):   generic(URI):    Required by ConfigurationInput:    AccessInput:     "
},
{
	"uri": "https://travelgatex.com/integrations/flights/vy/",
	"title": "VY - Vueling",
	"tags": [],
	"description": "Vueling integration",
	"content": "   VY - Vueling Changelog     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/view/",
	"title": "View",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type View {  texts( languages: [Language!], ): [Text!]    viewCode: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields texts([Text!]):   viewCode(String!):    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/warning/",
	"title": "Warning",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   type(String!):   description(String!):    Required by GetUploadedFilesResponse:    GetMappeaStatsResponse:    OnlyStatusResponse:    UploadFileResponse:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/warning/",
	"title": "Warning",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Warning {  code: String!    type: String!    description: String!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields code(String!):   type(String!):   description(String!):    Required by GetUploadedFilesResponse:    GetMappeaStatsResponse:    OnlyStatusResponse:    UploadFileResponse:     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/worker/",
	"title": "Worker",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition scalar Worker   Required by Environment:     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/changelog/2020-12-22/",
	"title": "Changelog 2020-12-22",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes",
	"content": " 2020-12-22  Add 3 new fields in PaymentCardInput isVCC, virtualCreditCard and threeDomainSecurity, check Graphql schema changes, for more detail and example you cansee the Book request specification\n Strong Customer Authentication (3DS). 3DS data can now be included with a Payment Card in a book request alongside payment card data. You can find new field threeDomainSecurity on the input of Paymentcard.\n  Virtual Credit Cards (VCC). Extra information about Virtual Credit Cards can now be included with a Payment Card in a Book request. You can find new field virtualCreditCard input of Paymentcard.\n   "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/changelog/2020-12-04/",
	"title": "Changelog 2020-12-04",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes",
	"content": " 2020-12-04  We have added the feature of mapping promotions in booking-flow and default codes are implemented for promotions too. Mapping Plugins\n Now we send to InsightsX mapping of Promotions to visualize the status of your mapping in the connectivities you have in a structured reports.\n   "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/changelog/2020-11-25/",
	"title": "Changelog 2020-11-25",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes",
	"content": " 2020-11-25  Now we send to InsightsX mapping of Hotel, Board, Room and Rate to visualize the status of your mapping in the connectivities you have in a structured reports.\n Add \u0026ldquo;Default Codes\u0026rdquo; to Mapping Plugins, this feature allows to set a default code for each code in the source (provider) context.\n   "
},
{
	"uri": "https://travelgatex.com/applications/insights/release-notes/2020-03-11/",
	"title": "2020-03-11",
	"tags": ["products-changelog"],
	"description": "",
	"content": " 2020-03-11  Updated RANK definiton in benchmark tables. All destinations/suppliers/clients with the same volume for the same metric receive the same rank value. The next destinations/suppliers/clients receives a rank value which increments by the number of peers with the previous rank value, instead of increment by 1.   "
},
{
	"uri": "https://travelgatex.com/flight-x/release-notes/changelog/2020-02-25/",
	"title": "2020-02-25",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " 2020-02-20  Released first pilot API version in Ggraphql (Only searh method)   "
},
{
	"uri": "https://travelgatex.com/applications/insights/release-notes/2019-11-28/",
	"title": "2019-11-28",
	"tags": ["products-changelog"],
	"description": "",
	"content": " 2019-11-28  Added the fields client_owner and provider_owner in all the tables of the InsightsX Dataset.    Changed fields availability_index, booking_index and revenue_index by availability_best_compset, booking_best_compset and revenue_best_compset in benchmark tables.   "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/changelog/2019-11-05/",
	"title": "Changelog 2019-11-05",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes",
	"content": " 2020-02-26  Now the booking and cancel services allow the user to retrieve and cancel a book with the new field returned in book response bookingID. You can see more details of bookingID in the documentation here.   2020-02-25  Added new field bookingID into Reference (book, booking and cancel). This bookingID will be useful for booking retrieving and cancelling. Added new field bookingID into HotelCancelInput (cancel). Added new field bookingID into HotelCriteriaBookingInput (booking).   2020-02-24  Added deletedAt_in, deletedAt_not_in, deletedAt_lt, deletedAt_lte, deletedAt_lte, deletedAt_gt and deletedAt_gte fields into HotelXHotelFilterInput.   2020-02-24  Internal changes. Added field features into optionid. Some options returned in Search were not able to be priced in Quote step since for HotelX these options were exactly the same. Now these options are treated as different thanks to the field features inside the optionid. The search options with RateRulesType PUBLIC_SERVANT and UNEMPLOYED will no longer be discarted.   2020-02-05  We\u0026rsquo;ve launched a new API called Metadata, which allow you to retrieve the supplier information and configuration. You can see the documentation here. We have also introduced this API to our bookingflow, which allows us to block the invalid querys (those querys that does not match with the supplier configuration in the metadata) in order to optimize the traffic.   2020-02-05  Internal changes. Removed field optionsQuota from optionid. Now the plugin Add Parameter will also be able to replace the parameters that share the same key inside an specific configuration. You can see the documentation here. Internal changes. Now the field market from optionid will contain all the markets related to the option, until now it was only prepared to return a single market.   2020-12-02  The Board Mapping has been changed into a separated functionality: it has to be explicitly requested in order to indicate HotelX to map the board codes. This also allow you to chose the context in which you want to map the codes.   2020-12-02  We\u0026rsquo;ve launched a new plugin called Amenity Map which allows the user to retrive amenities in the hotels service using another context different that supplier context. This functionality differs with other mappings because mapping has to be requested in query fields, not in plugin section. You can see the documentation here.   2019-11-28  Added new value PAYX to PaymentType enum (search). We\u0026rsquo;ve launched a new plugin called Virtual Credit Card Generator which adds the possibility to create a virtual credit card at Book step, in order to pay the reservation‚Äôs import with it. You can see the documentation here.  { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;REQUEST\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;PRE_STEP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;genvcc\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;activationDate\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2020-05-22\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;expirationDate\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2020-05-24\u0026quot; } ] } ] } }   2019-11-27  We\u0026rsquo;ve launched a new plugin called Market Group X that allows the user to group the Search result by markets that share the same Options. You can see the documentation here.  { \u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;market_groupX\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;MARKETS_GROUP\u0026quot; } ] } ] }   2019-11-20  Added new field code into Surcharge.   2019-11-05  New fields keys in Aggregation Plugin (\u0026ldquo;binding\u0026rdquo; and \u0026ldquo;refundable\u0026rdquo;). More information about Aggregation Plugin here.  { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION/RESPONSE\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;AGGREGATION\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;cheapest_price\u0026quot;, \u0026quot;parameters\u0026quot;: [ { {\u0026quot;key\u0026quot;: \u0026quot;primaryKey\u0026quot;,\u0026quot;value\u0026quot;: \u0026quot;hotel,supplier,room,refundable,binding\u0026quot;} } ] } ] } }    Field hotel in Booking query. Now, this field indicates the locator provided by the hotel (just in case the supplier returns it).  query { hotelX { booking(criteria: { accessCode: \u0026quot;422\u0026quot;, language: \u0026quot;en\u0026quot;, references: { currency: \u0026quot;EUR\u0026quot;, hotelCode: \u0026quot;1\u0026quot;, references: [ { client: \u0026quot;Demo_Client\u0026quot;, supplier: \u0026quot;HOTELTEST\u0026quot; } ] }, typeSearch: REFERENCES}, settings: {client:\u0026quot;Demo_Client\u0026quot;, testMode: true}) { bookings { reference { client hotel supplier } } } } }    Internal improvements.   "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/changelog/2021-05-25/",
	"title": "Changelog 2019-11-05",
	"tags": ["products-changelog"],
	"description": "Contains an accurate, chronologically-ordered list of notable changes",
	"content": " 2021-05-25  Added new input supplierCode in hotels query. You can see more details of hotels query in the documentation here.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-flightsx/log/legacy/",
	"title": "FlightsX",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/applications/insights/release-notes/2019-10-04/",
	"title": "2019-10-04",
	"tags": ["products-changelog"],
	"description": "",
	"content": " 2019-10-04  Added new table: daily_portfolio_stats_(buyer|seller)    Changed fields in daily_portfolio_(buyer|seller) table. Added field client_owner, removed fields client_id and username.   "
},
{
	"uri": "https://travelgatex.com/applications/stats/release-notes/changelog/2019-09-19/",
	"title": "2019-09-19",
	"tags": ["products-changelog"],
	"description": "",
	"content": " 2019-09-19  Updated changelog   "
},
{
	"uri": "https://travelgatex.com/applications/logging/release-notes/changelog/older/",
	"title": "Older",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes before 19/09/2019",
	"content": " 2019-08-30  Now quotes requested by Speed have the same sessionID that quotes requested by the client in order to identify them.    Now reference filters are arrays in order to be able to request multiple references at once.   2019-08-22  Added the field hotel in the input object reference from which bookings can be searched by the hotel\u0026rsquo;s reference.   2019-08-21  Added new input object timeRange that improves the time filters providing both a relative time filter and an absolute time filter.   2019-08-02  Added a hard limit when an API\u0026rsquo;s response lasts more than 60 seconds. When application hard limit is surpassed, microservice will response with a graceful response (http_status code = 403).   2019-07-17  Added a new input object reference with two fields client and supplier from which bookings can be searched.   2019-07-11  Added a new field statusType in LoggingLegacyData to retrieve the final status of the transacction.    Added a new input field first in LoggingLegacyFilterInput to be able to change the size of the response. By default up to 100 results will be returned.   2019-07-10  Fix an error that was causing to download files with empty content. Issue-49   2019-07-09  Start-up of the Logging service in production   "
},
{
	"uri": "https://travelgatex.com/applications/stats/release-notes/changelog/older/",
	"title": "Older",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes before 19/09/2019",
	"content": " 2019-08-02  Added a hard limit when an API\u0026rsquo;s response lasts more than 60 seconds. When application hard limit is surpassed, microservice will response with a graceful response (http_status code = 403).   2019-07-22  Added new input object timeRange that improves the time filters providing both a relative time filter and an absolute time filter.   2019-06-12  Fix an error that was causing to have empty operations in the response.   2019-06-03  New scalar type Int64 has been created. hits in StatsData, totalHits in OperationDetailed and hits in StatsInfo have changed its type to this new scalar.   2019-05-30  Now adviceMessage\u0026rsquo;s from others TravelgateX products are returned as external in owns adviceMessage\u0026rsquo;s.   2019-05-23  Now type of StatsInforeturns the correct value.   2019-05-22  Now stats are available from 01/01/2018. Requests by accessCode are available only from 15/05/2019.   2019-05-14  Fix an error that was causing accessCode not being stored successfully. Fix an error to show 100 assets per errorCode and per operation.   2019-05-03  Fix an error that was causing that assets of HUB error types were NULL.   2019-05-02  Input field retrieveAssets made optional. false by default.   2019-04-30  New required input field retrieveAssets added to indicate if assets are needed.    Assets returned limited to 100 to avoid too big responses. This limitation makes sense since the main objective is not to access all the asset nodes.   2019-04-23  Fix an error building internal queries when Quote/Booking and Other are requested.   2019-04-11  New input field owner added to allow filter by organization.   2019-04-08  label in OperationData added. Reason: Share the operation code in English. hits in StatsData added. Reason: Share a summary of hits at StatsData level.    Internal queries to Stats DB optimized.   2019-04-03  trafficType in OperationDetailed added. Reason: To differentiate existent traffic types: BASIC, SPEED, OPTIMIZED.   2019-03-14  Stats product documentation   "
},
{
	"uri": "https://travelgatex.com/alerts-x/release-notes/changelog/older/",
	"title": "Older",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes before 19/09/2019",
	"content": " 2019-08-21  Error to update alerts from price to an other alertType or vice versa.   2019-08-20  New Alert type available PRICE. With this alert type will be posible to set alerts which will advise of amount or commission anomalies for price.   2019-08-12  Error to update alerts in some cases.   2019-08-07  Now is Checked api, operation \u0026amp; errorCode inputs to be sure that exists or its combinations are posible.    Now is checked if update values are different. If not, update is rejected.   2019-08-06  New field api in configuration inputs to be able to filter by serviceApi (hotel, transportation\u0026hellip;). New field API in AlertConfiguration.   2019-08-05  Returns warning to advise of deleted events if configuration of the alert is updated.    New field ComercialType in AlertConfiguration.   2019-07-30  Save historicalWindow correctly.   2019-07-29  Check permissions of team groups.   2019-07-25  Allow to get alerts without groups criteria input.    Fixed an error to allow an alert create in an AlertsX group with no alert.   2019-07-10  After an alert configuration update their past events will be deleted.   2019-06-12  Fixed an error that was causing an unsuccessful alert create or update to set clients, suppliers and accesses to the alert for Travelgate Teams users.   2019-06-11  Fixed an error to return all the events of the alerts.   2019-06-06  Added /Health to check service status.   2019-05-23  Alerts-X product documentation is available   "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/changelog/older/",
	"title": "Older",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes before 19/09/2019",
	"content": " 2019-08-07  Fix Hotel-List repeated Hotels   2019-08-06  Add new enum type PaymentCardType which contain list of supported payment card. Add new field type of type PaymentCardType into PaymentCardInput and deprecate old field cardType Type HotelData introduces field RoomConnection (same type as Rooms service operation) Modified RoomData type by adding the new types RoomSource (string) and OccupancyStatic    Deprecated description from Bed (search) Deprecated KO in BookStatusType  \n2019-07-11  Deprecate type error in Hotel-list, Hotel-Room, Hotel-Board, Hotel-Category Add error filter in Hotel-list, Hotel-Room, Hotel-Board, Hotel-Category Add adviseMessage as new error type    Fix Level value in Hotel-list, Hotel-Room, Hotel-Board, Hotel-Category  \n2019-07-02  New field in book, cancel and booking respone. booking/reference/hotel.    Client token in batch and booking flow.  \n2019-06-27  Categories in Hotel-Category are grouped by group. Internal system improvements.   2019-06-26  New warning type in book. EMPTY_PRICE is returned when the supplier doesn\u0026rsquo;t return the price and we use the price obtained in quote.   2019-06-19  New field in book, cancel and booking respone. booking/billingSupplierCode. New blacklist file format. The values has changed to allow new features. You can see the documentation here. New field for the commision file. Now you can put clienToken for each rule. You can see the documentation here. Internal system improvements.   2019-06-13  New fields in search respone. room/features, room/supplierCode and ratPlan/supplierCode.    Security improvements.   2019-05-27  Added searchPrice in Quote and quotePrice in Book   2019-05-13  Internal monitorization   2019-05-09  Fix error when default settings are not available    Improve stats   2019-05-02  Added field filters in Hotel List    Deprecate type in GeonameData   2019-03-07  Added CurrencyX management for the cancel penalties.    Bug when the cancel penalty type is empty or invalid format. Mandatory field always returns FALSE when fee is EXCLUSIVE type in Surcharge node.   2019-02-26  New plugin, add parameter. You can see the documentation here.    Management of the default currency settings.   2019-02-12  Type HotelData introduces new field \u0026ldquo;GiataData\u0026rdquo;. Internal, better performant, REST endpoint in Search operation. Field filters have been added to minimize the throughput, this wasn\u0026rsquo;t necessary with Graphql, filtered fields that have a relation with Legacy API are now also sent as filter.   Expire date of payment card in Book now accept the following format: month: 1 digit or 2 digits, year: 4 digits or 2 digits\n 2019-02-04  Fix Hotel List and Hotel Room EOF error, when elastic returns empty result.   2019-01-28  Fix the error of destinationSearcher when elastic returns empty value.   2019-01-23  Fix the error of Hotel List and Hotel Room when requesting more than one code.   2019-01-14  Upgrade permission check in all microservices Environment variable health check Add parameter in Hotel-Quote and Hotel-Book   2018-12-04  Fix booking timeout issue    Added warning if any option has been discarded by CommissionX and CurrencyX plugins   2018-11-29  Fix filter maxSize Destination    Adapt Hotel-Room, Hotel-Board, Hotel-Category to new organization.    Added log if commission Fee is -1   2018-11-27  Ambiguous warning message in Book when supplier has not returned a price Removed error nodes from Groups and Organization nodes Removed log if amount is 0 in Fees node   2018-11-20  Added geonames in Hotel List Added access code in Book log in some special cases of commission    Partially synchronous resource caches in Hotel-Quote, Hotel-Book, Hotel-Cancel, Hotel-Booking   2018-11-19  Fix Stats Fix Hotels requested stats in Access and Transaction spans in some cases where the count wasn\u0026rsquo;t correct    Margin plugin compares net commission in order to decide discarding or mantaining an option.   2018-11-08  Fix blacklist (by supplier) plugin   2018-11-02  Fix price discrepancy between Quote and Book   2018-10-02  Allow relay at the Query Hotels Count field in HotelConnection to retrieve the number of HotelEdges that match the filter. Pagination does not affect Count.   2018-09-25  Status tipification to be able to differentiate from critical to non-critical external services    Commission and currency rates are now kept unchanged between Quote and Book    Operation and Access processes have been updated to register times of their different execution steps and their processed options. Transactions to worker are now monitorized in their own span with supplier\u0026rsquo;s communication times, parsing times and processed options.   2018-09-06  Fix apply Markups to net price   2018-09-04  Fix currency bug inside markups, in Quote and Book   2018-09-03  Fix Exchange node empty if not CurrencyX (see doc in https://docs.travelgatex.com/connectiontypesbuyers/hotel-x/plugins/converter/) Fix bugs in Quote    Improve reponse time and service  \n2018-08-22  Settings heritage. Guide Plugins filter    Fix bugs  \n2018-08-21  New input field in Hotels Query filter. This allows to filter the response by hotel\u0026rsquo;s country. GraphQL Schema updated.   2018-07-24  New plugin, safety margin. You can see the documentation here.   2018-07-18  Hotel, board, room and rate maps caches are now updated synchronously. This will improve the user\u0026rsquo;s experience when 1st time debugging operations. Hotel maps cache refactoring to reduce the number of cached items and cached operations. Hotel maps cached requests are now pipelined to reduce Round Trip Time.   2018-07-16  HotelX concepts content examples.   2018-07-11  Improvement of the Rooms Schema with paginated list and max number of elements per page. By default: 1000 rooms.   2018-07-04  Wrong behaviour that made options to be discarded when price in supplements was empty in Search query.   "
},
{
	"uri": "https://travelgatex.com/distribution/release-notes/changelog/04-01-2021/",
	"title": "Older",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes before 19/09/2019",
	"content": " 2021-02-16  Added new page to download reports for the booking list. Access is limited by user. Available at Distribution-X extranet [Menu \u0026gt; Bookings \u0026gt; Booking List Reports].   2020-01-08  Added new page to decrypt tokens of the booking flow. Access is limited by user. Available at Distribution-X extranet [Menu \u0026gt; Tools \u0026gt; Decrypt Token].   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/changelog/older/",
	"title": "Older",
	"tags": ["products-changelog"],
	"description": "Contains an accurated, chronologically-ordered list of notable changes before 19/09/2019",
	"content": " 2021-02-09  GraphQL Schema updated.   2020-12-21  GraphQL Schema updated.   2020-12-03  GraphQL Schema updated.   2020-11-23  GraphQL Schema updated.   2020-08-31  GraphQL Schema updated.   2020-07-27  GraphQL Schema updated.   2020-05-28  GraphQL Schema updated.   2020-04-15  GraphQL Schema updated.   2020-03-31  GraphQL Schema updated.   2020-03-10  GraphQL Schema updated.   2019-08-29  GraphQL Schema updated.   2019-08-19  GraphQL Schema updated.   2019-08-08  GraphQL Schema updated.   2019-08-05  GraphQL Schema updated.   2019-07-31  New TravelgateX Slack Bot    GraphQL Schema updated.   2019-07-15  GraphQL Schema updated.   2019-07-04  GraphQL Schema updated.   2019-06-25  GraphQL Schema updated.   2019-06-13  GraphQL Schema updated.   2019-06-03  GraphQL Schema updated.    stats gateway  \n2019-05-30  GraphQL Schema updated.   2019-05-23  GraphQL Schema updated. Accesses, Clients and Suppliers querys chagend to the new entitiesx client    flow cascade permissions code field from accessData to match with query response    CatalogAdviseMessage to extern schema   2019-05-16  GraphQL Schema updated.   2019-05-06  GraphQL Schema updated.   2019-05-02  GraphQL Schema updated.   2019-04-30  GraphQL Schema updated.   2019-04-24  GraphQL Schema updated.   2019-04-08  GraphQL Schema updated.   2019-02-28  GraphQL Schema updated.   2019-02-14  GraphQL Schema updated.   2019-03-07  GraphQL Schema updated.   2019-02-20  GraphQL Schema updated.    owner of default client api-key permissions on hotlst    image GCR CreateOrgTemplate Default client on addClient function    Old org code format   2019-02-11  GraphQL Schema updated.    Audit deprecated loadFile query    SelectChildren function changed Added org code   2019-02-07  GraphQL Schema updated.    Response header. Content-type   2019-01-30  GraphQL Schema updated.    Entities resolvers   2019-01-11  The DEFAULT_TEMPLATE option has been modified.The permissions given to the owner were : iam:all:viewer Now: all:all:1a This is for future updates. Ignore it for the time being. The owner of the organization now has an admin permission all across the apis: org:api:rsc:crud1xaf. Intern members (@xmltravelgate.com, @travelgatex.com) only can be added to TEAM type groups. Operations now does not check permissions. All operations listed.    deleteApi function implemented. Api-key can be added to more than one product on the same folder. Group query can now be filtered by parent.    Error when adding apis to TEAM type groups. When creating new member used to always return \u0026ldquo;Auth0 connection error\u0026rdquo; Some errors description have been improved.   2019-01-09  Endpoint error messages    Launch patch with new patch file New patch fixing write headers    Headers patch   2018-12-19  New implement of cache Use gzip to unzip response instead of delegate to request module    Two caches, one for apikeys and another one to redirect endpoint Implement case not zipped Implement cache to rewrite endpoint    Timming   2018-12-17  Worker   2018-12-14  Use worker and main thread to stats depends search, and calculate Send stringify of body_worker Protect Buffer    ElapsedTime when error, and fix jsonstringify Timming    Tracing from worker (detail) Tracing from utils2 (detail)   2018-12-13  GraphQL Schema updated.    Timming and use workers for stats. Status code when endpoint fails Worker   2018-12-11  Handler for updating api-keys to different groups    Error description to not found members deleteApi functionality Parent filter to groups Filters to external schema    isAdmin from productData   2018-12-04  All check for GetSons Description to more than one member in a api-key error    Descendents query, only returns valid groups all permissions, now returns only orgs and validGroups    Debug prints   2018-11-29  Upgrade libraries    Autogencode. Deleted commit   2018-11-27  \u0026lsquo;all\u0026rsquo; requestors now able to update accesses non of their ownage    Shared automatic update in UpdateAccess   2018-11-26  impersonatedJwt to member resolver    all permissions for productData-\u0026gt;apis resolver all\u0026rsquo; user case in resource data resolver for role connection get organizations function for normal permission table   2018-11-22  Max length for org code raised to 8    UpdateOrganizationDomain mutation to intern schema Error on alpha-numeric characters for organization code UpdateOrganizationDomain delete function Domain filter to organizations function resolver Autogenerated code for new orgs with no code Domain filter to organizations function in external schema    all:api:all use case   2018-11-21  RefreshToken now returns a list of apikeys with the result Intern schema modified adding domain scalar and domains in organization Organization data resolver has been modified to add domain resolvers    Token-gen for updateGroupAdmin   2018-11-20  GraphQL Schema updated.    Refresh token funcition. Create Organization. Errors description. Update group    Entities call when move folder and change members refresh token position.    Useless folders from create folder template   2018-11-07  GraphQL Schema updated.    Force group names to lowcase only in TEAM/ORG cases    Useless folders    Update organizations.   2018-10-28  GraphQL Schema updated.    New field Geoname in Hotels query, which provides hotel\u0026rsquo;s geographical information   2018-10-18  GraphQL Schema updated.    Profile type    Supplier, Client and Access entities resources content.   2018-09-26  GraphQL Schema updated.   2018-09-20  GraphQL Schema updated.    Product name FlightsX.   2018-09-10  GraphQL Schema updated.   2018-08-29  Added pagination to partners list   2018-08-27  GraphQL Schema updated.   2018-08-22  GraphQL Schema updated.    Entity\u0026rsquo;s Owner and its related Filters, queries and mutations. parents and descendents queries for Group and Organization. Old connect form migrated to TravelgateX Clients and suppliers CRUD    Corrected change of Payment\u0026rsquo;s structure Basic Audit by request using header TGX-Audit: 1 See more: TGX Headers page   2018-08-14  New section for entities in IAM Accesses CRUD    GraphQL Schema updated.   2018-08-13  GraphQL Schema updated.   2018-08-08  GraphQL Schema updated.    TGX Headers page Support basic Tracing by request using header TGX-Tracing: 1 Return groups codes on entities queries (accessData,suppierData,clientData,profileData). Access name filter New default group when user account is deleted. Audit members has been added in createMember and deleteMember    Response of Access and Supplier query when no accesses on the request Entity propagation Permission check Update member auditions and refactor that funcionality URL resolver API/resource resolvers Roles function with new admin permissions   2018-07-31  Improvements in the organization selector and modal. GraphQL Schema updated.    IAM mutations All groups in resources and apis resolvers    Delete member mutation (Delete Apikeys or uninvite user emails) Public deleteGroup function and made it public   2018-07-27  Organizations queries resolvers   2018-07-26  GraphQL Schema updated.    Groups resolvers  \n2018-07-25  GraphQL Schema updated. Admin permissions management for groups.    Old support Apikey    Team\u0026rsquo;s permission management for groups.    Flow (Cascade) permissions. Inprove time response of groups resolvers.  \n2018-07-16  GraphQL Schema breaking changes. Substitutes and fixes to Deprecated and Deleted Notes pages.    GraphQL Schema updated. Changelog based on keep a changelog    Deprecated schema notes pages. Deleted schema notes pages.    Documentation pages\u0026rsquo; styles  \n2018-07-10  Deleted schema notes Documentation pages\u0026rsquo; index    GraphQL Schema updated. New version of Deprecated schema notes   2018-07-09  Previously deprecated queries. See more   "
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/api-methods/",
	"title": "API Reference",
	"tags": [],
	"description": "API Reference",
	"content": "   API Messages API Messages\n     Code list Code list and data description\n    "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/",
	"title": "API Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our FlightOfferWhereInput lists which fields must be completed to filter search results for a flight booking.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, our passengers object has a field name type that can only return one value of those: ADT, CHD, INF.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey 59de8cc0-830a-4023-7f5f-6b1bb336b864\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/channel-x/api-reference/",
	"title": "API reference",
	"tags": [],
	"description": "Channel-X API messages for buyers",
	"content": "The API described in this document is used to transmit rate, availability and inventory, data between Channel-X and a partner system. A full implementation of this API requires that the partner system provides a service endpoint that accepts requests from Channel-X of the following types: HotelRatePlanInventoryNotif, HotelRatePlanNotif, HotelAvailNotif.\nYou will find detailed information and examples of each method in the Messages section. In Code List you will find all codes used by the system.\n  Messages Notif messages\n     Code List List of Channel-X codes\n     Price Use Cases Some examples on how to operate prices\n    "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/agencies/",
	"title": "Agencies",
	"tags": [],
	"description": "Learn to manage the basic entities of Distribution-X",
	"content": " What is the meaning of agency? We can understand an Agency as a client, a buyer or a distribution channel. An organization has a set of agencies (at least one).\nAt the agency level, you can define pricing rules, blacklists, filters, etc. and they will be unique to each agency. What the agencies of the same organization do share are the master of entities and the rules of the organization.\nOne client of the Distribution-X customer have at least one corresponding agency, but can have more (it depends on the needs, and for example can have 2 to distinguish between B2B and B2C rates).\nHow to check and create an agency To access the agencies you have three options:\n Access the agencies from the left side panel. Select the button for all agencies from the top bar. Search for the agency in the agency search box.  If you use one of the first 2 options you will see the list of all your configurated agencies.\nCreate a new agency From this page you will be able to create a new agency. Press the Create New Agency button and a modal will open. You will have to specify 2 fields:\n ID Agency: (Unique ID). Agency name.  Once this agency is created, it will be created by default as deactivated. To see the deactivated agencies in the table, you must select the Show unactive button and activate it when you consider.\nCheck agency rules and configuration To see the agency in more detail, and to be able to edit its business rules, you must press the rules button in the column that will take you to the specific configuration of the Agency. You have different rules configuration by agency:\n Config: Configuration settings. Selling: Selling Pricing rules. General: General stop sales. Specific: Specific stop sales.  "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/schema/mutation/",
	"title": "AlertsXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AlertsXMutation {  createAlert( input: AlertInput!, ): Alert    updateAlert( code: ID!, input: AlertUpdateInput!, ): Alert   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields createAlert(Alert): Mutation to create a new alert  updateAlert(Alert): Mutation to update an existing alert   "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/reservationmanagement/amendments/",
	"title": "Amendments",
	"tags": [],
	"description": "How to amend a booking",
	"content": " The amendment operations allow you to amend different aspects of a booking.\nThere are currently four amendment operations available:\n Amend Board: allows to amend the board of a booking. Amend Dates: allows to amend the checkin and/or the checkout of a booking. Amend Paxes: allows to amend the paxes of a booking. Amend Remarks: allows to add a special request (remark) on a booking.  Each amendment type must be performend in two steps:\n Query: simulates the amendment Mutation: commits the amendment\nBoth steps return the details of the amendment with the following information\n The booking detail with the amendment applied Amendment fees if applicable AmendmentID (only returned in the query response)   Advanced criteria You can perform the query (simulation) of the amendment:\n sending all the booking information (references, dates, hotel code) or sending the bookingID got in the booking flow  You can perform the mutation (commit) of the amendment sending the amendmentID received in the previous response.\nHow to amend Please, see the Schema through our API playground for your reference.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/bookingflow/avail/",
	"title": "Avail",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return all the available options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the supplier.\nRequest Format The availability request is very straight forward. It only requires destination, travel dates and the number of pax in each room.\nResponse Format Results are organized in this hierarchy=\n Hotel :  A list with all the hotels, including hotel name and code, mealplans list, etc. returned by the supplier.\n Mealplans :  A list of all MealPlans returned by the supplier, every mealplan and its code. Every mealplan also contains a list of options for this availability.\n Options :  A list with all the options returned for each mealplan, every option includes the total price, the conditions and room description.\nThe price returned should be \u0026ldquo;all inclusive\u0026rdquo;. All fares, taxes and discounts are included in the total price.\nObservations This method must be called before the Valuation method.\nOur system allows for a max 25000 milliseconds before the connection is closed.\nAvailRQ Example \u0026lt;AvailRQ\u0026gt; \u0026lt;CancellationPolicies\u0026gt;false\u0026lt;/CancellationPolicies\u0026gt; \u0026lt;RoomCancellationPolicies\u0026gt;false\u0026lt;/RoomCancellationPolicies\u0026gt; \u0026lt;DailyPrices\u0026gt;false\u0026lt;/DailyPrices\u0026gt; \u0026lt;DailyRatePlans\u0026gt;false\u0026lt;/DailyRatePlans\u0026gt; \u0026lt;OnRequest\u0026gt;false\u0026lt;/OnRequest\u0026gt; \u0026lt;BusinessRules\u0026gt;CheaperAmount\u0026lt;/BusinessRules\u0026gt; \u0026lt;AvailDestinations\u0026gt; list of destinations \u0026lt;Destination type = \u0026quot;CTY\u0026quot; code = \u0026quot;5\u0026quot;/\u0026gt; \u0026lt;Destination type = \u0026quot;CTY\u0026quot; code = \u0026quot;15\u0026quot;/\u0026gt; .... \u0026lt;/AvailDestinations\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2014\u0026lt;/EndDate\u0026gt; \u0026lt;Currency\u0026gt;EUR\u0026lt;/Currency\u0026gt; \u0026lt;Nationality\u0026gt;ES\u0026lt;/Nationality\u0026gt; \u0026lt;Markets\u0026gt; \u0026lt;Market\u0026gt;ES\u0026lt;/Market\u0026gt; \u0026lt;Market\u0026gt;EN\u0026lt;/Market\u0026gt; .... \u0026lt;/Markets\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;35\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;42\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;5\u0026quot; id = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; .... \u0026lt;/RoomCandidates\u0026gt; \u0026lt;/AvailRQ\u0026gt;  AvailRQ Description    Element Number Type Description     AvailRQ 1  Root node.   CancellationPolicies 1 Boolean Indicates if you want to receive the cancellation policies in AvailRS, as long as the supplier returns it in this method (see MetaData] in order to verify if a supplier implements it).   RoomCancellationPolicies 1 Boolean Indicates if you want to receive the cancellation policies at room level in AvailRS, as long as the supplier returns it in this method (see Metadata method in order to verify if a supplier implements it).   DailyPrices 0..1 Boolean Indicates if you want to receive the daily prices at room level in AvailRS, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   DailyRatePlans 0..1 Boolean Indicates if you want to receive the daily rate plans at room level in AvailRS, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   OnRequest 1 Boolean Indicates if you want to receive the onrequest options in AvailRS, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   BusinessRules 1  Indicates the business rules the client wants to apply in availability, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   AvailDestinations/Destination 1..n  Contains the list of destinations filters (hotels or cities or zones or geocodes). The number of Destinations is defined in MetaData.   @type 1 String Destination type (HOT, CTY, ZON, GEO). Clarification: ZONs contains CTYs. ZONs are higher nodes and CTY are lower nodes. It is not possible to mix types of destinations in the same request.   @code 1 String Native destination code as returned by supplier in HotelList or AvailDestinationTree.   StartDate 1 String \u0026lsquo;Search from\u0026rsquo; date.   EndDate 1 String \u0026lsquo;Search til\u0026rsquo; date.   Currency 1 String Currency requested if supported by supplier.   Nationality 1 String Nationality of the guest (use ISO3166_1_alfa_2). This information is mandatory. (see MetaData in order to verify if a supplier implements it).   Markets 1  List of Market requested (see MetaData in order to verify if a supplier implements it).   Markets/Market 1..n String Targeted zone/ country/ Point of sale.   RoomCandidates/RoomCandidate 1..n  Room required.   @id 1 Integer Id of the requested room (starting at 1).   RoomCandidates/RoomCandidate /Paxes/Pax 1..n  Pax required.   @age 1 Integer Passenger age on the day of check-in.   @id 1 Integer Pax id (starts at 1).    AvailRS Example \u0026lt;AvailRS xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot; xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;Hotels\u0026gt; \u0026lt;Hotel code = \u0026quot;10\u0026quot; name = \u0026quot;LEO\u0026quot;\u0026gt; \u0026lt;MealPlans\u0026gt; \u0026lt;MealPlan code = \u0026quot;D\u0026quot;\u0026gt; \u0026lt;Options\u0026gt; \u0026lt;Option type = \u0026quot;Hotel\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4145\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;DBL#STAND\u0026quot; description = \u0026quot;Doble Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot; numberOfUnits = \u0026quot;5\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Fees\u0026gt; \u0026lt;Fee includedPriceOption = \u0026quot;true\u0026quot; description = \u0026quot;TaxAndServiceFee\u0026quot; mandatory = \u0026quot;true\u0026quot; refundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;8.11\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Code\u0026gt;SPE\u0026lt;/Code\u0026gt; \u0026lt;/Fee\u0026gt; \u0026lt;/Fees\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;24\u0026lt;/HoursBefore\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;20\u0026lt;/Penalty\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;Beds sharedBed = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Bed numberOfBeds = \u0026quot;1\u0026quot; type = \u0026quot;Doble\u0026quot;/\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;Features\u0026gt; \u0026lt;Feature code = \u0026quot;Double with spa\u0026quot;/\u0026gt; \u0026lt;/Features\u0026gt; \u0026lt;DailyPrices\u0026gt; \u0026lt;DailyPrice effectiveDate = \u0026quot;28/01/2014\u0026quot; expireDate = \u0026quot;29/01/2014\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/DailyPrice\u0026gt; \u0026lt;/DailyPrices\u0026gt; \u0026lt;DailyRatePlans\u0026gt; \u0026lt;DailyRatePlan effectiveDate = \u0026quot;28/01/2014\u0026quot; expireDate = \u0026quot;29/01/2014\u0026quot; code = \u0026quot;XAD\u0026quot; name = \u0026quot;Flexy Rate Only Adults\u0026quot;/\u0026gt; \u0026lt;/DailyRatePlans\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Offers\u0026gt; \u0026lt;Offer code = \u0026quot;EBI\u0026quot; name = \u0026quot;Early booking\u0026quot;/\u0026gt; \u0026lt;/Offers\u0026gt; \u0026lt;Fees\u0026gt; \u0026lt;Fee includedPriceOption = \u0026quot;true\u0026quot; description = \u0026quot;TaxAndServiceFee\u0026quot; mandatory = \u0026quot;true\u0026quot; refundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;8.11\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Code\u0026gt;SPE\u0026lt;/Code\u0026gt; \u0026lt;/Fee\u0026gt; \u0026lt;/Fees\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;/Options\u0026gt; \u0026lt;/MealPlan\u0026gt; \u0026lt;MealPlan code = \u0026quot;M\u0026quot;\u0026gt; \u0026lt;Options\u0026gt; \u0026lt;Option type = \u0026quot;Hotel\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4146\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;TWN#STAND\u0026quot; description = \u0026quot;Twin Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot; numberOfUnits = \u0026quot;5\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;42.90\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Offers\u0026gt; \u0026lt;Offer code = \u0026quot;EBI\u0026quot; name = \u0026quot;Early booking\u0026quot;/\u0026gt; \u0026lt;/Offers\u0026gt; \u0026lt;Beds sharedBed = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Bed numberOfBeds = \u0026quot;2\u0026quot; type = \u0026quot;Twin\u0026quot;/\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;DailyPrices\u0026gt; \u0026lt;DailyPrice effectiveDate = \u0026quot;28/01/2014\u0026quot; expireDate = \u0026quot;29/01/2014\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;42.90\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/DailyPrice\u0026gt; \u0026lt;/DailyPrices\u0026gt; \u0026lt;DailyRatePlans\u0026gt; \u0026lt;DailyRatePlan effectiveDate = \u0026quot;28/01/2014\u0026quot; expireDate = \u0026quot;29/01/2014\u0026quot; code = \u0026quot;XAT\u0026quot; name = \u0026quot;Flexy Rate\u0026quot;/\u0026gt; \u0026lt;/DailyRatePlans\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;42.90\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;/Options\u0026gt; ... \u0026lt;/MealPlan\u0026gt; \u0026lt;MealPlan code = \u0026quot;MP\u0026quot;\u0026gt; \u0026lt;Options\u0026gt; \u0026lt;Option type = \u0026quot;HotelSkiPass\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4145\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;DBL#STAND\u0026quot; description = \u0026quot;Doble Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Detail\u0026gt; \u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;Range\u0026quot; quantity = \u0026quot;0\u0026quot; unit = \u0026quot;Day\u0026quot;\u0026gt; \u0026lt;RangeDates startDate = \u0026quot;28/01/2014\u0026quot; endDate = \u0026quot;29/01/2014\u0026quot;/\u0026gt; \u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt; \u0026lt;/Detail\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;sesion\u0026quot; value = \u0026quot;888de014\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;Option type = \u0026quot;HotelSkiPass\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4145\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;DBL#STAND\u0026quot; description = \u0026quot;Doble Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Detail\u0026gt; \u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;Open\u0026quot; quantity = \u0026quot;5\u0026quot; unit = \u0026quot;Hour\u0026quot;\u0026gt;\u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt; \u0026lt;/Detail\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;sesion\u0026quot; value = \u0026quot;888de014\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;RateRules\u0026gt; \u0026lt;Rules\u0026gt; \u0026lt;Rule type = \u0026quot;NonRefundable\u0026quot;/\u0026gt; \u0026lt;Rule type = \u0026quot;Negotiated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Code = \u0026quot;BAR\u0026quot;\u0026gt; \u0026lt;Description\u0026gt;Bar descr\u0026lt;/Description\u0026gt; \u0026lt;Restrictions\u0026gt; \u0026lt;Restriction type = \u0026quot;Company\u0026quot; Code = \u0026quot;REP\u0026quot;\u0026gt;Repsol\u0026lt;/Restriction\u0026gt; \u0026lt;Restriction type = \u0026quot;Company\u0026quot; Code = \u0026quot;PEP\u0026quot;\u0026gt;Cedipsa\u0026lt;/Restriction\u0026gt; \u0026lt;/Restrictions\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;/Rule\u0026gt; \u0026lt;/Rules\u0026gt; \u0026lt;/RateRules\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;Option type = \u0026quot;HotelSkiPass\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4145\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;DBL#STAND\u0026quot; description = \u0026quot;Doble Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Detail\u0026gt; \u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;Open\u0026quot; quantity = \u0026quot;2\u0026quot; unit = \u0026quot;Day\u0026quot;\u0026gt;\u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt; \u0026lt;/Detail\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;sesion\u0026quot; value = \u0026quot;888de014\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;24\u0026lt;/HoursBefore\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;20\u0026lt;/Penalty\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;/Options\u0026gt; \u0026lt;/MealPlan\u0026gt; ... \u0026lt;/MealPlans\u0026gt; \u0026lt;/Hotel\u0026gt; ... \u0026lt;/Hotels\u0026gt; \u0026lt;/AvailRS\u0026gt;  AvailRS Description    Element Number Type Description     AvailRS/Hotels/Hotel 0..n  Root node.   @code 1 String Hotel code.   @name 0..1 String Hotel name.   MealPlans 1  Retrieves a list of available mealplans for this hotel.   MealPlans/ MealPlan 1..n  List of mealplan types.   @code 1 String MealPlan code.   MealPlans/ MealPlan/ Options/ 1  List of options   MealPlans/ MealPlan/ Options/ Option 1..n  Detail of option.   @type 1 String Indicates option type (only hotel, hotel with ski pass, hotel with entrance\u0026hellip;).   @paymentType 1 String Indicates payment type (See full type list at Lists of Data).   @status 1 String Status option (OK = available, RQ = on request).   MealPlans/ MealPlan/ Options/ Option/ Parameters/ 0..1  Additional parameters that must be reported on the ValuationRQ. Parameters, if this option is required.   MealPlans/ MealPlan/ Options/ Option/ Parameters/ Parameter 0..n  Additional parameter requiring integration.   @key 1 String Contains the keyword/Id to identify a parameter.   @value 1 String Contains parameter value.   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty 0..1  List of cancellation penalties. (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty/ HoursBefore 1 String Number of hours prior to arrival day in which this Cancellation policy applies.   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty 1..n  Contains the value to apply.   @type 1 String Type of penalty -possible values: \u0026ldquo;Noches\u0026rdquo; (nights), \u0026ldquo;Porcentaje\u0026rdquo; (percentage), \u0026ldquo;Importe\u0026rdquo; (price value).   @currency 1 String Currency code.   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty/ CalculatedDeadline 0..1 Boolean Indicate if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate -\u0026gt; true = has been calculated by XTG, false = bypass of supplier data without calculation.   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty/ Deadline 0..1 String Date on UTC Standard TimeZone in which this Cancellation policy applies (ISO 8601 e.g: 2016-07-01T05:00:00Z).   MealPlans/ MealPlan/ Options/ Option/ RateRules/ 0..1  Option rate rules.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ 1  Rules.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule 1..n  Rule.   @type 1 String Possible values: NonRefundable, Older55, Package, Negotiated, Custom.. See full list at Lists of Data.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Rates/ 0..1  Rates.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Rates/ Rate 1..n  Rate.   @code 0..1 String Contains the rate rule code.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Rates/ Rate/ Description 0..1 String Contains the rate rule description.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Restrictions/ 0..n  Restrictions for the rate rule.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Restrictions/ Restriction 1..n  Restriction for this rate rule.   @type 1 Enum This restriction affects: 1 -\u0026gt; Company, 2 -\u0026gt; Market, 3 -\u0026gt; Others.. See the list at Lists of Data.   @code 1 String Contains the restriction code.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ 1  Rooms in this option (room list).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room 1..n  Room details.   @id 1 String Room ID.   @roomCandidateRefId 1 Integer Room candidate ID.   @code 1 String Room code has to be unique to identify a specific room type. If the RoomList Method is implemented, you can find the description of the room type in the RoomList.   @description 0..1 String Room description. Mandatory if the supplier doesn\u0026rsquo;t allow RoomList Method. If the supplier implements RoomList Method, this field could be empty.   @nonRefundable 0..1 String Identifies if the room is refundable or not.   @numberOfUnits 0..1 Integer Number of rooms available with the same type (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Offers/ Offer 1..n  List of offers.   @code 1 String Contains the code to identify a offer.   @name 1 String Contains the name of the offer.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Beds/ 0..1  Detail of beds (see MetaData in order to verify if a supplier implements it).   @sharedBed 0..1 Boolean Specifies if the beds in the room are shared.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Beds/ Bed 0..n  Identifies types of beds.   @numberOfBeds 0..1 String Indicates number of beds in the room.   @type 0..1 String Indicates the type of bed.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Features/ 0..1  Features of this room (features list).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Features/ Feature 1..n  Detail of feature.   @code 1 String Feature code or text.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyPrices/ 0..1  Specifies daily price, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyPrices/ DailyPrice 1..n  Specifies the price for each day.   @effectiveDate 1 String Start date in which the price becomes effective.   @expireDate 1 String Expiry date of price.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyPrices/ DailyPrice/ Price 1  Day price.   @currency 1 String Currency code.   @amount 1 Decimal Day Amount.   @binding 1 Boolean Identifies if the price is binding (When true, the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission: -1 = not specified (information available in contract with the supplier), 0 = net price, X = % of the commission applied to the amount.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyRatePlans/ 0..1  Specifies the daily rate, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyRatePlans/ DailyRatePlan 1..n  Specifies the rates for each day.   @effectiveDate 1 String Start date in which the rate becomes effective.   @expireDate 1 String Expirty date of rate.   @code 1 String Indicates the supplier\u0026rsquo;s rate code. This code specifies the rate applied to those days.   @name 0 String Indicates the supplier\u0026rsquo;s rate name.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Price 1  Room price.   @currency 1 String Currency code.   @amount 1 Decimal Room Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission: -1 = not specified (information available in contract with the supplier), 0 = net price, X = % of the commission applied to the amount.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Fees/ 0..1  Contains a list of fees.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Fees/ Fee 1..n  Contains details of the fee.   @includedPriceOption 1 Boolean Indicates if the fee is included or not in the final price.   @description 1 String Remarks regarding fee.   @mandatory 1 Boolean If the fee is obligatory, depending on the includedPriceOption to know if it is paid at the time of booking or at the hotel. In case it is false, it could be a fee such as \u0026ldquo;cleaning\u0026rdquo; that the consumer could hire if he wanted.   @refundable 1 Boolean This field will serve to know if the rate to be paid is returned, for example when it is a deposit type that is returned once the stay ends.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Fees/ Fee/ Price 1  Contains details of price.   @currency 1 String Currency code.   @amount 1 Decimal Fee Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission: -1 = not specified (indicated in contract with supplier), 0 = net price, X = % of the commission applied to the amount.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Fees/ Fee/ Code 1 String Specifies the fee code in case it has one.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty 0..1  List of cancellation penalties. (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty/ HoursBefore 1 String Number of hours prior to arrival day in which this Cancellation policy applies.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty 1..n  Contains the value to apply.   @type 1 String Type of penalty -possible values: \u0026ldquo;Noches\u0026rdquo; (nights), \u0026ldquo;Porcentaje\u0026rdquo; (percentage), \u0026ldquo;Importe\u0026rdquo; (price value).   @currency 1 String Currency code.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty/ CalculatedDeadline 0..1 Boolean Indicate if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate -\u0026gt; true = has been calculated by XTG, false = bypass of supplier data without calculation.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty/ Deadline 0..1 String Date on UTC Standard TimeZone in which this Cancellation policy applies (ISO 8601 e.g: 2016-07-01T05:00:00Z).   MealPlans/ MealPlan/ Options/ Option/ Price 1  Option price ( it is the total price of option).   @currency 1 String Currency code.   @amount 1 Decimal Option Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission: -1 = not specified (information available in contract with the supplier), 0 = net price, X = % of the commission applied to the amount.   MealPlans/ MealPlan/ Options/ Option/ Detail 0..1  Detail of option (if the option is different from the type\u0026lt;\u0026gt; Hotel and see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ 1  Points of interest.   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ POI/ 1..n  Point of interest.   @code 1 String POI code.   @description 1 String POI description.   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ POI/ Services/ 1  Services containing this POI.   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ POI/ Services/ Service 1..n  Service detail.   @type 1 String Service type (SkiPass, Lessons, Meals, Equipment, Ticket, Transfers or Gala).   @code 1 String Service code.   @description 1 String Service description.   @durationType 1 String Date of service. If durationType = Range, then date range is set and the element \u0026ldquo;RangeDates\u0026rdquo; is returned. If durationType = Open, not restricted by date. Elements \u0026ldquo;quantity\u0026rdquo; and \u0026ldquo;unit\u0026rdquo; are returned to specify type and quantity.   @quantity 1 Integer Indicates the quantity of field in the element \u0026ldquo;unit\u0026rdquo;.   @unit 0..1 String Day or Hour.   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ POI/ Services/ Service/ RangeDates 0..1  Service date range (Only specified if durationType=Range).   @startDate 1 String Start date of service.   @endDate 1 String End date of service.   MealPlans/ MealPlan/ Options/ Option/ Remarks 0..1  List of remarks (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Remarks/ Remark 1..n  Remark.   MealPlans/ MealPlan/ Options/ Option/ Offers 0..1  The supplier returns in response which offer is applicable for each option (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Offers/ Offer 1..n  List of offers.   @code 1 String Contains the code to identify a offer.   @name 1 String Contains the name of the offer.   MealPlans/ MealPlan/ Options/ Option/ Fees/ 0..1  Contains a list of fees.   MealPlans/ MealPlan/ Options/ Option/ Fees/ Fee 1..n  Contains details of the fee.   @includedPriceOption 1 Boolean Indicates if the fee is included or not in the final price.   @description 1 String Remarks regarding fee.   @mandatory 1 Boolean If the fee is obligatory, depending on the includedPriceOption to know if it is paid at the time of booking or at the hotel. In case it is false, it could be a fee such as \u0026ldquo;cleaning\u0026rdquo; that the consumer could hire if he wanted.   @refundable 1 Boolean This field will serve to know if the rate to be paid is returned, for example when it is a deposit type that is returned once the stay ends.   MealPlans/ MealPlan/ Options/ Option/ Fees/ Fee/ Price 1  Contains details of price.   @currency 1 String Currency code.   @amount 1 Decimal Fee Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission: -1 = not specified (indicated in contract with supplier), 0 = net price, X = % of the commission applied to the amount.   MealPlans/ MealPlan/ Options/ Option/ Fees/ Fee/ Code 1 String Specifies the fee code in case it has one.    Detailed description AvailDestinations:\nAvailDestinations indicates what destinations will be requested to the supplier.\nHotel codes or other destination codes must be defined using information specified in MetaData.\nMaxNumberHotels, MaxNumberCities, MaxNumberZones and MaxNumberGeoCodes indicates how client should group avail requests to supplier.\nIt\u0026rsquo;s the client\u0026rsquo;s resposability to do performance tests in order to determine what\u0026rsquo;s the best strategy regarding group destinations in an Avail Request. This strategy may vary depending on execution time, response size or other client\u0026rsquo;s expectations.\nBusinessRules:\nBusinessRules uses optionsQuota, go to Common-Elements for more information.\nThis tag will only be used for suppliers availability responses returning a very large number of options, about 20.000+ in same response.\nCurrently, the client can configure the following BusinessRules:\n CheaperAmount:  The cheapest options is returned without exceeding the optionsQuota limit.\n RoomType:  The options are filtered using a limited combination of rooms types. First, we group same room types so you receive options with the same type/classificatory (For example: Standard-Standard-Standard-Standard, Junior-Junior-Junior-Junior\u0026hellip;). Then we combine the cheapest rooms with the remaining rooms, always checking for duplicates and without execeeding the optionsQuota limit.\nIf the client sets BusinessRules value, then these will be applied when number of options returned exceeds optionsQuota. If the client does not set any BusinessRules values, then the CheaperAmount BusinessRule is applied by default.\nPrice, binding price and commission:\nEvery option has a price and every price indicates the currency, amount, if it is binding and the commission.\n Binding:  If binding is set as true, then the client can\u0026rsquo;t sell the product for a lower price that the one set by the supplier. If it set as as false, the client can sell the product for a lower price.\n Commission:    Commission = 0: the price returned is net. Commission = -1: the supplier has not supplied the sale price nor the commission. This information is in the commercial contract with the supplier. Commission is greater than 0: X = % of the commission applied to the amount   Below are 4 possible scenarios:\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;200\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt;  We have no way of knowing if the price is PVP or net, given that the commission is not sent to us via XML. The commission is established by contract.\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;300\u0026quot; binding = \u0026quot;true\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt;  The price is PVP, the commission is not sent to us via XML. The commission is established by contract.\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;150\u0026quot; binding = \u0026quot;true/false\u0026quot; commission = \u0026quot;20\u0026quot;/\u0026gt;  The price is PVP with a commission of 20%. The binding in this case can be true or false.\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;100\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;0\u0026quot;/\u0026gt;  The price is net.\nCurrency:\nThe currency node indicates which currency you want to use in your request.\nThis field will be sent to the supplier provided that the the supplier allows for it in this method, otherwise it won\u0026rsquo;t be sent.\nIf the supplier allows for the field currency to be used, we can\u0026rsquo;t guarantee that the response will be returned in the currency you requested, as we always work with the native code of the supplier. For example if you requested EUR but the supplier only works with GBP, the supplier will return in GBP, and we will pass it on to you in GBP.\nPAX ages:\nThe range of what is considered an adult, infant or baby is particular to each supplier.\nWe don\u0026rsquo;t have a standardization of the paxs ages, we adapt to what the suppliers determine. For one supplier a child age might range from 1 to 15 years old, for others, a 13 years old is considered an adult. We will always use the supplier¬¥s definition. If the suppliers requires it, we will convert the age of a pax to a pax type (for example, convert a 30 year old pax to an adult ) or send directly the age of the pax. This depends on the supplier\u0026rsquo;s request.\nNote: Once the age as been established for each pax then it must not be modified in the remaining methods, like for example in valuation.\nImportant Information about PAX ages: The age of the passenger must coincide with the day of check-in at the hotel.\nCancellation policies:\nThe cancellation policies or penalties may be displayed in the response, as long as the parameter  is set as true in the request and that the supplier provides this information in the availability method.\nHoursBefore: cancellation fees applicable x number of hours before the check in date.\nDeadline: cancellation fees applies from the date displayed on the deadline, which is on UTC Standard. For more information about how TimeZones are handled please check our MetaData content.\n CalculatedDeadline: Specifies if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate according to ISO 8601     true: The deadline has been converted to UTC-0 by XTG.\n false: The supplier returns the deadline on UTC-0, so no calculation is needed.\n   Type:\nThere are three values that can be inside types:\n  Noches: Indicates the number of nights to be penalized.\n Porcentaje: Indicates the percentage to pay based on the option price.\n Importe: Indicates the exact amount payable.\n   On Request:\nThe on request option may be displayed in the response provided that the parameter  is set as true in the request. In case that the parameter  is set as false, the integration will filter this option in AvailRS only if the supplier provides us this information in the availability method.\nOffers:\nDepending on the supplier, the information concerning offers can be displayed at a room level or in the option level in AvailRS.\nStatus options:\nThe possible values in status in response are OK or RQ:\n\u0026lt;Option type = \u0026quot;Hotel\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt;  In the case the client doesn\u0026rsquo;t want to display the options in a status RQ, we can filter the options as long as the supplier specifies the status and the  tag is set in AvailRQ. In case the supplier doesn\u0026rsquo;t specify the status, the element AllowOnRequest in MetaData needs to be set as FALSE.\nPOI cases Examples:\nCase 1:\n\u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;Range\u0026quot; quantity = \u0026quot;0\u0026quot; unit = \u0026quot;Day\u0026quot;\u0026gt; \u0026lt;RangeDates startDate = \u0026quot;28/01/2014\u0026quot; endDate = \u0026quot;29/01/2014\u0026quot;/\u0026gt; \u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt;  Specifying the quantity is unnecessary as the start and end dates for the service have already been set.\nCase 2:\n\u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;open\u0026quot; quantity = \u0026quot;5\u0026quot; unit = \u0026quot;Hour\u0026quot;\u0026gt; \u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt;  In this case, quantity is applicable for the entire stay, i.e., the client can enjoy the skipass for 5 hours any day of the stay.\nCase 3:\n\u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;open\u0026quot; quantity = \u0026quot;2\u0026quot; unit = \u0026quot;Day\u0026quot;\u0026gt; \u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt;  In this case, quantity is applicable for the entire stay, i.e., the client can enjoy until 2 days of skipass in between the check in and check out.\nNote: Keep the parameters in the avail response to include them in the valuation request.\n\u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;sesion\u0026quot; value = \u0026quot;888de014\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt;  Fees:\nIf the supplier is returning fees, we need to know whether those have to be paid when the consumer gets to the hotel or beforehand. Keep in mind the type of payment for the option and that payment of the fees is MANDATORY:\n MerchantPay/CardBookingPay/CardCheckInPay: if includedPriceOption = True the amount of the fee is already included in the price and is paid at the time of booking. If, however, includedPriceOption = False, said fee have to be paid in the hotel.\n LaterPay: In both cases if includedPriceOption = True/False, the amount of the fee has to be paid in the hotel, as the type of payment is LaterPay. The difference is that if includedPriceOption = False the client would have to sum the amount on their end. This is done if the supplier does not include it. This way, the client can show the fee on their web separated from the option price, and it‚Äôs now the client‚Äôs own decision how they should treat it.\n  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/booking-flow-methods/avail/",
	"title": "Avail",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return all the available options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the supplier.\nRequest Format The availability request is very straight forward. It only requires destination, travel dates and the number of pax in each room.\nResponse Format Results are organized in this hierarchy=\n Hotel :  A list with all the hotels, including hotel name and code, mealplans list, etc. returned by the supplier.\n Mealplans :  A list of all MealPlans returned by the supplier, every mealplan and its code. Every mealplan also contains a list of options for this availability.\n Options :  A list with all the options returned for each mealplan, every option includes the total price, the conditions and room description.\nThe price returned should be \u0026ldquo;all inclusive\u0026rdquo;. All fares, taxes and discounts are included in the total price.\nObservations This method must be called before the Valuation method.\nOur system allows for a max 25000 milliseconds before the connection is closed.\nAvailRQ Example In the request for this call it is necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the information in the section \u0026lsquo;Common elements\u0026rsquo;.\n\u0026lt;AvailRQ\u0026gt; \u0026lt;CancellationPolicies\u0026gt;false\u0026lt;/CancellationPolicies\u0026gt; \u0026lt;RoomCancellationPolicies\u0026gt;false\u0026lt;/RoomCancellationPolicies\u0026gt; \u0026lt;DailyPrices\u0026gt;false\u0026lt;/DailyPrices\u0026gt; \u0026lt;DailyRatePlans\u0026gt;false\u0026lt;/DailyRatePlans\u0026gt; \u0026lt;OnRequest\u0026gt;false\u0026lt;/OnRequest\u0026gt; \u0026lt;BusinessRules\u0026gt;CheaperAmount\u0026lt;/BusinessRules\u0026gt; \u0026lt;AvailDestinations\u0026gt; list of destinations \u0026lt;Destination type = \u0026quot;CTY\u0026quot; code = \u0026quot;5\u0026quot;/\u0026gt; \u0026lt;Destination type = \u0026quot;CTY\u0026quot; code = \u0026quot;15\u0026quot;/\u0026gt; .... \u0026lt;/AvailDestinations\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2014\u0026lt;/EndDate\u0026gt; \u0026lt;Currency\u0026gt;EUR\u0026lt;/Currency\u0026gt; \u0026lt;Nationality\u0026gt;ES\u0026lt;/Nationality\u0026gt; \u0026lt;Markets\u0026gt; \u0026lt;Market\u0026gt;ES\u0026lt;/Market\u0026gt; \u0026lt;Market\u0026gt;EN\u0026lt;/Market\u0026gt; .... \u0026lt;/Markets\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;35\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;42\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;5\u0026quot; id = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; .... \u0026lt;/RoomCandidates\u0026gt; \u0026lt;/AvailRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nAvailRQ Description    Element Number Type Description     AvailRQ 1  Root node.   CancellationPolicies 1 Boolean Indicates if you want to receive the cancellation policies in AvailRS, as long as the supplier returns it in this method (see MetaData] in order to verify if a supplier implements it).   RoomCancellationPolicies 1 Boolean Indicates if you want to receive the cancellation policies at room level in AvailRS, as long as the supplier returns it in this method (see Metadata method in order to verify if a supplier implements it).   DailyPrices 0..1 Boolean Indicates if you want to receive the daily prices at room level in AvailRS, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   DailyRatePlans 0..1 Boolean Indicates if you want to receive the daily rate plans at room level in AvailRS, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   OnRequest 1 Boolean Indicates if you want to receive the onrequest options in AvailRS, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   BusinessRules 1  Indicates the business rules the client wants to apply in availability, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   AvailDestinations/Destination 1..n  Contains the list of destinations filters (hotels or cities or zones or geocodes). The number of Destinations is defined in MetaData.   @type 1 String Destination type (HOT, CTY, ZON, GEO). Clarification: ZONs contains CTYs. ZONs are higher nodes and CTY are lower nodes. It is not possible to mix types of destinations in the same request.   @code 1 String Native destination code as returned by supplier in HotelList or AvailDestinationTree.   StartDate 1 String \u0026lsquo;Search from\u0026rsquo; date. Format dd/MM/yyyy   EndDate 1 String \u0026lsquo;Search til\u0026rsquo; date. Format dd/MM/yyyy   Currency 1 String Currency requested if supported by supplier.   Nationality 1 String Nationality of the guest (use ISO3166_1_alfa_2). This information is mandatory. (see MetaData in order to verify if a supplier implements it).   Markets 1  List of Market requested (see MetaData in order to verify if a supplier implements it).   Markets/ Market 1..n String Targeted zone/ country/ Point of sale.   RoomCandidates/ RoomCandidate 1..n  Room required.   @id 1 Integer Id of the requested room (starting at 1).   RoomCandidates/ RoomCandidate/ Paxes/ Pax 1..n  Pax required.   @age 1 Integer Passenger age on the day of check-in.   @id 1 Integer Pax id (starts at 1).    AvailRS Example \u0026lt;AvailRS xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot; xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;Hotels\u0026gt; \u0026lt;Hotel code = \u0026quot;10\u0026quot; name = \u0026quot;LEO\u0026quot;\u0026gt; \u0026lt;MealPlans\u0026gt; \u0026lt;MealPlan code = \u0026quot;D\u0026quot;\u0026gt; \u0026lt;Options\u0026gt; \u0026lt;Option type = \u0026quot;Hotel\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4145\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;DBL#STAND\u0026quot; description = \u0026quot;Doble Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot; numberOfUnits = \u0026quot;5\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Fees\u0026gt; \u0026lt;Fee includedPriceOption = \u0026quot;true\u0026quot; description = \u0026quot;TaxAndServiceFee\u0026quot; mandatory = \u0026quot;true\u0026quot; refundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;8.11\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Code\u0026gt;SPE\u0026lt;/Code\u0026gt; \u0026lt;/Fee\u0026gt; \u0026lt;/Fees\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;24\u0026lt;/HoursBefore\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;20\u0026lt;/Penalty\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;Beds sharedBed = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Bed numberOfBeds = \u0026quot;1\u0026quot; type = \u0026quot;Doble\u0026quot;/\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;Features\u0026gt; \u0026lt;Feature code = \u0026quot;Double with spa\u0026quot;/\u0026gt; \u0026lt;/Features\u0026gt; \u0026lt;DailyPrices\u0026gt; \u0026lt;DailyPrice effectiveDate = \u0026quot;28/01/2014\u0026quot; expireDate = \u0026quot;29/01/2014\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/DailyPrice\u0026gt; \u0026lt;/DailyPrices\u0026gt; \u0026lt;DailyRatePlans\u0026gt; \u0026lt;DailyRatePlan effectiveDate = \u0026quot;28/01/2014\u0026quot; expireDate = \u0026quot;29/01/2014\u0026quot; code = \u0026quot;XAD\u0026quot; name = \u0026quot;Flexy Rate Only Adults\u0026quot;/\u0026gt; \u0026lt;/DailyRatePlans\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Offers\u0026gt; \u0026lt;Offer code = \u0026quot;EBI\u0026quot; name = \u0026quot;Early booking\u0026quot;/\u0026gt; \u0026lt;/Offers\u0026gt; \u0026lt;Fees\u0026gt; \u0026lt;Fee includedPriceOption = \u0026quot;true\u0026quot; description = \u0026quot;TaxAndServiceFee\u0026quot; mandatory = \u0026quot;true\u0026quot; refundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;8.11\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Code\u0026gt;SPE\u0026lt;/Code\u0026gt; \u0026lt;/Fee\u0026gt; \u0026lt;/Fees\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;/Options\u0026gt; \u0026lt;/MealPlan\u0026gt; \u0026lt;MealPlan code = \u0026quot;M\u0026quot;\u0026gt; \u0026lt;Options\u0026gt; \u0026lt;Option type = \u0026quot;Hotel\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4146\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;TWN#STAND\u0026quot; description = \u0026quot;Twin Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot; numberOfUnits = \u0026quot;5\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;42.90\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Offers\u0026gt; \u0026lt;Offer code = \u0026quot;EBI\u0026quot; name = \u0026quot;Early booking\u0026quot;/\u0026gt; \u0026lt;/Offers\u0026gt; \u0026lt;Beds sharedBed = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Bed numberOfBeds = \u0026quot;2\u0026quot; type = \u0026quot;Twin\u0026quot;/\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;DailyPrices\u0026gt; \u0026lt;DailyPrice effectiveDate = \u0026quot;28/01/2014\u0026quot; expireDate = \u0026quot;29/01/2014\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;42.90\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/DailyPrice\u0026gt; \u0026lt;/DailyPrices\u0026gt; \u0026lt;DailyRatePlans\u0026gt; \u0026lt;DailyRatePlan effectiveDate = \u0026quot;28/01/2014\u0026quot; expireDate = \u0026quot;29/01/2014\u0026quot; code = \u0026quot;XAT\u0026quot; name = \u0026quot;Flexy Rate\u0026quot;/\u0026gt; \u0026lt;/DailyRatePlans\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;42.90\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;/Options\u0026gt; ... \u0026lt;/MealPlan\u0026gt; \u0026lt;MealPlan code = \u0026quot;MP\u0026quot;\u0026gt; \u0026lt;Options\u0026gt; \u0026lt;Option type = \u0026quot;HotelSkiPass\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4145\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;DBL#STAND\u0026quot; description = \u0026quot;Doble Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Detail\u0026gt; \u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;Range\u0026quot; quantity = \u0026quot;0\u0026quot; unit = \u0026quot;Day\u0026quot;\u0026gt; \u0026lt;RangeDates startDate = \u0026quot;28/01/2014\u0026quot; endDate = \u0026quot;29/01/2014\u0026quot;/\u0026gt; \u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt; \u0026lt;/Detail\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;sesion\u0026quot; value = \u0026quot;888de014\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;Option type = \u0026quot;HotelSkiPass\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4145\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;DBL#STAND\u0026quot; description = \u0026quot;Doble Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Detail\u0026gt; \u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;Open\u0026quot; quantity = \u0026quot;5\u0026quot; unit = \u0026quot;Hour\u0026quot;\u0026gt;\u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt; \u0026lt;/Detail\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;sesion\u0026quot; value = \u0026quot;888de014\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;RateRules\u0026gt; \u0026lt;Rules\u0026gt; \u0026lt;Rule type = \u0026quot;NonRefundable\u0026quot;/\u0026gt; \u0026lt;Rule type = \u0026quot;Custom\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Code = \u0026quot;BAR\u0026quot;\u0026gt; \u0026lt;Description\u0026gt;Bar descr\u0026lt;/Description\u0026gt; \u0026lt;Restrictions\u0026gt; \u0026lt;Restriction type = \u0026quot;Company\u0026quot; Code = \u0026quot;REP\u0026quot;\u0026gt;Repsol\u0026lt;/Restriction\u0026gt; \u0026lt;Restriction type = \u0026quot;Company\u0026quot; Code = \u0026quot;PEP\u0026quot;\u0026gt;Cedipsa\u0026lt;/Restriction\u0026gt; \u0026lt;/Restrictions\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;/Rule\u0026gt; \u0026lt;/Rules\u0026gt; \u0026lt;/RateRules\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;Option type = \u0026quot;HotelSkiPass\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4145\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;DBL#STAND\u0026quot; description = \u0026quot;Doble Standard\u0026quot; nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;Detail\u0026gt; \u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;Open\u0026quot; quantity = \u0026quot;2\u0026quot; unit = \u0026quot;Day\u0026quot;\u0026gt;\u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt; \u0026lt;/Detail\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;636.80\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;sesion\u0026quot; value = \u0026quot;888de014\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;24\u0026lt;/HoursBefore\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;20\u0026lt;/Penalty\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/Option\u0026gt; \u0026lt;/Options\u0026gt; \u0026lt;/MealPlan\u0026gt; ... \u0026lt;/MealPlans\u0026gt; \u0026lt;/Hotel\u0026gt; ... \u0026lt;/Hotels\u0026gt; \u0026lt;/AvailRS\u0026gt;  AvailRS Description    Element Number Type Description     AvailRS/Hotels/Hotel 0..n  Root node.   @code 1 String Hotel code.   @name 0..1 String Hotel name.   MealPlans/ 1  Retrieves a list of available mealplans for this hotel.   MealPlans/ MealPlan/ 1..n  List of mealplan types.   @code 1 String MealPlan code.   MealPlans/ MealPlan/ Options/ 1  List of options   MealPlans/ MealPlan/ Options/ Option 1..n  Detail of option.   @type 1 String Indicates option type Lists of Data.   @paymentType 1 String Indicates payment type (See full type list at Lists of Data).   @status 1 String Status option (OK = available, RQ = on request).   MealPlans/ MealPlan/ Options/ Option/ Parameters/ 0..1  Additional parameters that must be reported on the ValuationRQ. Parameters, if this option is required.   MealPlans/ MealPlan/ Options/ Option/ Parameters/ Parameter 0..n  Additional parameter requiring integration.   @key 1 String Contains the keyword/Id to identify a parameter.   @value 1 String Contains parameter value.   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ 1  Cancellation policy details. (see MetaData in order to verify if a supplier implements it).   @nonRefundable 1 Boolean Indicate if this option is nonRefundable (true or false).   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty/ 0..n  Listing cancellation penalties.   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty/ HoursBefore 1 String Number of hours prior to checkin date in which this Cancellation policy applies.   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty/ Deadline 1 String Date on UTC Standard TimeZone in which this Cancellation policy applies (ISO 8601 e.g: 2016-07-01T05:00:00Z).   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty/ CalculatedDeadline 1 Boolean Indicate if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate -\u0026gt; true = has been calculated by XTG / false = bypass of supplier data without calculation.   MealPlans/ MealPlan/ Options/ Option/ CancelPenalties/ CancelPenalty/ Penalty 1  Contains the value to apply.   @type 1 String Type of possible penalty values: \u0026ldquo;Noches\u0026rdquo; (nights) , \u0026ldquo;Porcentaje\u0026rdquo; (percentage) , \u0026ldquo;Importe\u0026rdquo; (price value).   @currency 1 String Currency code.   @paymentType 1 String Indicates payment type of penalty (See full type list at Lists of Data).   MealPlans/ MealPlan/ Options/ Option/ RateRules/ 0..1  Option rate rules.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ 1  Rules.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule 1..n  Rule.   @type 1 String Possible values: NonRefundable, Older55, Package, Custom.. See full list at Lists of Data.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Rates/ 0..1  Rates.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Rates/ Rate 1..n  Rate.   @code 0..1 String Contains the rate rule code.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Rates/ Rate/ Description 0..1 String Contains the rate rule description.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Restrictions/ 0..n  Restrictions for the rate rule.   MealPlans/ MealPlan/ Options/ Option/ RateRules/ Rules/ Rule/ Restrictions/ Restriction 1..n  Restriction for this rate rule.   @type 1 Enum This restriction affects: 1 -\u0026gt; Company, 2 -\u0026gt; Market, 3 -\u0026gt; Others.. See the list at Lists of Data.   @code 1 String Contains the restriction code.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ 1  Rooms in this option (room list).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room 1..n  Room details.   @id 1 String Room ID.   @roomCandidateRefId 1 Integer Room candidate ID.   @code 1 String Room code has to be unique to identify a specific room type. If the RoomList Method is implemented, you can find the description of the room type in the RoomList.   @description 0..1 String Room description. Mandatory if the supplier doesn\u0026rsquo;t allow RoomList Method. If the supplier implements RoomList Method, this field could be empty.   @nonRefundable 0..1 String Identifies if the room is refundable or not.   @numberOfUnits 0..1 Integer Number of rooms available with the same type (see MetaData).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Offers/ 0..1  The supplier returns in response which offer is applicable for each room (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Offers/ Offer 1..n  List of offers.   @code 1 String Contains the code to identify a offer.   @name 1 String Contains the name of the offer.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Beds/ 0..1  Detail of beds (see MetaData in order to verify if a supplier implements it).   @sharedBed 0..1 Boolean Specifies if the beds in the room are shared.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Beds/ Bed 0..n  Identifies types of beds.   @numberOfBeds 0..1 String Indicates number of beds in the room.   @type 0..1 String Indicates the type of bed.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Features/ 0..1  Features of this room (features list).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Features/ Feature 1..n  Detail of feature.   @code 1 String Feature code or text.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyPrices/ 0..1  Specifies daily price, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyPrices/ DailyPrice/ 1..n  Specifies the price for each day.   @effectiveDate 1 String Start date in which the price becomes effective. Format dd/MM/yyyy   @expireDate 1 String Expiry date of price. Format dd/MM/yyyy   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyPrices/ DailyPrice/ Price 1  Day price.   @currency 1 String Currency code.   @amount 1 Decimal Day Amount.   @binding 1 Boolean Identifies if the price is binding (When true, the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission: -1 = not specified (information available in contract with the supplier), 0 = net price, X = % of the commission applied to the amount.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyRatePlans/ 0..1  Specifies the daily rate, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ DailyRatePlans/ DailyRatePlan 1..n  Specifies the rates for each day.   @effectiveDate 1 String Start date in which the rate becomes effective. Format dd/MM/yyyy   @expireDate 1 String Expirty date of rate. Format dd/MM/yyyy   @code 1 String Indicates the supplier\u0026rsquo;s rate code. This code specifies the rate applied to those days.   @name 0 String Indicates the supplier\u0026rsquo;s rate name.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Price 1  Room price.   @currency 1 String Currency code.   @amount 1 Decimal Room Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission: -1 = not specified (information available in contract with the supplier), 0 = net price, X = % of the commission applied to the amount.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Fees/ 0..1  Contains a list of fees.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Fees/ Fee 1..n  Contains details of the fee.   @includedPriceOption 1 Boolean Indicates if the fee is included or not in the final price.   @description 1 String Remarks regarding fee.   @mandatory 1 Boolean If the fee is obligatory, depending on the includedPriceOption to know if it is paid at the time of booking or at the hotel. In case it is false, it could be a fee such as \u0026ldquo;cleaning\u0026rdquo; that the consumer could hire if he wanted.   @refundable 1 Boolean This field will serve to know if the rate to be paid is returned, for example when it is a deposit type that is returned once the stay ends.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Fees/ Fee/ Price 1  Contains details of price.   @currency 1 String Currency code.   @amount 1 Decimal Fee Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed)   @commission 1 Decimal Commission: -1 = not specified (indicated in contract with supplier), 0 = net price, X = % of the commission applied to the amount.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ Fees/ Fee/ Code 1 String Specifies the fee code in case it has one.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties 1  Cancellation policy details. (see MetaData in order to verify if a supplier implements it). Attention: When implementing policies at the room level, it is mandatory to add them at the option level. (If there is more than one room it is necessary to unify the policies to show them by option.   @nonRefundable 1 Boolean Indicate if this option is nonRefundable (true or false).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty/ 0..n  Listing cancellation penalties.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty/ HoursBefore 1 String Number of hours prior to checkin date in which this Cancellation policy applies.   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty/ Deadline 1 String Date on UTC Standard TimeZone in which this Cancellation policy applies (ISO 8601 e.g: 2016-07-01T05:00:00Z).   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty/ CalculatedDeadline 1 Boolean Indicate if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate -\u0026gt; true = has been calculated by XTG / false = bypass of supplier data without calculation   MealPlans/ MealPlan/ Options/ Option/ Rooms/ Room/ CancelPenalties/ CancelPenalty/ Penalty 1  Contains the value to apply.   @type 1 String Type of possible penalty values: \u0026ldquo;Noches\u0026rdquo; (nights) , \u0026ldquo;Porcentaje\u0026rdquo; (percentage) , \u0026ldquo;Importe\u0026rdquo; (price value).   @currency 1 String Currency code.   @paymentType 1 String Indicates payment type of penalty (See full type list at Lists of Data) .   MealPlans/ MealPlan/ Options/ Option/ Price 1  Option price (it is the total price of option).   @currency 1 String Currency code.   @amount 1 Decimal Option Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed)   @commission 1 Decimal Commission: -1 = not specified (information available in contract with the supplier), 0 = net price, X = % of the commission applied to the amount.   MealPlans/ MealPlan/ Options/ Option/ Detail 0..1  Detail of option (if the option is different from the type\u0026lt;\u0026gt; Hotel and see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ 1  Points of interest.   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ POI 1..n  Point of interest.   @code 1 String POI code.   @description 1 String POI description.   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ POI/ Services/ 1  Services containing this POI.   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ POI/ Services/ Service 1..n  Service detail.   @type 1 String Service type (SkiPass, Lessons, Meals, Equipment, Ticket, Transfers or Gala).   @code 1 String Service code.   @description 1 String Service description.   @durationType 1 String Date of service. If durationType = Range, then date range is set and the element \u0026ldquo;RangeDates\u0026rdquo; is returned. If durationType = Open, not restricted by date. Elements \u0026ldquo;quantity\u0026rdquo; and \u0026ldquo;unit\u0026rdquo; are returned to specify type and quantity.   @quantity 1 Integer Indicates the quantity of field in the element \u0026ldquo;unit\u0026rdquo;.   @unit 0..1 String Day or Hour.   MealPlans/ MealPlan/ Options/ Option/ Detail/ POIs/ POI/ Services/ Service/ RangeDates 0..1  Service date range (Only specified if durationType=Range).   @startDate 1 String Start date of service. Format dd/MM/yyyy   @endDate 1 String End date of service. Format dd/MM/yyyy   MealPlans/ MealPlan/ Options/ Option/ Remarks/ 0..1  List of remarks (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Remarks/Remark 1..n  Remark.   MealPlans/ MealPlan/ Options/ Option/ Offers/ 0..1  The supplier returns in response which offer is applicable for each option (see MetaData in order to verify if a supplier implements it).   MealPlans/ MealPlan/ Options/ Option/ Offers/ Offer 1..n  List of offers.   @code 1 String Contains the code to identify a offer.   @name 1 String Contains the name of the offer.   MealPlans/ MealPlan/ Options/ Option/ Fees/ 0..1  Contains a list of fees.   MealPlans/ MealPlan/ Options/ Option/ Fees/ Fee 1..n  Contains details of the fee.   @includedPriceOption 1 Boolean Indicates if the fee is included or not in the final price.   @description 1 String Remarks regarding fee.   @mandatory 1 Boolean If the fee is obligatory, depending on the includedPriceOption to know if it is paid at the time of booking or at the hotel. In case it is false, it could be a fee such as \u0026ldquo;cleaning\u0026rdquo; that the consumer could hire if he wanted.   @refundable 1 Boolean This field will serve to know if the rate to be paid is returned, for example when it is a deposit type that is returned once the stay ends.   MealPlans/ MealPlan/ Options/ Option/ Fees/ Fee/ Price 1  Contains details of price.   MealPlans/ MealPlan/ Options/ Option/ Fees/ Fee/ Code 1 String Specifies the fee code in case it has one.   @currency 1 String Currency code.   @amount 1 Decimal Fee Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed)   @commission 1 Decimal Commission: -1 = not specified (indicated in contract with supplier), 0 = net price, X = % of the commission applied to the amount.    Detailed description AvailDestinations:\nAvailDestinations indicates what destinations will be requested to the supplier.\nHotel codes or other destination codes must be defined using information specified in MetaData.\nMaxNumberHotels, MaxNumberCities, MaxNumberZones and MaxNumberGeoCodes indicates how client should group avail requests to supplier.\nIt\u0026rsquo;s the client\u0026rsquo;s resposability to do performance tests in order to determine what\u0026rsquo;s the best strategy regarding group destinations in an Avail Request. This strategy may vary depending on execution time, response size or other client\u0026rsquo;s expectations.\nBusinessRules:\nBusinessRules uses optionsQuota, go to Common-Elements for more information.\nThis tag will only be used for suppliers availability responses returning a very large number of options, about 20.000+ in same response.\nCurrently, the client can configure the following BusinessRules:\n CheaperAmount:  The cheapest options is returned without exceeding the optionsQuota limit.\n RoomType:  The options are filtered using a limited combination of rooms types. First, we group same room types so you receive options with the same type/classificatory (For example: Standard-Standard-Standard-Standard, Junior-Junior-Junior-Junior\u0026hellip;). Then we combine the cheapest rooms with the remaining rooms, always checking for duplicates and without execeeding the optionsQuota limit.\nIf the client sets BusinessRules value, then these will be applied when number of options returned exceeds optionsQuota. If the client does not set any BusinessRules values, then the CheaperAmount BusinessRule is applied by default.\nPrice, binding price and commission:\nEvery option has a price and every price indicates the currency, amount, if it is binding and the commission.\n Binding:  If binding is set as true, then the client can\u0026rsquo;t sell the product for a lower price then the one set by the supplier. If it set as as false, the client can sell the product for a lower price.\n Commission:    Commission = 0: the price returned is net. Commission = -1: the supplier has not supplied the sale price nor the commission. This information is in the commercial contract with the supplier. Commission is greater than 0: X = % of the commission applied to the amount   Below are 4 possible scenarios:\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;200\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt;  We have no way of knowing if the price is PVP or net, given that the commission is not sent to us via XML. The commission is established by contract.\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;300\u0026quot; binding = \u0026quot;true\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt;  The price is PVP, the commission is not sent to us via XML. The commission is established by contract.\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;150\u0026quot; binding = \u0026quot;true/false\u0026quot; commission = \u0026quot;20\u0026quot;/\u0026gt;  The price is PVP with a commission of 20%. The binding in this case can be true or false.\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;100\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;0\u0026quot;/\u0026gt;  The price is net.\nCurrency:\nThe currency node indicates which currency you want to use in your request.\nThis field will be sent to the supplier provided that the the supplier allows for it in this method, otherwise it won\u0026rsquo;t be sent.\nIf the supplier allows for the field currency to be used, we can\u0026rsquo;t guarantee that the response will be returned in the currency you requested, as we always work with the native code of the supplier. For example if you requested EUR but the supplier only works with GBP, the supplier will return in GBP, and we will pass it on to you in GBP.\nPAX ages:\nThe range of what is considered an adult, infant or baby is particular to each supplier.\nWe don\u0026rsquo;t have a standardization of the paxs ages, we adapt to what the suppliers determine. For one supplier a child age might range from 1 to 15 years old, for others, a 13 years old is considered an adult. We will always use the supplier¬¥s definition. If the suppliers requires it, we will convert the age of a pax to a pax type (for example, convert a 30 year old pax to an adult ) or send directly the age of the pax. This depends on the supplier\u0026rsquo;s request.\nNote: Once the age as been established for each pax then it must not be modified in the remaining methods, like for example in valuation.\nImportant Information about PAX ages: The age of the passenger must coincide with the day of check-in at the hotel.\nCancellation policies:\nThe cancellation policies or penalties may be displayed in the response, as long as the parameter CancellationPolicies o RoomCancellationPolicies is set as true in the request and that the supplier provides this information in the availability method. The treatment of cancellation policies is explained in the following link: CancelPenalty\nAttention: When cancellation policies are requested (CancellationPolicies,RoomCancellationPolicies) you should always return them at Option level (MealPlans/MealPlan/Options/Option/CancelPenalties/CancelPenalty). If CancellationPolicies is requested we should only receive them at option level, but if RoomCancellationPolicies is requested, we should receive them at option and room levels. Cancellation policies per room are complementary (extra information).\nHoursBefore: cancellation fees applicable x number of hours before the check in date.\nDeadline: cancellation fees applies from the date displayed on the deadline, which is on UTC Standard. For more information about how TimeZones are handled please check our MetaData content.\n CalculatedDeadline: Specifies if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate according to ISO 8601     true: The deadline has been converted to UTC-0 by XTG.\n false: The supplier returns the deadline on UTC-0, so no calculation is needed.\n   Type:\nThere are three values that can be inside types:\n  Noches: Indicates the number of nights to be penalized.\n Porcentaje: Indicates the percentage to pay based on the option price.\n Importe: Indicates the exact amount payable.\n   On Request:\nThe on request option may be displayed in the response provided that the parameter  is set as true in the request. In case that the parameter  is set as false, the integration will filter this option in AvailRS only if the supplier provides us this information in the availability method.\nOffers:\nDepending on the supplier, the information concerning offers can be displayed at a room level or in the option level in AvailRS.\nStatus options:\nThe possible values in status in response are OK or RQ:\n\u0026lt;Option type = \u0026quot;Hotel\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; status = \u0026quot;OK\u0026quot;\u0026gt;  In the case the client doesn\u0026rsquo;t want to display the options in a status RQ, we can filter the options as long as the supplier specifies the status and the  tag is set in AvailRQ. In case the supplier doesn\u0026rsquo;t specify the status, the element AllowOnRequest in MetaData needs to be set as FALSE.\nPOI cases Examples:\nCase 1:\n\u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;Range\u0026quot; quantity = \u0026quot;0\u0026quot; unit = \u0026quot;Day\u0026quot;\u0026gt; \u0026lt;RangeDates startDate = \u0026quot;28/01/2014\u0026quot; endDate = \u0026quot;29/01/2014\u0026quot;/\u0026gt; \u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt;  Specifying the quantity is unnecessary as the start and end dates for the service have already been set.\nCase 2:\n\u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;open\u0026quot; quantity = \u0026quot;5\u0026quot; unit = \u0026quot;Hour\u0026quot;\u0026gt; \u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt;  In this case, quantity is applicable for the entire stay, i.e., the client can enjoy the skipass for 5 hours any day of the stay.\nCase 3:\n\u0026lt;POIs\u0026gt; \u0026lt;POI code = \u0026quot;8A\u0026quot; Description = \u0026quot;Andorra\u0026quot;\u0026gt; \u0026lt;Services\u0026gt; \u0026lt;Service type = \u0026quot;SkiPass\u0026quot; code = \u0026quot;F1\u0026quot; description = \u0026quot;Forfait\u0026quot; durationType = \u0026quot;open\u0026quot; quantity = \u0026quot;2\u0026quot; unit = \u0026quot;Day\u0026quot;\u0026gt; \u0026lt;/Service\u0026gt; \u0026lt;/Services\u0026gt; \u0026lt;/POI\u0026gt; \u0026lt;/POIs\u0026gt;  In this case, quantity is applicable for the entire stay, i.e., the client can enjoy until 2 days of skipass in between the check in and check out.\nNote: Keep the parameters in the avail response to include them in the valuation request.\n\u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;sesion\u0026quot; value = \u0026quot;888de014\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt;  Fees:\nIf the supplier is returning fees, we need to know whether those have to be paid when the consumer gets to the hotel or beforehand. Keep in mind the type of payment for the option and that payment of the fees is MANDATORY:\n MerchantPay/CardBookingPay/CardChekInPay: if includedPriceOption = True the amount of the fee is already included in the price and is paid at the time of booking. If, however, includedPriceOption = False, said fee have to be paid in the hotel.\n LaterPay: In both cases if includedPriceOption = True/False, the amount of the fee has to be paid in the hotel, as the type of payment is LaterPay. The difference is that if includedPriceOption = False the client would have to sum the amount on their end. This is done if the supplier does not include it. This way, the client can show the fee on their web separated from the option price, and it‚Äôs now the client‚Äôs own decision how they should treat it.\n  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/black-list/",
	"title": "Blacklist",
	"tags": [],
	"description": "Hotel codes Blacklist: filter out specific hotels from the Search query",
	"content": " The Blacklist plugin is used to ignore hotel code(s) when a Search query is executed.\nWhat it does The Blacklist plugin will discard all the options in which the hotel code is blacklisted based on different files previosly uploaded in our system. This means that all the hotels on the blacklist won\u0026rsquo;t be requested to the supplier. You can apply also rules in order to block an entire supplier. More details regarding configuration below.\nHow to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nDefinitions  Client Token: Dynamic parameter you can send in the RQ in case you want to apply specific rules of the blacklist Client: The client of HotelX to make requests. Supplier: The supplier you want to apply the rule/s. You have to use the supplier code Access: The access code you want to apply the rule/s. Maybe you want to block hotels for an specific access Context: The context you send in the RQ. ContextSup: Every supplier has a context, it\u0026rsquo;s used to build mapping files or to specify it on the RQ. Context code is the one you receive with every activation delivery. You can also retrieve them by using our Admin query  Execution example In order to use the plugin, you shoud send the following json in the query variables\n\u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;blacklist\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;PRE_STEP\u0026quot; } } ]  To apply specific rule, you should add client token in our request\n\u0026quot;settings\u0026quot;: { \u0026quot;context\u0026quot;: null, \u0026quot;client\u0026quot;: \u0026quot;xtg\u0026quot;, \u0026quot;auditTransactions\u0026quot;: true, \u0026quot;testMode\u0026quot;: true, \u0026quot;clientTokens\u0026quot;: [ \u0026quot;testToken\u0026quot; ], \u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;blacklist\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;PRE_STEP\u0026quot; } } ] }  File format The file should be in the below format:\n Encoding: UTF-8 File Name: blacklist_access_hotels.csv Header Row: IdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values\n IdRule: Unique identifier of the rule.  Criteria rows: * ClientToken, NoClientToken: List of clienttoken separated by \u0026lsquo;;\u0026rsquo; * Client, NoClient: List of client codes separated by \u0026lsquo;;\u0026rsquo; * Supplier, NoSupplier: List of supplier codes separated by \u0026lsquo;;\u0026rsquo; * Access, NoAccess: List of access codes separated by \u0026lsquo;;\u0026rsquo; * Context, NoContext: List of operation context codes separated by \u0026lsquo;;\u0026rsquo;. These contexts are the client\u0026rsquo;s contexts.\n* ContextSup, NoContextSup: List of suppluer context codes separated by \u0026lsquo;;\u0026rsquo;\nValue row: * Values: values can be blacklist or whitelist with Hotel codes grouped by context. * blacklist: Filter all the hotels that are in the blacklist. * whitelist: All the hotels that are not in whitelist are filtered.\nThe values has the following format, and always double quoted:\n* only whitelist: \u0026ldquo;wl:(CTX1||A;B;C|@|CTX2||C;B;D;)\u0026rdquo; * only blacklist: \u0026ldquo;bl:(CTX1||A;B;C|@|CTX2||C;B;D;)\u0026rdquo; * blacklist and whitelist : \u0026ldquo;bl:(CTX1||A;B;C|@|CTX2||C;B;D),wl:(CTX3||all)\u0026ldquo;, if blacklist and whitelist are used at same time, then the CONTEXT must be exclusive. For example, the follow value is wrong \u0026ldquo;bl:(CTX1||A;B;C),wl:(CTX1||all)\u0026rdquo; because CTX1 is used at same time in blacklist and whitelist.\nthe values in the whitelist or blacklist are separated by the characters \u0026lsquo;|@|\u0026rsquo; . All values should have two blocks separated by the characters \u0026lsquo;||\u0026rsquo;. The first block identifies the context and the second block identifies the list of hotel codes separated by \u0026lsquo;;\u0026rsquo;, you can use all keyword when you want choose all context or all hotels\nYou should bear in mind that this file is a collection of rules and we chose in every Search the first rule that matches the criteria sent in the Query. You should specify the more restrictive rules on the top of the file. If there is no value for any rule criteria row, it means that any value in the request matches this row. It is important to indicate the contexts used in values on the rule criteria to improve rule matching.\n Delimiter: Comma (\u0026ldquo;,\u0026rdquo;)\n Directory: /F[folder code][unique code]/HotelX[unique code]/\n  Sample File Name: blacklist_access_hotels.csv\nSample Data:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r1,,,cli1;cli2,,,HOTELTEST;TESTPRV,,,,,,,\u0026quot;bl:(all||all)\u0026quot; r1,,,test_client,,,supplier_test,,,,,supplier_test_context,,\u0026quot;bl:(CTX1||A;B;C|@|CTX2||C;B;D;)\u0026quot; r2,,,,,,,,123;456,,,,,\u0026quot;wl:(CTX1||A;B;C|@|CTX2||C;B;D;)\u0026quot; r3,,,,,,HOTELTEST;TESTPRV,,,,,,,,\u0026quot;bl:(CTX1||A;B;C|@|CTX2||C;B;D),wl:(CTX3||all)\u0026quot;  Use case:\nIf we want to block all hotels of two accesses in the Blacklist, we should configure the file as specified below:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r2,,,,,,,123;456,,,,,,\u0026quot;bl:(all||all)\u0026quot; With this input hotel: [\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;] after executing the plugin, we obtain hotels: []  If we want to block all hotels of two suppliers in the blacklist, we should configure the file as specified below:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r3,,,,,HOTELTEST;TESTPRV,,,,,,,,\u0026quot;bl:(all||all)\u0026quot; With this input hotel: [\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;] after executing the plugin, we obtain hotels: []  If we want to block all hotels except \u0026ldquo;A\u0026rdquo; and \u0026ldquo;B\u0026rdquo; of two suppliers in the blacklist, we should configure the file as specified below:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r3,,,,,HOTELTEST;TESTPRV,,,,,,,,\u0026quot;wl:(all||A;B)\u0026quot; With this input hotel: [\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;] after executing the plugin, we obtain hotels: [\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;]  If we want block a hotel code using the supplier codes, we should configure the file as specified below:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r1,,,test_client,,supplier_test,,,,,,supplier_test_context,,\u0026quot;bl:(supplier_context||AB;CD;123)\u0026quot; With this input hotel: [\u0026quot;AB\u0026quot;,\u0026quot;CD\u0026quot;] after executing the plugin, we obtain hotels: [\u0026quot;123\u0026quot;]  If we want block all hotel codes from any supplier except some specified, we should configure the file as stated below:\nIdRule,ClientToken,NoClientToken,Client,NoClient,Supplier,NoSupplier,Access,NoAccess,Context,NoContext,ContextSup,NoContextSup,Values r3,,,,,,HOTELTEST;TESTPRV,,,,,,,bl:(\u0026quot;all||all\u0026quot;) With this input hotel: [\u0026quot;AB\u0026quot;,\u0026quot;CD\u0026quot;] after executing the plugin, we obtain hotels: [\u0026quot;123\u0026quot;]  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/bookingflow/",
	"title": "Booking Flow",
	"tags": [],
	"description": "How to perform a booking",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.\n --                                            1. SEARCH  2. QUOTE  3. BOOK                            OptionID  WHERE TO NEXT?   QuoteID  OptionID   ConfirmationID  QuoteID      \nIn the following steps you will find the three steps in order to perform the booking flow. You can also consult the Schema through our API playground besides to launch requests.\nNOTE: Remember that you can configure which fields you want to receive in the response, you just have to configure them on the correspondent graph query.\n Suggestions In order to help you during the booking process you can find several operations to get static data from the Sellers you\u0026rsquo;re connected to. You can find the info on our Content page.\n The operations   Search How to check availability\n     Quote How to valuate an availability option\n     Book How to perform a booking\n    "
},
{
	"uri": "https://travelgatex.com/flight-x/methods/bookingflow/",
	"title": "Booking Flow",
	"tags": [],
	"description": "How to book",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book an Offer in a Seller. At this moment, the Search transaction is the only operative for test pourposes. We will laungh the other transactions in future releases of our product.\nIn the following steps you will find the information about our current operating transactions. You can also consult the Schema through our API playground besides to launch requests.\nNOTE: Remember that you can configure which fields you want to receive on the response, you just have to configure them on the correspondent graph query.\n The operations   Search Learn about the Search method\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/how-to-guides/booking-flow/",
	"title": "Booking flow",
	"tags": [],
	"description": "",
	"content": "Booking flow\nA basic booking flow for buyers using TravelgateX system consists of 3 steps:\n Availability: It allows to check which rooms are available for the requested hotels or for the hotels in the requested destination for a given range of dates and for a given pax distribution. Valuation (or quote): It\u0026rsquo;s an operation used to assess and valuate the selected option rate before the actual booking. It returns the up-to-date price and cancellation policies for the option selected from the availability response. Reservation (or booking): The Book operation requests a reservation confirmation for option valuated.  To be able to do a booking through TravelgateX connectivities the 3 steps are mandatory.\nTravelgateX API also allows other requests such as Cancel, ReservationRead and ReservationList, but this methods are not mandatory for a connectivity.\nYou can find a brief definition of the methods to implement, and if they are mandatory for the connectivity or not, in our Data Structure page.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/reservationmanagement/cancel/",
	"title": "Cancel",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to cancel a booking\nRequest Format The request requires one or more of the following data, depending on the supplier:\n Locators: booking codes - this element contains two elements, Client (client\u0026rsquo;s booking code) and Provider (supplier\u0026rsquo;s booking code). One or both will be required depending on the supplier hotelCode: the hotel code StartDate: the check-in date EndDate: the check-out date  Response Format The result returns a response with the booking status, the cancellation\u0026rsquo;s ID and the fee for that cancellation.\nRemarks The maximum time permitted in our system before the connection is closed is 180000 milliseconds.\nCancelRQ Example \u0026lt;CancelRQ hotelCode=\u0026quot;H1548\u0026quot;\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;AFH123OP567\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;YYYYYYYY\u0026lt;/Provider\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;StartDate\u0026gt;15/10/2012\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;20/10/2015\u0026lt;/EndDate\u0026gt; \u0026lt;Holder title = \u0026quot;Miss\u0026quot; name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot;/\u0026gt; \u0026lt;/CancelRQ\u0026gt;  CancelRQ Description    Element Number Type Description     CancelRQ 1  Root node.   @hotelCode 1 String Hotel code.   Locators / 1  Locator Information (it\u0026rsquo;s mandatory to indicate either the client or supplier\u0026rsquo;s).   Locators /Client 0..1 String Client locator.   Locators /Provider 0..1 String Supplier locator.   StartDate 1 String Start date of booking.   EndDate 1 String End date of booking.   Holder 0..1  Holder of the booking.   @title 1 String Holder\u0026rsquo;s title. Possible values: Mr, Mrs, Miss, Ms.   @name 1  Holder\u0026rsquo;s name.   @surname 1  Holder\u0026rsquo;s surname.    CancelRS Example \u0026lt;CancelRS\u0026gt; \u0026lt;ProviderLocator\u0026gt;YYYYYYYY\u0026lt;/ProviderLocator\u0026gt; \u0026lt;CancelId\u0026gt;0000000\u0026lt;/CancelId\u0026gt; \u0026lt;TransactionStatus\u0026gt; \u0026lt;ComunicationStatus\u0026gt;OK\u0026lt;/ComunicationStatus\u0026gt; \u0026lt;RSStatus\u0026gt;EXISTE\u0026lt;/RSStatus\u0026gt; \u0026lt;ResStatus\u0026gt;CN\u0026lt;/ResStatus\u0026gt; \u0026lt;/TransactionStatus\u0026gt; \u0026lt;Price currency=\u0026quot;EUR\u0026quot; amount=\u0026quot;120.5\u0026quot; binding=\u0026quot;false\u0026quot; commission=\u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/CancelRS\u0026gt;  CancelRS Description    Element Number Type Description     CancelRS 1  Root node.   ProviderLocator 1 String Supplier locator.   CancelId 0..1 String Cancellation id.   Price 0..1  Fee for the cancellation. (see MetaData in order to verify if supplier informs of it).   @currency 1 String Currency code.   @amount 1 Decimal Amount.   @binding 1 Boolean Identifies if the price is binding (When it true the sale price returned must not be less than the price informed.   @commission 1 Decimal Commission (-1 = not specified - specified in the supplier contract, 0 = net price, X = % of the commission that applies to the amount).   TransactionStatus / 1  Transaction Status.   TransactionStatus /ComunicationStatus 1 String Status communication (OFFLINE, OK and KO).   TransactionStatus /RSStatus 1 String Status response: DESCONOCIDO - Unknown; EXISTE - Exists; EXISTECANCELADA - Cancelled; NO_EXISTE - Does not exist   TransactionStatus /ResStatus 1 String Status of the booking (OK = confirmed, RQ = on request, CN = cancelled, UN = unknown).    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/reservationmanagement/cancel/",
	"title": "Cancel",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to cancel a booking\nRequest Format The request requires one or more of the following data, depending on the supplier:\n Locators: booking codes - this element contains two elements, Client (client\u0026rsquo;s booking code) and Provider (supplier\u0026rsquo;s booking code). One or both will be required depending on the supplier hotelCode: the hotel code StartDate: the check-in date EndDate: the check-out date  Response Format The result returns a response with the booking status, the cancellation\u0026rsquo;s ID and the fee for that cancellation.\nRemarks The maximum time permitted in our system before the connection is closed is 180000 milliseconds.\nCancelRQ Example In the request for this call it is necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the information in the section \u0026lsquo;Common elements\u0026rsquo;.\n\u0026lt;CancelRQ hotelCode=\u0026quot;H1548\u0026quot;\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;AFH123OP567\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;YYYYYYYY\u0026lt;/Provider\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;StartDate\u0026gt;15/10/2012\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;20/10/2015\u0026lt;/EndDate\u0026gt; \u0026lt;Holder title = \u0026quot;Miss\u0026quot; name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot;/\u0026gt; \u0026lt;/CancelRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nCancelRQ Description    Element Number Type Description     CancelRQ 1  Root node.   @hotelCode 1 String Hotel code.   Locators / 1  Locator Information (it\u0026rsquo;s mandatory to indicate either the client or supplier\u0026rsquo;s).   Locators /Client 0..1 String Client locator.   Locators /Provider 0..1 String Supplier locator.   StartDate 1 String Start date of booking. Format dd/MM/yyyy   EndDate 1 String End date of booking. Format dd/MM/yyyy   Holder 0..1  Holder of the booking.   @title 1  Holder\u0026rsquo;s title.   @name 1  Holder\u0026rsquo;s name.   @surname 1  Holder\u0026rsquo;s surname.    CancelRS Example \u0026lt;CancelRS\u0026gt; \u0026lt;ProviderLocator\u0026gt;YYYYYYYY\u0026lt;/ProviderLocator\u0026gt; \u0026lt;CancelId\u0026gt;0000000\u0026lt;/CancelId\u0026gt; \u0026lt;TransactionStatus\u0026gt; \u0026lt;ComunicationStatus\u0026gt;OK\u0026lt;/ComunicationStatus\u0026gt; \u0026lt;RSStatus\u0026gt;EXISTE\u0026lt;/RSStatus\u0026gt; \u0026lt;ResStatus\u0026gt;CN\u0026lt;/ResStatus\u0026gt; \u0026lt;/TransactionStatus\u0026gt; \u0026lt;Price currency=\u0026quot;EUR\u0026quot; amount=\u0026quot;120.5\u0026quot; binding=\u0026quot;false\u0026quot; commission=\u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/CancelRS\u0026gt;  CancelRS Description    Element Number Type Description     CancelRS 1  Root node.   ProviderLocator 1 String Supplier locator.   CancelId 0..1 String Cancellation id.   Price 0..1  Fee for the cancellation. (see MetaData in order to verify if supplier informs of it).   @currency 1 String Currency code.   @amount 1 Decimal Amount.   @binding 1 Boolean Identifies if the price is binding (When it true the sale price returned must not be less than the price informed.   @commission 1 Decimal Commission (-1 = not specified - specified in the supplier contract, 0 = net price, X = % of the commission that applies to the amount).   TransactionStatus / 1  Transaction Status.   TransactionStatus /ComunicationStatus 1 String Status communication (OFFLINE, OK and KO).   TransactionStatus /RSStatus 1 String Status response: DESCONOCIDO - Unknown; EXISTE - Exists; EXISTECANCELADA - Cancelled; NO_EXISTE - Does not exist   TransactionStatus /ResStatus 1 String Status of the booking (OK = confirmed, RQ = on request, CN = cancelled, UN = unknown).    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/reservationmanagement/cancellation/",
	"title": "Cancellation",
	"tags": [],
	"description": "How to cancel a booking",
	"content": " Cancellation operation allows you to cancel a booking.\nNOTE: Cancellation always takes into account the day and time of the destination in order to calculate what cancellation policy should be applied. UTC time..  When the booking is cancelled, the details of the cancelled booking are returned with the following information:\n The booking status: CANCELLED\n Cancellation fees if applicable\n Hotel, rooms and rates of the cancelled booking\n Holder name\n  Advanced criteria There are two different types of cancellation:\n By reference By bookingID  How to cancel     8f7d0537b788553113ecfe0fd91308ce You can cancel bookings with the client reference or with the supplier reference. /8f7d0537b788553113ecfe0fd91308ce\n928a838ee2775104f8211a1283bfa646 Bear in mind that you will have to carry the bookingID received in the book response if you want to cancel with this query. /928a838ee2775104f8211a1283bfa646\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"8f7d0537b788553113ecfe0fd91308ce\",\"n\":\"By Reference\",\"o\":[\"graphiql\"],\"u\":\"xsolano\"},{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"928a838ee2775104f8211a1283bfa646\",\"n\":\"By BookingID\",\"o\":[\"graphiql\"],\"u\":\"xsolano\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/categorylist/",
	"title": "CategoryList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns a list of categories (codes and descriptions) used in HotelList and DescriptiveInfo.\nRequest Format The request does not require any elements empty request.\nResponse Format The result returns a list of Category .\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nCategoryListRQ Example \u0026lt;CategoryListRQ\u0026gt; \u0026lt;/CategoryListRQ\u0026gt;  CategoryListRQ Description    Element Number Type Description     CategoryListRQ 1  Root node.    CategoryListRS Example \u0026lt;CategoryListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Categories\u0026gt; \u0026lt;Category\u0026gt; \u0026lt;Code\u0026gt;3*\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;3 stars\u0026lt;/Name\u0026gt; \u0026lt;/Category\u0026gt; \u0026lt;Category\u0026gt; \u0026lt;Code\u0026gt;3L\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;3 keys\u0026lt;/Name\u0026gt; \u0026lt;/Category\u0026gt; ... \u0026lt;Category/\u0026gt; \u0026lt;/Categories\u0026gt; \u0026lt;/CategoryListRS\u0026gt;  CategoryListRS Description    Element Number Type Description     CategoryListRS /UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   CategoryListRS /Categories 1  Root node, list of categories.   Category / 1..n  Category.   Category /Code 1 String Code.   Category /Name 1 String Name.    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/getting-started/typical-scenario/",
	"title": "Channel Manager Typical Scenario",
	"tags": [],
	"description": "Typical Channel Manager workflow explained",
	"content": " Typical use case of message exchange flow between Channel Manager and Inventory can be resumed as: Synchronize Hotelier product:  Channel Managers retrieve static inventory (Hotel/Rate Plans/Rooms) from Inventory using HotelRatePlanInventoryRetrieve in order to map hotelier inventory into their system.\n Channel Managers Push/Notif Rate Plan information to Inventory using HotelRatePlanNotif in order to synchronize hotelier rates.\n Channel Managers Push/Notif Availability information to Inventory using HotelAvailNotif in order to synchronize hotelier availability/allotment.\n  Synchronize Bookings (Confirmations / Cancellations):  Inventory can Push/Notify reservations and cancellations to Channel Managers using HotelResNotif and CancelNotif.\n Channel Managers can retrieve reservations using HotelResRetrieve.\n Use both systems as described above.\n  Optionally, check if synchronization is correct:  Channel Managers are able to retrieve dynamic rates using HotelRatePlanRetrieve.\n Channel Managers are able to retrieve availability using HotelAvailRetrieve.\n  "
},
{
	"uri": "https://travelgatex.com/inventory-x/getting-started/typical-scenario/",
	"title": "Channel Manager Typical Scenario",
	"tags": [],
	"description": "Typical Channel Manager workflow explained",
	"content": " Typical use case of message exchange flow between Channel Manager and Inventory can be resumed as: Synchronize Hotelier product:  Channel Managers retrieve static inventory (Hotel/Rate Plans/Rooms) from Inventory using HotelRatePlanInventoryRetrieve in order to map hotelier inventory into their system.\n Channel Managers Push/Notif Rate Plan information to Inventory using HotelRatePlanNotif in order to synchronize hotelier rates.\n Channel Managers Push/Notif Availability information to Inventory using HotelAvailNotif in order to synchronize hotelier availability/allotment.\n  Synchronize Bookings (Confirmations / Cancellations):  Inventory can Push/Notify reservations and cancellations to Channel Managers using HotelResNotif and CancelNotif.\n Channel Managers can retrieve reservations using HotelResRetrieve.\n Use both systems as described above.\n  Optionally, check if synchronization is correct:  Channel Managers are able to retrieve dynamic rates using HotelRatePlanRetrieve.\n Channel Managers are able to retrieve availability using HotelAvailRetrieve.\n  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/channel-x/",
	"title": "Channel-X",
	"tags": [],
	"description": "Receive product from your connected Channel Managers",
	"content": "Channel-X is an aggregating tool that allows a third partner to receive the product of the different Channel Managers in an unique standardized API. The objective of this solution is to speed up the extraction and the combination of the product for the Buyer. In order for this to work, Buyers should develop the Channel-X integration to receive the inventory in their system and be able to dispatch all the information to their clients.\nTo know more details on how Channel-X works, visit the Overview section and the API reference, and check how easy is to receive all the inventory in order to reduce search traffic to an external system and create price calendars to your clients.\n  Overview ChannelX Information\n     API reference Channel-X API messages for buyers\n     FAQ Frequently asked questions\n     Release Notes Release Notes Channel-X API\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/channel-x/api-reference/codelists/",
	"title": "Code List",
	"tags": [],
	"description": "List of Channel-X codes",
	"content": " Error Codes    Error Code Error Description     -1 Validation error   1 POS credentials not found   2 HotelCode or RatePlanList not found   3 Rates not found   4 Incomplete Rate values   6 Incomplete AvailStatusMessage StatusApplicationControl Values   7 Incomplete AdditionalGuestAmount values   8 SellableProduct not found   9 Room not found in SellableProduct    Meal Plan Codes (OTA MPT)    Code Description     1 All inclusive   2 American   3 Bed \u0026amp; breakfast   4 Buffet breakfast   5 Caribbean breakfast   6 Continental breakfast   7 English breakfast   8 European plan   9 Family plan   10 Full board   11 Full breakfast   12 Half board/modified American plan   13 As brochured   14 Room only   15 Self catering   16 Bermuda   17 Dinner bed and breakfast plan   18 Family American   19 Breakfast   20 Modified   255 Full board And Drinks   256 Half board And Drinks   257 All inclusive Premium   258 Gala Dinner    Payment Type Codes    Payment Type Code Description     MerchantPayment The customer pays the client and the client will pay the provider.   DirectPayment The customer will have to use a credit card as guarantee for the hotel and the payment will be done by the customer at check-in.   BookingDatePayment The client will use a credit card with the exact amount of the option so he can pay the provider/hotel. The provider will charge the payment on the reservation day.   ArrivalDatePayment The client will use a credit card with the exact amount of the option so he can pay the provider/hotel. The provider will charge the payment on the checking day.    Credit Cards    Codes Names     VI Visa   AX American Express   BC BC Card   CA MasterCard   CB Carte Blanche   CU China Union Pay   DS Discover   DC Diners Club   T Carta Si   R Carte Bleue   N Dankort   L Delta   E Electron   JC Japan Credit Bureau   TO Maestro   S Switch   EC Electronic Cash   EU EuroCard   TP Universal air travel card   OP optima   ER Air Canada/RnRoute   XS access   O others     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/codelist/",
	"title": "Code List",
	"tags": [],
	"description": "List of Inventory Codes",
	"content": " List of Codes used in the Inventory-X API   Error Codes Set-up and Product load List of Error Codes in Set-up and Product load\n     Error Codes Booking Flow List of Error Codes in Booking Flow\n     Meal Plan Codes (OTA MPT) List of Meal Plan Codes\n     Payment Type Codes List of Payment Type Codes\n     Credit Cards Codes List of Credit Cards Codes\n    "
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/api-methods/code-list/",
	"title": "Code list",
	"tags": [],
	"description": "Code list and data description",
	"content": "   Error Codes List and description of error codes\n     Reservation Status Codes List and description of reservation status codes\n     Data Types Data Types format in Reservation API\n    "
},
{
	"uri": "https://travelgatex.com/distribution/getting-started/components/",
	"title": "Components",
	"tags": [],
	"description": "Distribution-X components and tools",
	"content": " Distribution-X is made up of the following elements. For more detail, please refer to the specific documentation for each component.\nSelling API This API provides different transactions that are part of the reservation flow and also includes transactions to obtain the static information. Therefore, it is the API that buyers / clients will use.\nThis is the API that contains the Core of Distribution-X: it is in charge of applying all the distribution rules, closing and cancelling reservations (and storing them) and also allows basic reservation queries.\nThis API is not directly accessible: a buyer/client must integrate with Hotel-X in order to have access. Reservation API This API provides advanced operations to be able to access the reservations store: it basically allows searches (based on different criteria) and also allows detailed information to be extracted from reservations.\nThis API is for the exclusive use of Distribution-X customers as it contains sensitive information about the sale and distribution. No buyer should have access. For this reason, the authentication system of this API is different from that of the Selling API.\nRules Management Extranet This extranet allows us to access the entire set of rules that Distribution-X can apply. From it you can add and modify pricing rules, blacklist, filters and modifiers. It will also be possible to activate and deactivate buyers / agencies / distribution channels, as well as make inquiries about the loaded master entities and the stored reservations.\nThis extranet is for the exclusive use of Distribution-X clients as it contains sensitive information about the sale and distribution and allows it to be modified for all buyers / agencies / distribution channels. No buyer should have access. FTP loads Main method of loading master entities into Distribution-X system. There is a complete documentation of how each load file that must be created. Please check Masters load.\nSome business rules can be also set and loaded using FTP loads. Please check Rules load.\n"
},
{
	"uri": "https://travelgatex.com/travelgatex/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand TravelgateX basic concepts",
	"content": "   Common resources Learn about common resources used in TravelgateX\n     Quotas \u0026amp; Limits      Request Headers HTTP request headers required in all API requests\n     Response status codes HTTP response status codes indicate whether a specific HTTP request has been successfully completed\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/tutorials/howto-configure-permissions/",
	"title": "Configure HotelX Security",
	"tags": [],
	"description": "Configure your own HotelX security model",
	"content": " Granting Permissions This topic describes how to configure permissions for a organization using HotelX and Stats.\nBefore you begin  Read IAM, which contains information about how TravelgateX manages security Read HotelX, which contains information about the HotelX API  Scenario: Organization buying suppliers through HotelX In this scenario, organanization org_test logs on to TravelgateX in order to use HotelX to buy product from suppliers.\nDistribution will be made through 2 different channels, end users will use org_test_B2C_site whereas that org_test_B2B_site will be used for business users. Every channel will be configured separately.\nPurchases will be made through accesses access_0 and access_1 which configure credentials for supplier_0 and supplier_1.\nOnce org_test integrates the HotelX API into their system and is certified, then they need to implement the role permission schema provided by TravelgateX to identify teams and members:\n   Team Members Description     CTO cto@org_test.com Manage all members and its permissions   Development dev1@org_test.com\ndev2@org_test.com Full access to HotelX and view stats   Operations operation1@org_test.com Only view stats   Backoffice backoffice1@org_test.com Permissions to Book, Cancel and Retrive Bookings through HotelX    A security implementation of this scenario will look similar to the following:\nGroup hiereachy\u0026lt;b\u0026gt;Group hiereachy\u0026lt;/b\u0026gt;Organization[Not supported by viewer]org_test[Not supported by viewer]Folders[Not supported by viewer]purchase[Not supported by viewer]Products[Not supported by viewer]HotelX_0[Not supported by viewer]Stats_0[Not supported by viewer]Resources[Not supported by viewer]Clients[Not supported by viewer]org_test_B2C_site[Not supported by viewer]org_test_B2B_site[Not supported by viewer]Accesses[Not supported by viewer]access_0[Not supported by viewer]access_1[Not supported by viewer]Suppliers[Not supported by viewer]supplier_0[Not supported by viewer]supplier_1[Not supported by viewer]Clients[Not supported by viewer]org_test_B2C_site[Not supported by viewer]org_test_B2B_site[Not supported by viewer]org.owner[Not supported by viewer]cto@org_test.com[Not supported by viewer]hotelx.booking[Not supported by viewer]backoffice1@org_test.com[Not supported by viewer]stats.viewer[Not supported by viewer]operation1@org_test.com[Not supported by viewer]hotelx.owner, stats.owner[Not supported by viewer]dev1@org_test.com, dev2@org_test.com\u0026lt;div style=\u0026ldquo;text-align: center\u0026rdquo;\u0026gt;dev1@org_test.com, dev2@org_test.com\u0026lt;/div\u0026gt;\nGroup hierarchy is organized as:\n 1 organization named org_test 1 folder named purchase, which manages all products purchased by org_test:  HotelX to manage clients, suppliers and accesses Stats to view statistics   The IAM policy manages these roles:\n org.owner: All permissions over all organization resources hotelx.owner: All permissions over all HotelX resources hotelx.booking: Booking permissions (Book, Cancel and Get Bookings) for HotelX operations stats.owner: All permissions for all Stats resources stats.viewer: View permissions over Stats  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/",
	"title": "Content",
	"tags": [],
	"description": "How to manage content: HotelList, MealplanList, CategoryList, Metadata...",
	"content": "The static content calls such as Hotel-List, Room-List, Mealplan-List\u0026hellip;\n CategoryList     CurrencyList     DescriptiveInfo     GeographicDestinationTree     HotelList     MarketList     MealPlanList     MetaData     RoomList     RuntimeConfiguration     StaticConfiguration (Deprecated)     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/",
	"title": "Content",
	"tags": [],
	"description": "How to manage content: HotelList, MealplanList, CategoryList, Metadata...",
	"content": "The static content calls such as Hotel-List, Room-List, Mealplan-List\u0026hellip;\n  Configuration      CategoryList      CurrencyList      DescriptiveInfo      GeographicDestinationTree      HotelList      MarketList      MealPlanList      MetaData      RoomList     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/data-structure/",
	"title": "Data Structure",
	"tags": [],
	"description": "",
	"content": "The structure of the API specification follows a standard. This document intends to explain every aspect of this structure and their fields.\nYou can read about what changes might and what changes might not cause an error, below:\n Changes that can cause an error:\n Removing a field from XSD. Modifying the type of field or attribute. For example, passing a string type to numeric.   Changes that cannot cause an error:\n Adding a new element or attribute. Modifying the order of elements or attributes.   The integration will have the following methods:\n   Method Input Output Description     Geographic DestinationTree Geographic DestinationTreeRQ Geographic DestinationTreeRS Returns a tree of supplier\u0026rsquo;s destinations.   HotelList HotelListRQ HotelListRS Returns a list of available hotels.   Descriptive Info Descriptive InfoRQ Descriptive InfoRS Retrieves information for current hotel such as photos, descriptions, amenities,etc as well as basic info (code,name, town, address, contact).   RoomList RoomListRQ RoomListRS Returns available room types.   MealPlanList MealPlanListRQ MealPlanListRS Returns a list of available boards.   CategoryList CategoryListRQ CategoryListRS Returns a list of available categories.   MarketList MarketListRQ MarketListRS Returns a list of available markets.   Avail AvailRQ AvailRS Makes an availability request.   Valuation ValuationRQ ValuationRS Retrieves a booking quote (pre-book).   Reservation ReservationRQ ReservationRS Makes a booking.   Cancel CancelRQ CancelRS Cancels a booking.   ReservationRead ReservationReadRQ ReservationReadRS Retrieves booking details.   ReservationList ReservationListRQ ReservationListRS Retrieves a list of bookings.   Runtime Configuration Runtime ConfigurationRQ Runtime ConfigurationRS Retrieves the supplier‚Äôs run-time configuration.   Static Configuration (Deprecated) StaticConfigurationRQ StaticConfigurationRS Retrieves the supplier‚Äôs static configuration.   MetaData MetaDataRQ MetaDataRS Meta data information.    Each request sent to service url requires a node called rqXML. The current methods input object travels inside this node.\nThe data structure will always have common elements in all objects as well as specific objects related to the operation\nYou can find full specification of each method at the Hotel API Methods page.\n"
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/dataset-content/",
	"title": "Datasets content",
	"tags": [],
	"description": "Insights Datasets content",
	"content": " Knowledge is power and that\u0026rsquo;s what the product Insights offers, based on more than 3 billion search requests and more than 25,000 bookings per day:\n What is the performance of your infrastructure? What hotelier product is being requested and booking around the world? How are you doing with respect to your competitors?  In order to answer the three previous questions, the product has been designed in three parts:\nPerformance This first dataset answers the question of: What is the performance of your infrastructure? With it you will be able to know in detail the performance of your requests for searches, quotes, bookings and cancellations. You will know the status of your requests, what types of errors are you receiving, what times per request you\u0026rsquo;re handling. Find out more about performance here.\nInsights This second dataset answers the question of: What hotelier product is being requested and booking around the world? With it you will be able to know in detail the information of the requests of searches and the characteristics of the bookings throught TravelgateX, the global marketplace. Hotels, destinations, markets, prices are only a part of the information that you will have with the product Insights. Find out more about insights here.\nBenchmark Finally, with benchmark datasets we offer you the competitive advantage of knowing how you are doing with respect to the competition. The benchmark is available for:\n Performance. The comparisons are based on the ratio of searches, quotes, bookings and cancellation ok requests, plus you will be able to compare your time responses with respect to other competitors. Find out more about benchmark here. Insights. The comparisons are based on the number of available hotels, total bookings and net revenue, plus you will be able to see your position with respect to other competitors filtering at the level of country, city and clients/suppliers. Find out more about benchmark here. Hotel Rates. The comparisons are based on the price per hotel returned by your organization against the rates returned by your competitors for a specific check-in week and market, and for both searches and bookings requests.    Performance Dataset Learn about how the information is stored in our Performance Dataset\n     Insights Dataset Learn about how the information is stored in our Insights Dataset\n     Benchmark Dataset Learn about how the information is stored in our Benchmark Datasets\n    "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/load-product/manual-load/derivedrate-load/",
	"title": "Derived Rate: Availability and Price load",
	"tags": [],
	"description": "Load availability conditions and supplements or discounts to your derived rates",
	"content": " Derived Rate After selecting the client, the Channel Manager and the hotel you will be able to select in the Choose your Load field, the Derived Rates option. Finally, indicate the base rate and the derived rate you want to load or update.\nHow to load availability and supplements/discounts In the following panel you will be able to load all conditions for your derived rates.\n\n From - To: Date range when the conditions will be applied. Applicable Days of Week: Days of week that will apply the condition in the previous date range. Close On Arrival: Stop sales on arrival date: in the date range specified before is not possible to do a check-in. If you check \u0026ldquo;On\u0026rdquo; you will apply the close on arrival condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a close on arrival condition if it was previously load and if you check unspecified you won\u0026rsquo;t apply any change (on/off) in the close on arrival condition. Close On Departure: Stop sales on departure date: in the date range specified before is not possible to do a check-out. If you check \u0026ldquo;On\u0026rdquo; you will apply the close on departure condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a close on departure condition if it was previously load and if you check unspecified you won\u0026rsquo;t apply any change (on/off) in the close on departure condition. Close Master: Stop sales: in the date range specified before is not possible to stay, so the client will not receive availability for any stay that include those days. If you check \u0026ldquo;On\u0026rdquo; you will apply the close master condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a close master condition if it was previously load and if you check unspecified you won\u0026rsquo;t apply any change (on/off) in the close master condition. Type adjust amount: You will be able to select a specific amount or percent to be a supplement or discount. Adjust amount: Numeric amount. This should have a minus symbol if the amount is a discount. Min LOS on Stay: Minimum stay length of nights for this rate and rooms to be available. Max LOS on Stay: Maximum stay length of nights for this rate and rooms to be available. Min LOS on Arrival: Minimum stay length of nights for this rate and rooms to be available. Only depending on the arrival date. Max LOS on Arrival: Maximum stay length of nights for this rate and rooms to be available. Only depending on the arrival date. Min Release: Minimum number of days before the check-in date for which the product will be available to be booked. Max Release: Maximum number of days before the check-in date for which the product will be available to be booked. Meal Plan Supplements: Option to add multiple meal plan supplements by pax type (adult, child or baby). Select the pax type, the meal plan and the amount per pax that will be added.  Please, remember that a Derived Rate shares the allotment with its base rate, that\u0026rsquo;s why you can\u0026rsquo;t load and specific allotment for a derived rate. Check our See FAQ for a complete example on how to create a full discount/supplement using Derived Rates.  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/staticcontent/destination/",
	"title": "Destination",
	"tags": [],
	"description": "Learn about how to manage static content data in your site: Hotels, Boards, Categories...",
	"content": "  const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x228626cf56-e364-4fd1-4fe0-311e23ac6355\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/aeb082e484710ebf6b7a4ec5173064cc\\/raw\\x22,\\x22divname\\x22:\\x22div_hotels\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/4737228c495b09566474fa2db38fc72d\\/raw\\x22,\\x22divname\\x22:\\x22div_destinations\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/519b4223de8b44cb20c5c33212c62654\\/raw\\x22,\\x22divname\\x22:\\x22div_boards\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/0815561e9c25ce49bc416dbc73f36388\\/raw\\x22,\\x22divname\\x22:\\x22div_rooms\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/aa1be23b8c9229c8363c142036afb1f5\\/raw\\x22,\\x22divname\\x22:\\x22div_categories\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }  Destinations Destinations Query returns a list of static data about destinations for a supplier\u0026rsquo;s access. By default, if you don‚Äôt set any destination codes, you will receive all the codes. As it is the case with the Query Hotels, you will be able to receive subsequent pages of destinations by filling in the continuation token field. It is possible that you filter by language and you receive the texts only in the language specified by parameter in destinationData/texts/languages.\nPlayground Samples  Destinations     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/codelist/booking-flow-errors/",
	"title": "Error Codes Booking Flow",
	"tags": [],
	"description": "List of Error Codes in Booking Flow",
	"content": "List of the possible errors you could receive in the booking flow messages that are HotelResNotif, CancelNotif or HotelResRetrieve.\n   Error Code Error Description     -1 Unexpected error   1 Validation error   10 HotelCode not found   11 Invalid Dates   14 Invalid Derived Rate   22 Rooms not found   23 Rates not found   30 Occupancy Error   31 RatePlan_Rate Error   38 POS credentials not found   50 Confirmation error   60 Cancellation error    "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-flightsx/",
	"title": "FlightsX",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \tTo make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "Basic information to start with",
	"content": "   Channel Manager Typical Scenario Typical Channel Manager workflow explained\n    "
},
{
	"uri": "https://travelgatex.com/core/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "Basic information to start with Admin",
	"content": " Getting Started Check DOCS in the playground to see the schema   Get Accesses Admin Get Accesses tool\n     Update Access Admin Update Access tool\n    "
},
{
	"uri": "https://travelgatex.com/distribution/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "Basic information to start with",
	"content": " Getting Started   Business elements Business elements and structures\n     Components Distribution-X components and tools\n    "
},
{
	"uri": "https://travelgatex.com/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Welcome to TravelgateX! Learn the basics of using our APIs, and start building integrations quickly and securely.\n  Overview Understanding our marketplace\n     Quickstart How to get support for using our APIs\n     Concepts Basic concepts for all of the TravelgateX platform\n     Playground Try our API now\n    Learning GraphQL     \n"
},
{
	"uri": "https://travelgatex.com/inventory-x/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "Basic information to start with",
	"content": "   Channel Manager Typical Scenario Typical Channel Manager workflow explained\n    "
},
{
	"uri": "https://travelgatex.com/getting-started/learning-graphql/overview/",
	"title": "GraphQL Overview",
	"tags": [],
	"description": "",
	"content": " What is GraphQL? GraphQL is a query language for your API. It was first designed by Facebook. It\u0026rsquo;s a new way of dealing with and managing data models via API, and is especially useful for decoupling client from server logic.\n GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools. graphql.org\nGraphQL uses a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn\u0026rsquo;t tied to any specific database or storage engine and is instead backed by your existing code and data. graphql.org/learn\nA GraphQL query is a string that is sent to the server to be interpreted and fulfilled, which then returns JSON back to the client. Lee Byron, Facebook\n GraphQL at TravelgateX GraphQL is a perfect fit for all of our application needs:\n Scalable: GraphQL is able to handle millions of requests. Stable: GraphQL allows us to keep building our API products and introduce new changes to our APIs that do not break existing integrations in client applications. Fast: GraphQL not only allows faster response times by letting you choose exactly what you want, but it also consumes less bandwidth which makes responses lighter.  We are focused on delivering the best APIs to our clients. SOAP APIs are long gone and modelling REST APIs to fit a vast variety of products is not only hard to understand, it also gets harder to manage as the data model gets bigger. At TravelgateX, we\u0026rsquo;re true believers of the Kaisen philosophy. We\u0026rsquo;re constantly researching for new ways to improve.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/howtos/guides/",
	"title": "Guides",
	"tags": [],
	"description": "",
	"content": " The guides   Connect a New Supplier How to connect to a new Supplier\n     Certification process Perform specific tasks\n     Useful information Some concepts and particularities\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/",
	"title": "Hotel Push Sellers API",
	"tags": [],
	"description": "Read documentation on Hotel Push Sellers API",
	"content": "   Overview Inventory Overview\n     Getting Started Basic information to start with\n     API Reference Hotel Push API messages for sellers\n     FAQ Frequently asked questions\n     Release Notes Release Notes Hotel Push Sellers API\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/product-load/hotelavailretrieve/",
	"title": "HotelAvailRetrieve",
	"tags": [],
	"description": "HotelAvailRetrieve message",
	"content": " Providers will send a HotelAvailRetrieveRQ message to retrieve a complete break down of availability. TGX will return a break down of hotel / rate plans / rooms.\nHotelAvailRetrieveRQ XML Example\n\u0026lt;HotelAvailRetrieve\u0026gt; \u0026lt;request\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;\u0026gt;\u0026lt;/RequestorID\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;/\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;TPA_Extensions\u0026gt; \u0026lt;Param key = \u0026quot;onlyActive\u0026quot; value = \u0026quot;0\u0026quot;/\u0026gt; \u0026lt;/TPA_Extensions\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;HotelAvailRequests\u0026gt; \u0026lt;HotelAvailRequest\u0026gt; \u0026lt;DateRange Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-25\u0026quot;/\u0026gt; \u0026lt;HotelRef HotelCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;RatePlanCandidates\u0026gt; \u0026lt;RatePlanCandidate RatePlanCode = \u0026quot;BAR\u0026quot;\u0026gt;\u0026lt;/RatePlanCandidate\u0026gt; \u0026lt;/RatePlanCandidates\u0026gt; \u0026lt;/HotelAvailRequest\u0026gt; \u0026lt;/HotelAvailRequests\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelAvailRetrieve\u0026gt;     Element Number Type Description     POS/Source/TPA_Extensions 0..1  Optional, empty only active RatePlans/Rooms will be recieved.   Param 1     @key 1 String onlyActive.   @value 1 String 1 - You will recieve all active RatePlans/Rooms data. 0 - Active and deactivated RatePlans/Rooms will be recieved. (Same case than wihout TPA_Extensions node).   HotelAvailRetrieve/request/HotelAvailRequests/HotelAvailRequest 1  Root Node.   DateRange 1  Contains date filter.   @Start 1 Date Start date to search rates.   @End 1 Date End date to search rates.   HotelRef 1  Contains hotel filter.   @HotelCode 1 String Hotel date to search rates.   RatePlanCandidates 0..1  If exists, contains rate filter.   RatePlanCandidates/RatePlanCandidate 1..n     @RatePlanCode 1 String Rate Plan Code to search rates. 1    HotelAvailRetrieveRS Example for a RatePlan\n\u0026lt;HotelAvailRetrieveResponse\u0026gt; \u0026lt;HotelAvailRetrieveResult\u0026gt; \u0026lt;Success/\u0026gt; \u0026lt;AvailStatusMessages HotelCode = \u0026quot;12\u0026quot;\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;9\u0026quot; BookingSold = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-25\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; InvCode = \u0026quot;APT\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;2\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;8\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus Status = \u0026quot;Open\u0026quot; SellThroughOpenIndicator = \u0026quot;false\u0026quot; MinAdvancedBookingOffset = \u0026quot;5\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;12\u0026quot; BookingSold = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-21\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;false\u0026quot; Tue = \u0026quot;false\u0026quot; Weds = \u0026quot;false\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;RestrictionStatus Restriction = \u0026quot;Master\u0026quot; Status = \u0026quot;Close\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;12\u0026quot; BookingSold = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-22\u0026quot; End = \u0026quot;2013-12-25\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;false\u0026quot; Sat = \u0026quot;false\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;3\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;9\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus Status = \u0026quot;Close\u0026quot; Restriction = \u0026quot;Arrival\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage BookingLimit = \u0026quot;12\u0026quot; BookingSold = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-25\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; InvCode = \u0026quot;STD1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;1\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;2\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus Status = \u0026quot;Open\u0026quot; SellThroughOpenIndicator = \u0026quot;false\u0026quot; MinAdvancedBookingOffset = \u0026quot;6\u0026quot; MaxAdvancedBookingOffset = \u0026quot;999\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;AvailStatusMessage\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2013-12-26\u0026quot; End = \u0026quot;2013-12-27\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; InvCode = \u0026quot;STD1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;false\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;RestrictionStatus Status = \u0026quot;Open\u0026quot; SellThroughOpenIndicator = \u0026quot;false\u0026quot; MaxAdvancedBookingOffset = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;/AvailStatusMessages\u0026gt; \u0026lt;/HotelAvailRetrieveResult\u0026gt; \u0026lt;/HotelAvailRetrieveResponse\u0026gt;  **Example for a Derived RatePlan**\n\u0026lt;HotelAvailRetrieveResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelAvailRetrieveResult Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;Success xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;/\u0026gt; \u0026lt;AvailStatusMessages HotelCode = \u0026quot;1\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;AvailStatusMessage\u0026gt; \u0026lt;StatusApplicationControl Start = \u0026quot;2014-07-01\u0026quot; End = \u0026quot;2014-07-31\u0026quot; RatePlanCode = \u0026quot;DRV\u0026quot; Mon = \u0026quot;true\u0026quot; Tue = \u0026quot;true\u0026quot; Weds = \u0026quot;true\u0026quot; Thur = \u0026quot;true\u0026quot; Fri = \u0026quot;true\u0026quot; Sat = \u0026quot;true\u0026quot; Sun = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;3\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MinLOS\u0026quot;/\u0026gt; \u0026lt;LengthOfStay Time = \u0026quot;3\u0026quot; TimeUnit = \u0026quot;Day\u0026quot; MinMaxMessageType = \u0026quot;MaxLOS\u0026quot;/\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;RestrictionStatus MinAdvancedBookingOffset = \u0026quot;5\u0026quot;/\u0026gt; \u0026lt;/AvailStatusMessage\u0026gt; \u0026lt;/AvailStatusMessages\u0026gt; \u0026lt;/HotelAvailRetrieveResult\u0026gt; \u0026lt;/HotelAvailRetrieveResponse\u0026gt;     Element Number Type Description     HotelAvailRetrieveResponse/HotelAvailRetrieveResult 1  Root Node.   Success 0..1  Should only be present if it was a successful response. The Errors node should not be present if the Success node is present.   AvailStatusMessages 0..1  Present when success.   @HotelCode 1 String Hotel code whose information is provided by the method.   AvailStatusMessages/AvailStatusMessage 0..n     @BookingLimit 0..1 Integer Identifies the number of available rooms per Room \u0026amp; RatePlan for the indicated dates. Not mandatory when the @Status is Close or is a derived rate.   @BookingSold 0..1 Integer Identifies the number of sold rooms per Room \u0026amp; RatePlan for the indicated dates. This value is reset when a new BookingLimit is charged by an HotelAvailNotif request. Not mandatory when the @Status is Close or is a derived rate.   AvailStatusMessages/AvailStatusMessage/StatusApplicationControl 1     @Start 1 Date Start date.   @End 1 Date End date.   @RatePlanCode 1 String Rate Plan Code.   @InvCode 0..1 String Room Code. Null for derived rates.   @InvType 0..1 String Product type (ROOM). Null for derived rates.   @Mon 1 Boolean Indicates whether the AvailStatusMessage data applies to Mondays.   @Tue 1 Boolean Indicates whether the AvailStatusMessage data applies to Tuesdays.   @Weds 1 Boolean Indicates whether the AvailStatusMessage data applies to Wednesdays.   @Thur 1 Boolean Indicates whether the AvailStatusMessage data applies to Thursdays.   @Fri 1 Boolean Indicates whether the AvailStatusMessage data applies to Fridays.   @Sat 1 Boolean Indicates whether the AvailStatusMessage data applies to Saturdays.   @Sun 1 Boolean Indicates whether the AvailStatusMessage data applies to Sundays.   AvailStatusMessages/AvailStatusMessage/LengthsOfStay 0..1     @ArrivalDateBased 0..1 Boolean When its true, the minimum and maximum stay is checked ONLY the first day of the availability, when false or not indicated, the minimum and maximum stay is checked all the availability days.   AvailStatusMessages/AvailStatusMessage/LengthsOfStay/LengthOfStay 1..2     @Time 1 Integer Indicates the number of @TimeUnit for this stay.   @TimeUnit 1 String Day.   @MinMaxMessageType 1 String (MinLOS, MaxLOS) Indicates the minimum or maximum stay for his AvailStatusMessage.   AvailStatusMessages/AvailStatusMessage/RestrictionStatus 0..1     @Status 1 String (Open, Close).   @Restriction 0..1 String Master. This is the master availability. If master availability is ‚ÄòClosed‚Äô, the product is not bookable if any of the stay dates includes one of the dates specified by the Application Control element. If master availability is ‚ÄòOpen‚Äô, additional restrictions on arrival and departure may be placed (Master, Arrival, Departure).   @MinAdvancedBookingOffset 0..1 Integer Minimum number of days before the check-in date aftere which the product is not available to be booked. This restriction is usually used to offer discounts on early bookings.   @MaxAdvancedBookingOffset 0..1 Integer Maximum number of days before the check-in date after which the product is not available to be booked. This restriction is usually used to offer last minute discounts on unsold inventory.   @SellThroughOpenIndicator 0..1 Boolean When @Status is open, in this element you can indicate this room or room/ratePlan can be sold without limit (like BookingLimit=MaxInteger). Null for derived rates.    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/set-up/hotelrateplaninventorynotif/",
	"title": "HotelRatePlanInventoryNotif",
	"tags": [],
	"description": "HotelRatePlanInventoryNotif message",
	"content": " Providers send a HotelRatePlanInventoryNotifRQ message to push the Hotel SetUp information into the TGX database. TGX then processes the data and responds with an error code if needed or success if everything is correct.\nHotelRatePlanInventoryNotifRQ XML Example\n\u0026lt;HotelRatePlanInventoryNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot; Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan Duration = \u0026quot;0\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; RatePlanNotifType = \u0026quot;New\u0026quot; RatePlanType = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;BookingRules\u0026gt; \u0026lt;BookingRule\u0026gt; \u0026lt;CancelPenalties\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;Deadline OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;20\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent NmbrOfNights = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty Start = \u0026quot;2018-03-01\u0026quot; End = \u0026quot;2018-03-06\u0026quot;\u0026gt; \u0026lt;Deadline OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;10\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent Amount = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty NonRefundable = \u0026quot;true\u0026quot; Start = \u0026quot;2018-03-13\u0026quot; End = \u0026quot;2018-03-15\u0026quot;/\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;BookingRule\u0026gt; \u0026lt;Viewerships\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;LocationCode CountryCode = \u0026quot;ES\u0026quot;/\u0026gt; \u0026lt;/LocationCodes\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;Viewership\u0026gt; \u0026lt;LocationCodes LocationCodesInclusive = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Viewership\u0026gt; \u0026lt;/Viewerships\u0026gt; \u0026lt;/BookingRule\u0026gt; \u0026lt;/BookingRules\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount AgeQualifyingCode = \u0026quot;8\u0026quot; MaxAge = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount AgeQualifyingCode = \u0026quot;7\u0026quot; MaxAge = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;PaymentPolicies\u0026gt; \u0026lt;GuaranteePayment PaymentCode = \u0026quot;MerchantPayment\u0026quot;/\u0026gt; \u0026lt;GuaranteePayment PaymentCode=\u0026quot;DirectPayment\u0026quot;\u0026gt; \u0026lt;AcceptedPayments\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;VI\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;AX\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;CA\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;DS\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;L\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;EU\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;/AcceptedPayments\u0026gt; \u0026lt;/GuaranteePayment\u0026gt; \u0026lt;GuaranteePayment PaymentCode=\u0026quot;BookingDatePayment\u0026quot;\u0026gt; \u0026lt;AcceptedPayments\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;VI\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;AX\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;CA\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;DS\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;L\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;EU\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;/AcceptedPayments\u0026gt; \u0026lt;/GuaranteePayment\u0026gt; \u0026lt;GuaranteePayment PaymentCode=\u0026quot;ArrivalDatePayment\u0026quot;\u0026gt; \u0026lt;AcceptedPayments\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;VI\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;AX\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;CA\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;DS\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;L\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;AcceptedPayment\u0026gt; \u0026lt;PaymentCard CardCode=\u0026quot;EU\u0026quot; /\u0026gt; \u0026lt;/AcceptedPayment\u0026gt; \u0026lt;/AcceptedPayments\u0026gt; \u0026lt;/GuaranteePayment\u0026gt; \u0026lt;/PaymentPolicies\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;14\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;STD\u0026quot; RoomID = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;STD\u0026quot; RoomID = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;STD\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;STD\u0026quot; RoomID = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JSUIT\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;1\u0026quot; MaxOccupancy = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;JSUIT\u0026quot; RoomID = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Junior Suite\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JSUIT\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;2\u0026quot; MaxOccupancy = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;JSUIT\u0026quot; RoomID = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Junior Suite\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JSUIT\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot; InvNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;GuestRoom\u0026gt; \u0026lt;Quantities StandardNumBeds = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Occupancy MinOccupancy = \u0026quot;3\u0026quot; MaxOccupancy = \u0026quot;3\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;Room RoomTypeCode = \u0026quot;JSUIT\u0026quot; RoomID = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Junior Suite\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/GuestRoom\u0026gt; \u0026lt;/SellableProduct\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Taxes\u0026gt; \u0026lt;Tax Amount = \u0026quot;20\u0026quot; ChargeFrequency = \u0026quot;PerNight\u0026quot; ChargeUnit = \u0026quot;\u0026quot;\u0026gt; \u0026lt;TaxDescription\u0026gt; \u0026lt;Text\u0026gt;city\u0026lt;/Text\u0026gt; \u0026lt;/TaxDescription\u0026gt; \u0026lt;/Tax\u0026gt; \u0026lt;/Taxes\u0026gt; \u0026lt;AdditionalDetails\u0026gt; \u0026lt;AdditionalDetail Code=\u0026quot;REP\u0026quot; Type=\u0026quot;39\u0026quot;\u0026gt; \u0026lt;DetailDescription\u0026gt; \u0026lt;Text\u0026gt;Repsol\u0026lt;/Text\u0026gt; \u0026lt;/DetailDescription\u0026gt; \u0026lt;/AdditionalDetail\u0026gt; \u0026lt;/AdditionalDetails\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;bb\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;TPA_Extensions xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Attribute key = \u0026quot;HotelNotifType\u0026quot; value = \u0026quot;New\u0026quot;/\u0026gt; \u0026lt;/TPA_Extensions\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanInventoryNotif\u0026gt;  **Example for a Derived RatePlan**\n\u0026lt;HotelRatePlanInventoryNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot; Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan BaseRatePlanCode = \u0026quot;BAR\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; RatePlanCode = \u0026quot;DERIVED\u0026quot; RateReturn = \u0026quot;false\u0026quot; RatePlanType = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;RatePlanInclusionsType\u0026gt; \u0026lt;RatePlanInclusionDescription\u0026gt; \u0026lt;Name\u0026gt;BaseMealPlanSupplement\u0026lt;/Name\u0026gt; \u0026lt;/RatePlanInclusionDescription\u0026gt; \u0026lt;/RatePlanInclusionsType\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;Derived Rate\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanInventoryNotif\u0026gt;  Example for Offers\n\u0026lt;HotelRatePlanInventoryNotif xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;request PrimaryLangID = \u0026quot;ES\u0026quot; Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; HotelStatusType = \u0026quot;Active\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan BaseRatePlanCode = \u0026quot;BAR\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot; RatePlanCode = \u0026quot;DERIVED\u0026quot; RateReturn = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Offers\u0026gt; \u0026lt;Offer OfferCode=\u0026quot;offer\u0026quot; OfferStatusType=\u0026quot;Active\u0026quot; OfferNotifType = \u0026quot;New\u0026quot;\u0026gt; \u0026lt;OfferRules\u0026gt; \u0026lt;OfferRule\u0026gt; \u0026lt;LengthsOfStay ArrivalDateBased=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;LengthOfStay Time=\u0026quot;2\u0026quot; MinMaxMessageType=\u0026quot;MinLOS\u0026quot; /\u0026gt; \u0026lt;LengthOfStay Time=\u0026quot;6\u0026quot; MinMaxMessageType=\u0026quot;MaxLOS\u0026quot; /\u0026gt; \u0026lt;/LengthsOfStay\u0026gt; \u0026lt;DOW_Restrictions\u0026gt; \u0026lt;AvailableDaysOfWeek Mon=\u0026quot;true\u0026quot; Tue=\u0026quot;true\u0026quot; Weds=\u0026quot;true\u0026quot; Thur=\u0026quot;true\u0026quot; Fri=\u0026quot;true\u0026quot; Sat=\u0026quot;true\u0026quot; Sun=\u0026quot;true\u0026quot; /\u0026gt; \u0026lt;/DOW_Restrictions\u0026gt; \u0026lt;Inventories\u0026gt; \u0026lt;Inventory InvCode=\u0026quot;1BDAPT\u0026quot; /\u0026gt; \u0026lt;/Inventories\u0026gt; \u0026lt;/OfferRule\u0026gt; \u0026lt;/OfferRules\u0026gt; \u0026lt;Discount NightsDiscounted=\u0026quot;1\u0026quot; DiscountPattern=\u0026quot;Last\u0026quot; /\u0026gt; \u0026lt;OfferDescription\u0026gt; \u0026lt;Text\u0026gt;Offer Test\u0026lt;/Text\u0026gt; \u0026lt;/OfferDescription\u0026gt; \u0026lt;/Offer\u0026gt; \u0026lt;/Offers\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanInventoryNotif\u0026gt;     Element Number Type Description     HotelRatePlanInventoryNotif/request 1  Root Node.   RatePlans 1     @HotelCode 1 String Hotel code whose information is provided by the method.   @HotelStatusType 1 String Active or Deactivated.   RatePlans/RatePlan 0..n  Present if rate exists.   @RatePlanCode 1 String Rate code.   @BaseRatePlanCode 0..1 String Rate code of the base RatePlan. Only used for derived rates.   @RateReturn 0..1 String Indicates if the Derived Rate Code should be passed to the channel manager in booking notifications or the Base Rate Code. Only used for derived rates.   @RatePlanNotifType 0..1 String New, Delta or Remove   @RatePlanStatusType 1 String Active or Deactivated. This attribute activates or deactivates the rate.   @CurrencyCode 0..1 String ISO Currency (EUR). Not used for derived rates.   @Start 0..1 Date Start date of the rate booking window (Booking Dates for which the rate will be available).   @End 0..1 Date End date of the rate booking window (Booking Dates for which the rate will be available).   @RatePlanType 0..1 String Rate rule to apply. 0 - No selected, 7 - Large Family, 8 - Public Servant, 10 - Negotiated, 11 - Package, 34 - Canary Resident, 35 - Balearic Resident, 36 - Honeymoon. If the attribute is not present and it is a base rate, the value will be 0, if it is a derived rate, the value will be the same as the parent rate.   @PromotionCode 0..1 String Promotion code to apply. 0 - NoPromotion, 25 - Senior55 26 - Senior60, 27 - Senior65. If the attribute is not present and it is a Base rate there is no promotion code (same as sent 0), but if it is a derived rate, this inherits de base rate promotion.   @FreeBaby 1 Boolean Free babies promotion   @FreeChild 1 Boolean Free children promotion   RatePlans/BookingRules 0..1  Present if exists booking rules for the given RatePlan.   BookingRules/BookingRule 1..n  Booking rules.   @Code 0..1 String Code of the booking rule (empty if are viewships conditions).   BookingRule/CancelPenalties 1  Cancel penalties of the current booking rule.   CancelPenalties/CancelPenalty 1..n  Cancel penalty.   @NonRefundable 1 Boolean Indicates if the rateplan is refundable or not.   CancelPenalty/Deadline 1  Contains information about the the deadline of the cancel penalty.   @OffsetTimeUnit 1 String Indicates the units of time that apply to the deadline.   @OffsetUnitMultiplier 1 Integer The number of units of DeadlineTimeUnit.   @OffsetDropTime 1 String Indicating when the deadline drop time goes into effect.   CancelPenalty/AmountPercent 1  Contains information about the the deadline of the cancel penalty.   @NmbrOfNights 0..1 Integer Number of nights that will be charged in case of cancellation applying the current cancel penalty. NmbrOfNights, Percent or Amount must be present.   @Percent 0..1 Decimal Percent of the total amount that will be charged in case of cancellation applying the current cancel penalty. NmbrOfNights, Percent or Amount must be present.   @Amount 0..1 Decimal Amount that will be charged in case of cancellation applying the current cancel penalty. NmbrOfNights, Percent or Amount must be present.   @CurrencyCode 0..1 String Currency code of the amount. Must be present if amount is present.   BookingRule/Viewerships 0..1  Present if exits viewerships conditions.   BookingRule/Viewerships/Viewership 1..n     BookingRule/Viewerships/Viewership/LocationCodes 1  One node for each viewership condition.   @LocationCodesInclusive 1 Boolean When it\u0026rsquo;s true, this rate can be request for next countryCode, when false cannot be requested for this country.   BookingRule/Viewerships/Viewership/LocationCodes/LocationCode 0..1  If it\u0026rsquo;s missing, applies to all countryCode againthe other viewership condition.   @CountryCode 1 String Country ISO2 code from can or cannot be requested this rate.   RatePlans/RatePlan/Rates 1     RatePlans/RatePlan/Rates/Rate 1..n     RatePlans/RatePlan/Rates/AdditionalGuestAmounts 1     AdditionalGuestAmounts/AdditionalGuestAmount 1..2     @AgeQualifyingCode 1 Integer Qualifying code of the additional guest. 8 - Child, 7 - Infant   @MaxAge 1 Integer Max age not inclusive of the additional guest. Not inclusive.   RatePlans/RatePlan/Rates/Rate/PaymentPolicies 1  Node that contains the accepted payments information.   PaymentPolicies/GuaranteePayment 1..n  Node that contains information about an accepted payment.   @PaymentCode 1  Contains the payment method accepted by the rate. See Payment Type Codes list in section 7.6.3.   GuaranteePayment/AcceptedPayments 0..1  Node that contains the accepted payments information. Only present if PaymentCode is not \u0026ldquo;MerchantPayment\u0026rdquo;.   AcceptedPayments/AcceptedPayment 1..n  Node that contains the credit card accepted.   AcceptedPayment/PaymentCard 1..n  Node that contains the credit card accepted.   @CardCode 1 String Contains the credit card code. See Credit Card Codes list in section 7.6.4.   RatePlans/RatePlan/Rates/Rate/MealsIncluded 0..1  Present if board is included with this rate.   @MealPlanCodes 1 Integer OTA MPT Code.   RatePlans/RatePlan/SellableProducts 0..1  List of sellable products. In derived rates, if it is not present it applies to all rooms. In other cases, it informs the rooms that applies.   SellableProducts/SellableProduct 0..n  Present if rooms associed with this rate.   @InvCode 1 String Sellable Product Code.   @InvTypeCode 0..1 String External information about the room (own code, own description, etc.)   @InvType 1 String Sellable product type (ROOM).   @InvStatusType 1 String Active or Deactivated.   @InvNotifType 0..1 String New, Delta or Remove   RatePlans/RatePlan/SellableProduct/GuestRoom 1..n     RatePlans/RatePlan/SellableProduct/GuestRoom/Quantities 1     @StandardNumBeds 1 Integer Standard occupation of room.   RatePlans/RatePlan/SellableProduct/GuestRoom/Occupancy 1     @MinOccupancy 1 Integer Min occupation.   @MaxOccupancy 1 Integer Max occupation.   @AgeQualifyingCode 1 Integer (10 - Adult,8 - Child,7 - Infant).   RatePlans/RatePlan/SellableProduct/GuestRoom/Room 1     @RoomTypeCode 1 String Room Code.   @RoomID 1 Integer Room Id.   RatePlans/RatePlan/SellableProduct/GuestRoom/Description/Text 1 String Room description.   RatePlans/RatePlan/Taxes 0..1     RatePlans/RatePlan/Taxes/Tax 1..n  Tax to apply to the room prices of the rate   @Amount 0..1 Decimal Indicates that the tax will be applied relative to an amount. The tax has to be specified as Amount or Percent not both at the same time.   @Percent 0..1 Decimal Indicates that the tax will be applied relative to a percentage. The tax has to be specified as Amount or Percent not both at the same time.   @ChargeFrequency 1 String If PerNight indicates that tax is applied relative to the Amount of Nights booked   @ChargeUnit 1 String If PerPax indicates that tax is applied relative to the Amount of Paxes booked   @Type 0..1 String If Inclusive indicates that tax has to be added to the final price. If Type is different than Inclusive or is not present the tax is only informative.   RatePlans/RatePlan/Taxes/Tax/TaxDescription 1     RatePlans/RatePlan/Taxes/Tax/TaxDescription/Text 1 String Description of tax type. Values: \u0026ldquo;City\u0026rdquo;, \u0026ldquo;Local\u0026rdquo;,\u0026ldquo;Resort Fee\u0026rdquo;, \u0026ldquo;Supplement to be paid on spot\u0026rdquo;   RatePlans/RatePlan/RatePlanInclusionsType 0..1 Only used for derived rates.    RatePlans/RatePlan/RatePlanInclusionsType/RatePlanInclusionDescription 1 Only used for derived rates.    RatePlans/RatePlan/RatePlanInclusionsType/RatePlanInclusionDescription/Name 1  If present, derived rate will apply base rate meal plan supplements. Value = BaseMealPlanSupplement. Only used for derived rates.   RatePlans/RatePlan/Description/Text 1 String Rate description.   RatePlans/RatePlan/Offers 0..1  List of Offers   RatePlans/RatePlan/Offers/Offer 1..n     @OfferCode 1 String Offer code.   @OfferStatusType 1 String Active or Deactivated.   @OfferNotifType 0..1 String New, Delta or Remove   RatePlans/RatePlan/Offers/Offer/OfferRules 1     RatePlans/RatePlan/Offers/Offer/OfferRules/OfferRule 1     \u0026hellip;/OfferRules/OfferRule/LengthsOfStay 1     \u0026hellip;/OfferRules/OfferRule/LengthsOfStay/LengthOfStay 1..2     @Time 1 Integer Indicates the number of nights for this stay.   @MinMaxMessageType 1 String (MinLOS, MaxLOS) Indicates the minimum or maximum stay for his Offer.   \u0026hellip;/OfferRule/DOW_Restrictions 1     \u0026hellip;/OfferRule/DOW_Restrictions/AvailableDaysOfWeek 1     @Mon 1 Boolean Indicates whether the Offer data applies to Mondays.   @Tue 1 Boolean Indicates whether the Offer data applies to Tuesdays.   @Weds 1 Boolean Indicates whether the Offer data applies to Wednesdays.   @Thur 1 Boolean Indicates whether the Offer data applies to Thursdays.   @Fri 1 Boolean Indicates whether the Offer data applies to Fridays.   @Sat 1 Boolean Indicates whether the Offer data applies to Saturdays.   @Sun 1 Boolean Indicates whether the Offer data applies to Sundays.   RatePlans/RatePlan/Offers/Offer/OfferRules/OfferRule/Inventories 0..1  Rooms wich the offer will apply to. If no Inventory are sent, the offer will apply for all the rooms in the Rate.   RatePlans/RatePlan/Offers/Offer/OfferRules/OfferRule/Inventories/Inventory 1..n     @InvCode 1 String Room code.   RatePlans/RatePlan/Offers/Offer/Dicount 1     @NightsDiscounted 1 String Nights the offer will discount from the total stay amount.   @DiscountPattern 1 String Booking night/s the offer will dicount. Possible values are First, Last or Cheapest.   RatePlans/RatePlan/Offers/Offer/OfferDescription/Text 1 String Offer desription.   RatePlans/RatePlan/AdditionalDetails 0..1  Rate plan additional details   RatePlans/RatePlan/AdditionalDetails/AdditionalDetail 0..n  List of additional details   @Code 1 String Trading partner code associated with the detail   @Type 1 String Define the information. Only allowed \u0026ldquo;39\u0026rdquo; (Contract/negotiated booking information)   RatePlans/RatePlan/AdditionalDetails/AdditionalDetail/DetailDescription 1  Details Description   RatePlans/RatePlan/AdditionalDetails/AdditionalDetail/DetailDescription/Text 1 String Description. If additional details type is \u0026ldquo;39\u0026rdquo;, the name of the trading partner for this rate.   TPA_Extensions 0..1  Optional, only added when create or delete an hotel.   TPA_Extensions/Attribute 1     @key 1 String HotelNotifType.   @value 1 String New - You will create an hotel. Remove - You will remove all the hotel setup.    HotelRatePlanInventoryNotifRS Success Response\n\u0026lt;HotelRatePlanInventoryNotifResponse xmlns=\u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelRatePlanInventoryNotifResult\u0026gt; \u0026lt;Success xmlns=\u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;/\u0026gt; \u0026lt;/HotelRatePlanInventoryNotifResult\u0026gt; \u0026lt;/HotelRatePlanInventoryNotifResponse\u0026gt;  Error Response\n\u0026lt;HotelRatePlanInventoryNotifResponse xmlns=\u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelRatePlanInventoryNotifResult\u0026gt; \u0026lt;Errors xmlns=\u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Error Language=\u0026quot;en\u0026quot; ShortText=\u0026quot;Unexpected error\u0026quot; Code=\u0026quot;-1\u0026quot;\u0026gt;Hotel 1610 already exists in CP.\u0026lt;/Error\u0026gt; \u0026lt;/Errors\u0026gt; \u0026lt;/HotelRatePlanInventoryNotifResult\u0026gt; \u0026lt;/HotelRatePlanInventoryNotifResponse\u0026gt;  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/booking-flow/hotelresnotif/",
	"title": "HotelResNotif",
	"tags": [],
	"description": "HotelResNotif message",
	"content": " Only implemented if the Channel Manager allows reservation delivery.\nDuring the booking process, we will send a HotelResNotifRQ message to the Channel to inform about the reservations. The Channel Manager will process the booking information and will inform us of the reservation status. TGX will process the response from the Channel\u0026rsquo;s system and will proceed with the reservation process, returning the status to the seller.\nIf the Channel has the booking locator of the reservation, they can send it in the HotelResNotifRS. This locator will be sent to the sellers in the TGX API response.\nNote that if the reservation fails into the Channel Manager\u0026rsquo;s system , it will be considered NOK and we will inform the seller with an error.\nHotelResNotifRQ Example for MerchantPayment\n\u0026lt;OTA_HotelResRS xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot; xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; ResResponseType = \u0026quot;Committed\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;HotelReservations\u0026gt; \u0026lt;HotelReservation CreateDateTime = \u0026quot;2018-08-01T09:07:28.5074165Z\u0026quot; ResStatus = \u0026quot;Confirmed\u0026quot;\u0026gt; \u0026lt;RoomStays\u0026gt; \u0026lt;RoomStay\u0026gt; \u0026lt;RoomTypes\u0026gt; \u0026lt;RoomType RoomTypeCode = \u0026quot;STD\u0026quot; RoomID = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;RoomDescription\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/RoomDescription\u0026gt; \u0026lt;/RoomType\u0026gt; \u0026lt;/RoomTypes\u0026gt; \u0026lt;RatePlans\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;BAR\u0026quot; PriceViewableInd = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;RatePlanDescription\u0026gt; \u0026lt;Text\u0026gt;Best Available Rate\u0026lt;/Text\u0026gt; \u0026lt;/RatePlanDescription\u0026gt; \u0026lt;Commission Percent = \u0026quot;20\u0026quot;/\u0026gt; \u0026lt;Guarantee PaymentCode = \u0026quot;MerchantPayment\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;RoomRates\u0026gt; \u0026lt;RoomRate BookingCode = \u0026quot;1|30#30|1|2018-08-17|5|488654|38644|3|0|0\u0026quot; EffectiveDate = \u0026quot;2018-08-17\u0026quot; ExpireDate = \u0026quot;2018-08-22\u0026quot; RoomTypeCode = \u0026quot;STD\u0026quot; InvBlockCode = \u0026quot;3\u0026quot; NumberOfUnits = \u0026quot;37\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; RoomID = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-17\u0026quot; ExpireDate = \u0026quot;2018-08-18\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;201.37\u0026quot; AmountAfterTax = \u0026quot;201.37\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;CancelPolicies\u0026gt; \u0026lt;CancelPenalty PolicyCode = \u0026quot;c25b8026-5ca2-49ce-b62c-fe0b4945de01\u0026quot;/\u0026gt; \u0026lt;/CancelPolicies\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-18\u0026quot; ExpireDate = \u0026quot;2018-08-19\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;219.19\u0026quot; AmountAfterTax = \u0026quot;219.19\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-19\u0026quot; ExpireDate = \u0026quot;2018-08-20\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;130.09\u0026quot; AmountAfterTax = \u0026quot;130.09\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-20\u0026quot; ExpireDate = \u0026quot;2018-08-21\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;156.82\u0026quot; AmountAfterTax = \u0026quot;156.82\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-21\u0026quot; ExpireDate = \u0026quot;2018-08-22\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;165.73\u0026quot; AmountAfterTax = \u0026quot;165.73\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Total AmountBeforeTax = \u0026quot;873.20\u0026quot; AmountAfterTax = \u0026quot;873.20\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/RoomRate\u0026gt; \u0026lt;/RoomRates\u0026gt; \u0026lt;CancelPenalties\u0026gt; \u0026lt;CancelPenalty PolicyCode = \u0026quot;c25b8026-5ca2-49ce-b62c-fe0b4945de01\u0026quot; NonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Deadline AbsoluteDeadline = \u0026quot;2018-08-16\u0026quot; OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;1\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent NmbrOfNights = \u0026quot;1\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;BasicPropertyInfo HotelCode = \u0026quot;1\u0026quot; HotelName = \u0026quot;Test Hotel\u0026quot;/\u0026gt; \u0026lt;Comments\u0026gt; \u0026lt;Comment\u0026gt; \u0026lt;Text\u0026gt;Customer comments...\u0026lt;/Text\u0026gt; \u0026lt;/Comment\u0026gt; \u0026lt;/Comments\u0026gt; \u0026lt;ServiceRPHs\u0026gt; \u0026lt;ServiceRPH RPH = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;ServiceRPH RPH = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/ServiceRPHs\u0026gt; \u0026lt;/RoomStay\u0026gt; \u0026lt;/RoomStays\u0026gt; \u0026lt;ResGuests\u0026gt; \u0026lt;ResGuest ResGuestRPH = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;\u0026gt; \u0026lt;Profiles\u0026gt; \u0026lt;ProfileInfo\u0026gt; \u0026lt;Profile\u0026gt; \u0026lt;Customer\u0026gt; \u0026lt;PersonName\u0026gt; \u0026lt;NamePrefix\u0026gt;Mr\u0026lt;/NamePrefix\u0026gt; \u0026lt;GivenName\u0026gt;John\u0026lt;/GivenName\u0026gt; \u0026lt;Surname\u0026gt;Doe\u0026lt;/Surname\u0026gt; \u0026lt;/PersonName\u0026gt; \u0026lt;/Customer\u0026gt; \u0026lt;/Profile\u0026gt; \u0026lt;/ProfileInfo\u0026gt; \u0026lt;/Profiles\u0026gt; \u0026lt;GuestCounts\u0026gt; \u0026lt;GuestCount Age = \u0026quot;30\u0026quot;/\u0026gt; \u0026lt;/GuestCounts\u0026gt; \u0026lt;/ResGuest\u0026gt; \u0026lt;ResGuest ResGuestRPH = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;\u0026gt; \u0026lt;Profiles\u0026gt; \u0026lt;ProfileInfo\u0026gt; \u0026lt;Profile\u0026gt; \u0026lt;Customer\u0026gt; \u0026lt;PersonName\u0026gt; \u0026lt;NamePrefix\u0026gt;Mr\u0026lt;/NamePrefix\u0026gt; \u0026lt;GivenName\u0026gt;xxxxxxx\u0026lt;/GivenName\u0026gt; \u0026lt;Surname\u0026gt;xxxxxx\u0026lt;/Surname\u0026gt; \u0026lt;/PersonName\u0026gt; \u0026lt;/Customer\u0026gt; \u0026lt;/Profile\u0026gt; \u0026lt;/ProfileInfo\u0026gt; \u0026lt;/Profiles\u0026gt; \u0026lt;GuestCounts\u0026gt; \u0026lt;GuestCount Age = \u0026quot;30\u0026quot;/\u0026gt; \u0026lt;/GuestCounts\u0026gt; \u0026lt;/ResGuest\u0026gt; \u0026lt;/ResGuests\u0026gt; \u0026lt;ResGlobalInfo\u0026gt; \u0026lt;Guarantee PaymentCode = \u0026quot;MerchantPayment\u0026quot;/\u0026gt; \u0026lt;Total AmountBeforeTax = \u0026quot;873.20\u0026quot; AmountAfterTax = \u0026quot;873.20\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;HotelReservationIDs\u0026gt; \u0026lt;HotelReservationID ResID_Value = \u0026quot;**clientLocator**\u0026quot; ResID_SourceContext = \u0026quot;Client\u0026quot;/\u0026gt; \u0026lt;HotelReservationID ResID_Value = \u0026quot;**internalLocator**\u0026quot; ResID_SourceContext = \u0026quot;Internal\u0026quot;/\u0026gt; \u0026lt;/HotelReservationIDs\u0026gt; \u0026lt;Profiles\u0026gt; \u0026lt;ProfileInfo\u0026gt; \u0026lt;Profile\u0026gt; \u0026lt;Customer\u0026gt; \u0026lt;PersonName\u0026gt; \u0026lt;NamePrefix\u0026gt;Mr\u0026lt;/NamePrefix\u0026gt; \u0026lt;GivenName\u0026gt;xxxxxx\u0026lt;/GivenName\u0026gt; \u0026lt;Surname\u0026gt;xxxxx\u0026lt;/Surname\u0026gt; \u0026lt;/PersonName\u0026gt; \u0026lt;Telephone PhoneTechType = \u0026quot;1\u0026quot; PhoneNumber = \u0026quot;900000000\u0026quot;/\u0026gt; \u0026lt;Email EmailType = \u0026quot;1\u0026quot;\u0026gt;\u0026quot;***agency_email@agency.com***\u0026quot;\u0026lt;/Email\u0026gt; \u0026lt;Address Type = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;AddressLine\u0026gt;Address\u0026lt;/AddressLine\u0026gt; \u0026lt;CityName\u0026gt;Address\u0026lt;/CityName\u0026gt; \u0026lt;PostalCode\u0026gt;07121\u0026lt;/PostalCode\u0026gt; \u0026lt;CountryName\u0026gt;ES\u0026lt;/CountryName\u0026gt; \u0026lt;/Address\u0026gt; \u0026lt;/Customer\u0026gt; \u0026lt;/Profile\u0026gt; \u0026lt;/ProfileInfo\u0026gt; \u0026lt;/Profiles\u0026gt; \u0026lt;/ResGlobalInfo\u0026gt; \u0026lt;/HotelReservation\u0026gt; \u0026lt;/HotelReservations\u0026gt; \u0026lt;Success/\u0026gt; \u0026lt;/OTA_HotelResRS\u0026gt;  Example for VCC Payment\n\u0026lt;OTA_HotelResRS\u0026gt; \u0026lt;HotelReservations\u0026gt; \u0026lt;HotelReservation CreateDateTime = \u0026quot;2018-08-01T08:44:18.7584388Z\u0026quot; ResStatus = \u0026quot;Confirmed\u0026quot;\u0026gt; .. \u0026lt;ResGlobalInfo\u0026gt; \u0026lt;Guarantee PaymentCode = \u0026quot;DirectPayment\u0026quot;\u0026gt; \u0026lt;GuaranteesAccepted\u0026gt; \u0026lt;GuaranteeAccepted\u0026gt; \u0026lt;PaymentCard ExpireDate = \u0026quot;0614\u0026quot; CardCode = \u0026quot;VI\u0026quot;\u0026gt; \u0026lt;CardHolderName\u0026gt;John Smith\u0026lt;/CardHolderName\u0026gt; \u0026lt;CardNumber\u0026gt; \u0026lt;PlainText\u0026gt;4321432143214327\u0026lt;/PlainText\u0026gt; \u0026lt;/CardNumber\u0026gt; \u0026lt;SeriesCode\u0026gt; \u0026lt;PlainText\u0026gt;123\u0026lt;/PlainText\u0026gt; \u0026lt;/SeriesCode\u0026gt; \u0026lt;/PaymentCard\u0026gt; \u0026lt;/GuaranteeAccepted\u0026gt; \u0026lt;/GuaranteesAccepted\u0026gt; \u0026lt;/Guarantee\u0026gt; .. \u0026lt;/ResGlobalInfo\u0026gt; \u0026lt;/HotelReservation\u0026gt; \u0026lt;/HotelReservations\u0026gt; \u0026lt;/OTA_HotelResRS\u0026gt;  Example for VCC Payment with URL\n\u0026lt;OTA_HotelResRS\u0026gt; \u0026lt;HotelReservations\u0026gt; \u0026lt;HotelReservation CreateDateTime = \u0026quot;2018-08-01T08:44:18.7584388Z\u0026quot; ResStatus = \u0026quot;Confirmed\u0026quot;\u0026gt; .. \u0026lt;ResGlobalInfo\u0026gt; \u0026lt;Guarantee PaymentCode = \u0026quot;DirectPayment\u0026quot;\u0026gt; \u0026lt;GuaranteesAccepted\u0026gt; \u0026lt;GuaranteeAccepted\u0026gt; \u0026lt;PaymentCard\u0026gt; \u0026lt;TPA_Extensions\u0026gt; \u0026lt;Param key = \u0026quot;URL\u0026quot; value = \u0026quot;http://www.exampleUrl.com/\u0026quot;/\u0026gt; \u0026lt;/TPA_Extensions\u0026gt; \u0026lt;/PaymentCard\u0026gt; \u0026lt;/GuaranteeAccepted\u0026gt; \u0026lt;/GuaranteesAccepted\u0026gt; \u0026lt;/Guarantee\u0026gt; .. \u0026lt;/ResGlobalInfo\u0026gt; \u0026lt;/HotelReservation\u0026gt; \u0026lt;/HotelReservations\u0026gt; \u0026lt;/OTA_HotelResRS\u0026gt;     Element Number Type Description     OTA_HotelResRS 1  Root Node.   OTA_HotelResRS/Success 0..1  Should only be present if it was a successful response. The Errors node should not be present if the Success node is present.   OTA_HotelResRS/HotelReservations 0..1  Node containing the reservation.   HotelReservations/HotelReservation 1  Node containing information about the reservation.   @ResStatus 1 String Status of the reservation. The possible status value is: \u0026lsquo;Confirmed\u0026rsquo;   @CreateDateTime 1 DateTime Date and time when the reservation was made.   HotelReservation/RoomStays 1  Node containing the RoomStays of the reservation.   RoomStays/RoomStay 1..n  Node containing RoomStay information.   RoomStay/RoomTypes 1  Node containing information about rooms.   RoomTypes/RoomType 1  Node containing information about one room.   @RoomTypeCode 1 String Room code.   @RoomID 1 String Id of the room.   RoomType/RoomDescription 1  Node containing the description of the room.   RoomDescription/Text 1 String Description of the room.   RoomStay/RatePlans 1  Node containing information about RatePlans.   RatePlans/RatePlan 1  Node containing information about one RatePlan.   @RatePlanCode 1  RatePlan code.   RatePlan/RatePlanDescription 1  Node containing information the RatePlan description one RatePlan.   RatePlanDescription/Text 1 String Description of the RatePlan.   RatePlan/Commission 1  Node containing the commission of the RatePlan.   Percent 1 Decimal Commission of the RatePlane.   RoomStay/RoomRates 1  Node containing information about RoomRates.   RoomRates/RoomRate 1  Node containing information about one RoomRate.   @EffectiveDate 1 Date Effective date when the RoomRate start applying.   @ExpireDate 1 Date Expire date when the RoomRate ends applying. Check out night minus 1.   @RoomTypeCode 1 String Code of the Room.   @InvBlockCode 1 String Inventary block code.   @RatePlanCode 1 String Code of the RatePlan.   RoomRate/Rates 1  Node containing information about the rates.   Rates/Rate 1  Node containing information about one rate.   @EffectiveDate 1 Date Effective date when the Rate start applying.   @ExpireDate 1 Date Expire date when the Rate ends applying.   Rate/Base 1  Node containing core information about the rate.   @AmountBeforeTax 0..1 Decimal Amount before tax of the rate.   @AmountAfterTax 1 Decimal Amount after tax of the rate.   @CurrencyCode 1 String Currency code of the rate.   Rate/CancelPolicies 1  Node containing information about cancel policies which are applied to the rate.   CancelPolicies/CancelPenalty 0..n  Node containing information about one cancel penalty.   @PolicyCode 1 String Policy code of the cancel penalty.   RoomRate/Total 1  Node containing information about the total price of the RoomRate.   @AmountBeforeTax 0..1 Decimal Amount before tax of the RoomRate.   @AmountAfterTax 1 Decimal Amount after tax of the RoomRate.   @CurrencyCode 1 String Currency code of the RoomRate.   RoomStay/CancelPenalties 1  Node containing all cancel penalties of the RoomStay.   CancelPenalties/CancelPenalty 0..n  Node containing information about one cancel penalty.   @PolicyCode 1 String Policy code of the cancel penalty.   @NonRefundable 1 Boolean Indicates whether the Rate is refundable or not.   CancelPenalty/Deadline 0..n  Node containing information about the deadline of the cancel penalty.   @AbsoluteDeadline 1 DateTime Indicates when the absolute deadline.   @OffsetTimeUnit 1 String Time unit of the offset for the absolute deadline.   @OffsetUnitMultiplier 1 Integer Number of time units of offset for the absolute ege deadline.   @OffsetDropTime 1 String Indicates when the deadline is applied.   CancelPenalty/AmountPercent 0..n  Amount of the cancel penalty.   @Percent 1 String Percent of the total charged as a cancel penalty amount. Percent or NmbrOfNights must be present.   @NmbrOfNights 1 String Number of nights charged as a cancel penalty amount.   @CurrencyCode 1 String Currency code of the cancel penalty amount.   RoomStay/BasicPropertyInfo 1  Node containing basic information of the property.   RoomStay/Comments 0..1  Node containing information of the customer comments.   Comments/Comment 1..n String Customer comment text   Comment/Text 1  Node containing information about one customer comment   RoomStay/ServiceRPHs 1  Node containing information of the guests of the room.   ServiceRPHs/ServiceRPH 1..n  Node containing information of a guest of the room.   @RPH 1 String Code of a guest of the room. Match with @ResGuestRPH at the ResGuests node.   HotelCode 1 Integer Hotel code.   HotelName 1 String Hotel name.   HotelReservation/ResGuests 1  Node containing all reservation guests.   ResGuests/ResGuest 1..n  Node containing information about one of the guests.   ResGuest/ResGuest 1..n  Node containing information about one of the guests.   @ResGuestRPH 1 Integer RPH of the guest.   @AgeQualifyingCode 1 Integer Age qualifying code of the guest.   ResGuest/Profiles 1  Node containing information about the profiles of the guest.   Profiles/ProfileInfo 1  Node containing information about the profile of the guest.   ProfileInfo/Customer 1  Node containing customer information of the guest.   Customer/PersonName 1  Node containing the person name of the guest.   PersonName/NamePrefix 1 String Prefix/Traitement name of the guest.   PersonName/GivenName 1 String Given name of the guest.   PersonName/Surname 1 String Surname of the guest.   ResGuest/GuestCounts 1  Node containing quantity informations for the guest.   GuestCounts/GuestCount 1  Node containing quantity information for the guest.   @Age 1 Integer Age of the guest.   ResGlobalInfo 1  Node containing general information about the reservation.   ResGlobalInfo/Total 1  Node containing the total price.   @AmountBeforeTax 0..1 Decimal Amount before tax of the Reservation.   @AmountAfterTax 1 Decimal Amount after tax of the Reservation.   @CurrencyCode 1 String Currency code of the Reservation.   ResGlobalInfo/Guarantee 0..1  Node containing the Guarantee provided with the reservation.   @PaymentCode 1  Contains the payment method accepted by the rate. See Payment Type Codes list in section 7.6.3.   Guarantee/GuaranteesAccepted 0..1  Node containing the Guarantee provided with the reservation.   GuaranteesAccepted/GuaranteeAccepted 1  Node that contains the booking payment details accepted.   GuaranteeAccepted/PaymentCard 1  Node that contains the credit card accepted. The credit card information can be a URL with the information(in TPA_Extension tag) or the details in the PaymentCard tags and attributes.   @CardCode 1 String Contains the credit card code. See Credit Card Codes list in section 7.6.4.   @ExpireDate 0..1 String This is the expiry date of the credit card used for deposit/prepayment. Format MMyy.   PaymentCard/CardHolderName 0..1 String PaymentCard / CardHolderName.   PaymentCard/CardNumber/PlainText 0..1 String This is actual number of the credit card used for deposit/prepayment.   PaymentCard/SeriesCode/PlainText 0..1 String The SeriesCode attribute is used (Optionally) for the security number of the card.   PaymentCard/TPA_Extensions 0..1  Optional, contains credit card URL.   Param 1     @key 1 String URL.   @value 1 String URL where the Credit card details are stored.   ResGlobalInfo/HotelReservationIDs 1  Node containing the ids of the reservation.   HotelReservationIDs/HotelReservationID 2  Node containing information of one reservation id.   @ResIDValue 1 String Value of the id.   @ResIDSourceContext 1 String Id context.   ResGlobalInfo/Profiles 1  Node containing information about the profiles of the reservation.   Profiles/ProfileInfo 1  Node containing information about the profile of the reservation.   ProfileInfo/Profile 1  Node containing information about the profile of the reservation.   Profile/Customer 1  Node containing information about the customer of the reservation. The customer of the reservation can be or not a pax of the reservation. If it\u0026rsquo;s a pax will be present in ResGuests node.   Customer/PersonName 1  Node containing the person name of the customer of the reservation.   PersonName/NamePrefix 1 String Name prefix of the customer.   PersonName/GivenName 1 String Given name of the customer.   PersonName/Surname 1 String Surname of the customer.   Customer/Telephone 1  Node containing information about the telephone of the customer.   @PhoneTechType 1 String Phone technology type.   @PhoneNumber 1 String Phone number.   @FormattedInd 1 String Indicates whether associated data is formatted or not.   @DefaultInd 1 String When true, indicates a default value should be used.   Customer/Email 1  Node containing information about the email of the customer.   @DefaultInd 1 String When true, indicates a default value should be used.   @EmailType 1 String Indicates the type of the email.   Value 1 String Email of the customer.   Customer/Address 1  Node containing information about the address of the customer.   Address/AddressLine 1 String Address of the customer.   Address/CityName 1 String City name.   Address/PostalCode 1 String Postal code.   Address/StateProv 1 String Node containing information about the state or the province of the customer.   @StateCode 1 String State code.   Value 1 String State or province name.   Address/CountryName 1 String Country name.   @Code 1 String Country code.   Value 1 String Country name.    HotelResNotifRS Success Response\n\u0026lt;OTA_HotelResNotifRS xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot; Timestamp = \u0026quot;2018-09-12T23:09:08+03:00\u0026quot;\u0026gt; \u0026lt;HotelReservations\u0026gt; \u0026lt;HotelReservation ResStatus = \u0026quot;Confirmed\u0026quot;\u0026gt; \u0026lt;ResGlobalInfo\u0026gt; \u0026lt;HotelReservationIDs\u0026gt; \u0026lt;HotelReservationID ResID_Value = \u0026quot;**providerLocator**\u0026quot; ResID_SourceContext = \u0026quot;Provider\u0026quot;/\u0026gt; \u0026lt;/HotelReservationIDs\u0026gt; \u0026lt;/ResGlobalInfo\u0026gt; \u0026lt;/HotelReservation\u0026gt; \u0026lt;/HotelReservations\u0026gt; \u0026lt;Success/\u0026gt; \u0026lt;/OTA_HotelResNotifRS\u0026gt;  Error Response\n\u0026lt;OTA_HotelResNotifRS xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot; Timestamp = \u0026quot;2018-09-12T23:09:08+03:00\u0026quot;\u0026gt; \u0026lt;Errors\u0026gt; \u0026lt;Error ShortText = \u0026quot;Confirmation error\u0026quot; Code = \u0026quot;50\u0026quot;\u0026gt;Hotel doesn't exist\u0026lt;/Error\u0026gt; \u0026lt;/Errors\u0026gt; \u0026lt;/OTA_HotelResNotifRS\u0026gt;     Element Number Type Description     OTA_HotelResNotifRS 1  Root Node.   OTA_HotelResNotifRS/Success 0..1  Should only be present if it was a successful response. The Errors node should not be present if the Success node is present.   OTA_HotelResNotifRS/Errors 0..1  Should only be present if it was a successful response. The Errors node should not be present if the Success node is present.   Errors/Error 1..n  Node containing the errors.   @ResIDValue_ 1 String Value of the id.   OTA_HotelResNotifRS/HotelReservations 0..1  Node containing the reservation. Only needed if locator is provided.   HotelReservations/HotelReservation 1  Node containing information about the reservation.   @ResStatus 1 String Status of the reservation. The possible status value is: \u0026lsquo;Confirmed\u0026rsquo;   ResGlobalInfo 1  Node containing general information about the reservation.   ResGlobalInfo/HotelReservationIDs 1  Node containing the ids of the reservation.   HotelReservationIDs/HotelReservationID 2  Node containing information of one reservation id.   @ResIDValue 1 String Value of the id.   @ResIDSourceContext 1 String Id context.    Authentication and Headers Our system send these messages without SOAP envelop, directly the OTA_HotelResRS, as POST request with the following headers:\n Content-Type: application/xml; charset=utf-8 Authorization: Basic XXXXXXXXXXXXXXXXX  Here you can find what is Basic authentication\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/howtos/guides/certification_process/howtoapply/",
	"title": "How to apply",
	"tags": [],
	"description": "How you can apply for certification process",
	"content": "Our Certification Process should be completed once you have finished the development.\nOnce Certification Process logs have been delivered through our Customer Care service desk, we will review it and advise you once the integration is certified.\n Within your WelcomePack email you should have received a user to access our customer care portal. Click on Certification Process option and upload or drag and drop your logs. You will be issued a WECARE ticket number. Any time you wish to comment on the issue or check on the status of your certification, all you need to do is log into Jira and open your WECARE ticket number. Once you pass the certification process, you are technically ready to start buying through our Hub.  Send us the following information in order to proceed with the certification process:\n CURL request and response of all the XTG methods used on your side to make an availability, valuation, reservation, cancellation, booking detail request of each case and an example of booking list. Additionally, attach the resulting XTG response interpretation screenshots of your system so we can insure you are showing the information correctly.  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/how-to-guides/",
	"title": "How to guides",
	"tags": [],
	"description": "How to guides",
	"content": "   Configuration Element      Booking flow      Connectivity      Errors     "
},
{
	"uri": "https://travelgatex.com/applications/logging/howtos/",
	"title": "How-to guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": " The guides   Query Logging How to query about your performance\n    "
},
{
	"uri": "https://travelgatex.com/applications/stats/howtos/",
	"title": "How-to guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": " The guides   Query Stats How to query about your performance\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/security/identity-access-management/",
	"title": "Identity and access management",
	"tags": [],
	"description": "Advanced security management",
	"content": " This section provides an overview of Identity and access management.\nTravelgateX identity and acccess management lets administrators authorize who can take action on specific resources, giving you full control and internal visibility to manage resources centrally.\nIdentity and access management provides an unified view of your security policy across your entire organization, with built-in auditing to ease compliance processes.\nAs an administrator, when you register with us, we provide you with login details to access your TravelgateX account, including a username and password. As administrator, you can then add additional users to your account and grant them specific access.\nIdentity and access management lets you manage access control by defining who Member has what kind of access Role to each resource:\nConcepts related to identity You grant access to members which can be either:\n Users: A developer, administrator or any other person from your Organisation who interacts with the TravelgateX Platform. An email address can be used as the identity of a User.\n Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.\n  Concepts related to access management When an authenticated member attempts to make a request, the IAM policy will decide if the member is allowed to perform the operation requested.\nResources and Groups You can grant access to member for each resource or set of resources. Some examples of common resources are Suppliers, Accesses and Clients.\nGroups are organized hierarchically, where the Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.\nHierarchy assignment Resources are assigned to groups and propagated by groups hierarchically from bottom to top.\nPermissions and Roles Permissions determine what operations are allowed on a resource.\nA role is a collection of permissions. You cannot assign a permission to the member directly; instead you grant them a role. When you grant a role to a user, you grant them all the permissions that the role contains.\nCommon roles include: - Viewer: Allows a User to make Queries of resources, but not change any data - Editor: Allows a User to make Mutations (changes) to the data - Special: In your admin account, you can create special roles that might allow some of your users to only access specific resources. For example, if you have a large team and have divided them based on suppliers, you may choose to only grant each User access to the resources for a specific Supplier.\nYou can grant roles to members, which define who has what type of access. A policy is attached to a resource and identifies which member role is applied to every resource.\nFor more information about Identity and access management configuration, check out our tutorial How-to configure HotelX permissions\u0026gt; "
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/dataset-content/benchmark/benchmark-insights/",
	"title": "Insights Benchmark Dataset",
	"tags": [],
	"description": "Understand Insights Benchmark Dataset",
	"content": " On this page, you will learn how the data is stored in Insights Benchmark Dataset and how to interpret the differents table fields.\nOverview First of all, it\u0026rsquo;s important to know that the benchmark is given by different period of time:\n Daily Monthly  and 3 levels of detail:\n General for TravelgateX. By destination. By seller if your organization has a buyer profile. By buyer if your organization has a seller profile.  These three levels of detail are given by 6 tables, offering in that way all the combinations of detail. This dataset is updated daily. From now, let\u0026rsquo;s focus on a seller organization. The case of buyer organization is analogous.\nThe most specific level of detail is given per buyer and city. In there, the benchmark is calculated considering all suppliers in TravelgateX per each city and buyer, this means that you\u0026rsquo;ll be able to know differents benchmarks for any of your buyers in a specific city. The table that contains that information is benchmarking\\_country\\_city\\_client\\_(daily|monthly)\\_seller.\nThe next level of detailed is given per buyer and country. In there, the benchmark is calculated considering all suppliers in TravelgateX per each country and buyer, this means that you\u0026rsquo;ll be able to know differents benchmarks for any of your buyers in a specific country. The table that contains that information is benchmarking\\_country\\_client\\_(daily|monthly)\\_seller.\nThe following level detail in given per buyer. In there, the benchmark is calculated considering all suppliers in TravelgateX , this means that you\u0026rsquo;ll be able to know differents benchmarks for any of your buyers for the globaltmarket of TravelgateX. The table that contains that information is benchmarking\\_client\\_(daily|monthly)\\_seller.\nBy the other hand, you can consult your benchmarks just per city. In there, the benchmark is calculated considering all suppliers in TravelgateX per each city. The table that contains that information is benchmarking\\_country\\_city\\_(daily|monthly)\\_seller.\nThe next level of detailed is given per country. In there, the benchmark is calculated considering all suppliers in TravelgateX per each country. The table that contains that information is benchmarking\\_country\\_(daily|monthly)\\_seller.\nFinally, the most general level of detail is given per provider. In there, the benchmark is calculated considering all suppliers in TravelgateX. The table that contains that information is benchmarking\\_(daily|monthly)\\_seller.\nAs a summary of above, the next table sum up the level of details for the 6 benchmark tables:\n    Buyer Information Not Buyer Information     Destination benchmarking_country_city_client_(daily|monthly)_seller benchmarking_country_city_(daily\\    benchmarking_country_client_(daily|monthly)_seller benchmarking_country_(daily|monthly)_seller   Not Destination benchmarking_client_(daily|monthly)_seller benchmarking_(daily|monthly)_seller    Next, we\u0026rsquo;ll explain how to interpret the differents fields of the table.\nInterpretation The bechmark table analyses the total of uniques searches per hotel returning availability, the total of confirmed bookings and the total revenue net in euros. These analisys is made by different metrics:\n The real value:  Total of differents hotels returning availabitity: availabitity_value Total of bookings: booking_value Total of revenue: revenue_value  The total for TravelgateX:  Total of differents hotels returning availabitity: availability_tgx Total of bookings: booking_tgx Total of revenue: revenue_tgx  What percentage of suppliers are above than me:  Percentage of total of providers that are worse than me in availables hotels availability_percentile Percentage of total of providers that are worse than me in bookings: booking_percentile Percentage of total of providers that are worse than me in revenue net: revenue_percentile  Position of ranking:  Position of the ranking by availables hotels considering all sellers in TravelgateX: availability_rank Position of the ranking by my bookings considering all sellers in TravelgateX: booking_rank Position of the ranking by revenue net considering all sellers in TravelgateX: revenue_rank  Average per seller (competitive set):  Average of all the availables hotels per seller: availability_compset Average of all the bookings per seller: booking_compset Average of all the revenue net per seller: revenue_compset  The value of the best seller:  Returning availables hotels: availability_best_compset In bookings: booking_best_compset In revenue net: revenue_best_compset   Examples Let\u0026rsquo;s consider the following row from the table benchmarking\\_country\\_city\\_client\\_(daily\\|monthly)\\_seller:\n   client_id provider_id country zone_2 city country_city_client search_date availability_value availability_percentile availability_rank availability_compset availability_best_compset booking_value booking_percentile booking_rank booking_compset booking_best_compset revenue_value revenue_percentile revenue_rank revenue_compset revenue_best_compset total_provider country_name availability_tgx booking_tgx revenue_tgx     client 1 provider 1 ES Illes Balears Palma ES,Palma,client 1 2019-04-03 00:00:00 UTC 130 0.8889 1 12.625 130 3 0.7674 3 1.426 15 2104.72 0.8163 2 620.36 2513.5 8 Spain 60000 20 3600    Let\u0026rsquo;s see what we can say about the provider 1 at 2019-04-03 00:00:00 UTC in availability for the client 1:\n Has returned 130 diferents hotels availables in Palma to client 1 1 . The total of differents hotels availables in Palma requested by the client 1 is 60000 1 . The provider is above de 89.89% of providers in Palma of client 1. This provider is the first returning availability in Palma for client 1. Here, that\u0026rsquo;s a point, because the provider is first in the ranking but the percentile is not 100%. That\u0026rsquo;s why there is another provider retuning the same numbers of hotels availables. The average of hotels availables per provider in Palma for client 1 is 12.25. The provider in TGX that has obtained the most available hotels has obtained a total of 130 availables hotels, so provider 1 is the best seller for the client 1 or there is not another seller returning more availables hotels.  Let\u0026rsquo;s see what we can say about the provider 1 at 2019-04-03 00:00:00 UTC in bookings for the client 1:\n Client 1 has booked 3 hotels in Palma to provider 1. The total of bookings in Palma for the client 1 is 20. The seller is above the 76.74% providers operating in Palma for the client 1. This seller is the third in bookability in Palma for the client 1. The average of bookings in Palma per seller for the client 1 is 1.426. The provider in TGX that has obtained the most bookings has obtained a total of 15 bookings, so provider 1 is not so far of the first seller in bookability in Palma for the client 1.  Let\u0026rsquo;s see what we can say for the provider 1 at 2019-04-03 00:00:00 UTC in revenue for the client 1:\n The bookings with net price in Palma have been sold for 2104.72‚Ç¨ to client 1. The total of revenue in Palma for all the bookings with net price for the client 1 is 3600‚Ç¨. The seller is above de 81.63% providers operating in Palma for the client 1. This seller is the second in revenue in Palma for the client 1. The average of revenue in Palma per seller is 620.36‚Ç¨ for the client 1. The provider in TGX that has obtained the most revenue has obtained 2513.5‚Ç¨, so provider 1 is close to the seller with largest revenue in Palma for the client 1.  The benchmarks have been calculated comparing provider 1 with other 8 providers.\nLet\u0026rsquo;s consider the following row from the table benchmarking\\_country\\_city\\_(daily\\|monthly)\\_seller:\n   provider_id country city country_city search_date availability_value availability_percentile availability_rank availability_compset availability_best_compset booking_value booking_percentile booking_rank booking_compset booking_best_compset revenue_value revenue_percentile revenue_rank revenue_compset revenue_best_compset total_provider country_name availability_tgx booking_tgx revenue_tgx     provider 1 CU La Habana Vieja La Habana Vieja 2019-04-03 00:00:00 UTC 20 1.0 1 9.3953 20 2 0.902 2 1.8889 4 676.95 0.9412 4 701.0125 1612.7 52 Cuba 60000 20 3600    Let\u0026rsquo;s see what we can say about the provider 1 at 2019-04-03 00:00:00 UTC in availability:\n Has returned 20 diferents hotels availables in La Habana Vieja 1 . The total the differents hotels availables in La Habana Vieja is 60000 1 . The provider is above de 100% of providers in La Habana Vieja (so it\u0026rsquo;s the best). This provider is the first returning availability in La Habana Vieja. The average of hotels availables per provider in La Habana Vieja is 9.3953. The provider in TGX that has obtained the most available hotels has obtained a total of 20 availables hotels, so is the best seller.  Let\u0026rsquo;s see what we can say about the provider 1 at 2019-04-03 00:00:00 UTC in bookings:\n Has have 2 bookings in La Habana Vieja. The total of bookings in La Habana Vieja is 20. The seller is above the 90.72% providers operating in La Habana Vieja. This seller is the second in bookability in La Habana Vieja. The average of bookings in La Habana Vieja per seller is 1.8889. The provider in TGX that has obtained the most bookings has obtained a total of 4 bookings, so provider 1 has sold the half of bookings than the best seller in bookability in La Habana Vieja.  Let\u0026rsquo;s see what we can say for the provider 1 at 2019-04-03 00:00:00 UTC in revenue:\n The bookings with net price in La Habana Vieja have been sold for 676.95‚Ç¨. The total of revenue in La Habana Vieja for all the bookings with net price is 3600‚Ç¨. The seller is above de 94.12% providers operating in La Habana Vieja. This seller is the fourth in revenue in La Habana Vieja. The average of revenue in La Habana Vieja per seller is 701.0125‚Ç¨. The provider in TGX that has obtained the most revenue has obtained 1612.7‚Ç¨, so provider1 is far to the seller with largest revenue in La Habana Vieja.  The benchmarks have been calculated comparing provider 1 with other 52 providers.\nTables Descriptions of each table and their correspondent fields are found below:\nbenchmark_country_city_client_(daily|monthly)_seller This table contains different benchmarks of your organization for the TravelgateX marketplace at specific level of buyer, country and city. The benchmarks are based on the total of differents and availables hotels that have been requested, the total of bookings and the total amount of net revenue of the bookings.\nfields\n search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. country (STRING). Country of destination (ISO 3166-1 alpha-2). zone_2 (STRING). Administrative second level zone E.g. Madrid city. city (STRING). Last level of destination. country_city_client (STRING). Concatenation of fields city, country and client. availability_value (NUMBER). Quantity of unique hotels available for key (search_date, city, country, provider_owner, client_owner). availability_percentile (FLOAT). Value of percentile of unique hotels availables of all the sellers of TravelgateX for key (search_date, city, country, client_owner). availability_rank (NUMBER). Position of the ranking of unique hotels availables for key (search_date, city, country, client_owner) of the total of sellers of TravelgateX. availability_compset (FLOAT). Average of unique hotels available for key (search_date, city, country, client_owner) of the total of sellers of TravelgateX. availability_best_compset (INTEGER). Best availability value in the competitive set. booking_value (NUMBER). Quantity of confirmed bookings for key (search_date, city, country, provider_owner, client_owner). booking_percentile (FLOAT). Value of percentile of confirmed bookings of all the sellers of TravelgateX for key (search_date, city, country, client_owner). booking_rank (NUMBER). Position of the ranking of confirmed bookings for key (search_date, city, country, client_owner) of the total of sellers of TravelgateX. booking_compset (FLOAT). Average of quantity of confirmed bookings for key (search_date, city, country, client_owner) of the total of sellers of TravelgateX. booking_best_compset (INTEGER). Best booking value in the competitive set. revenue_value (FLOAT). Total net amount in EUR of confirmed bookings for key (search_date, city, country, provider_owner, client_owner). revenue_percentile (FLOAT). Value of percentile of net amount in EUR of confirmed bookings of all the sellers of TravelgateX for key (search_date, city, country, client_owner). revenue_rank (NUMBER). Position of the ranking of net amount in EUR of confirmed bookings for key (search_date, city, country, client_owner) of the total of sellers of TravelgateX. revenue_compset (FLOAT). Average of net amount in EUR of confirmed bookings for key (search_date, city, country, client_owner) of the total of sellers of TravelgateX. revenue_best_compset (INTEGER). Best revenue value in the competitive set. total_provider (STRING). Total of suppliers that have been considered for the benchmarking. country_name (STRING). Country name of destination (English). availability_tgx (NUMBER). - Quantity of unique hotels available in TravelgateX for key above (search_date, city, country, provider_id) booking_tgx (NUMBER). - Quantity of confirmed bookings in TravelgateX for the Key above (seach_date, city, country, provider_id) revenue_tgx (NUMBER). - Total net amount in EUR of confirmed bookings in TravelgateX for the key (search_date, city, country, provider_owner)  Preview\n   client_owner provider_owner country zone_2 city country_city_client search_date availability_value availability_percentile availability_rank availability_compset availability_best_compset booking_value booking_percentile booking_rank booking_compset booking_best_compset revenue_value revenue_percentile revenue_rank revenue_compset revenue_best_compset total_provider country_name availability_tgx booking_tgx revenue_tgx     client 1 provider 1 ES Illes Balears Palma Palma,ES,client 1 2019-04-03 00:00:00 UTC 13 0.8889 1 6.625 13 0 0.0 3 1.5 6 0.0 0.0 3 381.9873 150 10 Spain 250 55 120   client 2 provider 2 CL Provincia de Santiago Santiago Santiago,CL,client 2 2019-04-03 00:00:00 UTC 57 0.8571 2 28.4286 65 1 0.8571 2 3.5 2 322.02 0.0532 2 3024.72 145498 8 Chile 330 33 130   client 3 provider 3 AE Dubai Jaddaf Jaddaf,AE,client 3 2019-04-03 00:00:00 UTC 97 0.8462 2 47.0714 250 0 0.0 2 1.0 5 0.0 0.0 2 1333.491 125 14 United Arab Emirates 225 21 122    benchmark_country_client_(daily|monthly)_seller This table contains different benchmarks of your organization for the TravelgateX marketplace at specific level of buyer and country. The benchmarks are based on the total of differents and availables hotels that have been requested, the total of bookings and the total amount of net revenue of the bookings.\nfields\n search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. country (STRING). Country of destination (ISO 3166-1 alpha-2). country_client (STRING). Concatenation of fields country and client. availability_value (NUMBER). Quantity of unique hotels available for key (search_date, country, provider_owner, client_owner). availability_percentile (FLOAT). Value of percentile of unique hotels availables of all the sellers of TravelgateX for key (search_date, country, client_owner). availability_rank (NUMBER). Position of the ranking of unique hotels availables for key (search_date, country, client_owner) of the total of sellers of TravelgateX. availability_compset (FLOAT). Average of unique hotels available for key (search_date, country, client_owner) of the total of sellers of TravelgateX. availability_best_compset (INTEGER). Best availability value in the competitive set. booking_value (NUMBER). Quantity of confirmed bookings for key (search_date, country, provider_owner, client_owner). booking_percentile (FLOAT). Value of percentile of confirmed bookings of all the sellers of TravelgateX for key (search_date, country, client_owner). booking_rank (NUMBER). Position of the ranking of confirmed bookings for key (search_date, country, client_owner) of the total of sellers of TravelgateX. booking_compset (FLOAT). Average of quantity of confirmed bookings for key (search_date, country, client_owner) of the total of sellers of TravelgateX. booking_best_compset (INTEGER). Best booking value in the competitive set. revenue_value (FLOAT). Total net amount in EUR of confirmed bookings for key (search_date, country, provider_owner, client_owner). revenue_percentile (FLOAT). Value of percentile of net amount in EUR of confirmed bookings of all the sellers of TravelgateX for key (search_date, country, client_owner). revenue_rank (NUMBER). Position of the ranking of net amount in EUR of confirmed bookings for key (search_date, country, client_owner) of the total of sellers of TravelgateX. revenue_compset (FLOAT). Average of net amount in EUR of confirmed bookings for key (search_date, country, client_owner) of the total of sellers of TravelgateX. revenue_best_compset (INTEGER). Best revenue value in the competitive set. total_provider (STRING). Total of suppliers that have been considered for the benchmarking. country_name (STRING). Country name of destination (English). availability_tgx (NUMBER). - Quantity of unique hotels available in TravelgateX for key (search_date, country, provider_owner) booking_tgx (NUMBER). - Quantity of confirmed bookings in TravelgateX for the Key (seach_date, country, provider_owner) revenue_tgx (NUMBER). - Total net amount in EUR of confirmed bookings in TravelgateX for the key (search_date, country, provider_owner)  Preview\n   client_owner provider_owner country country_client search_date availability_value availability_percentile availability_rank availability_compset availability_best_compset booking_value booking_percentile booking_rank booking_compset booking_best_compset revenue_value revenue_percentile revenue_rank revenue_compset revenue_best_compset total_provider country_name availability_tgx booking_tgx revenue_tgx     client 1 provider 1 ES ES,client 1 2019-04-03 00:00:00 UTC 13 0.8889 1 6.625 13 0 0.0 3 1.5 6 0.0 0.0 3 381.9873 150 10 Spain 250 55 120   client 2 provider 2 CL CL,client 2 2019-04-03 00:00:00 UTC 57 0.8571 2 28.4286 65 1 0.8571 2 3.5 2 322.02 0.0532 2 3024.72 145498 8 Chile 330 33 130   client 3 provider 3 AE AE,client 3 2019-04-03 00:00:00 UTC 97 0.8462 2 47.0714 250 0 0.0 2 1.0 5 0.0 0.0 2 1333.491 125 14 United Arab Emirates 225 21 122    benchmark_client_(daily|monthly)_seller This table contains different benchmarks of your organization for the TravelgateX marketplace at specific level of buyer. The benchmarks are based on the total of differents and availables hotels that have been requested, the total of bookings and the total amount of net revenue of the bookings.\nfields\n search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. availability_value (NUMBER). Quantity of unique hotels available for key (search_date, provider_owner, client_owner). availability_percentile (FLOAT). Value of percentile of unique hotels availables of all the sellers of TravelgateX for key (search_date, provider_owner, client_owner). availability_rank (NUMBER). Position of the ranking of unique hotels availables for key (search_date, provider_owner, client_owner) of the total of sellers of TravelgateX. availability_compset (FLOAT). Average of unique hotels available for key (search_date, provider_owner, client_owner) of the total of sellers of TravelgateX. availability_best_compset (INTEGER). Best availability value in the competitive set. booking_value (NUMBER). Quantity of confirmed bookings for key (search_date, provider_owner, provider_owner, client_owner). booking_percentile (FLOAT). Value of percentile of confirmed bookings of all the sellers of TravelgateX for key (search_date, provider_owner, client_owner). booking_rank (NUMBER). Position of the ranking of confirmed bookings for key (search_date, provider_owner, client_owner) of the total of sellers of TravelgateX. booking_compset (FLOAT). Average of quantity of confirmed bookings for key (search_date, provider_owner, client_owner) of the total of sellers of TravelgateX. booking_best_compset (INTEGER). Best booking value in the competitive set. revenue_value (FLOAT). Total net amount in EUR of confirmed bookings for key (search_date, provider_owner, client_owner). revenue_percentile (FLOAT). Value of percentile of net amount in EUR of confirmed bookings of all the sellers of TravelgateX for key (search_date, provider_owner, client_owner). revenue_rank (NUMBER). Position of the ranking of net amount in EUR of confirmed bookings for key (search_date, provider_owner, client_owner) of the total of sellers of TravelgateX. revenue_compset (FLOAT). Average of net amount in EUR of confirmed bookings for key (search_date, provider_owner, client_owner) of the total of sellers of TravelgateX. revenue_best_compset (INTEGER). Best revenue value in the competitive set. total_provider (STRING). Total of suppliers that have been considered for the benchmarking. availability_tgx (NUMBER). - Quantity of unique hotels available in TravelgateX for key (search_date, provider_owner, client_owner) booking_tgx (NUMBER). - Quantity of confirmed bookings in TravelgateX for the Key (seach_date, provider_owner, client_owner) revenue_tgx (NUMBER). - Total net amount in EUR of confirmed bookings in TravelgateX for the key (search_date, provider_owner,client_owner)  Preview\n   client_owner provider_owner search_date availability_value availability_percentile availability_rank availability_compset availability_best_compset booking_value booking_percentile booking_rank booking_compset booking_best_compset revenue_value revenue_percentile revenue_rank revenue_compset revenue_best_compset total_provider country_name availability_tgx booking_tgx revenue_tgx     client 1 provider 1 2019-04-03 00:00:00 UTC 13 0.8889 1 6.625 13 0 0.0 3 1.5 6 0.0 0.0 3 381.9873 150 10 Spain 250 55 120   client 2 provider 2 2019-04-03 00:00:00 UTC 57 0.8571 2 28.4286 65 1 0.8571 2 3.5 2 322.02 0.0532 2 3024.72 145498 8 Chile 330 33 130   client 3 provider 3 2019-04-03 00:00:00 UTC 97 0.8462 2 47.0714 250 0 0.0 2 1.0 5 0.0 0.0 2 1333.491 125 14 United Arab Emirates 225 21 122    benchmark_country_city_(daily|monthly)_seller This table contains different benchmarks of your organization for the TravelgateX marketplace at specific level of country and city. The benchmarks are based on the total of differents and availables hotels that have been requested, the total of bookings and the total amount of net revenue of the bookings.\nFields\n search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). provider_owner (STRING). Organization\u0026rsquo;s name of the provider. country (STRING). Country of destination (ISO 3166-1 alpha-2). city (STRING). Last level of destination. country_city (STRING). Concatenation of fields city and country. zone_2 (STRING). Administrative second level zone E.g. Madrid city. availability_value (NUMBER). Quantity of unique hotels available for key (search_date, city, country, provider_owner). availability_percentile (FLOAT). Value of percentile of unique hotels availables of all the sellers of TravelgateX for key (search_date, city, country, provider_owner). availability_rank (NUMBER). Position of the ranking of unique hotels availables for key (search_date, city, country, provider_owner) of the total of sellers of TravelgateX. availability_compset (FLOAT). Average of unique hotels available for key (search_date, city, country , provider_owner)of the total of sellers of TravelgateX. availability_best_compset (INTEGER). Best availability value in the competitive set. booking_value (NUMBER). Quantity of confirmed bookings for key (search_date, city, country, provider_owner). booking_percentile (FLOAT). Value of percentile of confirmed bookings of all the sellers of TravelgateX for key (search_date, city, country, provider_owner). booking_rank (NUMBER). Position of the ranking of confirmed bookings for key (search_date, city, country, provider_owner) of the total of sellers of TravelgateX. booking_compset (FLOAT). Average of quantity of confirmed bookings for key (search_date, city, country, provider_owner) of the total of sellers of TravelgateX. booking_best_compset (INTEGER). Best booking value in the competitive set. revenue_value (FLOAT). Total net amount in EUR of confirmed bookings for key (search_date, city, country, provider_owner). revenue_percentile (FLOAT). Value of percentile of net amount in EUR of confirmed bookings of all the sellers of TravelgateX for key (search_date, city, country, provider_owner). revenue_rank (NUMBER). Position of the ranking of net amount in EUR of confirmed bookings for key (search_date, city, country, provider_owner) of the total of sellers of TravelgateX. revenue_compset (FLOAT). Average of net amount in EUR of confirmed bookings for key (search_date, city, country, provider_owner) of the total of sellers of TravelgateX. revenue_best_compset (INTEGER). Best revenue value in the competitive set. total_provider (STRING). Total of suppliers that have been considered for the benchmarking. country_name (STRING). Country name of destination (English). availability_tgx (NUMBER). - Quantity of unique hotels available in TravelgateX for key (search_date, city, country, provider_owner) booking_tgx (NUMBER). - Quantity of confirmed bookings in TravelgateX for the Key (seach_date, city, country, provider_owner) revenue_tgx (NUMBER). - Total net amount in EUR of confirmed bookings in TravelgateX for the key (search_date, city, country, provider_owner)  Preview\n   provider_owner country zone_2 city country_city search_date availability_value availability_percentile availability_rank availability_compset availability_best_compset booking_value booking_percentile booking_rank booking_compset booking_best_compset revenue_value revenue_percentile revenue_rank revenue_compset revenue_best_compset total_provider country_name availability_tgx booking_tgx revenue_tgx     provider 1 ES Illes Balears Palma Palma,ES 2019-04-03 00:00:00 UTC 13 0.8889 1 6.625 13 0 0.0 3 1.5 6 0.0 0.0 3 381.9873 150 10 Spain 250 55 120   provider 2 CL Provincia de Santiago Santiago Santiago,CL 2019-04-03 00:00:00 UTC 57 0.8571 2 28.4286 65 1 0.8571 2 3.5 2 322.02 0.0532 2 3024.72 145498 8 Chile 330 33 130   provider 3 AE Dubai Jaddaf Jaddaf,AE 2019-04-03 00:00:00 UTC 97 0.8462 2 47.0714 250 0 0.0 2 1.0 5 0.0 0.0 2 1333.491 125 14 United Arab Emirates 225 21 122    benchmark_country_(daily|monthly)_seller This table contains different benchmarks of your organization for the TravelgateX marketplace at specific level of country. The benchmarks are based on the total of differents and availables hotels that have been requested, the total of bookings and the total amount of net revenue of the bookings.\nfields\n search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). provider_owner (STRING). Organization\u0026rsquo;s name of the provider. country (STRING). Country of destination (ISO 3166-1 alpha-2). availability_value (NUMBER). Quantity of unique hotels available for key (search_date, country, provider_owner). availability_percentile (FLOAT). Value of percentile of unique hotels availables of all the sellers of TravelgateX for key (search_date, country, provider_owner). availability_rank (NUMBER). Position of the ranking of unique hotels availables for key (search_date, country, provider_owner) of the total of sellers of TravelgateX. availability_compset (FLOAT). Average of unique hotels available for key (search_date, country, provider_owner) of the total of sellers of TravelgateX. availability_best_compset (INTEGER). Best availability value in the competitive set. booking_value (NUMBER). Quantity of confirmed bookings for key (search_date, country, provider_owner), provider_owner. booking_percentile (FLOAT). Value of percentile of confirmed bookings of all the sellers of TravelgateX for key (search_date, country, provider_owner). booking_rank (NUMBER). Position of the ranking of confirmed bookings for key (search_date, country, provider_owner) of the total of sellers of TravelgateX. booking_compset (FLOAT). Average of quantity of confirmed bookings for key (search_date, country, provider_owner) of the total of sellers of TravelgateX. booking_best_compset (INTEGER). Best booking value in the competitive set. revenue_value (FLOAT). Total net amount in EUR of confirmed bookings for key (search_date, country, provider_owner), provider_owner. revenue_percentile (FLOAT). Value of percentile of net amount in EUR of confirmed bookings of all the sellers of TravelgateX for key (search_date, country, provider_owner). revenue_rank (NUMBER). Position of the ranking of net amount in EUR of confirmed bookings for key (search_date, country, provider_owner) of the total of sellers of TravelgateX. revenue_compset (FLOAT). Average of net amount in EUR of confirmed bookings for key (search_date, country, provider_owner) of the total of sellers of TravelgateX. revenue_best_compset (INTEGER). Best revenue value in the competitive set. total_provider (STRING). Total of suppliers that have been considered for the benchmarking. country_name (STRING). Country name of destination (English). availability_tgx (NUMBER). - Quantity of unique hotels available in TravelgateX for key (search_date, country, provider_owner) booking_tgx (NUMBER). - Quantity of confirmed bookings in TravelgateX for the Key (seach_date, country, provider_owner) revenue_tgx (NUMBER). - Total net amount in EUR of confirmed bookings in TravelgateX for the key (search_date, country, provider_owner)  Preview\n   provider_owner country search_date availability_value availability_percentile availability_rank availability_compset availability_best_compset booking_value booking_percentile booking_rank booking_compset booking_best_compset revenue_value revenue_percentile revenue_rank revenue_compset revenue_best_compset total_provider country_name availability_tgx booking_tgx revenue_tgx     provider 1 ES 2019-04-03 00:00:00 UTC 13 0.8889 1 6.625 13 0 0.0 3 1.5 6 0.0 0.0 3 381.9873 150 10 Spain 250 55 120   provider 2 CL 2019-04-03 00:00:00 UTC 57 0.8571 2 28.4286 65 1 0.8571 2 3.5 2 322.02 0.0532 2 3024.72 145498 8 Chile 330 33 130   provider 3 AE 2019-04-03 00:00:00 UTC 97 0.8462 2 47.0714 250 0 0.0 2 1.0 5 0.0 0.0 2 1333.491 125 14 United Arab Emirates 225 21 122    benchmark_(daily|monthly)_seller This table contains different benchmarks of your organization for the TravelgateX marketplace. The benchmarks are based on the total of differents and availables hotels that have been requested, the total of bookings and the total amount of net revenue of the bookings.\nfields\n search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). provider_owner (STRING). Organization\u0026rsquo;s name of the provider. availability_value (NUMBER). Quantity of unique hotels available for key (search_date, provider_owner). availability_percentile (FLOAT). Value of percentile of unique hotels availables of all the sellers of TravelgateX for key (search_date, provider_owner). availability_rank (NUMBER). Position of the ranking of unique hotels availables for key (search_date, provider_owner) of the total of sellers of TravelgateX. availability_compset (FLOAT). Average of unique hotels available for key (search_date, provider_owner) of the total of sellers of TravelgateX. availability_best_compset (INTEGER). Best availability value in the competitive set. booking_value (NUMBER). Quantity of confirmed bookings for key (search_date, provider_owner). booking_percentile (FLOAT). Value of percentile of confirmed bookings of all the sellers of TravelgateX for key (search_date, provider_owner). booking_rank (NUMBER). Position of the ranking of confirmed bookings for key (search_date, provider_owner) of the total of sellers of TravelgateX. booking_compset (FLOAT). Average of quantity of confirmed bookings for key (search_date, provider_owner) of the total of sellers of TravelgateX. booking_best_compset (INTEGER). Best booking value in the competitive set. revenue_value (FLOAT). Total net amount in EUR of confirmed bookings for key (search_date, provider_owner). revenue_percentile (FLOAT). Value of percentile of net amount in EUR of confirmed bookings of all the sellers of TravelgateX for key (search_date, provider_owner). revenue_rank (NUMBER). Position of the ranking of net amount in EUR of confirmed bookings for key (search_date, provider_owner) of the total of sellers of TravelgateX. revenue_compset (FLOAT). Average of net amount in EUR of confirmed bookings for key (search_date, provider_owner) of the total of sellers of TravelgateX. revenue_best_compset (INTEGER). Best revenue value in the competitive set. total_provider (STRING). Total of suppliers that have been considered for the benchmarking. availability_tgx (NUMBER). - Quantity of unique hotels available in TravelgateX for key above. booking_tgx (NUMBER). - Quantity of confirmed bookings in TravelgateX for the key above. revenue_tgx (NUMBER). - Total net amount in EUR of confirmed bookings in TravelgateX for the key above.  Preview\n   provider_owner search_date availability_value availability_percentile availability_rank availability_compset availability_best_compset booking_value booking_percentile booking_rank booking_compset booking_best_compset revenue_value revenue_percentile revenue_rank revenue_compset revenue_best_compset total_provider country_name availability_tgx booking_tgx revenue_tgx     provider 1 2019-04-03 00:00:00 UTC 13 0.8889 1 6.625 13 0 0.0 3 1.5 6 0.0 0.0 3 381.9873 150 10 Spain 250 55 120   provider 2 2019-04-03 00:00:00 UTC 57 0.8571 2 28.4286 65 1 0.8571 2 3.5 2 322.02 0.0532 2 3024.72 145498 8 Chile 330 33 130   provider 3 2019-04-03 00:00:00 UTC 97 0.8462 2 47.0714 250 0 0.0 2 1.0 5 0.0 0.0 2 1333.491 125 14 United Arab Emirates 225 21 122    benchmark_market_city_bw_(daily|monthly)_(buyer|seller) This table contains info from searches, quotes, bookings and revenue aggregated per search date, booking window, market, and location (country + Administrative Zone 1 + Administrative Zone 2 + City) by day|month of your organization and all buyers|sellers of TravelgateX.\nfields\n search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). booking_window (NUMBER). It is a division to describe how far away is the check-in date.  Last second (0-1 day). Last minute (2-3 days). About 1 week (4-7 days). About 2 weeks (8-14 days). About 1 month (15-30 days) About 2 months (31-60 days). About 3 months (61-90 days). More than 3 months (90+ days).  market (STRING). Source market name. E.g. Spain country (STRING). Country destination name. E.g. Spain zone_1 (STRING). Administrative first level zone. E.g. Comunidad de Madrid zone_2 (STRING). Administrative second level zone E.g. Madrid city city (STRING). City name. If the city is big enough this level shows the neighbourghood. E.G. Chamber√≠ search_ok_net (NUMBER). Quantity of searches with available options for above key (search_date, booking_window, market, country, zone_1, zone_2, city) with net price available for your organization. search_ok_unknown (NUMBER). Quantity of searches with available options for above key with a price where we don\u0026rsquo;t know if any commission is applied for your organization. search_nok (NUMBER). Quantity of searches without available options for above for your organization. tot_amount_search_net (NUMBER). Total net amount of searches for above key for your organization. booking_ok_net (NUMBER). Quantity of bookings for above key with net price available for your organization. booking_ok_unknown (NUMBER). Quantity of bookings for above key with a price where we don\u0026rsquo;t know if any commission is applied for your organization. tot_amount_booking_net (NUMBER). Total net amount of booking for above key for your organization. nights_rooms_search_ok_net (NUMBER). It is the product of the length of stay, the number of rooms requested and the field search_ok_net. nights_rooms_booking_ok_net (NUMBER). It is the product of the length of stay, the number of rooms requested and the field booking_ok_net. search_ok_net_tgx (NUMBER). Quantity of searches with available options for above key (search_date, booking_window, market, country, zone_1, zone_2, city) with net price available for all buyers|suppliers of TravelgateX. search_ok_unknown_tgx (NUMBER). Quantity of searches with available options for above key with a price where we don\u0026rsquo;t know if any commission is applied for all buyers|suppliers of TravelgateX. search_nok_tgx (NUMBER). Quantity of searches without available options for above for all buyers|suppliers of TravelgateX. tot_amount_search_net_tgx (NUMBER). Total net amount of searches for above key for all buyers|suppliers of TravelgateX. booking_ok_net_tgx (NUMBER). Quantity of bookings for above key with net price available for all buyers|suppliers of TravelgateX. booking_ok_unknown_tgx (NUMBER). Quantity of bookings for above key with a price where we don\u0026rsquo;t know if any commission is applied for all buyers|suppliers of TravelgateX. tot_amount_booking_net_tgx (NUMBER). Total net amount of booking for above key for all buyers|suppliers of TravelgateX. nights_rooms_search_ok_net_tgx (NUMBER). It is the product of the length of stay, the number of rooms requested and the field search_ok_net. nights_rooms_booking_ok_net_tgx (NUMBER). It is the product of the length of stay, the number of rooms requested and the field booking_ok_net.  Preview\n   booking_window search_date market country zone_1 zone_2 city search_ok_net search_ok_unknown search_nok booking_ok_net booking_ok_unknown tot_amount_booking_net tot_amount_search_net nights_rooms_search_ok_net nights_rooms_booking_ok_net search_ok_net_tgx search_ok_unknown_tgx search_nok_tgx booking_ok_net_tgx booking_ok_unknown_tgx tot_amount_booking_net_tgx tot_amount_search_net_tgx nights_rooms_search_ok_net_tgx nights_rooms_booking_ok_net_tgx     15-30 days (about 1 month) 2019-09-02 00:00:00 UTC Spain Spain Andalucia Almeria Las Marinas 0 0 0 0 0 0.0 0.0 0 0 423137 11442 1000767 24  8408.09 2.4921782818564382E8 1842919 109   2-3 days (last minute) 2019-09-02 00:00:00 UTC Bahrain Turkey Mugla Bodrum Guembet 14 0 54 1 0 1359.27 19616.02432 196 14 99  1148 1  1359.27 129696.2713370888 1386 14   31-60 days (about 2 months) 2019-09-02 00:00:00 UTC Romania Malta Saint Paul\u0026rsquo;s Bay  Qawra 13 0 56 1 0 523.0786 10688.083528 91 8 2548 30 2818 1  523.0786 1786575.898334005 11019 8      Taking into account that the hotels between providers do not have to be different. [return]   "
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/dataset-content/insights/",
	"title": "Insights Dataset",
	"tags": [],
	"description": "Learn about how the information is stored in our Insights Dataset",
	"content": " On this page you will learn how the data is stored in Insights Dataset.\nOverview Data is stored in multiple tables depending on the kind of information that wants to be queried:\n Insights: contains information from searches, quotes, bookings and revenue aggregated per buyer, seller, search date, check in date, nights, market, number of rooms, quantity of paxes and hotel by day|month Insights Agg: contains information similar to Insights but with a bigger aggregation. The fields check_in, adults, children and infants have disappeared. Insights Destination: contains information from searches, quotes, bookings and revenue aggregated per buyer, seller, search date, check in date, nights, market, number of rooms, quantity of paxes and location (country + Administrative Zone 1 + Administrative Zone 2 + City) by day|month. Insights Destination Agg: contains information similar to Insights Destination but with a bigger aggregation. The fields check_in, adults, children and infants have disappeared. Insights Hotel Destination: contains combined information of Insights Agg and Insights Destination Agg, in the same table you have metrics by hotel code and its destination, also with cancellation metrics. The fields pax_type, nights, market and num_rooms and username have disappeared. Effective Bookings: contains specific information about bookings and their current status (OK or Cancelled). Portfolio: contains information to know which hotels over supplier\u0026rsquo;s portfolio are being queried by the clients. This can be helpful to know which percentage over portfolio is mapped by the client. Portfolio Stats: contains information to measure the evolution of the daily_portfolio_(buyer|seller) table. This can be helpful to know if you are getting better results in your portfolio optimization.  Also, some table has a different level of aggregation:\n Daily (agregation stored every day) Monthly (aggregation stored in the first day of the month)  This dataset is updated daily.\nTables Descriptions of each table and their correspondent fields are found below:\ninsights_(daily|monthly)_(buyer|seller) This table contains info from searches, quotes, bookings and revenue aggregated per buyer, seller, search date, check in date, nights, market, number of rooms, quantity of paxes and hotel by day|month.\nfields\n client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. username (STRING). User ID in provider\u0026rsquo;s system. cache (BOOLEAN). It indicates if the source of request was the client or Speed-X to load info in cache (0=Client, 1=Speed-X). search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). check_in (TIMESTAMP). Check in date in UTC (format: YYYY-MM-DD hh:mm:ss). nights (NUMBER). Length of stay. market (STRING). Source market of paxes (ISO 3166-1 alpha-2). num_rooms (NUMBER). Quantity of rooms. adults (NUMBER). Quantity of paxes older than 12 years (12 is not included). children (NUMBER). Quantity of paxes between 2 and 12 (both included). infants (NUMBER). Quantity of paxes younger than 2 years (2 is not included). search_ok (NUMBER). Quantity of searches that returned any available hotel for above key (search_date, check_in\u0026hellip;). search_nok (NUMBER). Quantity of searches that didn\u0026rsquo;t return any available hotels for above key. quote_ok (NUMBER). Quantity of quotes that returned a correct result for above key. quote_nok (NUMBER). Quantity of quotes that returned a wrong result for above key. booking_ok_net (NUMBER). Quantity of confirmed bookings for above key where we have the net amount in EUR. booking_ok_unknown (NUMBER). Quantity of confirmed bookings for above key where we have the amount in EUR but it may have applied commissions. booking_nok (NUMBER). Quantity of failed bookings for above key. min_amount_booking_net (NUMBER). Net amount of cheapest booking for above key. max_amount_booking_net (NUMBER). Net amount of most expensive booking for above key. tot_amount_booking_net (NUMBER). Total net amount of confirmed bookings for above key. min_amount_booking_unknown (NUMBER). Amount of cheapest booking for above key when we don\u0026rsquo;t know if any commission is applied. max_amount_booking_unknown (NUMBER). Amount of most expensive booking for above key when we don\u0026rsquo;t know if any commission is applied. tot_amount_booking_unknown (NUMBER). Total amount of confirmed bookings for above key when we don\u0026rsquo;t know if any commission is applied. hotels (STRUCT). Repeated field that contains info about hotels for above key.  code (STRING). Hotel unique ID. search_ok_net (NUMBER). Quantity of searches with available options for above key and hotel with net price available. search_ok_unknown (NUMBER). Quantity of searches with available options for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. search_nok (NUMBER). Quantity of searches without available options for above key and hotel. min_amount_search_net (NUMBER). Net amount of cheapest option for that hotel. max_amount_search_net (NUMBER). Net amount of most expensive option for that hotel. tot_amount_search_net (NUMBER). Total net amount of searches for that hotel. min_amount_search_unknown (NUMBER). Amount of cheapest option for that hotel (Commission not available). max_amount_search_unknown (NUMBER). Amount of most expensive option for that hotel (Commission not available). tot_amount_search_unknown (NUMBER). Total amount of searches for that hotel (Commission not available). quote_ok_net (NUMBER). Quantity of quotes for above key and hotel with net price available. quote_ok_unknown (NUMBER). Quantity of quotes for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. quote_nok (NUMBER). Quantity of failed quotes for above key and hotel. min_amount_quote_net (NUMBER). Net amount of cheapest quote for that hotel. max_amount_quote_net (NUMBER). Net amount of most expensive quote for that hotel. tot_amount_quote_net (NUMBER). Total net amount of quotes for that hotel. min_amount_quote_unknown (NUMBER). Amount of cheapest quote for that hotel (Commission not available). max_amount_quote_unknown (NUMBER). Amount of most expensive quote for that hotel (Commission not available). tot_amount_quote_unknown (NUMBER). Total amount of quotes for that hotel (Commission not available). booking_ok_net (NUMBER). Quantity of bookings for above key and hotel with net price available. booking_ok_unknown (NUMBER). Quantity of bookings for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. booking_nok (NUMBER). Quantity of failed bookings for above key and hotel. min_amount_booking_net (NUMBER). Net amount of cheapest booking for that hotel. max_amount_booking_net (NUMBER). Net amount of most expensive booking for that hotel. tot_amount_booking_net (NUMBER). Total net amount of booking for that hotel. min_amount_booking_unknown (NUMBER). Amount of cheapest booking for that hotel (Commission not available). max_amount_booking_unknown (NUMBER). Amount of most expensive booking for that hotel (Commission not available). tot_amount_booking_unknown (NUMBER). Total amount of booking for that hotel (Commission not available).   Preview\n   client_id provider_id cache search_date check_in nights nationality num_rooms adults children infants search_ok search_nok quote_ok quote_nok booking_ok_net booking_ok_unknow booking_nok min_amount_booking_net max_amount_booking_net tot_amount_booking_net min_amount_booking_unknown max_amount_booking_unknown tot_amount_booking_unknown hotels.code hotels.search_ok_net hotels.search_ok_unknown hotels.search_nok hotels.quote_ok_net hotels.quote_ok_unknown hotels.quote_nok hotels.booking_ok_net hotels.booking_ok_unknown hotels.booking_nok hotels.min_amount_search_net hotels.max_amount_search_net hotels.tot_amount_search_net hotels.min_amount_search_unknown hotels.max_amount_search_unknown hotels.tot_amount_search_unknown hotels.min_amount_quote_net hotels.max_amount_quote_net hotels.tot_amount_quote_net hotels.min_amount_quote_unknown hotels.max_amount_quote_unknown hotels.tot_amount_quote_unknown hotels.min_amount_booking_net hotels.max_amount_booking_net hotels.tot_amount_booking_net hotels.min_amount_booking_unknown hotels.max_amount_booking_unknown hotels.tot_amount_booking_unknown     client A provider X false 2019-01-13 00:00:00 UTC 2019-02-13 00:00:00 UTC 4 SE 1 1 null null 13 11 null null null null null null null null null null null 641443 13 null null null null null null null null null null null null null null null null null null null null null null null null null null                           551568 null 11 null null null null null null null null null null null null null null null null null null null null null null null null null   client B provider Y false 2019-01-13 00:00:00 UTC 2019-01-18 00:00:00 UTC 2 CN 1 2 null null 6 1 3 null 1 null null 398.84 398.84 398.84 null null null 299 null null 1 null null null null null null null null null null null null null null null null null null null null null null null null                           927 5 null null 3 null null 1 null null 198.84 598.84 2393.04 null null null 198.84 598.84 1196.52 null null null 398.84 398.84 398.84 null null null                           203 null 1 null null null null null null null null null null 2548.26 2548.26 2548.26 null null null null null null null null null null null null    insights_agg_(daily|monthly)_(buyer|seller) This table contains info similar to insights_daily_(buyer|seller) but with a bigger aggregation. The fields check_in, adults, children and infants have disappeared.\nfields\n client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. username (STRING). User ID in provider\u0026rsquo;s system. cache (BOOLEAN). It indicates if the source of request was the client or Speed-X to load info in cache (0=Client, 1=Speed-X). search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). booking_window (NUMBER). It is an enumeration to describe how far away is the check-in date.  1 = Last second (0-1 day). 2 = Last minute (2-3 days). 3 = About 1 week (4-7 days). 4 = About 2 weeks (8-14 days). 5 = About 1 month (15-30 days) 6 = About 2 months (31-60 days). 7 = About 3 months (61-90 days). 8 = More than 3 months (90+ days).  nights (NUMBER). Length of stay. market (STRING). Source market of paxes (ISO 3166-1 alpha-2). num_rooms (NUMBER). Quantity of rooms. pax_type (NUMBER). It is an enumeration to describe a combination of paxes (adults + children + infants).  1 = Solo (Adults = 1, children = 0 and infants = 0). 2 = Couple (Adults = 2, children = 0 and infants = 0). 3 = Family (Adults = 2, children + infants \u0026gt; 0). 4 = Group (Adults \u0026gt; 2). 5 = Other.  search_ok (NUMBER). Quantity of searches that returned any available hotel for above key (search_date, check_in\u0026hellip;). search_nok (NUMBER). Quantity of searches that didn\u0026rsquo;t return any available hotels for above key. quote_ok (NUMBER). Quantity of quotes that returned a correct result for above key. quote_nok (NUMBER). Quantity of quotes that returned a wrong result for above key. booking_ok_net (NUMBER). Quantity of confirmed bookings for above key where we have the net amount in EUR. booking_ok_unknown (NUMBER). Quantity of confirmed bookings for above key where we have the amount in EUR but it may have applied commissions. booking_nok (NUMBER). Quantity of failed bookings for above key. min_amount_booking_net (NUMBER). Net amount of cheapest booking for above key. max_amount_booking_net (NUMBER). Net amount of most expensive booking for above key. tot_amount_booking_net (NUMBER). Total net amount of confirmed bookings for above key. min_amount_booking_unknown (NUMBER). Amount of cheapest booking for above key when we don\u0026rsquo;t know if any commission is applied. max_amount_booking_unknown (NUMBER). Amount of most expensive booking for above key when we don\u0026rsquo;t know if any commission is applied. tot_amount_booking_unknown (NUMBER). Total amount of confirmed bookings for above key when we don\u0026rsquo;t know if any commission is applied. hotels (STRUCT). Repeated field that contains info about hotels for above key.  code (STRING). Hotel unique ID. search_ok_net (NUMBER). Quantity of searches with available options for above key and hotel with net price available. search_ok_unknown (NUMBER). Quantity of searches with available options for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. search_nok (NUMBER). Quantity of searches without available options for above key and hotel. min_amount_search_net (NUMBER). Net amount of cheapest option for that hotel. max_amount_search_net (NUMBER). Net amount of most expensive option for that hotel. tot_amount_search_net (NUMBER). Total net amount of searches for that hotel. min_amount_search_unknown (NUMBER). Amount of cheapest option for that hotel (Commission not available). max_amount_search_unknown (NUMBER). Amount of most expensive option for that hotel (Commission not available). tot_amount_search_unknown (NUMBER). Total amount of searches for that hotel (Commission not available). quote_ok_net (NUMBER). Quantity of quotes for above key and hotel with net price available. quote_ok_unknown (NUMBER). Quantity of quotes for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. quote_nok (NUMBER). Quantity of failed quotes for above key and hotel. min_amount_quote_net (NUMBER). Net amount of cheapest quote for that hotel. max_amount_quote_net (NUMBER). Net amount of most expensive quote for that hotel. tot_amount_quote_net (NUMBER). Total net amount of quotes for that hotel. min_amount_quote_unknown (NUMBER). Amount of cheapest quote for that hotel (Commission not available). max_amount_quote_unknown (NUMBER). Amount of most expensive quote for that hotel (Commission not available). tot_amount_quote_unknown (NUMBER). Total amount of quotes for that hotel (Commission not available). booking_ok_net (NUMBER). Quantity of bookings for above key and hotel with net price available. booking_ok_unknown (NUMBER). Quantity of bookings for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. booking_nok (NUMBER). Quantity of failed bookings for above key and hotel. min_amount_booking_net (NUMBER). Net amount of cheapest booking for that hotel. max_amount_booking_net (NUMBER). Net amount of most expensive booking for that hotel. tot_amount_booking_net (NUMBER). Total net amount of booking for that hotel. min_amount_booking_unknown (NUMBER). Amount of cheapest booking for that hotel (Commission not available). max_amount_booking_unknown (NUMBER). Amount of most expensive booking for that hotel (Commission not available). tot_amount_booking_unknown (NUMBER). Total amount of booking for that hotel (Commission not available).   Preview\n   client_id provider_id cache search_date booking_window nights nationality num_rooms pax_type search_ok search_nok quote_ok quote_nok booking_ok_net booking_ok_unknow booking_nok min_amount_booking_net max_amount_booking_net tot_amount_booking_net min_amount_booking_unknown max_amount_booking_unknown tot_amount_booking_unknown hotels.code hotels.search_ok_net hotels.search_ok_unknown hotels.search_nok hotels.quote_ok_net hotels.quote_ok_unknown hotels.quote_nok hotels.booking_ok_net hotels.booking_ok_unknown hotels.booking_nok hotels.min_amount_search_net hotels.max_amount_search_net hotels.tot_amount_search_net hotels.min_amount_search_unknown hotels.max_amount_search_unknown hotels.tot_amount_search_unknown hotels.min_amount_quote_net hotels.max_amount_quote_net hotels.tot_amount_quote_net hotels.min_amount_quote_unknown hotels.max_amount_quote_unknown hotels.tot_amount_quote_unknown hotels.min_amount_booking_net hotels.max_amount_booking_net hotels.tot_amount_booking_net hotels.min_amount_booking_unknown hotels.max_amount_booking_unknown hotels.tot_amount_booking_unknown     client A provider X false 2019-01-13 00:00:00 UTC 3 4 SE 1 1 13 11 null null null null null null null null null null null 641443 13 null null null null null null null null null null null null null null null null null null null null null null null null null null                         551568 null 11 null null null null null null null null null null null null null null null null null null null null null null null null null   client B provider Y false 2019-01-13 00:00:00 UTC 3 2 CN 1 2 6 1 3 null 1 null null 398.84 398.84 398.84 null null null 299 null null 1 null null null null null null null null null null null null null null null null null null null null null null null null                         927 5 null null 3 null null 1 null null 198.84 598.84 2393.04 null null null 198.84 598.84 1196.52 null null null 398.84 398.84 398.84 null null null                         203 null 1 null null null null null null null null null null 2548.26 2548.26 2548.26 null null null null null null null null null null null null    insights_(daily|monthly)_destination_(buyer|seller) This table contains info from searches, quotes, bookings and revenue aggregated per buyer, seller, search date, check in date, nights, market, number of rooms, quantity of paxes and location (country + Administrative Zone 1 + Administrative Zone 2 + City) by day|month.\nfields\n client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. username (STRING). User ID in provider\u0026rsquo;s system. cache (BOOLEAN). It indicates if the source of request was the client or Speed-X to load info in cache (0=Client, 1=Speed-X). search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). check_in (TIMESTAMP). Check in date in UTC (format: YYYY-MM-DD hh:mm:ss). nights (NUMBER). Length of stay. market (STRING). Source market of paxes (ISO 3166-1 alpha-2). num_rooms (NUMBER). Quantity of rooms. adults (NUMBER). Quantity of paxes older than 12 years (12 is not included). children (NUMBER). Quantity of paxes between 2 and 12 (both included). infants (NUMBER). Quantity of paxes younger than 2 years (2 is not included). country (STRING). Country ISO2 code. E.g. ES (Spain) destinations (STRUCT). Repeated field that contains info about destinations for above key.  zone_1 (STRING). Administrative first level zone. E.g. Comunidad de Madrid zone_2 (STRING). Administrative second level zone E.g. Madrid city city (STRING). City name. If the city is big enough this level shows the neighbourghood. E.G. Chamber√≠ search_ok_net (NUMBER). Quantity of searches with available options for above key and hotel with net price available. search_ok_unknown (NUMBER). Quantity of searches with available options for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. search_nok (NUMBER). Quantity of searches without available options for above key and hotel. min_amount_search_net (NUMBER). Net amount of cheapest option for that hotel. max_amount_search_net (NUMBER). Net amount of most expensive option for that hotel. tot_amount_search_net (NUMBER). Total net amount of searches for that hotel. min_amount_search_unknown (NUMBER). Amount of cheapest option for that hotel (Commission not available). max_amount_search_unknown (NUMBER). Amount of most expensive option for that hotel (Commission not available). tot_amount_search_unknown (NUMBER). Total amount of searches for that hotel (Commission not available). quote_ok_net (NUMBER). Quantity of quotes for above key and hotel with net price available. quote_ok_unknown (NUMBER). Quantity of quotes for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. quote_nok (NUMBER). Quantity of failed quotes for above key and hotel. min_amount_quote_net (NUMBER). Net amount of cheapest quote for that hotel. max_amount_quote_net (NUMBER). Net amount of most expensive quote for that hotel. tot_amount_quote_net (NUMBER). Total net amount of quotes for that hotel. min_amount_quote_unknown (NUMBER). Amount of cheapest quote for that hotel (Commission not available). max_amount_quote_unknown (NUMBER). Amount of most expensive quote for that hotel (Commission not available). tot_amount_quote_unknown (NUMBER). Total amount of quotes for that hotel (Commission not available). booking_ok_net (NUMBER). Quantity of bookings for above key and hotel with net price available. booking_ok_unknown (NUMBER). Quantity of bookings for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. booking_nok (NUMBER). Quantity of failed bookings for above key and hotel. min_amount_booking_net (NUMBER). Net amount of cheapest booking for that hotel. max_amount_booking_net (NUMBER). Net amount of most expensive booking for that hotel. tot_amount_booking_net (NUMBER). Total net amount of booking for that hotel. min_amount_booking_unknown (NUMBER). Amount of cheapest booking for that hotel (Commission not available). max_amount_booking_unknown (NUMBER). Amount of most expensive booking for that hotel (Commission not available). tot_amount_booking_unknown (NUMBER). Total amount of booking for that hotel (Commission not available).   Preview\n   client_id provider_id provider_owner client_owner cache search_date check_in nights market num_rooms adults children infants destinations.country destinations.zone_1 destinations.zone_2 destinations.city destinations.search_ok_net destinations.search_ok_unknown destinations.search_nok destinations.quote_ok_net destinations.quote_ok_unknown destinations.quote_nok destinations.booking_ok_net destinations.booking_ok_unknown destinations.booking_nok destinations.min_amount_search_net destinations.max_amount_search_net destinations.tot_amount_search_net destinations.min_amount_search_unknown destinations.max_amount_search_unknown destinations.tot_amount_search_unknown destinations.min_amount_quote_net destinations.max_amount_quote_net destinations.tot_amount_quote_net destinations.min_amount_quote_unknown destinations.max_amount_quote_unknown destinations.tot_amount_quote_unknown destinations.min_amount_booking_net destinations.max_amount_booking_net destinations.tot_amount_booking_net destinations.min_amount_booking_unknown destinations.max_amount_booking_unknown destinations.tot_amount_booking_unknown     client A provider X Org Name 1 Org Name 1 false 2019-06-17 00:00:00 UTC 2019-06-19 00:00:00 UTC 1 ES 1 2   ES Comunidad de Madrid Provincia de Madrid Opera 508 8 641 2   1   37.87 3982.2 79735.36264325699 100.0 162.4 1049.6 212.77 212.77 425.54    212.77 212.77 212.77      client B Provider Y Org Name 2 Org Name 2 false 2019-06-17 00:00:00 UTC 2019-07-07 00:00:00 UTC 2 ES 1 2   ES Comunidad de Madrid Provincia de Madrid Bilbao 86  82 3   1   212.81982704823037 1372.92 41923.90368994989    275.23 275.23 825.69    275.23 275.23 275.23       insights_agg_(daily|monthly)_destination_(buyer|seller) This table contains info similar to insights_daily_destination_(buyer|seller) but with a bigger aggregation. The fields check_in, adults, children and infants have disappeared.\nfields\n client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. username (STRING). User ID in provider\u0026rsquo;s system. cache (BOOLEAN). It indicates if the source of request was the client or Speed-X to load info in cache (0=Client, 1=Speed-X). search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). booking_window (NUMBER). It is an enumeration to describe how far away is the check-in date.  1 = Last second (0-1 day). 2 = Last minute (2-3 days). 3 = About 1 week (4-7 days). 4 = About 2 weeks (8-14 days). 5 = About 1 month (15-30 days) 6 = About 2 months (31-60 days). 7 = About 3 months (61-90 days). 8 = More than 3 months (90+ days).  nights (NUMBER). Length of stay. market (STRING). Source market of paxes (ISO 3166-1 alpha-2). num_rooms (NUMBER). Quantity of rooms. pax_type (NUMBER). It is an enumeration to describe a combination of paxes (adults + children + infants).  1 = Solo (Adults = 1, children = 0 and infants = 0). 2 = Couple (Adults = 2, children = 0 and infants = 0). 3 = Family (Adults = 2, children + infants \u0026gt; 0). 4 = Group (Adults \u0026gt; 2). 5 = Other.  country (STRING). Country ISO2 code. E.g. ES (Spain) destinations (STRUCT). Repeated field that contains info about destinations for above key.  zone_1 (STRING). Administrative first level zone. E.g. Comunidad de Madrid zone_2 (STRING). Administrative second level zone E.g. Madrid city city (STRING). City name. If the city is big enough this level shows the neighbourghood. E.G. Chamber√≠ search_ok_net (NUMBER). Quantity of searches with available options for above key and hotel with net price available. search_ok_unknown (NUMBER). Quantity of searches with available options for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. search_nok (NUMBER). Quantity of searches without available options for above key and hotel. min_amount_search_net (NUMBER). Net amount of cheapest option for that hotel. max_amount_search_net (NUMBER). Net amount of most expensive option for that hotel. tot_amount_search_net (NUMBER). Total net amount of searches for that hotel. min_amount_search_unknown (NUMBER). Amount of cheapest option for that hotel (Commission not available). max_amount_search_unknown (NUMBER). Amount of most expensive option for that hotel (Commission not available). tot_amount_search_unknown (NUMBER). Total amount of searches for that hotel (Commission not available). quote_ok_net (NUMBER). Quantity of quotes for above key and hotel with net price available. quote_ok_unknown (NUMBER). Quantity of quotes for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. quote_nok (NUMBER). Quantity of failed quotes for above key and hotel. min_amount_quote_net (NUMBER). Net amount of cheapest quote for that hotel. max_amount_quote_net (NUMBER). Net amount of most expensive quote for that hotel. tot_amount_quote_net (NUMBER). Total net amount of quotes for that hotel. min_amount_quote_unknown (NUMBER). Amount of cheapest quote for that hotel (Commission not available). max_amount_quote_unknown (NUMBER). Amount of most expensive quote for that hotel (Commission not available). tot_amount_quote_unknown (NUMBER). Total amount of quotes for that hotel (Commission not available). booking_ok_net (NUMBER). Quantity of bookings for above key and hotel with net price available. booking_ok_unknown (NUMBER). Quantity of bookings for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. booking_nok (NUMBER). Quantity of failed bookings for above key and hotel. min_amount_booking_net (NUMBER). Net amount of cheapest booking for that hotel. max_amount_booking_net (NUMBER). Net amount of most expensive booking for that hotel. tot_amount_booking_net (NUMBER). Total net amount of booking for that hotel. min_amount_booking_unknown (NUMBER). Amount of cheapest booking for that hotel (Commission not available). max_amount_booking_unknown (NUMBER). Amount of most expensive booking for that hotel (Commission not available). tot_amount_booking_unknown (NUMBER). Total amount of booking for that hotel (Commission not available).   Preview\n   client_id provider_id provider_owner client_owner cache search_date booking_window nights market num_rooms pax_type destinations.country destinations.zone_1 destinations.zone_2 destinations.city destinations.search_ok_net destinations.search_ok_unknown destinations.search_nok destinations.quote_ok_net destinations.quote_ok_unknown destinations.quote_nok destinations.booking_ok_net destinations.booking_ok_unknown destinations.booking_nok destinations.min_amount_search_net destinations.max_amount_search_net destinations.tot_amount_search_net destinations.min_amount_search_unknown destinations.max_amount_search_unknown destinations.tot_amount_search_unknown destinations.min_amount_quote_net destinations.max_amount_quote_net destinations.tot_amount_quote_net destinations.min_amount_quote_unknown destinations.max_amount_quote_unknown destinations.tot_amount_quote_unknown destinations.min_amount_booking_net destinations.max_amount_booking_net destinations.tot_amount_booking_net destinations.min_amount_booking_unknown destinations.max_amount_booking_unknown destinations.tot_amount_booking_unknown     client A provider X Org Name 1 Org Name 1 false 2019-06-17 00:00:00 UTC 5 2 ES 1 2 ES Comunidad de Madrid Provincia de Madrid Opera 188 3 127 3   1   83.340515 1372.92 79190.58911099887 163.2 413.07836319871626 800.2783631987163 275.23 275.23 825.69    275.23 275.23 275.23      client A provider Y Org Name 2 Org Name 2 false 2019-06-17 00:00:00 UTC 4 8 CO 1 1 ES Comunidad de Madrid Provincia de Madrid Chueca 81  92 1   1   148.14701791922977 1712.7577783721138 61912.03550860302    165.32049567620578 165.32049567620578 165.32049567620578    148.14700919818134 148.14700919818134 148.14700919818134      client B provider X Org Name 3 Org Name 3 false 2019-06-17 00:00:00 UTC 8 7 CO 1 1 ES Comunidad de Madrid Provincia de Madrid Bilbao 30 10 27 1   1   89.69198537933495 2519.0036551662656 26465.12476598021 1000.0445751983597 1176.4999554248018 11059.106713024874 111.74110724792726 111.74110724792726 111.74110724792726    100.13417054461978 100.13417054461978 100.13417054461978       insights_hotel_destination_(daily|monthly)_(buyer|seller) This table contains combined information of Insights Agg and Insights Destination Agg, in the same table you have metrics by hotel code and its destination, also with cancellation metrics. The fields pax_type, nights, market and num_rooms and username have disappeared.\nfields\n client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. search_date (TIMESTAMP). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). booking_window (NUMBER). It is an enumeration to describe how far away is the check-in date.  1 = Last second (0-1 day). 2 = Last minute (2-3 days). 3 = About 1 week (4-7 days). 4 = About 2 weeks (8-14 days). 5 = About 1 month (15-30 days) 6 = About 2 months (31-60 days). 7 = About 3 months (61-90 days). 8 = More than 3 months (90+ days).  country (STRING). Country ISO2 code. E.g. ES (Spain) zone_1 (STRING). Administrative first level zone. E.g. Comunidad de Madrid zone_2 (STRING). Administrative second level zone E.g. Madrid city search_ok (NUMBER). Quantity of searches that returned any available hotel for above key (search_date, booking_window\u0026hellip;). search_nok (NUMBER). Quantity of searches that didn\u0026rsquo;t return any available hotels for above key. quote_ok (NUMBER). Quantity of quotes that returned a correct result for above key. quote_nok (NUMBER). Quantity of quotes that returned a wrong result for above key. booking_ok_net (NUMBER). Quantity of confirmed bookings for above key where we have the net amount in EUR. booking_ok_unknown (NUMBER). Quantity of confirmed bookings for above key where we have the amount in EUR but it may have applied commissions. booking_nok (NUMBER). Quantity of failed bookings for above key. cancel_ok_net (NUMBER). Quantity of cancellations that returned a correct result for above key where we have the net amount in EUR. cancel_ok_unknown (NUMBER). Quantity of cancellations that returned a correct result for above key where we have the amount in EUR but it may have applied commissions. cancel_nok (NUMBER). Quantity of failed cancellations for above key. tot_amount_booking_net (NUMBER). Total net amount of confirmed bookings for above key. tot_amount_booking_unknown (NUMBER). Total amount of confirmed bookings for above key when we don\u0026rsquo;t know if any commission is applied. tot_amount_cancel_net (NUMBER). Total net amount of bookings cancelled for above key. tot_amount_cancel_unknown (NUMBER). Total amount of bookings cancelled for above key when we don\u0026rsquo;t know if any commission is applied. hotels (STRUCT). Repeated field that contains info about hotels for above key.  code (STRING). Hotel unique ID. name (STRING). Hotel name. city (STRING). City name of the hotel. If the city is big enough this level shows the neighbourghood. E.G. Chamber√≠ search_ok (NUMBER). Quantity of searches with available options for above key and hotel. search_nok (NUMBER). Quantity of searches without available options for above key and hotel.. quote_ok (NUMBER). Quantity of quotes for above key and hotel. quote_nok (NUMBER). Quantity of failed quotes for above key and hotel. booking_ok_net (NUMBER). Quantity of bookings for above key and hotel with net price available. booking_ok_unknown (NUMBER). Quantity of bookings for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. booking_nok (NUMBER). Quantity of failed bookings for above key and hotel. cancel_ok_net (NUMBER). Quantity of cancellations for above key and hotel with net price available. cancel_ok_unknown (NUMBER). Quantity of cancellations for above key and hotel with a price where we don\u0026rsquo;t know if any commission is applied. cancel_nok (NUMBER). Quantity of failed cancellations for above key and hotel. tot_amount_booking_net (NUMBER). Total net amount of booking for that hotel. tot_amount_booking_unknown (NUMBER). Total amount of booking for that hotel (Commission not available). tot_amount_cancel_net (NUMBER). Total net amount of bookings cancelled for that hotel. tot_amount_cancel_unknown (NUMBER). Total amount of bookings cancelled for that hotel (Commission not available).   Preview\n   client_owner client_id provider_owner provider_id search_date booking_window country zone_1 zone_2 search_ok search_nok quote_ok quote_nok booking_ok_net booking_ok_unknow booking_nok cancel_ok_net cancel_ok_unknow booking_nok tot_amount_booking_net tot_amount_booking_unknown tot_amount_cancel_net tot_amount\\cancel_unknown hotels.code hotels.name hotels.city hotels.search_ok hotels.search_nok hotels.quote_ok hotels.quote_nok hotels.booking_ok_net hotels.booking_ok_unknown hotels.booking_nok hotels.cancel_ok_net hotels.cancel_ok_unknown hotels.cancel_nok hotels.tot_amount_booking_net hotels.tot_amount_booking_unknown hotels.tot_amount\\cancel_net hotels.tot_amount\\cancel_unknown     org buyer A client A org seller X provider X 2019-01-13 00:00:00 UTC 3 ES Comunidad de Madrid Provincia de Madrid 13 11 null null null null null null null null null null null null 641443 Hotel name 1 Opera 13 null null null null null null null null null null null null null                          551568 Hotel name 2 Bilbao null null null null null null null null null null null null null null   org buyer B client B org seller Y provider Y 2019-01-13 00:00:00 UTC 3 ES Comunidad de Madrid Provincia de Madrid 6 1 3 null 1 null null 1 null null 398.84 null 398.84 null 299 Hotel name 3 Opera null 1 null null 1 null null 1 null null 398.84 null 398.84 null    effective_bookings_(buyer|seller) This table contains specific information about bookings done and their current status (Ok or cancelled).\nfields\n session_id (STRING). Search date in UTC (format: YYYY-MM-DD hh:mm:ss). client_id (STRING). Client unique ID. provider_id (STRING). Provider unique ID. client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_owner (STRING). Organization\u0026rsquo;s name of the provider. username (STRING). User ID in provider\u0026rsquo;s system. booking_date (TIMESTAMP). Booking date in UTC (format: YYYY-MM-DD hh:mm:ss). checkin_date (TIMESTAMP). Checkin date in UTC (format: YYYY-MM-DD hh:mm:ss). amount (NUMBER). Amount of booking in EUR. commission (NUMBER). Possible values for the commission:  -1 = not specified 0 = net price X = Percentatge of the commission applied to the amount.  cancel_date (TIMESTAMP). Cancel date in UTC (format: YYYY-MM-DD hh:mm:ss) if the booking was cancelled else will be empty. market (STRING). Source market of paxes (ISO 3166-1 alpha-2). market_name (STRING). Source market\u0026rsquo;s name. num_room (NUMBER). Quantity of rooms booked. nights (NUMBER). Length of stay. country (STRING). Country of destination (ISO 3166-1 alpha-2). zone_1 (STRING). Main zone of destination. zone_2 (STRING). Secondary zone of destination. city (STRING). Last level of destination. hotel_code (STRING). Hotel\u0026rsquo;s code in provider\u0026rsquo;s portfolio. hotel_name (STRING). Hotel\u0026rsquo;s name in provider\u0026rsquo;s portfolio. adults (NUMBER). Quantity of paxes older than 12 years (12 is not included). children (NUMBER). Quantity of paxes between 2 and 12 (both included). infants (NUMBER). Quantity of paxes younger than 2 years (2 is not included).  Preview\n   session_id client_id provider_id client_owner provider_owner booking_date checkin_date amount cancel_date market market_name num_room nights country country_name zone_1 zone_2 city hotel_code hotel_name username commission adults children infants     123456789012 client 1 provider 1 Org Client 1 Org Provider 1 2019-06-18 16:32:37 UTC 2019-06-20 12:00:00 UTC 71.54 null CN China 1 1 IT Italy Lazio Citta metropolitana di Roma Capitale Rome 18943 hotel 1 user 1 0.0 1 0 0    daily_portfolio_(buyer|seller) This table is used to know which hotels over supplier\u0026rsquo;s portfolio are being queried by the clients. This can be helpful to know which percentage over portfolio is mapped by the client.\nfields\n client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_id (STRING). Provider unique ID. hotel (STRING). Hotel unique ID. hotel_name_portfolio (STRING). Hotel name. country (STRING). Hotel Country Code (ISO Alpha-2 code). zone_1 (STRING). Main zone of destination. zone_2 (STRING). Secondary zone of destination. city (STRING). Last level of destination. status. It is an enumeration to describe the status of the hotel.  0 = Hotel code queried but it doesn\u0026rsquo;t appear in provider\u0026rsquo;s portfolio. It can be due to a wrong mapping in client\u0026rsquo;s system. 1 = Hotel code not queried but it appears in provider\u0026rsquo;s portfolio. It can be due to a mismapping in the client\u0026rsquo;s system. 2 = Hotel code queried and it appears in provider\u0026rsquo;s portfolio. 3 = Hotel code queried but don\u0026rsquo;t appears in TravelgateX system. It can be due to a out-of-date provider hotels information.  search_ok (NUMBER). Quantity of searches that returned any available hotel for above key (search_date, check_in, client_id, provider_id, username, hotel, country, zone_1,zone_2, city and status). search_nok (NUMBER). Quantity of searches that didn\u0026rsquo;t return any available hotels for above key. quote_ok (NUMBER). Quantity of quotes that returned a correct result for above key. quote_nok (NUMBER). Quantity of quotes that returned a wrong result for above key. booking_ok (NUMBER). Quantity of confirmed bookings. booking_nok (NUMBER). Quantity of failed bookings for above key. cancel_ok (NUMBER). Quantity of confirmed cancellations. cancel_nok (NUMBER). Quantity of failed cancellations for above key. revenue_net (NUMBER). Total net amount of confirmed bookings for above key. revenue_unknown (NUMBER). Total amount of confirmed bookings for above key when we don\u0026rsquo;t know if any commission is applied.   Preview\n   client_owner provider_id hotel_name country zone_1 zone_2 city hotel_code status search_ok search_nok quote_ok quote_nok booking_ok booking_nok cancel_ok cancel_nok revenue_net revenue_unknown     Org Client 1 Provider 1 Residence Bologna CZ Hlavni mesto Praha Praha 1 Stare Mesto 336629 2 9805 3896 10  1  1  354.1    Org Client 2 Provider 2 Hotel Guaparo Suites VE Estado Carabobo  Urbanizacion Guaparo 814595 1             Org Client 3 Provider 3      2363330 0  4            daily_portfolio_stats_(buyer|seller) This table is used to measure the evolution of the daily_portfolio_(buyer|seller) table. This can be helpful to know if you are getting better results in your portfolio optimization.\nfields\n client_owner (STRING). Organization\u0026rsquo;s name of the client. provider_id (STRING). Provider unique ID. status. It is an enumeration to describe the status of the hotel.  0 = Hotel code queried but it doesn\u0026rsquo;t appear in provider\u0026rsquo;s portfolio. It can be due to a wrong mapping in client\u0026rsquo;s system. 1 = Hotel code not queried but it appears in provider\u0026rsquo;s portfolio. It can be due to a mismapping in the client\u0026rsquo;s system. 2 = Hotel code queried and it appears in provider\u0026rsquo;s portfolio. 3 = Hotel code queried but don\u0026rsquo;t appears in TravelgateX system. It can be due to a out-of-date provider hotels information.  hits (NUMBER). Quantity of hotels for above key (client_id, provider_id and status).   Preview\n   client_owner provider_id status hits     Client 1 Provider 1 1 146453   Client 2 Provider 2 0 150200   Client 3 Provider 3 2 14644046     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/bestpractices/keep_alive_header/",
	"title": "Keep Alive Header",
	"tags": [],
	"description": "",
	"content": "In order to increase performance and improve response times (in Search), you can add the Connection: keep-alive header to all our transactions.\n"
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/load-product/",
	"title": "Load your inventory",
	"tags": [],
	"description": "Steps and manual to load your inventory using the extranet",
	"content": "In this section you will find all the steps necessary to create the structure and setup of the hotels, rates and rooms you have contracted. Also, you will find the guidelines to use the extranet to load your own contrats manually: price, availability, sales conditions\u0026hellip;\n SetUp: Create the structure or squeleton of your inventory: Hotel, rates and rooms. Manual Load: Load manually prices, availability, stop sales, offers, discounts, supplements\u0026hellip; Calendar: Check all conditions loaded for your hotels.  Our Inventory system allows each Buyer to connect several channels and every connection implies a client-channel relation. Each configuration is totally independent from other client-channel relations. For example, one client can be related with two channels so there are two relations Client - Channel1 and Client - Channel2. Those two channels may have the same hotel configured, however the configuration of this hotel could be totally independent from the two different relations. Therefore, this hotel may have different rates, rooms or prices in Client - Channel1 and Client - Channel2. In all extranet sections you will be asked to select a client and a channel (a relation) in order to carry out the configuration.\n  SetUp Configure the SetUp and structure of your inventory\n     Manual Load Load avaialbility, prices and conditions\n     Calendar Check your loaded availability conditions and prices with the calendar\n    "
},
{
	"uri": "https://travelgatex.com/applications/logging/",
	"title": "Logging",
	"tags": [],
	"description": "Simple access to all transactions&#39; traces",
	"content": "Logging provides simple access to all your transactions\u0026rsquo; traces. Search and download logs in batch or individual mode from your transactions in the TravelgateX Marketplace.\n  Overview Logging Overview\n     How-to guides Perform specific tasks\n     Reference Reference Documentation\n     Release Notes New Updates \u0026amp; Releases\n    "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/load-product/manual-load/",
	"title": "Manual Load",
	"tags": [],
	"description": "Load avaialbility, prices and conditions",
	"content": "The aim of the Manual Load section is to control the conditions of the rates and derived rates. It is the main tool to load allotment, conditions and prices, as well as offers and supplements in the base and derived rates. You can access this section in the Product tab.\n  Rate: Availability and Price load Load allotment, availability conditions and prices to your rates\n     Derived Rate: Availability and Price load Load availability conditions and supplements or discounts to your derived rates\n     Offers: Availability conditions load Load availability conditions to your offers\n    "
},
{
	"uri": "https://travelgatex.com/mappea/reference/schema/mutation/",
	"title": "MappeaMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaMutation {  confirmUpload( input: MappeaConfirmUploadInput!, ): OnlyStatusResponse!    uploadFile( input: MappeaUploadFileInput!, ): UploadFileResponse!    mapSupplier( input: MappeaMapSupplierInput!, ): OnlyStatusResponse!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields confirmUpload(OnlyStatusResponse!):   uploadFile(UploadFileResponse!):   mapSupplier(OnlyStatusResponse!):    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "Map different codes from different Sellers in order to get a de-duped response.",
	"content": " The mapping feature is used to change the supplier\u0026rsquo;s native codes to the Buyer\u0026rsquo;s own codes or vice-versa. There are these types:\n Hotel Map Board Map Room Map Rate Map Amenity Map Promotion Map Room Description Map  Our mapping formats share a common structure. In order to load your maps you just need to follow the instructions below:\nFile Format The file should be in the following format:\n Encoding: UTF-8\n File Name: [Context Source]_[Context Destination]_[entity]_map.csv\n Context Source: it corresponds to the client code\n Context Destination: it corresponds to the supplier code\n 1 file for each supplier\n  Header Row: Code Source,Code Destination\n Context Source: it corresponds to the client codes\n Context Destination: it corresponds to the supplier codes\n  Delimiter: Comma (\u0026ldquo;,\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Maps/[entity]/\n  File Names All map files must have the same name structure as follows - you need create a file for Context Destination\n   Entity File Name     Hotel [Context Source]_[Context Destination]_hotel_map.csv   Board [Context Source]_[Context Destination]_board_map.csv   Room [Context Source]_[Context Destination]_room_map.csv   Rate [Context Source]_[Context Destination]_rate_map.csv   Amenity [Context Source]_[Context Destination]_amenity_map.csv   Promotion [Context Source]_[Context Destination]\\promotion_map.csv   Room Description [Context Source]_[Context Destination]\\roomdescription_map.csv    Directories    Entity File Name     Hotel /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Hotel/   Board /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Board/   Room /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Room/   Rate /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Rate/   Amenity /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Amenity/   Promotion /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Promotion/   Room Description /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Room/    Sample Files Let\u0026rsquo;s suppose we have the following client code and supplier code, then we need to create one file for each supplier we have:\n Client code: GUE\n Supplier Code: BVJ\n  Name: GUE_BVJ_hotel_map.csv\nCode Source, Code Destination 10,c11\\#10 10000,7604 10000,1274249  How to use mapping Nowadays, mapping can be used in Booking-Flow and Content APIs.\nUse in Booking-Flow There are two ways of using mapping in Booking-Flow: * If the context used in the query is different from supplier/s context that are used in the operation. In that case, HotelX will try to map all entities(hotel, board, etc.)(but amenities and promotions) to query\u0026rsquo;s context. * If the mapping plugin is requested (only boards, amenities and promotions), only entities requested in the query will be tried to map.\nContext in plugins via parameters You can also specify a context for each of the plugins you\u0026rsquo;ll use in your query. This context will be the context in which you want to map the supplier codes. To do so, you\u0026rsquo;ll only need to specify it via parameters. This context, if specified, will have priority over the context specified via settings in your query. This in an example:\n{ \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;BOARD_MAP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;board_mapX\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;context\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;yourContext\u0026quot; } ] } ] } }  Important: Mapping in booking-flow is only usable in Search service.\nHere you have the nodes where you can find mapped codes in Search response:\nHotel: search.options.hotelCode (hotelCodeSupplier will contain the hotel\u0026rsquo;s code in supplier\u0026rsquo;s context)\nBoard: search.options.boardCode (boardCodeSupplier will contain the board\u0026rsquo;s code in supplier\u0026rsquo;s context)\nRoom: search.options.rooms.code (supplierCode will contain the room\u0026rsquo;s code in supplier\u0026rsquo;s context)\nRate: search.options.rooms.ratePlans.code (supplierCode will contain the rate plan\u0026rsquo;s code of the room in supplier\u0026rsquo;s context)\nAmenity: search.options.amenities.code and/or inside rooms (amenitySupplierCode will contain the amenity\u0026rsquo;s code in supplier context)\nPromotion: search.options.promotionCode (promotionCodeSupplier will contain the promotion\u0026rsquo;s code in supplier\u0026rsquo;s context)\nRoom Description: search.options.rooms.code (code will contain the description maped code and supplierCode will contain the room\u0026rsquo;s code in supplier\u0026rsquo;s context)\nExamples of plugin that executes board and/or amenity and/or promotion mapping:\nBoards:\n{ \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;BOARD_MAP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;board_mapX\u0026quot; } ] } }  Amenities:\n{ \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;AMENITY_MAP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;amenity_mapX\u0026quot; } ] } }  Promotions:\n{ \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;PROMOTION_MAP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;promotion_mapX\u0026quot; } ] } }  Room descriptions:\n{ \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;ROOM_MAP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;room_map\u0026quot;, \u0026quot;parameters\u0026quot;:[{\u0026quot;key\u0026quot;:\u0026quot;description\u0026quot;, \u0026quot;value\u0026quot;:\u0026quot;true\u0026quot;}] } ] } }  Use in Content The use of mapping plugin in Content is entirely different from Booking-Flow. Currently this is only available in Hotel-List query and only amenity map are available. In order to request mapping in content, it is necessary to query an specific field called mappings. This field is a list of mappings that will contain the code of the entity amenity in supplier context and the context of the supplier. It is also necessary to indicate the group code and destination context in query variables.\nHow to request inside Hotel-List for amenities:\nallAmenities(mapOptions: [{ groupCode: $amenitiesGroupCode, context: $amenitiesContext }]) { edges { node { amenityData { amenityCode mappings { context code } } } } }  MapOptions is a list of {groupCode, context} pairs. The groupCode is the HotelX group assigned to your organization: (e.g. HotelX_\u0026hellip;), and the context is the destinationContext you want to receive the codes in.\nFor each pair in this list, the mapping will be applied for each amenity. In other words, Hotel-List will change amenityCode to the context set in destinationContext\nOther Maps Room map by provider hotel This plugin converts the room codes in the supplier\u0026rsquo;s context by hotel. It\u0026rsquo;s the same plugin (room map) as explained above, but it offers the possibility to map by supplier and hotel.\nFormat File The file must be in the below format:\n Encoding: UTF-8¬† File Name: [Context Source]_[Context Destination]_room_map.csv Header Row: Code Source,Code Destination,Code Hotel Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Maps/  If you are using a file of room map, it\u0026rsquo;s necessary to modify this file adding a new column. Please see the example below:\nSample File Name: xtg_provider_room_map.csv Data:\nCode Source,Code Destination,Code Hotel 1,X,A 1,Y,A 1,Z,A 2,X1,B 2,X2,C 3,X3,D 4,X4, 5,X5,  As you can see, the same file combined mappings with 3 values and mappings with 2 values. The rows with two values are mapped by supplier. The files with three values are mapped by supplier and hotel. It\u0026rsquo;s possible to use only the mapping by supplier hotel, in this case, your file only will have rows with three values.\nApplication What happens if you use the combined plugin (room map and room map by provider hotel)? In this case, all the rooms with provider hotel map will be mapped to your context (the context put in the first value of file\u0026rsquo;s name (client context)) and the room codes that don\u0026rsquo;t have provider hotel map, will be mapped with provider map code (in case that exists). If no map codes are found, the option can be discarded (this rule is configurable, please contact us in order to change it and discard those options. By default, no options will be discarted).\nExecution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;ROOM_MAP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;room_map\u0026quot;, \u0026quot;parameters\u0026quot;:[{\u0026quot;key\u0026quot;:\u0026quot;hotel\u0026quot;, \u0026quot;value\u0026quot;:\u0026quot;true\u0026quot;}] } ] } }  Room Description map by provider hotel It works the same way as room map by provider hotel plugin, but it uses the provider room description to map the room code in the hotelx response.\nExecution example In this example the context applied by the plugin will be used instead of the settings context.\n{ \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;ROOM_MAP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;room_map\u0026quot;, \u0026quot;parameters\u0026quot;:[{\u0026quot;key\u0026quot;:\u0026quot;description\u0026quot;, \u0026quot;value\u0026quot;:\u0026quot;true\u0026quot;},{\u0026quot;key\u0026quot;:\u0026quot;hotel\u0026quot;, \u0026quot;value\u0026quot;:\u0026quot;true\u0026quot;},{\u0026quot;key\u0026quot;:\u0026quot;context\u0026quot;, \u0026quot;value\u0026quot;:\u0026quot;CTX\u0026quot;}] } ] } }  Default Codes This feature allows to set a default code for each code in the source (provider) context. The entities that can have default codes are:\n Board Room Rate Amenity Promotion Room Description  Important: this feature only must be used in Booking-Flow. Only one default code can be assigned to each supplier context.\nIn order to use this feature, it is necessary to append the default code to the FTP.\nExample file with default code\nFile name: sourceContext_destinationContext_entity_map.csv\nCode Source,Code Destination 10000,7604 10000,1274249 MY_DEFAULT_CODE,*  MY_DEFAULT_CODE is the code that will be returned in response.\nIn the example above, all the codes of entity \u0026ldquo;entity\u0026rdquo; of provider with context destinationContext that are not found in the file, will be MY_DEFAULT_CODE in response.\nRemember that, if you do not use default codes, in case that a mapping is not found, and the option is not discarded, in the response you will receive:\ncode: codeInSupplierContext\nsupplierCode: codeInSupplierContext\nThis feature is useful to control those codes which are not not mapped, and in case that you use aggregation plugins, all this options will be grouped in the same group and discarded.\nModifying data through FTP Once mapping files are loaded, we can perform the following operations on them: Update and Delete\n"
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/schema/mutation/",
	"title": "Mutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Mutation {  admin: AdminMutation    hotelX: HotelXMutation    mappea: MappeaMutation    paymentX: PaymentXMutation    alertsX: AlertsXMutation   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields admin(AdminMutation):   hotelX(HotelXMutation):   mappea(MappeaMutation):   paymentX(PaymentXMutation):   alertsX(AlertsXMutation):    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object‚Äôs properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object‚Äôs properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object‚Äôs properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object‚Äôs properties, have a look at the relevant page here.\nIn these pages describe the exclusive objects of Flight-X, all the objects that are common to our platform have a link to them.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/mappea/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object‚Äôs properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object‚Äôs properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": "Our Object pages describe every single resource, and field in our schema.\nYou can access our Schema interactively in our API Playground, but if you would like to understand each object‚Äôs properties, have a look at the relevant page here.\nEach object is described in the same way: - A short definition of the Object - An interactive GraphQL schema definition - A full list of all Fields in the object - A list of which other objects require this Object - Where possible, we are adding examples of how to use this Object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/load-product/manual-load/offers-load/",
	"title": "Offers: Availability conditions load",
	"tags": [],
	"description": "Load availability conditions to your offers",
	"content": " Offers After selecting the client, the Channel Manager and the hotel you will be able to select in the Choose your Load field, the Offers option. Finally, indicate the base rate and the offer you want to update.\nHow to load availability and supplements/discounts In the following panel you will be able to load different stop sales for your offers.\n\n From - To: Date range when the conditions will be applied. Close On Arrival: Stop sales on arrival date: in the date range specified before is not possible to do a check-in with the offer. If you check \u0026ldquo;On\u0026rdquo; you will apply the close on arrival condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a close on arrival condition if it was previously load and if you check unspecified you won\u0026rsquo;t apply any change (on/off) in the close on arrival condition. Close On Departure: Stop sales on departure date: in the date range specified before is not possible to do a check-out with the offer. If you check \u0026ldquo;On\u0026rdquo; you will apply the close on departure condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a close on departure condition if it was previously load and if you check unspecified you won\u0026rsquo;t apply any change (on/off) in the close on departure condition. Close Master: Stop sales: in the date range specified before is not possible to stay with the offer, so the client will not receive availability with free night offers for any stay that include those days. If you check \u0026ldquo;On\u0026rdquo; you will apply the close master condition, if you check \u0026ldquo;Off\u0026rdquo; you will delete a close master condition if it was previously load and if you check unspecified you won\u0026rsquo;t apply any change (on/off) in the close master condition.  Please, remember that the offer availability days and min/max length of stay it can be updated in the SetUp section.  "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/offices/",
	"title": "Offices",
	"tags": [],
	"description": "Create and configurate offices for your agencies",
	"content": " What is the meaning of office? xxxx\n\nHow to create an office \nConsiderations It is an incremental load, so bear in mind these considerations:\n If an agency exists then it is updated.\n If an agency does not exist then it is created.\n Existing agencies that are not referenced are not removed.\n If an existing agency has to be removed from system then you have to contact with TravelgateX.\n If there is any problem with an agency\u0026rsquo;s information then it is omitted (and logged) but the load continues.\n  \nSpecifications\u0026lt;  File name: Master_Offices.csv.\n Each line represents a unique agency and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Office code   1 Yes Yes string Office name   2 Yes Yes string Agency code (to which the office belongs to)   3 Yes Yes boolean Is active   4 Yes Yes decimal Markup    \nExamples 2#Office2#AG1#true#0.8 3#Office3#AG1I#false#1 4#Office4#AG1#true#0 1#Office#AG1#true#1.2 2#Office2#AG2#true#3.4  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Overview of product\nThe Hotel Buyers API was our first Buyers API, launched back in 2012. We have released a new Buyers API in 2017, called Hotel-X Buyers API, which is the only API new Buyers can integrated in order to join our marketplace.\n"
},
{
	"uri": "https://travelgatex.com/paymentx/reference/schema/mutation/",
	"title": "PaymentXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PaymentXMutation {  storeCard( input: PaymentXStoredCardInput!, ): PaymentXStoredCard!    deleteStoredCard( criteria: PaymentXStoredCardIDInput!, ): PaymentXStoredCard!   Show deprecated fields   }    window.onload = _ = { const deprecatedContainer = document.querySelectorAll('div.deprecated-entities-container')[0]; if (deprecatedContainer.children.length) { const list = document.querySelectorAll('li.deprecated-button-container')[0]; list.style.display = 'block'; console.log(list.style); } }  Fields storeCard(PaymentXStoredCard!):   deleteStoredCard(PaymentXStoredCard!):    "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/configuration/pricing/",
	"title": "Pricing",
	"tags": [],
	"description": "Configuration rules related to pricing",
	"content": " Price Calculation With this rule it can be selected if the base commission-markup of the agency and the Selling Pricing Rules have to be applied as a commission or as a markup (just one behaviour can be selected for all pricing).\nThis rule can be set by agency or by organization on general settings: when defined by agency it can be chosen to set a concrete behaviour or to inherit the value set on the general settings. By default the value for an agency inherits the one set on the general settings.\nBase Commission-Markup With this rule it can be set the base commission-markup to apply to all sellings (it is applied on the purchasing price) and with the previous rule Price Calculation it can be selected if this value is applied as a commission or as a markup.\nBy default the base commission-markup is 0.\nThis rule can only be set by agency.\nAdd Base To Selling Pricing Rules This rule is related to the base commission-markup and the result of applying the Selling Pricing Rules. With this rule it can be defined if the base commission-markup has always to be included on the selling price calculation or not. There are two modes of operation:\n Add always base to Selling Pricing Rules: the base commission-markup will always be included on the selling price calculation, even if there are being also applied Selling Pricing Rules or not.\n Do not add base if applying any Selling Pricing Rule: the base commission-markup will only be included on the selling price calculation if there is none Selling Pricing Rules being applied. If there is just any Selling Pricing Rule being applied then the base commission-markup will be discarded.\n  By default the value for an agency inherits the one set on the general settings.\nThis rule can be set by agency or by organization on general settings: when defined by agency it can be chosen to set a concrete behaviour or to inherit the value set on the general settings.\n Minimum Selling Pricing Rules This rule is related to the total commission-markup obtained as result of applying all the Selling Pricing Rules. This rule is not related to the base commission-markup and has no effect on it neither contemplates its value.\nWith this rule it can be set a minimum value related to the result of applying the Selling Pricing Rules and it can be selected one of two modes of operation:\n Define a minimum and discard sellings with lower pricing: all sellings whose total after applying the Selling Pricing Rules is lower than the minimum, will be discarted Define a minimum and apply it for sellings with lower pricing: all sellings whose total after applying the Selling Pricing Rules, is lower than the minimum, will not be discarded but then the minimum value will be used insted of that lower total.  If the rule is not set in none of the two modes then the previous conditions will not be applied. By default the value for an agency inherits the one set on the general settings.\nThis rule can be set by agency or by organization on general settings: when defined by agency it can be chosen to set a concrete behaviour or to inherit the value set on the general settings.\nSuppliers To Net With this rule it can be defined a set of suppliers for which it is wanted that when receiving a binding price it will be converted to net: the conversion consists on setting the binding mark to false and removing any commission. The amount and the currency will remain inalterated. Example: if we receive a price of 250‚Ç¨ set as binding with a commission of 2% it would be converted to a net price of 250‚Ç¨ (without commission neither the binding mark).\nThe value of this rule is gathered on the availability search and then it is applied also on the quote and booking with the original read value (to mantain coherence on all the booking flow this rule is not read again from the system on quote an booking transactions).\nBy default the value for an agency inherits the one set on the general settings.\nThis rule can be set by agency or by organization on general settings: when defined by agency it can be chosen to set a concrete behaviour or to inherit the value set on the general settings.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/product-load/",
	"title": "Product Load Messages",
	"tags": [],
	"description": "Messages to load product",
	"content": "Providers need to implement HotelRatePlanNotif and HotelAvailNotif messages in order to synchronize hotelier rates and availability. Optionally Providers can read all the properties of their product loaded on our system using HotelAvailRetrieve and HotelRatePlanRetrieve messages.\nYou can find the authentication method for this messages here\n   HotelAvailNotif HotelAvailNotif message\n     HotelAvailRetrieve HotelAvailRetrieve message\n     HotelRatePlanNotif HotelRatePlanNotif message\n     HotelRatePlanRetrieve HotelRatePlanRetrieve message\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/concepts/quotas-limits/",
	"title": "Quotas &amp; Limits",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/bookingflow/quote/",
	"title": "Quote",
	"tags": [],
	"description": "How to valuate an availability option",
	"content": " Quote is an operation used to assess and valuate the rate before the actual booking. It returns the same information as the Search response for a hotel rate with up-to-date price, along with additional information regarding the rate: rate breakdown and cancellation policies.\nAdvanced criteria There are different parameters that can be set up in the request (The below ones are mandatory)\n optionRefId: Identifier of the option chosen in Search. Mandatory language: Language to be used in the request  In the Query Variables, you must modify the optionRefId with the option id value returned in the search response and send the query.\nHow to request Here you can find an example of how to valuate an availability option for 1 room. \n    9dbea409d3b01ed457754dd5f4d35ce5 Please, bear in mind that you should place on optionRefId field the value from the id field of the option you want to valuate from availability. /9dbea409d3b01ed457754dd5f4d35ce5\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"9dbea409d3b01ed457754dd5f4d35ce5\",\"n\":\"1 Room\",\"o\":[\"graphiql\"],\"u\":\"xsolano\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \nPlease, bear in mind Please, bear in mind that there are some mandatory data you should include at this step:\n Cancellation policies: Within the cancelPolicy structure response there is a refundable field. If this field is filled in with false, it means that the room has 100% cancellation cost, so the room is non-refundable. Remarks Taxes   "
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/api-methods/messages/read/",
	"title": "Read",
	"tags": [],
	"description": "Read complete reservations information",
	"content": " Description This method allows us to retreive complete information about reservations.\n\nConsiderations  The filters tgxLocators, providerLocators and clientsLocators are mutually exclusive: we can retrieve reservations using only one of them.\n Only can be retrieved 50 reservations at a time: if more are requested then an error it is generated.\n  \nRead Request (HTTP body) \n   Element Cardinality Data Type Description     access 1 node Acces information: It will be validated to grant acces to the API and to the operation.If there is any problem then an error will be returned.   access/accessToken 1 string Key to acces to the API.   access/user 1 string User.   access/password 1 string Password related to the user.   tgxLocators 0..N list(string) TGX locators to search for.   providerLocators 0..N list(string) Provider locators to search for.   clientLocators 0..N list(string) Agency/Client locators to search for.   correlationIDs 0..N list(string) CorrelationIDs to search for.   isTest 0,1 boolean Test mode:If set to true the operation will be executed in \u0026ldquo;test mode\u0026rdquo;. This means that the response will include dummy information (no real reservations information).If not set to true or not given then the operation will execute as normally. In order to test the API, we still need to give a real access information. Note that even in test mode all operations will execute its own request validations, so the requests must be well formed.    \nRead request structure \n{ \u0026quot;access\u0026quot; : { \u0026quot;accessToken\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;user\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;password\u0026quot; : \u0026quot;string\u0026quot; }, \u0026quot;tgxLocators\u0026quot; : [ \u0026quot;string\u0026quot; ], \u0026quot;providerLocators\u0026quot; : [ \u0026quot;string\u0026quot; ], \u0026quot;clientLocators\u0026quot; : [ \u0026quot;string\u0026quot; ], \u0026quot;isTest\u0026quot; : true }  \nRead request example: search for TGX locator \n{ \u0026quot;access\u0026quot; : { \u0026quot;accessToken\u0026quot; : \u0026quot;xxxx\u0026quot;, \u0026quot;user\u0026quot; : \u0026quot;xxxx\u0026quot;, \u0026quot;password\u0026quot; : \u0026quot;xxxx\u0026quot; }, \u0026quot;tgxLocators\u0026quot; : [ \u0026quot;123\u0026quot; ] }  \nRead Response (HTTP body) \n   Element Cardinality Data Type Description     reservationReadRS 1 list Root node with the list of reservations.   locators 1 node This node contains the different locators of the reservation.   locators/tgx 1 string Travelgate locator.   locators/client 1 string Client locator.   locators/provider 0,1 string Provider locator. If the reservation has no provider locator then this node will be null.   bookingDate 1 dateTime Booking date.   checkinDate 1 date Check-in date.   checkoutDate 1 date Check-out date.   cancellationDate 0,1 dateTime If the reservation has been canceled this will be the cancelation date. If the reservation is not canceled this node will be null.   status 1 string Reservation status. Check reseravation status codes here.   summaryStatus 1 string Reservation summary status. Check reseravation status codes here.   mainGuestName 1 string Reservation\u0026rsquo;s main guest name.   hotelCode 1 string Code of the hotel of the reservation.   hotelName 1 string Name of the hotel of the reservation.   clientCode 1 string Code of the agency/client.   clientName 1 string Name of the agency/client.   providerCode 1 string Code of the provider of the reservation.   providerName 1 string Name of the provider of the reservation.   cityCode 0,1 string Code of the city corresponding to the hotel.   cityName 0,1 string Name of the city corresponding to the hotel.   chainCode 0,1 string Code of the hotel\u0026rsquo;s chain.   chainName 0,1 string Name of the hotel\u0026rsquo;s chain.   countryCode 0,1 string Country code corresponding to the hotel.   mealPlanCode 0,1 string Meal plan code for the reservation.   mealPlanName 0,1 string Meal plan name for the reservation.   market 0,1 string Market corresponding to the reservation.   sellingPrice 1 price node Selling price information.   quoteSellingPrice 1 price node Selling price at the quote/pre-booking step.   providerPrice 1 price node Provider price information.   quoteProviderPrice 1 price node Provider price at the quote/pre-booking step.   rooms 1..N list List of rooms of the reservation.   rooms/code 1 string Room code.   rooms/description 1 string Room description.   rooms/pax 1 list List of pax of the room.   rooms/pax/name 1 string Name of the pax.   rooms/pax/surname 1 string Surname of the pax.   rooms/pax/age 1 string Age of the pax.   quoteNonRefundable 1 boolean Indicates if the reservation was non refundable (true) or if it was refundable (false) on the quote/pre-booking step:If the reservation was refundable then we can have a list of penalties related to the cancellation.If the reservation was non refundable then we will not have a list of penalties (the list node will be null).This information can have changed on the booking step.   quoteCancelPenalties 0..N list CP node List of cancel penalties on the quote/pre-booking step. Only if the reservation was refundable (nonRefundable = false).   officeCode 0,1 string If returned then this will be the code of the office.   officeName 0,1 string If returned then this will be the name of the office.   accessCodeHX 1 string Code of the access used in HotelX layer to access the provider.   hotelProvCodeHX 1 string Code of the hotel on the provider system (used by HotelX).   correlationID 0,1 string Correlation ID.   priceBreakdown 0,1 node Information about how selling price has been calculated.   priceBreakdown/comissionMarkupType 1 enum Type of calculation:C ‚Üí CommissionM ‚Üí Markup   priceBreakdown/totalComission 1 decimal Total Commission/Markup applied to obtain the selling price. It is calculated as the sumatory of:baseCommissionbaseRappelrulesCommissionofficeCommissionThere are some distribution rules that can affect this calculation.   priceBreakdown/baseComission 1 decimal Base commission/markup (if any).   priceBreakdown/baseRappel 1 decimal Base rappel (if any).   priceBreakdown/rulesComission 1 decimal Commission/Markup obtained from applying the \u0026ldquo;Selling Pricing Rules\u0026rdquo;.   priceBreakdown/officeComission 1 decimal Commission/markup of the office (if any).   priceBreakdown/tax 1 decimal Tax (if any). It is applied apart from the totalCommission.   priceBreakdown/currencyExchange 0,1 node If there has been a currency change then this field will give information about the exchange. Currency conversion is done before aplying any pricing calculation.   priceBreakdown/currencyExchange/fromCurrency 1 string Purchasing currency (ISO \u0026ldquo;Alpha-3\u0026rdquo;).   priceBreakdown/currencyExchange/toCurrency 1 string Selling currency (ISO \u0026ldquo;Alpha-3\u0026rdquo;).   priceBreakdown/currencyExchange/exchange 1 decimal Exchange used on the conversion. *New currency amount = original currency amount * exchange*.   paymentInfo 0,1 node Information about payment (includes VCC payment info).   paymentInfo/paymentTypeProvider 1 enum Type of payment obtained from the final provider:LaterPayMerchantPayMixedPayCardBookingPayCardCheckInPay   paymentInfo/paymentTypeClient 1 enum Type of payment returned to the client:LaterPayMerchantPayMixedPayCardBookingPayCardCheckInPay   paymentInfo/vccInfo 0,1 string Textual information about VCC payment.   paymentInfo/vccCardType 0,1 string VCC card type.   paymentInfo/vccSupplierCode 0,1 string VCC supplier code.   paymentInfo/vccTransactionId 0,1 string Identifier of VCC transaction.   reservationError 0,1 string If the reservation is not on a well finished status (reservation or cancellation) then we can have some textual information about the error that caused that not well finished status.   error 0,1 node If there has been any error executing the operation we can receive this node with information about that error. We can also receive errors with the http status.   error/code 1 string Error code. Check error codes here.   error/description 1 string Error description. Check error descriptions here.    \nPrice node \n   Element Cardinality Data Type Description     amount 1 decimal Price amount.   currency 1 string Price currency.   binding 1 boolean Indicates if the price is binding.   commission 1 decimal Commission related to the price.    \nCP (Cancel Policies) node \n   Element Cardinality Data Type Description     penaltyType 1 enum Type of penalty:NightsPercentageAmount   paymentType 1 enum Type of payment:LaterPayMerchantPayMixedPayCardBookingPayCardCheckInPay   hoursBefore 1 int Number of hour before the check-in, in which this penalty is applied.   currency 1 string Currency of the penalty   value 1 decimal Value of the pentalty: will depend on the type of penalty.    \nRead response structure \n{ \u0026quot;reservationReadRS\u0026quot; : [ { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;string\u0026quot; }, \u0026quot;bookingDate\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;checkinDate\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;checkoutDate\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;cancellationDate\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;status\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;mainGuestName\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;hotelCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;hotelName\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;clientCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;clientName\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;providerCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;providerName\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;cityCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;cityName\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;chainCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;chainName\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;countryCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;mealPlanCode\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;mealPlanName\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;market\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;sellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;amount\u0026quot; : 0, \u0026quot;binding\u0026quot; : true, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;providerPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;amount\u0026quot; : 0, \u0026quot;binding\u0026quot; : true, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteSellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;amount\u0026quot; : 0, \u0026quot;binding\u0026quot; : true, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteProviderPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;amount\u0026quot; : 0, \u0026quot;binding\u0026quot; : true, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;rooms\u0026quot; : [ { \u0026quot;code\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;pax\u0026quot; : [ { \u0026quot;name\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;surname\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;age\u0026quot; : \u0026quot;string\u0026quot; } ] } ], \u0026quot;quoteNonRefundable\u0026quot; : true, \u0026quot;quoteCancelPenalties\u0026quot; : [ { \u0026quot;penaltyType\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;paymentType\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;hoursBefore\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;currency\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;value\u0026quot; : 0 } ] } ], \u0026quot;error\u0026quot; : { \u0026quot;code\u0026quot; : \u0026quot;string\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;string\u0026quot; } }  \nRead response: dummy response (test mode) \n{ \u0026quot;reservationReadRS\u0026quot; : [ { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;1\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;111-222\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;12312313\u0026quot; }, \u0026quot;bookingDate\u0026quot; : \u0026quot;2018-07-11 8:50:48\u0026quot;, \u0026quot;checkinDate\u0026quot; : \u0026quot;2018-08-14\u0026quot;, \u0026quot;checkoutDate\u0026quot; : \u0026quot;2018-08-21\u0026quot;, \u0026quot;status\u0026quot; : \u0026quot;OK\u0026quot;, \u0026quot;mainGuestName\u0026quot; : \u0026quot;Smith, Martin\u0026quot;, \u0026quot;hotelCode\u0026quot; : \u0026quot;h1\u0026quot;, \u0026quot;hotelName\u0026quot; : \u0026quot;Hotel 1 Name\u0026quot;, \u0026quot;clientCode\u0026quot; : \u0026quot;c1\u0026quot;, \u0026quot;clientName\u0026quot; : \u0026quot;Client 1 Name\u0026quot;, \u0026quot;providerCode\u0026quot; : \u0026quot;p1\u0026quot;, \u0026quot;providerName\u0026quot; : \u0026quot;Provider 1 Name\u0026quot;, \u0026quot;cityCode\u0026quot; : \u0026quot;Hotel 1 City Code\u0026quot;, \u0026quot;cityName\u0026quot; : \u0026quot;Hotel 1 City Name\u0026quot;, \u0026quot;chainCode\u0026quot; : \u0026quot;Hotel 1 Chain Code\u0026quot;, \u0026quot;chainName\u0026quot; : \u0026quot;Hotel 1 Chain Name\u0026quot;, \u0026quot;countryCode\u0026quot; : \u0026quot;ES\u0026quot;, \u0026quot;mealPlanCode\u0026quot; : \u0026quot;MP\u0026quot;, \u0026quot;mealPlanName\u0026quot; : \u0026quot;Half board\u0026quot;, \u0026quot;market\u0026quot; : \u0026quot;ES\u0026quot;, \u0026quot;sellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;providerPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteSellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteProviderPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;rooms\u0026quot; : [ { \u0026quot;code\u0026quot; : \u0026quot;R14\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;test room 1\u0026quot;, \u0026quot;pax\u0026quot; : [ { \u0026quot;name\u0026quot; : \u0026quot;Martin\u0026quot;, \u0026quot;surname\u0026quot; : \u0026quot;Smith\u0026quot;, \u0026quot;age\u0026quot; : \u0026quot;30\u0026quot; }, { \u0026quot;name\u0026quot; : \u0026quot;Susan\u0026quot;, \u0026quot;surname\u0026quot; : \u0026quot;Smith\u0026quot;, \u0026quot;age\u0026quot; : \u0026quot;30\u0026quot; } ] }, { \u0026quot;code\u0026quot; : \u0026quot;R32\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;test room 2\u0026quot;, \u0026quot;pax\u0026quot; : [ { \u0026quot;name\u0026quot; : \u0026quot;Rob\u0026quot;, \u0026quot;surname\u0026quot; : \u0026quot;Conors\u0026quot;, \u0026quot;age\u0026quot; : \u0026quot;30\u0026quot; }, { \u0026quot;name\u0026quot; : \u0026quot;Sara\u0026quot;, \u0026quot;surname\u0026quot; : \u0026quot;Conors\u0026quot;, \u0026quot;age\u0026quot; : \u0026quot;30\u0026quot; } ] } ], \u0026quot;quoteNonRefundable\u0026quot; : false, \u0026quot;quoteCancelPenalties\u0026quot; : [ { \u0026quot;penaltyType\u0026quot; : \u0026quot;Amount\u0026quot;, \u0026quot;paymentType\u0026quot; : \u0026quot;MerchantPay\u0026quot;, \u0026quot;hoursBefore\u0026quot; : \u0026quot;24\u0026quot;, \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;value\u0026quot; : 25.5 } ] }, { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;2\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;222-333\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;456456456\u0026quot; }, \u0026quot;bookingDate\u0026quot; : \u0026quot;2018-08-21 10:11:17\u0026quot;, \u0026quot;checkinDate\u0026quot; : \u0026quot;2018-12-01\u0026quot;, \u0026quot;checkoutDate\u0026quot; : \u0026quot;2018-12-07\u0026quot;, \u0026quot;cancellationDate\u0026quot; : \u0026quot;2018-08-26 11:01:47\u0026quot;, \u0026quot;status\u0026quot; : \u0026quot;CN\u0026quot;, \u0026quot;mainGuestName\u0026quot; : \u0026quot;Redford, Charles\u0026quot;, \u0026quot;hotelCode\u0026quot; : \u0026quot;h2\u0026quot;, \u0026quot;hotelName\u0026quot; : \u0026quot;Hotel 2 Name\u0026quot;, \u0026quot;clientCode\u0026quot; : \u0026quot;c2\u0026quot;, \u0026quot;clientName\u0026quot; : \u0026quot;Client 2 Name\u0026quot;, \u0026quot;providerCode\u0026quot; : \u0026quot;p2\u0026quot;, \u0026quot;providerName\u0026quot; : \u0026quot;Provider 2 Name\u0026quot;, \u0026quot;cityCode\u0026quot; : \u0026quot;Hotel 2 City Code\u0026quot;, \u0026quot;cityName\u0026quot; : \u0026quot;Hotel 2 City Name\u0026quot;, \u0026quot;chainCode\u0026quot; : \u0026quot;Hotel 2 Chain Code\u0026quot;, \u0026quot;chainName\u0026quot; : \u0026quot;Hotel 2 Chain Name\u0026quot;, \u0026quot;countryCode\u0026quot; : \u0026quot;ES\u0026quot;, \u0026quot;mealPlanCode\u0026quot; : \u0026quot;MP\u0026quot;, \u0026quot;mealPlanName\u0026quot; : \u0026quot;Half board\u0026quot;, \u0026quot;market\u0026quot; : \u0026quot;ES\u0026quot;, \u0026quot;sellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;providerPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteSellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteProviderPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;rooms\u0026quot; : [ { \u0026quot;code\u0026quot; : \u0026quot;Rd45\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;test room 2-b\u0026quot;, \u0026quot;pax\u0026quot; : [ { \u0026quot;name\u0026quot; : \u0026quot;Charles\u0026quot;, \u0026quot;surname\u0026quot; : \u0026quot;Redford\u0026quot;, \u0026quot;age\u0026quot; : \u0026quot;40\u0026quot; } ] } ], \u0026quot;quoteNonRefundable\u0026quot; : true }, { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;3\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;444-555\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;789-987-789\u0026quot; }, \u0026quot;bookingDate\u0026quot; : \u0026quot;2018-08-09 18:00:00\u0026quot;, \u0026quot;checkinDate\u0026quot; : \u0026quot;2019-01-26\u0026quot;, \u0026quot;checkoutDate\u0026quot; : \u0026quot;2019-01-27\u0026quot;, \u0026quot;status\u0026quot; : \u0026quot;OK\u0026quot;, \u0026quot;mainGuestName\u0026quot; : \u0026quot;Clancy, Tom\u0026quot;, \u0026quot;hotelCode\u0026quot; : \u0026quot;h3\u0026quot;, \u0026quot;hotelName\u0026quot; : \u0026quot;Hotel 3 Name\u0026quot;, \u0026quot;clientCode\u0026quot; : \u0026quot;c3\u0026quot;, \u0026quot;clientName\u0026quot; : \u0026quot;Client 3 Name\u0026quot;, \u0026quot;providerCode\u0026quot; : \u0026quot;p3\u0026quot;, \u0026quot;providerName\u0026quot; : \u0026quot;Provider 3 Name\u0026quot;, \u0026quot;cityCode\u0026quot; : \u0026quot;Hotel 3 City Code\u0026quot;, \u0026quot;cityName\u0026quot; : \u0026quot;Hotel 3 City Name\u0026quot;, \u0026quot;chainCode\u0026quot; : \u0026quot;Hotel 3 Chain Code\u0026quot;, \u0026quot;chainName\u0026quot; : \u0026quot;Hotel 3 Chain Name\u0026quot;, \u0026quot;countryCode\u0026quot; : \u0026quot;IT\u0026quot;, \u0026quot;mealPlanCode\u0026quot; : \u0026quot;HD\u0026quot;, \u0026quot;mealPlanName\u0026quot; : \u0026quot;Bed \u0026amp; breakfast\u0026quot;, \u0026quot;market\u0026quot; : \u0026quot;UK\u0026quot;, \u0026quot;sellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;providerPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteSellingPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 234.5, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;quoteProviderPrice\u0026quot; : { \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot; : 204.99, \u0026quot;binding\u0026quot; : false, \u0026quot;commission\u0026quot; : 0 }, \u0026quot;rooms\u0026quot; : [ { \u0026quot;code\u0026quot; : \u0026quot;R14\u0026quot;, \u0026quot;description\u0026quot; : \u0026quot;test room 3-c\u0026quot;, \u0026quot;pax\u0026quot; : [ { \u0026quot;name\u0026quot; : \u0026quot;Tom\u0026quot;, \u0026quot;surname\u0026quot; : \u0026quot;Clancy\u0026quot;, \u0026quot;age\u0026quot; : \u0026quot;35\u0026quot; }, { \u0026quot;name\u0026quot; : \u0026quot;Ingrid\u0026quot;, \u0026quot;surname\u0026quot; : \u0026quot;Clancy\u0026quot;, \u0026quot;age\u0026quot; : \u0026quot;38\u0026quot; } ] } ], \u0026quot;quoteNonRefundable\u0026quot; : false, \u0026quot;quoteCancelPenalties\u0026quot; : [ { \u0026quot;penaltyType\u0026quot; : \u0026quot;Amount\u0026quot;, \u0026quot;paymentType\u0026quot; : \u0026quot;MerchantPay\u0026quot;, \u0026quot;hoursBefore\u0026quot; : \u0026quot;48\u0026quot;, \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;value\u0026quot; : 54.75 }, { \u0026quot;penaltyType\u0026quot; : \u0026quot;Amount\u0026quot;, \u0026quot;paymentType\u0026quot; : \u0026quot;MerchantPay\u0026quot;, \u0026quot;hoursBefore\u0026quot; : \u0026quot;24\u0026quot;, \u0026quot;currency\u0026quot; : \u0026quot;EUR\u0026quot;, \u0026quot;value\u0026quot; : 25.5 } ] }, { \u0026quot;locators\u0026quot; : { \u0026quot;tgx\u0026quot; : \u0026quot;4\u0026quot;, \u0026quot;client\u0026quot; : \u0026quot;555-666\u0026quot;, \u0026quot;provider\u0026quot; : \u0026quot;888-999-777\u0026quot; }, \u0026quot;bookingDate\u0026quot; : \u0026quot;2018-08-09 18:00:00\u0026quot;, \u0026quot;checkinDate\u0026quot; : \u0026quot;2019-01-26\u0026quot;, \u0026quot;checkoutDate\u0026quot; : \u0026quot;2019-01-27\u0026quot;, \u0026quot;status\u0026quot; : \u0026quot;ERROR\u0026quot;, \u0026quot;mainGuestName\u0026quot; : \u0026quot;Fisher, Sam\u0026quot;, \u0026quot;hotelCode\u0026quot; : \u0026quot;h4\u0026quot;, \u0026quot;clientCode\u0026quot; : \u0026quot;c4\u0026quot;, \u0026quot;rooms\u0026quot; : [ ], \u0026quot;quoteNonRefundable\u0026quot; : false }, { \u0026quot;locators\u0026quot; : { \u0026quot;provider\u0026quot; : \u0026quot;1010-2020-3030\u0026quot; }, \u0026quot;status\u0026quot; : \u0026quot;NOTFOUND\u0026quot;, \u0026quot;quoteNonRefundable\u0026quot; : false } ] }  "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "https://travelgatex.com/product_template/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n  "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "https://travelgatex.com/mappea/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": "Our reference pages explain all aspects of our GraphQL schema.\nThese pages are divided into the following sections:\nSchema: Explains how our Schema works and the two key operations: Queries and Mutations\nObjects: A complete list of all objects in our schema, their definitions, what fields they use and when they are mandatory.\nWe are currently building out examples for every Object page. Please send us a Pull request if you would like to see an example for a particular Object, or if you would like to share your own example with the TravelgateX community. Scalars: A complete list of the types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nInterfaces: An abstract type that includes a certain set of fields that a type must include. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nInput Objects: Similar to an Interface, this is an abstract type that includes a set of fields that can be used together when making a query. For example our HotelCriteriaSearchInput lists which fields must be completed to filter search results for a hotel booking. In this case, it is mandatory to include checkin and checkout dates, the number of hotel options you want to receive, and the number of rooms you need. There are also non-mandatory fields that can be included such as currency for prices, and the nationality of traveler.\nEnums: These are a particular type of scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum. For example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a Nights, Percent or Import penalty type.\nYou can also see our Schema in action by using our API Playground. You can create sample queries and the Schema will autocomplete with available fields. In GraphQL, ! indicates mandatory fields that must be included in your queries. For more information about GraphQL, check out our Learning GraphQL guides. Keep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n   Schema      Objects      Scalars      Interfaces      Input objects      Enums     "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/tools/reports/",
	"title": "Reports",
	"tags": [],
	"description": "Generate CSV reports from loaded hotels and configurated blacklists",
	"content": "Reports return CSV files with information about your product. Currently there is a report of a Hotels Blacklist, Suppliers Blacklist and Hotels Report. This first one also includes information on why these hotels are on the blacklist (if it is by blacklisted destination, chain, market\u0026hellip;).\nWe can generate as many reports as we want, but there is a restriction of one every 5 minutes per type of report, and they last 3 months until deleted. With the Generate report button, the generation of this begins, and we will receive a notification on the screen when it is finished, and we must refresh the page to see it.\nTo download any of the reports, you have to use its button in the Download column.\n "
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/api-methods/code-list/reservation-status-codes/",
	"title": "Reservation Status Codes",
	"tags": [],
	"description": "List and description of reservation status codes",
	"content": " Reservation status codes    Code Explanation     OK The reservation was created successfully.   KO The reservation process failed and the reservation was not created on the provider.   KOP The reservation process failed but the reservation was created on the provider.   KUN The reservation process failed and we don\u0026rsquo;t know the final status on the provider.   CN The reservation was cancelled successfully.   CK The cancellation process failed and the reservation was not cancelled on the provider.   CKP The cancellation process failed but the reservation was cancelled on the provider.   CUN The cancellation process failed and we don\u0026rsquo;t know the final status on the provider.   ERROR There has been an error while recovering the reservation from the system. Returned data can be incompleted.   NOTFOUND The reservation has not been found on the system. Returned data has to be ignored.    Reservations summary status codes    Code Explanation     OK The reservation was created successfully.   CN The reservation was cancelled successfully.   RQ The reservation was created successfully put is pending on provider.   UN The reservation is on an unknown status because some error on the last operation executed on it.    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/gettingstarted/resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": " Resources  "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/rules/",
	"title": "Rules",
	"tags": [],
	"description": "Manage princing rules, filters and blacklists",
	"content": "   General rules Configurate general rules and filters by different conditions\n     Temporary pricing rules Apply commissions or markups for different market conditions\n     General stop sales Define general stop sales by different conditions\n     Specific stop sales Define specific stop sales by different conditions\n    "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/selling-pricing-rules/",
	"title": "Selling pricing rules",
	"tags": [],
	"description": "Apply commissions or markups for different market conditions",
	"content": " Overview On this page you will find a table with all the Sales Rules configurated (If we enter from an Agency, it only shows its own rules).\nIn the table you will see the conditions on which each rule applies, such as: Hotels, Markets, Refundable, Check-in Dates, Suppliers‚Ä¶.\nIn the first and second column is shown the code and name rule. The third column contains the pricing applied and in the Actions column some buttons where you will be able to:\n Information: Check last update and rules comments. Edit the rule. Delete the rule.  \n\nIf in one of the columns you have a button, it means that you have configurated a list of values, and the condition will be fulfilled if it has at least one of those values. To see the values that are applied, you can click the button and a modal will be displayed showing them. Create and configurate a new rule To create a specific selling pricing rule in this section, we have to use the Create New Rule button and a modal similar to the following image will be displayed:\n\nIn the Basic tab you should add basic information about the rule as the name to identify it, the pricing percentage to be modified and rate conditions as package, refundable or its price type. You can also select from this tab if the rule should be applied to all agencies and providers or indicate an specific list of each group. A comment is mandatory to create the rule.\nIn the Advanced tab you can choose some additional settings that the system will consider to apply the rule, such as a specific list of mealplans, markets, check-in dates or booking dates.\nIn the Hotels tab, you can select a list of hotels, hotel country or city, chains and destinations to decide to which this rule applies.\nOutdated Rules There are some rules that can only be applied to certain dates, for example, if you have created a specific pricing rule applying to check-in dates in December. These rules must be gradually eliminated so that inactive rules do not accumulate and in order to streamline operations.\nWhen you have expired rules, its rows will be displayed in red and the following message will be displayed in the extranet:\n\nIf you select the trash button, all the rules whose date has already passed will be eliminated.\n "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/concepts/basicconcepts/single_multi_mode/",
	"title": "Single Mode &amp; Multi Mode Searching",
	"tags": [],
	"description": "Learn about searching Multi Mode",
	"content": " Search Multi Mode is one of the main features of Hotel-X.\nSearch Single Mode This mode is used when the client only wants to get options from a single access, for this, the client must indicate in the request the code of the access that they want to use. In the request have to use the access filter.\n{ \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;includes\u0026quot;: [\u0026quot;yourAccess\u0026quot;] } } }                                                                   \nSearch Multi Mode If you don‚Äôt have any filter in the request and you have permissions for multimode, the request run for all accesses that you have configured in the product. If you want to apply some filter, you have to use the filter and to indicate the rules that you want. Is important to know that you only can use includes or excludes in the same request, but never both in the same request.\n                                                                        \nIncludes Sample { \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;includes\u0026quot;: [\u0026quot;yourAccess\u0026quot;,\u0026quot;yourAccess2\u0026quot;] } } }  Excludes Sample { \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;excludes\u0026quot;: [\u0026quot;yourAccess\u0026quot;] } } }  "
},
{
	"uri": "https://travelgatex.com/core/getting-started/updateaccess/",
	"title": "Update Access",
	"tags": [],
	"description": "Admin Update Access tool",
	"content": " Update an Access. Update values of an Access and check DOCS in playground to see what you can modify. mutation { admin { updateAccess(input: { code: \u0026quot;\u0026quot;, isActive: false }) { accessData { code isActive } error { code type description } } } }  "
},
{
	"uri": "https://travelgatex.com/community/release-notes/",
	"title": "Writting release notes",
	"tags": [],
	"description": "Release notes, document with the changelog",
	"content": " This document assists on write release notes with the changelog of products.\n Release Notes Organization How to keep a good changelog  General Principles What is a changelog? Why keep a changelog? Who needs a changelog?  How do I make a good changelog?  Guiding Principles Types of changes  How can I reduce the effort required to maintain a changelogs document? Can changelogs be bad?  Do not document commit log diffs Do not ignore deprecations Avoid confusing dates  Changelog example Reference table Writing resources  Release Notes Organization Release notes includes:\n Roadmap: GIT repository where we publish future functionalities and term planned for being released. Changelogs: Documents containing a chronologically ordered list of notable changes. We have:  A general platform changelog with common changes Product specific changelogs hosted at TravelgateX/Release Notes or directly at the Product Space/Release Notes (if exists) for example: https://docs.travelgatex.com/hotel-x/release-notes/changelog/ You can find an specific instructions to fill the changelog on this document.  GraphQL Schema Changes: Is a list of recent and upcoming changes to our GraphQL API schema. Deprecated Schema Changes: Specific list of changes that can break existing queries to the GraphQL API. Deleted Schema Changes: Contains a changes history of deprecated notes previously announced.  How to keep a good changelog General Principles What is a changelog? A changelog is a file which contains a curated, chronologically ordered list of notable changes for each version of a project.\nWhy keep a changelog? To make it easier for users and contributors to see precisely what notable changes have been made on the project.\nWho needs a changelog? People do. Whether consumers or developers, the end users of software are human beings who care about what\u0026rsquo;s in the software. When the software changes, people want to know why and how.\nHow do I make a good changelog? Guiding Principles  changelogs are for humans, not machines. The same types of changes should be grouped. Versions and sections should be linkable. The latest changes comes first. The release date of each is displayed.  Types of changes  Added for new features. Changed for changes in existing functionality. Deprecated for soon-to-be removed features. Removed for now removed features. Fixed for any bug fixes. Security in case of vulnerabilities.  How can I reduce the effort required to maintain a changelogs document? Keep an Unreleased section at the top to track upcoming changes.\nThis serves two purposes: - People can see what changes they might expect in upcoming releases - At release time, you can move the Unreleased section changes into a new release version section.\nCan changelogs be bad? Yes. Here are a few ways they can be less than useful.\nDo not document commit log diffs Using commit log diffs as changelogs is a bad idea: they\u0026rsquo;re full of noise. Things like merge commits, commits with obscure titles, documentation changes, etc.\nThe purpose of a commit is to document a step in the evolution of the source code. Some projects clean up commits, some don\u0026rsquo;t.\nThe purpose of a changelog entry is to document the noteworthy difference, often across multiple commits, to communicate them clearly to end users.\nDo not ignore deprecations When people upgrade from one version to another, it should be painfully clear when something will break. It should be possible to upgrade to a version that lists deprecations, remove what\u0026rsquo;s deprecated, then upgrade to the version where the deprecations become removals.\nIf you do nothing else, list deprecations, removals, and any breaking changes in your changelog.\nAvoid confusing dates Regional date formats vary throughout the world and it\u0026rsquo;s often difficult to find a human-friendly date format that feels intuitive to everyone. The advantage of dates formatted like 2017-07-17 is that they follow the order of largest to smallest units: year, month, and day. This format also doesn\u0026rsquo;t overlap in ambiguous ways with other date formats, unlike some regional formats that switch the position of month and day numbers. These reasons, and the fact this date format is an ISO standard, are why it is the recommended date format for changelog entries.\nChangelog example # Changelog All notable changes to this project will be documented in this file. {{% release-notes-container type=\u0026quot;u\u0026quot; %}} - \u0026quot;How do I make a changelog?\u0026quot; section. {{% /release-notes-container %}} ## 2017-06-20 {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - New visual identity by @tylerfortune8. - Version navigation. - Links to latest released version in previous versions. - \u0026quot;Why keep a changelog?\u0026quot; section. {{% /release-notes-container %}} {{% release-notes-container type=\u0026quot;c\u0026quot; %}} - Start versioning based on the current English version at 0.3.0 to help translation authors keep things up-to-date. - Rewrite \u0026quot;What makes unicorns cry?\u0026quot; section. {{% /release-notes-container %}} {{% release-notes-container type=\u0026quot;r\u0026quot; %}} - Section about \u0026quot;changelog\u0026quot; vs \u0026quot;change log\u0026quot;. {{% /release-notes-container %}} ## 2015-12-03 {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - RU translation. - pt-BR translation. - es-ES translation. {{% /release-notes-container %}} ## 2015-10-06 {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - Answer \u0026quot;Should you ever rewrite a change log?\u0026quot;. {{% /release-notes-container %}} {{% release-notes-container type=\u0026quot;c\u0026quot; %}} - Improve argument against commit logs. - Start following [SemVer](http://semver.org) properly. {{% /release-notes-container %}}  View an example\nReference table    Types of changes Level Code     Added H3 {{% release-notes-container type=\u0026ldquo;a\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Changed H3 {{% release-notes-container type=\u0026ldquo;c\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Deprecated H3 {{% release-notes-container type=\u0026ldquo;d\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Removed H3 {{% release-notes-container type=\u0026ldquo;r\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Fixed H3 {{% release-notes-container type=\u0026ldquo;f\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Security H3 {{% release-notes-container type=\u0026ldquo;s\u0026rdquo; %}} LIST {{% / release-notes-container %}}   Unreleased H2 {{% release-notes-container type=\u0026ldquo;u\u0026rdquo; %}} LIST {{% / release-notes-container %}}    Writing resources Learn more about changelogs and release notes.\n Keep a changelog  "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-mappea/log/legacy/",
	"title": "Mappea",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/",
	"title": "API Reference",
	"tags": [],
	"description": "Hotel Push API messages for sellers",
	"content": " Messages used in the Inventory API Inventory\u0026rsquo;s API messages have been structured in three parts:\n SetUp: Messages to retrieve or notify the hotel, rate and room structure. Product Load: Messages to load and read availability conditions and prices. Booking flow: Messages to notify or retrieve bookings and cancellations.  You will find detailed information and examples of each method in the Messages section. In Code List you will find all codes used by the system.\n  Messages Notif and Retrieve messages\n     Code List List of Inventory Codes\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/add_parameterx/",
	"title": "Add Parameter",
	"tags": [],
	"description": "Allows Add Parameter to the access created for a supplier",
	"content": " Add Parameter is an optional plugin that allows parameters to be added or modified at request level.\nWhat it does The add parameter plugin adds parameters in the configuration of the existing accesses. By doing this, you can add parameters dynamically in request time to the existing accesses (see Access configuration). This plugin can be used in all the booking services.\nYou can also replace the value of an existing parameter by adding into the query a parameter with the same key as the one to be replaced.\nYou\u0026rsquo;ll be able to add different parameters to multiple accesses and/or suppliers in the same query.\nHow to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nParameters    key value type condition description     JSONConfiguration JSON mandatory JSON structure with parameters that you add by access or by supplier, or even for all accesses    Execution example The JSONConfiguration value brings several possibilities to this plugin: - Lets say you want to add a parameter with key \u0026lsquo;A\u0026rsquo; and value \u0026lsquo;1\u0026rsquo; for the access 123 and the parameters \u0026lsquo;B\u0026rsquo; and \u0026lsquo;C\u0026rsquo; with values \u0026lsquo;2\u0026rsquo; and \u0026lsquo;3\u0026rsquo; respectively for the accesses 456 and 789. The following example shows this:\n{ \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;add_parameterX\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;JSONConfiguration\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{\\\u0026quot;accesses\\\u0026quot;: [ { \\\u0026quot;codes\\\u0026quot;: [\\\u0026quot;123\\\u0026quot;], \\\u0026quot;parameters\\\u0026quot;: [{ \\\u0026quot;key\\\u0026quot;: \\\u0026quot;A\\\u0026quot;, \\\u0026quot;value\\\u0026quot;: \\\u0026quot;1\\\u0026quot; }] }, { \\\u0026quot;codes\\\u0026quot;: [ \\\u0026quot;456\\\u0026quot;, \\\u0026quot;789\\\u0026quot; ], \\\u0026quot;parameters\\\u0026quot;: [ { \\\u0026quot;key\\\u0026quot;: \\\u0026quot;B\\\u0026quot;, \\\u0026quot;value\\\u0026quot;: \\\u0026quot;2\\\u0026quot; }, { \\\u0026quot;key\\\u0026quot;: \\\u0026quot;C\\\u0026quot;, \\\u0026quot;value\\\u0026quot;: \\\u0026quot;3\\\u0026quot; } ] } ]}\u0026quot; } ] } ] }   Another case could be to add parameters by supplier. So for the supplier XXX you add the parameter with key \u0026rsquo;D\u0026rsquo; and value \u0026lsquo;4\u0026rsquo;.  { \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;add_parameterX\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;JSONConfiguration\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{ \\\u0026quot;suppliers\\\u0026quot;: [{ \\\u0026quot;codes\\\u0026quot;: [\\\u0026quot;XXX\\\u0026quot;], \\\u0026quot;parameters\\\u0026quot;: [{ \\\u0026quot;key\\\u0026quot;: \\\u0026quot;D\\\u0026quot;, \\\u0026quot;value\\\u0026quot;: \\\u0026quot;4\\\u0026quot; }] }] }\u0026quot; } ] } ] }   And finally you\u0026rsquo;re also able to add parameters for all of the accesses requested in the corresponding service query (search, quote\u0026hellip;):  { \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;add_parameterX\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;JSONConfiguration\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;{ \\\u0026quot;parameters\\\u0026quot;: [{ \\\u0026quot;key\\\u0026quot;: \\\u0026quot;E\\\u0026quot;, \\\u0026quot;value\\\u0026quot;: \\\u0026quot;1\\\u0026quot; }] }\u0026quot; } ] } ] }  File format No files are needed in order to use this plugin.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/aggregation/",
	"title": "Aggregation",
	"tags": [],
	"description": "Aggregate different Suppliers response based on different criteria.",
	"content": " Aggregation plugin extends HotelX allowing the aggregation of Supplier options using different business rules.\nWhat it does Aggregation plugin aggregate Supplier options based on field keys applying a selector function over field values.\nIt\u0026rsquo;s based on SQL Aggregate Functions.\n Field Keys as a combination of:  binding board cancelPolicy currency hotel market payment promotion rateRules¬† refundable room supplement supplier surcharges ratePlan status   How to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nParameters    key value type condition description     primaryKey string mandatory It is the criteria used to aggregate, the value is a set of criteria separated by commas, the possible values are:\nexample: ‚Äúhotel,supplier,room,status‚Äù    Name The aggregation mode only supports by now one mode: \u0026ldquo;cheapest_price\u0026rdquo;. You will need to set this in the \u0026ldquo;name\u0026rdquo; field when using the plugin as shown in the example below.\nExecution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;AGGREGATION\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;cheapest_price\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;primaryKey\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;hotel,supplier,room\u0026quot; } ] } ] } }  File format No files are needed in order to use this plugin.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/set-up/authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "How to sign in",
	"content": " The messages have two levels of authentication, named Security and POS.\nSecurity Level The Security level is in the SOAP envelope header, where you send the user and password of our Inventory system. Here you have an example:\n\u0026lt;SOAP-ENV:Envelope xmlns:SOAP-ENV = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns1 = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot; xmlns:ns2 = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot; xmlns:ns3 = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;SOAP-ENV:Header\u0026gt; \u0026lt;ns3:Security SOAP-ENV:mustUnderstand = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;ns3:UsernameToken\u0026gt; \u0026lt;ns3:Username\u0026gt;XXXXX\u0026lt;/ns3:Username\u0026gt; \u0026lt;ns3:Password\u0026gt;XXXXXXX\u0026lt;/ns3:Password\u0026gt; \u0026lt;/ns3:UsernameToken\u0026gt; \u0026lt;/ns3:Security\u0026gt; \u0026lt;/SOAP-ENV:Header\u0026gt; \u0026lt;SOAP-ENV:Body\u0026gt; \u0026lt;!--Your request--\u0026gt; \u0026lt;/SOAP-ENV:Body\u0026gt; \u0026lt;/SOAP-ENV:Envelope\u0026gt;  POS Level The POS level comes in the body that all the requests have. This has two fields: RequestorID, the seller code asigned which send the request, and CompanyName, the buyer code asigned which receives the updates. Here you have an example:\n\u0026lt;SOAP-ENV:Envelope xmlns:SOAP-ENV = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns1 = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot; xmlns:ns2 = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot; xmlns:ns3 = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;SOAP-ENV:Header\u0026gt; \u0026lt;ns3:Security SOAP-ENV:mustUnderstand = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;ns3:UsernameToken\u0026gt; \u0026lt;ns3:Username\u0026gt;XXXXX\u0026lt;/ns3:Username\u0026gt; \u0026lt;ns3:Password\u0026gt;XXXXXXX\u0026lt;/ns3:Password\u0026gt; \u0026lt;/ns3:UsernameToken\u0026gt; \u0026lt;/ns3:Security\u0026gt; \u0026lt;/SOAP-ENV:Header\u0026gt; \u0026lt;SOAP-ENV:Body\u0026gt; \u0026lt;ns:HotelRatePlanNotif\u0026gt;\u0026lt;!--Your request, ex: HotelAvailNotif, HotelRatePlanInventoryRetrieve ...--\u0026gt; \u0026lt;ns:request\u0026gt; \u0026lt;ns1:POS\u0026gt; \u0026lt;ns1:Source\u0026gt; \u0026lt;ns1:RequestorID ID=\u0026quot;Seller Code\u0026quot;/\u0026gt; \u0026lt;ns1:BookingChannel\u0026gt; \u0026lt;ns1:CompanyName Code=\u0026quot;Buyer Code\u0026quot;/\u0026gt; \u0026lt;/ns1:BookingChannel\u0026gt; \u0026lt;/ns1:Source\u0026gt; \u0026lt;/ns1:POS\u0026gt; ... ... \u0026lt;/ns:request\u0026gt; \u0026lt;/ns:HotelRatePlanNotif\u0026gt; \u0026lt;/SOAP-ENV:Body\u0026gt; \u0026lt;/SOAP-ENV:Envelope\u0026gt;  "
},
{
	"uri": "https://travelgatex.com/getting-started/learning-graphql/basic_concepts/",
	"title": "Basic Concepts",
	"tags": [],
	"description": "",
	"content": " What are Queries \u0026amp; Mutations There are two basic operations in GraphQL schemas:  Queries: Requesting data from a data model. An example Query would be: checking availability of hotels for a particular date and location  Mutations: Making changes and carrying out transactions on data in the data model. An example Mutation would be: making a booking to reserve a hotel room on a particular date.\nQueries Queries ask the system to provide some data, based on specfic parameters. This operation reads values from the server using a GraphQL Object and returns JSON text as a response.\nQueries are interactive. You can use our API Playground to test your queries.\nHere you\u0026rsquo;ll find how to make queries to search for available hotels and get quotes. Mutations Mutations are methods that change the data on the server. That is, mutations make a physical change to the data. This can include inserting a new object in a database, or deleting, or updating a data record.\nOur booking flow can be found here\n"
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/dataset-content/benchmark/",
	"title": "Benchmark Dataset",
	"tags": [],
	"description": "Learn about how the information is stored in our Benchmark Datasets",
	"content": "Benchmark datasets offer you the competitive advantage of knowing how you are doing with respect to the competition. The benchmark is available for:\n Performance. The comparisons are based on the ratio of searches, quotes, bookings and cancellation ok requests, plus you will be able to compare your time responses with respect to other competitors. Insights. The comparisons are based on the number of available hotels, total bookings and net revenue, plus you will be able to see your position with respect to other competitors filtering at the level of country, city and clients/suppliers.    Performance Benchmark Dataset Understand Performance Benchmark Dataset\n     Insights Benchmark Dataset Understand Insights Benchmark Dataset\n     Hotel Rates Benchmark Dataset Understand Hotel Rates Benchmark Dataset\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/bookingflow/book/",
	"title": "Book",
	"tags": [],
	"description": "How to perform a booking",
	"content": " This Book operation requests a reservation confirmation for the specified optionId returned in Quote.\nAdvanced criteria Within the Query Variables, you should modify the optionRefId with the optionRefId value returned in the Quote response and send the Query with the other mandatory information.\nAlso, please specify advanced criteria if it‚Äôs necessary:\nauditTransactions: It returns all the transactions exchanged with the supplier. We recommend to set it to \u0026ldquo;true\u0026rdquo; for possible claiming purposes with the supplier - if set to \u0026ldquo;true\u0026rdquo;, the system will return the logs from the Seller in the response.\nWhen making a booking, you get the Book status in the response of our API. There are 4 different status:\n OK: The reservation was completed with no problems.\n ON_REQUEST: The reservation was completed but the product is still not available, so the reservation goes into a waiting list. It is the Buyer‚Äôs responsibility to check if the booking is OK.\n UNKNOWN: The reservation process through TGX was completed but due to a supplier error or a timeout, the reservation status is unknown. It is the Buyer‚Äôs responsibility to check if the booking is OK.\n PENDING_COMMIT: The payment has been confirmed in provider\u0026rsquo;s side, but is necessary to make a commit in order to confirm the reservation. .\n   How to confirm a reservation     fb4cf9773a63b7bf222011c211de6b4a\nPlease note that the clientReference should be different for every test that you perform.\n/fb4cf9773a63b7bf222011c211de6b4a\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"8626cf56-e364-4fd1-4fe0-311e23ac6355\",\"g\":\"fb4cf9773a63b7bf222011c211de6b4a\",\"n\":\"1 Room\",\"o\":[\"graphiql\"],\"u\":\"xsolano\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \nPayment Card Example of payment card input\n{ \u0026quot;cardType\u0026quot;: \u0026quot;VI\u0026quot;, \u0026quot;holder\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;test_name\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;test_surname\u0026quot; }, \u0026quot;number\u0026quot;: \u0026quot;4874495143042809\u0026quot;, \u0026quot;CVC\u0026quot;: \u0026quot;330\u0026quot;, \u0026quot;expire\u0026quot;: { \u0026quot;month\u0026quot;: 9, \u0026quot;year\u0026quot;: 2028 }, \u0026quot;isVCC\u0026quot;: true, \u0026quot;virtualCreditCard\u0026quot;: { \u0026quot;activationDate\u0026quot;: \u0026quot;2020-10-02\u0026quot;, \u0026quot;deactivationDate\u0026quot;: \u0026quot;2021-01-02\u0026quot;, \u0026quot;currentBalance\u0026quot;: 50.58, \u0026quot;currencyCode\u0026quot;: \u0026quot;EUR\u0026quot; }, \u0026quot;threeDomainSecurity\u0026quot;: { \u0026quot;version\u0026quot;: \u0026quot;1.0.1\u0026quot;, \u0026quot;DSTransactionID\u0026quot;: \u0026quot;transaction 1\u0026quot;, \u0026quot;XID\u0026quot;: \u0026quot;id123456\u0026quot;, \u0026quot;ECI\u0026quot;: \u0026quot;05\u0026quot;, \u0026quot;CAVV\u0026quot;: \u0026quot;CAVV\u0026quot;, \u0026quot;payerResponse\u0026quot;: \u0026quot;base64xml response\u0026quot;, \u0026quot;payerResponseStatus\u0026quot;: \u0026quot;AUTHENTICATION_SUCCESS\u0026quot;, \u0026quot;cardEnrolledStatus\u0026quot;: \u0026quot;CARD_ENROLLED\u0026quot;, \u0026quot;merchantName\u0026quot;: \u0026quot;test_name\u0026quot;, \u0026quot;signatureStatus\u0026quot;: \u0026quot;SIGNATURE_NOT_VALIDATED\u0026quot; } }  isVCC, virtualCreditCard and threeDomainSecurity, are all optionals\nisVCC This field is optional, isVCC = true does not have to be mandatory to send 3DS or Virtual Credit Card, because neither of them is mandatory\nStrong Customer Authentication (3DS) The possible values for the threeDomainSecurity fields\nVisa, American Express, Diners Club and JCB    ECI Value Description     05 3DS authentication was successful, transactions are secured by 3DS.   06 Authentication was attempted but was not or could not be completed; possible reasons being either the card or its Issuing Bank has yet to participate in 3DS.   07 3DS authentication is either failed or could not be attempted; possible reasons being both card and Issuing Bank are not secured by 3DS, technical errors, or improper configuration.    MasterCard    ECI Value Description     00 3DS authentication is either failed or could not be attempted; possible reasons being both card and Issuing Bank are not secured by 3DS, technical errors, or improper configuration.   01 3DS authentication was attempted but was not or could not be completed; possible reasons being either the card or its Issuing Bank has yet to participate in 3DS, or cardholder ran out of time to authorize.   02 3DS authentication is successful.    Payer Response Status    Status Value Description     AUTHENTICATION_SUCCESS Successful Authentication.   AUTHENTICATION_FAILED Failed Authentication.   AUTHENTICATION_INCOMPLETE Unable to complete Authentication.   TRANSACTION_ATTEMPT_SUCCESS_A Successful Attempts Transaction.   TRANSACTION_ATTEMPT_SUCCESS_B You can proceed to authorisation using the information received.   AUTHENTICATION_REJECTED Authentication Rejected.    Card Enrollment Status    Status Value Description     CARD_ENROLLED Cardholder is enrolled. Bank is participating in 3-D Secure protocol and will return the ACSUrl.   CARD_NOT_ENROLLED Cardholder Not Participating ‚Äì Cardholder is not enrolled.   CANT_AUTHENTICATE Unavailable. The DS or ACS is not available for authentication at the time of the request.    Signature Verification Status    Status Value Description     SIGNATURE_VALIDATED Signature of the PARes has been validated successfully.   SIGNATURE_NOT_VALIDATED PARes could not be validated.    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/booking-flow/",
	"title": "Booking Flow Messages",
	"tags": [],
	"description": "Booking Flow Messages",
	"content": "Providers can receive an instant API notification from TGX with HotelResNotif message for bookings and CancelNotif message for cancellations. If Provider doesn\u0026rsquo;t allow push notifications to their system, it is possible to implement HotelResRetrieve messages in order to obtain a list of bookings from Inventory-X system.\nPlease notice that card payments are only allowed if Provider implements HotelResNotif message   HotelResRetrieve HotelResRetrieve message\n     HotelResNotif HotelResNotif message\n     CancelNotif CancelNotif message\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/booking_persistence/",
	"title": "Booking Persistence",
	"tags": [],
	"description": "This plugin allows to store and avoid duplicated bookings",
	"content": " Booking Persistence is a plugin that allows clients to store bookings.\nWhat it does Booking Persistence allows clients to store their bookings and avoid to duplicate them. Two bookings with the same client reference are considered duplicated bookings. With this plugin all the bookings of an organization will be unique (by clientReference). All the bookings will also be stored until the day after the checkout at the hotel. This plugin can only be executed in book service. An application/communication error during booking process will store a persistent booking with UNKNOWN status. In the following bookings with same client reference, the same response will be returned. In these cases, we don\u0026rsquo;t send a request to the provider and the booking is read from database. This plugin is used for storing and retrieving the bookings. This two processes are executed transparently for the client in the booking process. If the booking returned is a retrieved booking, the application will show a warning like this:\n{ \u0026quot;data\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;book\u0026quot;: { \u0026quot;auditData\u0026quot;: null, \u0026quot;booking\u0026quot;: { \u0026quot;price\u0026quot;: null, \u0026quot;quotePrice\u0026quot;: null, \u0026quot;status\u0026quot;: \u0026quot;BookingStatus\u0026quot;, \u0026quot;remarks\u0026quot;: null, \u0026quot;reference\u0026quot;: { \u0026quot;client\u0026quot;: \u0026quot;clientReference\u0026quot;, \u0026quot;supplier\u0026quot;: \u0026quot;supplierReference\u0026quot; }, \u0026quot;holder\u0026quot;: null, \u0026quot;hotel\u0026quot;: null }, \u0026quot;errors\u0026quot;: null, \u0026quot;warnings\u0026quot;: [ { \u0026quot;code\u0026quot;: \u0026quot;FETCHED_BOOKING\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;PLUGIN_WARNING\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;booking obtained by a retry\u0026quot; } ] } } } }  How to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nWorkflow Execution example mutation ($input: HotelBookInput!, $settings: HotelSettingsInput) { hotelX { book(input: $input, settings: $settings) { auditData { transactions { request response } } booking { price { currency net gross binding exchange { currency rate } markups { channel currency binding net gross exchange { currency rate } rules { id name type value } } } quotePrice { currency net gross binding } status remarks reference { client supplier } holder { name surname } hotel { start end hotelCode hotelName boardCode occupancies { id paxes { age } } rooms { code description occupancyRefId price { currency net gross binding } } } } errors { code type description } warnings { code type description } } } }  { \u0026quot;input\u0026quot;: { \u0026quot;optionRefId\u0026quot;: \u0026quot;optionID\u0026quot;, \u0026quot;clientReference\u0026quot;: \u0026quot;clientReference\u0026quot;, \u0026quot;holder\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Name1\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Surname1\u0026quot; }, \u0026quot;paymentCard\u0026quot;: { \u0026quot;cardType\u0026quot;: \u0026quot;VI\u0026quot;, \u0026quot;holder\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Name1\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Surname1\u0026quot; }, \u0026quot;number\u0026quot;: \u0026quot;41111111111111111\u0026quot;, \u0026quot;CVC\u0026quot;: \u0026quot;778\u0026quot;, \u0026quot;expire\u0026quot;: { \u0026quot;month\u0026quot;: 10, \u0026quot;year\u0026quot;: 22 } }, \u0026quot;rooms\u0026quot;: [ { \u0026quot;occupancyRefId\u0026quot;: 1, \u0026quot;paxes\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;Name1\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Surname1\u0026quot;, \u0026quot;age\u0026quot;: 1 }, { \u0026quot;name\u0026quot;: \u0026quot;Name2\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Surname2\u0026quot;, \u0026quot;age\u0026quot;: 30 } ] } ] }, \u0026quot;settings\u0026quot;: { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;REQUEST\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;booking_detail_persistence\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot; } ] }, \u0026quot;client\u0026quot;: \u0026quot;client\u0026quot;, \u0026quot;auditTransactions\u0026quot;: true, \u0026quot;timeout\u0026quot;: 100000 } }  File format No files are needed in order to use this plugin.\n"
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/load-product/calendar/",
	"title": "Calendar",
	"tags": [],
	"description": "Check your loaded availability conditions and prices with the calendar",
	"content": " The Calendar tool will allow you to check the information loaded in a hotel: conditions, amount per room, amount per passenger, amount per occupancy, final amount that will be shown in the availability search, meal plan supplements and derived rate amounts (with their conditions).\nAs in previous tools of the extranet, you will need to select the client and the provider. Then, you will be able to introduce the hotel and rate for which you want to check the information that has been loaded in the system. Once the rate is selected, a filter that allows you to filter per room or derived rate will appear. These two options, unlike the rate, are optional and if you do not indicate information in them, all product loaded for the rate will be displayed.\n\nAfter selecting your filters you can click the Search button and the calendar will be displayed.\nOn top of the calendar you will see a checkbox row in which you can select the information that you want to be displayed. If there is nothing selected you will only see the general information of the rooms of the specific rate filtered.\n\nAs you can see in our example above, we can see the rooms of the BARTEST rate:\n Double Room (DBLRO) Junior Suite Deluxe (JSUITDLX)\n The numbers inside the brackets is the Standard Occupancy for that room. This value will help us to calculate the total amount of the room.*\n  For each room and day you will find availability information as the current booking limit, the booking sold and checkbox for free sales and stop sales conditions. In green it means that those days ara available to book, in red it means that there is a stop sale, and the light green that there is some kind of close sales, as close on departure or close on arrival.\nFor example, the Double Room has the free sales activated for all those days, except 25\u0026frasl;02 and 26\u0026frasl;02 that have a close sales. Also, from 04/03 to 05/03 a close on departure is loaded. The Junior Suite Deluxe is not working with free sales, but has a booking limit of 5 for each day.\nUse cases (checking only these conditions):\n Availability request from Tuesday 02/03 to Friday 05/03: There will be no availability for any room because Friday 05/03 is not possible to do a check out (close on departure loaded). Availability request from Friday 26\u0026frasl;02 to Sunday 28\u0026frasl;02: There will be availability only for the Junior Suite Deluxe room. There will be no availability for the Double Room because Friday 26\u0026frasl;02 there is a close sales. Availability request from Saturday 06/03 to Friday 12\u0026frasl;03: There will be availability for both rooms.  In order to see more details we will check the additional options.\nConditions To be able to see the availability conditions loaded, you should check the Conditions option:\n\nWith this view you will be able to check the minimum and maximum stay length and release. For example, for all days, the Double Room has a condition of minimum 3 nights of stay length and a minimum release of 7 nights. However, the Junior Suite Deluxe has 15 of minimum release and a minimum of 3 nights and a maximum of 7 nights during the stay.\nUse cases (adding the LOS and release conditions):\n Availability request from Saturday 06/03 to Friday 12\u0026frasl;03 with 5 days of release: There will be no availability for any room because their minimum release condition. Availability request from Friday 26\u0026frasl;02 to Sunday 28\u0026frasl;02 with 25 days of release: There won\u0026rsquo;t be availability for the Junior Suite Deluxe room because the minimum nights of stay is 3. There won\u0026rsquo;t be availability for the Double Room because Friday 26\u0026frasl;02 there is a close sales and the minimum nights of stay is 3. Availability request from Saturday 06/03 to Friday 12\u0026frasl;03 with 10 days of release: There will be availability only for the Double Room because the release condition.  Price Inventory-X system allows prices to be loaded in 3 different ways: price per room, price based on standard occupancy and price per occupancy. You will see three options in the checkbox row. Also, you have the Final Occupancies Amounts that allows you to check the final amount for each occupancy loaded after the calculations done by the system depending on the price type used to load.\nIn this example, the Double room has price loaded per room from Friday 26\u0026frasl;02 to Sunday 28\u0026frasl;02 and, after that, the price used is price per occupancy. You can see the price loaded by type, but in the Final Availability Occupancy Prices row you will see the price that will be shown in the availability requests, including all calculations as extra passengers supplements. The currency is set up at rate level.\nUse cases (Double Room):\n From 26\u0026frasl;02 to 28\u0026frasl;02: There is a price per room of 100‚Ç¨. All occupancies equal and below the standard occupancy (2) have the same price. Occupancies above the standard occupancy have price if a supplement was loaded. In this case child and baby have a supplement of 0‚Ç¨ (total price remains 100‚Ç¨) and a third adult a supplement of 20‚Ç¨ (total price for three adults is 120‚Ç¨). From 01/03 to 06/03: There is price per occupancy loaded. In this case, the price loaded is the one loaded for each occupancy. In the example you can see price loaded for 1 adult, 2 adults, 2 adults and a baby and 2 adults and a child. Price for 3 adults has not been loaded, so there won\u0026rsquo;t be availability response for those dates in this room for 3 adults.\n From 07/03 to 17\u0026frasl;03: There is not price loaded, so there won\u0026rsquo;t be availability for this room on those dates.  Board/MealPlan supplements In case that you want to see the board supplements information you should select the option Supplements Board.\n\nIn this example, the Double room has board supplements loaded from Monday 01/03 to Saturday 06/03. The base meal plan or board for this rate was Bed \u0026amp; Breakfast, but availability with All Inclusive will be show for those dates with a supplement added to the final price. In this case, for each adult and each day in the stay, the price will be incremented 35‚Ç¨. For each child and day, the price will be incremented 15‚Ç¨, and for each baby the price won\u0026rsquo;t be incremented because it was loaded as 0‚Ç¨. The Junior Suite Deluxe doesn\u0026rsquo;t have any board supplement, so only Bed \u0026amp; Breakfast options will be shown for this room.\nDerived Rates In case that you want to see the Derived Rates information you should select the option Derived Rates.\n\nIn this example, the Double room has a Derived Rate Early Bird Discount 10%. As you can see, below the final occupancy prices for that room, you will see the final occupancy prices for the derived rate. In the row below, you can see the discount applied, that in this example is a 10% with the condition of a minimum release of 60 days.\nSo, in this example, if an availability request is made with a release of 60 days or more, for a stay date range from 26\u0026frasl;02 to 28\u0026frasl;02 and 2 adults, two options will be shown:\n Base Rate with Double Room and price 100‚Ç¨. Derived Rate with Double Room and price 90‚Ç¨.  Offers In case that you want to see the Offers information you should select the option Offers.\n\nWith this information you will be able to check if the offer is active or not and if there is some kind of availability conditions as close sales.\n "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/faq/cancel-policies/",
	"title": "Cancel Policies",
	"tags": [],
	"description": "Know how the load different cancellation policies by rate and date",
	"content": " In the Setup section you are able to add cancel policies when you create your rates. You will be able to add as many policies as you need. All that is necessary is to indicate the days in advance before the arrival date, the type and the value of the policy.\nLet\u0026rsquo;s clarify these options with a few examples:\n Refundable policy  Nigths and Percentage Import and Percentage  Non-Refundable policy No-Show policy  \nRefundable policy Here you can see some examples of different refundable cancel policies:\nNigths and Percentage \nBased on the screenshot above you can determine that:\n 5 days before the arrival date, the cancellation penalty will be of one night (the cost is the average price for all nights prices included in the reservation). 3 days before the arrival date, the cancellation penalty will be 50% of the total amount of the booking. 1 day before the arrival date, the cancellation penalty will be 100% of the total amount of the booking. If the cancellation is done prior to the 5 days before the arrival date, there will not be cancellation penalty at all.  \nImport and Percentage \n 1000 days before the arrival date, the cancellation penalty will be 10% of the total amount. Technically, this means that if you cancel there will always be a penalty. 20 days before the arrival date, the cancellation penalty will be 50 ‚Ç¨ (or the kind of currency applied to the rate). 2 days before the arrival date, the cancellation penalty will be 80% of the total amount.  Non-Refundable policy \nThere is no cancellation penalty, the total amount of the reservation is charged no matter when is cancelled.\nNo-Show policy \n 3 days before the arrival date, the cancellation penalty will be of one night (the cost is the average price for all nights prices included in the reservation). 0 days before the arrival (if the customer doesn\u0026rsquo;t appear the check-in day) the cancellation penalty will be the 121% of the reservation, that means the total booking import plus a charge for not showing.    \nIf you want to delete any cancellation policy previously added, you just have to click the recycle bin icon on the right side of the cancellation policy..\n  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/booking-flow/cancelnotif/",
	"title": "CancelNotif",
	"tags": [],
	"description": "CancelNotif message",
	"content": " Only implemented if the Channel Manager allows cancellation delivery.\nDuring the cancellation process, we will send a CancelNotifRQ message to the Channel Manager to inform of the cancellation. The Channel Manager will process the cancellation information and will inform us of the reservation status. TGX will process the response from the Channel\u0026rsquo;s system and will proceed with the cancellation process.\nNote that if the cancellation fails in the Channel Manager\u0026rsquo;s system. it will be considered NOK and we will inform the Seller with an error.\nCancelNotifRQ \u0026lt;OTA_HotelResRS xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot; xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; ResResponseType = \u0026quot;Cancelled\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;HotelReservations\u0026gt; \u0026lt;HotelReservation CreateDateTime = \u0026quot;2018-08-01T09:07:28.5074165Z\u0026quot; ResStatus = \u0026quot;Cancelled\u0026quot;\u0026gt; \u0026lt;RoomStays\u0026gt; \u0026lt;RoomStay\u0026gt; \u0026lt;RoomTypes\u0026gt; \u0026lt;RoomType RoomTypeCode = \u0026quot;STD\u0026quot; RoomID = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;RoomDescription\u0026gt; \u0026lt;Text\u0026gt;Standard\u0026lt;/Text\u0026gt; \u0026lt;/RoomDescription\u0026gt; \u0026lt;/RoomType\u0026gt; \u0026lt;/RoomTypes\u0026gt; \u0026lt;RatePlans\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;BAR\u0026quot; PriceViewableInd = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;RatePlanDescription\u0026gt; \u0026lt;Text\u0026gt;Best Available Rate\u0026lt;/Text\u0026gt; \u0026lt;/RatePlanDescription\u0026gt; \u0026lt;Commission Percent = \u0026quot;20\u0026quot;/\u0026gt; \u0026lt;Guarantee PaymentCode = \u0026quot;MerchantPayment\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;RoomRates\u0026gt; \u0026lt;RoomRate BookingCode = \u0026quot;1|30#30|1|2018-08-17|5|488654|38644|3|0|0\u0026quot; EffectiveDate = \u0026quot;2018-08-17\u0026quot; ExpireDate = \u0026quot;2018-08-22\u0026quot; RoomTypeCode = \u0026quot;STD\u0026quot; InvBlockCode = \u0026quot;3\u0026quot; NumberOfUnits = \u0026quot;37\u0026quot; RatePlanCode = \u0026quot;BAR\u0026quot; RoomID = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-17\u0026quot; ExpireDate = \u0026quot;2018-08-18\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;201.37\u0026quot; AmountAfterTax = \u0026quot;201.37\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;CancelPolicies\u0026gt; \u0026lt;CancelPenalty PolicyCode = \u0026quot;c25b8026-5ca2-49ce-b62c-fe0b4945de01\u0026quot;/\u0026gt; \u0026lt;/CancelPolicies\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-18\u0026quot; ExpireDate = \u0026quot;2018-08-19\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;219.19\u0026quot; AmountAfterTax = \u0026quot;219.19\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-19\u0026quot; ExpireDate = \u0026quot;2018-08-20\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;130.09\u0026quot; AmountAfterTax = \u0026quot;130.09\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-20\u0026quot; ExpireDate = \u0026quot;2018-08-21\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;156.82\u0026quot; AmountAfterTax = \u0026quot;156.82\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;Rate EffectiveDate = \u0026quot;2018-08-21\u0026quot; ExpireDate = \u0026quot;2018-08-22\u0026quot;\u0026gt; \u0026lt;Base AmountBeforeTax = \u0026quot;165.73\u0026quot; AmountAfterTax = \u0026quot;165.73\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Total AmountBeforeTax = \u0026quot;873.20\u0026quot; AmountAfterTax = \u0026quot;873.20\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/RoomRate\u0026gt; \u0026lt;/RoomRates\u0026gt; \u0026lt;CancelPenalties\u0026gt; \u0026lt;CancelPenalty PolicyCode = \u0026quot;c25b8026-5ca2-49ce-b62c-fe0b4945de01\u0026quot; NonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Deadline AbsoluteDeadline = \u0026quot;2018-08-16\u0026quot; OffsetTimeUnit = \u0026quot;Day\u0026quot; OffsetUnitMultiplier = \u0026quot;1\u0026quot; OffsetDropTime = \u0026quot;BeforeArrival\u0026quot;/\u0026gt; \u0026lt;AmountPercent NmbrOfNights = \u0026quot;1\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;BasicPropertyInfo HotelCode = \u0026quot;1\u0026quot; HotelName = \u0026quot;Test Hotel\u0026quot;/\u0026gt; \u0026lt;Comments\u0026gt; \u0026lt;Comment\u0026gt; \u0026lt;Text\u0026gt;Customer comments...\u0026lt;/Text\u0026gt; \u0026lt;/Comment\u0026gt; \u0026lt;/Comments\u0026gt; \u0026lt;ServiceRPHs\u0026gt; \u0026lt;ServiceRPH RPH = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;ServiceRPH RPH = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/ServiceRPHs\u0026gt; \u0026lt;/RoomStay\u0026gt; \u0026lt;/RoomStays\u0026gt; \u0026lt;ResGuests\u0026gt; \u0026lt;ResGuest ResGuestRPH = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;\u0026gt; \u0026lt;Profiles\u0026gt; \u0026lt;ProfileInfo\u0026gt; \u0026lt;Profile\u0026gt; \u0026lt;Customer\u0026gt; \u0026lt;PersonName\u0026gt; \u0026lt;NamePrefix\u0026gt;Mr\u0026lt;/NamePrefix\u0026gt; \u0026lt;GivenName\u0026gt;John\u0026lt;/GivenName\u0026gt; \u0026lt;Surname\u0026gt;Doe\u0026lt;/Surname\u0026gt; \u0026lt;/PersonName\u0026gt; \u0026lt;/Customer\u0026gt; \u0026lt;/Profile\u0026gt; \u0026lt;/ProfileInfo\u0026gt; \u0026lt;/Profiles\u0026gt; \u0026lt;GuestCounts\u0026gt; \u0026lt;GuestCount Age = \u0026quot;30\u0026quot;/\u0026gt; \u0026lt;/GuestCounts\u0026gt; \u0026lt;/ResGuest\u0026gt; \u0026lt;ResGuest ResGuestRPH = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;\u0026gt; \u0026lt;Profiles\u0026gt; \u0026lt;ProfileInfo\u0026gt; \u0026lt;Profile\u0026gt; \u0026lt;Customer\u0026gt; \u0026lt;PersonName\u0026gt; \u0026lt;NamePrefix\u0026gt;Mr\u0026lt;/NamePrefix\u0026gt; \u0026lt;GivenName\u0026gt;xxxxxxx\u0026lt;/GivenName\u0026gt; \u0026lt;Surname\u0026gt;xxxxxx\u0026lt;/Surname\u0026gt; \u0026lt;/PersonName\u0026gt; \u0026lt;/Customer\u0026gt; \u0026lt;/Profile\u0026gt; \u0026lt;/ProfileInfo\u0026gt; \u0026lt;/Profiles\u0026gt; \u0026lt;GuestCounts\u0026gt; \u0026lt;GuestCount Age = \u0026quot;30\u0026quot;/\u0026gt; \u0026lt;/GuestCounts\u0026gt; \u0026lt;/ResGuest\u0026gt; \u0026lt;/ResGuests\u0026gt; \u0026lt;ResGlobalInfo\u0026gt; \u0026lt;Guarantee PaymentCode = \u0026quot;MerchantPayment\u0026quot;/\u0026gt; \u0026lt;Total AmountBeforeTax = \u0026quot;873.20\u0026quot; AmountAfterTax = \u0026quot;873.20\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;HotelReservationIDs\u0026gt; \u0026lt;HotelReservationID ResID_Value = \u0026quot;**clientLocator**\u0026quot; ResID_SourceContext = \u0026quot;Client\u0026quot;/\u0026gt; \u0026lt;HotelReservationID ResID_Value = \u0026quot;**internalLocator**\u0026quot; ResID_SourceContext = \u0026quot;Internal\u0026quot;/\u0026gt; \u0026lt;/HotelReservationIDs\u0026gt; \u0026lt;Profiles\u0026gt; \u0026lt;ProfileInfo\u0026gt; \u0026lt;Profile\u0026gt; \u0026lt;Customer\u0026gt; \u0026lt;PersonName\u0026gt; \u0026lt;NamePrefix\u0026gt;Mr\u0026lt;/NamePrefix\u0026gt; \u0026lt;GivenName\u0026gt;xxxxxx\u0026lt;/GivenName\u0026gt; \u0026lt;Surname\u0026gt;xxxxx\u0026lt;/Surname\u0026gt; \u0026lt;/PersonName\u0026gt; \u0026lt;Telephone PhoneTechType = \u0026quot;1\u0026quot; PhoneNumber = \u0026quot;900000000\u0026quot;/\u0026gt; \u0026lt;Email EmailType = \u0026quot;1\u0026quot;\u0026gt;\u0026quot;***agency_email@agency.com***\u0026quot;\u0026lt;/Email\u0026gt; \u0026lt;Address Type = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;AddressLine\u0026gt;Address\u0026lt;/AddressLine\u0026gt; \u0026lt;CityName\u0026gt;Address\u0026lt;/CityName\u0026gt; \u0026lt;PostalCode\u0026gt;07121\u0026lt;/PostalCode\u0026gt; \u0026lt;CountryName\u0026gt;ES\u0026lt;/CountryName\u0026gt; \u0026lt;/Address\u0026gt; \u0026lt;/Customer\u0026gt; \u0026lt;/Profile\u0026gt; \u0026lt;/ProfileInfo\u0026gt; \u0026lt;/Profiles\u0026gt; \u0026lt;/ResGlobalInfo\u0026gt; \u0026lt;/HotelReservation\u0026gt; \u0026lt;/HotelReservations\u0026gt; \u0026lt;Success/\u0026gt; \u0026lt;/OTA_HotelResRS\u0026gt;     Element Number Type Description     OTA_HotelResRS 1  Root Node.   OTA_HotelResRS/Success 0..1  Should only be present if it was a successful response. The Errors node should not be present if the Success node is present.   OTA_HotelResRS/HotelReservations 0..1  Node containing the reservation.   HotelReservations/HotelReservation 1  Node containing information about the reservation.   @ResStatus 1 String Status of the reservation. The possible status value is: \u0026lsquo;Cancelled\u0026rsquo;   @CreateDateTime 1 DateTime Date and time when the reservation was made.   HotelReservation/RoomStays 1  Node containing the RoomStays of the reservation.   RoomStays/RoomStay 1..n  Node containing RoomStay information.   RoomStay/RoomTypes 1  Node containing information about rooms.   RoomTypes/RoomType 1  Node containing information about one room.   @RoomTypeCode 1 String Room code.   @RoomID 1 String Id of the room.   RoomType/RoomDescription 1  Node containing the description of the room.   RoomDescription/Text 1 String Description of the room.   RoomStay/RatePlans 1  Node containing information about RatePlans.   RatePlans/RatePlan 1  Node containing information about one RatePlan.   @RatePlanCode 1  RatePlan code.   RatePlan/RatePlanDescription 1  Node containing information the RatePlan description one RatePlan.   RatePlanDescription/Text 1 String Description of the RatePlan.   RatePlan/Commission 1  Node containing the commission of the RatePlan.   Percent 1 Decimal Commission of the RatePlane.   RoomStay/RoomRates 1  Node containing information about RoomRates.   RoomRates/RoomRate 1  Node containing information about one RoomRate.   @EffectiveDate 1 Date Effective date when the RoomRate start applying.   @ExpireDate 1 Date Expire date when the RoomRate ends applying. Check out night minus 1.   @RoomTypeCode 1 String Code of the Room.   @InvBlockCode 1 String Inventary block code.   @RatePlanCode 1 String Code of the RatePlan.   RoomRate/Rates 1  Node containing information about the rates.   Rates/Rate 1  Node containing information about one rate.   @EffectiveDate 1 Date Effective date when the Rate start applying.   @ExpireDate 1 Date Expire date when the Rate ends applying.   Rate/Base 1  Node containing core information about the rate.   @AmountBeforeTax 0..1 Decimal Amount before tax of the rate.   @AmountAfterTax 1 Decimal Amount after tax of the rate.   @CurrencyCode 1 String Currency code of the rate.   Rate/CancelPolicies 1  Node containing information about cancel policies which are applied to the rate.   CancelPolicies/CancelPenalty 0..n  Node containing information about one cancel penalty.   @PolicyCode 1 String Policy code of the cancel penalty.   RoomRate/Total 1  Node containing information about the total price of the RoomRate.   @AmountBeforeTax 0..1 Decimal Amount before tax of the RoomRate.   @AmountAfterTax 1 Decimal Amount after tax of the RoomRate.   @CurrencyCode 1 String Currency code of the RoomRate.   RoomStay/CancelPenalties 1  Node containing all cancel penalties of the RoomStay.   CancelPenalties/CancelPenalty 0..n  Node containing information about one cancel penalty.   @PolicyCode 1 String Policy code of the cancel penalty.   @NonRefundable 1 Boolean Indicates whether the Rate is refundable or not.   CancelPenalty/Deadline 0..n  Node containing information about the deadline of the cancel penalty.   @AbsoluteDeadline 1 DateTime Indicates when the absolute deadline.   @OffsetTimeUnit 1 String Time unit of the offset for the absolute deadline.   @OffsetUnitMultiplier 1 Integer Number of time units of offset for the absolute ege deadline.   @OffsetDropTime 1 String Indicates when the deadline is applied.   CancelPenalty/AmountPercent 0..n  Amount of the cancel penalty.   @Percent 1 String Percent of the total charged as a cancel penalty amount. Percent or NmbrOfNights must be present.   @NmbrOfNights 1 String Number of nights charged as a cancel penalty amount.   @CurrencyCode 1 String Currency code of the cancel penalty amount.   RoomStay/BasicPropertyInfo 1  Node containing basic information of the property.   RoomStay/Comments 0..1  Node containing information of the customer comments.   Comments/Comment 1..n String Customer comment text   Comment/Text 1  Node containing information about one customer comment   RoomStay/ServiceRPHs 1  Node containing information of the guests of the room.   ServiceRPHs/ServiceRPH 1..n  Node containing information of a guest of the room.   @RPH 1 String Code of a guest of the room. Match with @ResGuestRPH at the ResGuests node.   HotelCode 1 Integer Hotel code.   HotelName 1 String Hotel name.   HotelReservation/ResGuests 1  Node containing all reservation guests.   ResGuests/ResGuest 1..n  Node containing information about one of the guests.   ResGuest/ResGuest 1..n  Node containing information about one of the guests.   @ResGuestRPH 1 Integer RPH of the guest.   @AgeQualifyingCode 1 Integer Age qualifying code of the guest.   ResGuest/Profiles 1  Node containing information about the profiles of the guest.   Profiles/ProfileInfo 1  Node containing information about the profile of the guest.   ProfileInfo/Customer 1  Node containing customer information of the guest.   Customer/PersonName 1  Node containing the person name of the guest.   PersonName/NamePrefix 1 String Prefix/Traitement name of the guest.   PersonName/GivenName 1 String Given name of the guest.   PersonName/Surname 1 String Surname of the guest.   ResGuest/GuestCounts 1  Node containing quantity informations for the guest.   GuestCounts/GuestCount 1  Node containing quantity information for the guest.   @Age 1 Integer Age of the guest.   ResGlobalInfo 1  Node containing general information about the reservation.   ResGlobalInfo/Total 1  Node containing the total price.   @AmountBeforeTax 0..1 Decimal Amount before tax of the Reservation.   @AmountAfterTax 1 Decimal Amount after tax of the Reservation.   @CurrencyCode 1 String Currency code of the Reservation.   ResGlobalInfo/Guarantee 0..1  Node containing the Guarantee provided with the reservation.   @PaymentCode 1  Contains the payment method accepted by the rate. See Payment Type Codes list in section 7.6.3.   Guarantee/GuaranteesAccepted 0..1  Node containing the Guarantee provided with the reservation.   GuaranteesAccepted/GuaranteeAccepted 1  Node that contains the booking payment details accepted.   GuaranteeAccepted/PaymentCard 1  Node that contains the credit card accepted. The credit card information can be a URL with the information(in TPA_Extension tag) or the details in the PaymentCard tags and attributes.   @CardCode 1 String Contains the credit card code. See Credit Card Codes list in section 7.6.4.   @ExpireDate 0..1 String This is the expiry date of the credit card used for deposit/prepayment. Format MMyy.   PaymentCard/CardHolderName 0..1 String PaymentCard / CardHolderName.   PaymentCard/CardNumber/PlainText 0..1 String This is actual number of the credit card used for deposit/prepayment.   PaymentCard/SeriesCode/PlainText 0..1 String The SeriesCode attribute is used (Optionally) for the security number of the card.   PaymentCard/TPA_Extensions 0..1  Optional, contains credit card URL.   Param 1     @key 1 String URL.   @value 1 String URL where the Credit card details are stored.   ResGlobalInfo/HotelReservationIDs 1  Node containing the ids of the reservation.   HotelReservationIDs/HotelReservationID 2  Node containing information of one reservation id.   @ResIDValue 1 String Value of the id.   @ResIDSourceContext 1 String Id context.   ResGlobalInfo/Profiles 1  Node containing information about the profiles of the reservation.   Profiles/ProfileInfo 1  Node containing information about the profile of the reservation.   ProfileInfo/Profile 1  Node containing information about the profile of the reservation.   Profile/Customer 1  Node containing information about the customer of the reservation. The customer of the reservation can be or not a pax of the reservation. If it\u0026rsquo;s a pax will be present in ResGuests node.   Customer/PersonName 1  Node containing the person name of the customer of the reservation.   PersonName/NamePrefix 1 String Name prefix of the customer.   PersonName/GivenName 1 String Given name of the customer.   PersonName/Surname 1 String Surname of the customer.   Customer/Telephone 1  Node containing information about the telephone of the customer.   @PhoneTechType 1 String Phone technology type.   @PhoneNumber 1 String Phone number.   @FormattedInd 1 String Indicates whether associated data is formatted or not.   @DefaultInd 1 String When true, indicates a default value should be used.   Customer/Email 1  Node containing information about the email of the customer.   @DefaultInd 1 String When true, indicates a default value should be used.   @EmailType 1 String Indicates the type of the email.   Value 1 String Email of the customer.   Customer/Address 1  Node containing information about the address of the customer.   Address/AddressLine 1 String Address of the customer.   Address/CityName 1 String City name.   Address/PostalCode 1 String Postal code.   Address/StateProv 1 String Node containing information about the state or the province of the customer.   @StateCode 1 String State code.   Value 1 String State or province name.   Address/CountryName 1 String Country name.   @Code 1 String Country code.   Value 1 String Country name.    CancelNotifRS Success Response\n\u0026lt;OTA_HotelResNotifRS xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot; Timestamp = \u0026quot;2018-09-12T23:09:08+03:00\u0026quot;\u0026gt; \u0026lt;Success/\u0026gt; \u0026lt;/OTA_HotelResNotifRS\u0026gt;  Error Response\n\u0026lt;OTA_HotelResNotifRS xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot; Timestamp = \u0026quot;2018-09-12T23:09:08+03:00\u0026quot;\u0026gt; \u0026lt;Errors\u0026gt; \u0026lt;Error ShortText = \u0026quot;Cancellation error\u0026quot; Code = \u0026quot;60\u0026quot;\u0026gt;Reservation doesn't exist\u0026lt;/Error\u0026gt; \u0026lt;/Errors\u0026gt; \u0026lt;/OTA_HotelResNotifRS\u0026gt;  Authentication and Headers Our system send these messages without SOAP envelop, directly the OTA_HotelResRS, as POST request with the following headers:\n Content-Type: application/xml; charset=utf-8 Authorization: Basic XXXXXXXXXXXXXXXXX  Here you can find what is Basic authentication\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/bestpractices/check_booking_status/",
	"title": "Check Booking status",
	"tags": [],
	"description": "",
	"content": "It is the client¬¥s responsability to check the status of the booking. If you get a response without errors in Book query, it is not meaning that the booking has been confirmed. It is strictly required for an effective use of the API.\nThere are 4 different status for the response of Book query:\n OK:The reservation was completed with no problems. ON_REQUEST: The reservation was completed but the product is still not available, so the reservation goes into a waiting list. It is the client‚Äôs responsibility to check if the booking is OK. UNKNOWN: The reservation process through TGX was completed but due to a supplier error or a timeout, the reservation status is unknown. It is the client‚Äôs responsibility to check if the booking is OK. PENDING_COMMIT: The payment has been confirmed in provider\u0026rsquo;s side, but is necessary make a commit in order to confirm the reservation.  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/net-price/",
	"title": "Commission",
	"tags": [],
	"description": "Convert Gross Prices into Net Prices.",
	"content": " CommissionX is a plugin that defines the contracted / expected commission in cases where the supplier is not able to send it via integration.\nWhat it does CommissionX is a plugin that defines the contracted / expected commission in cases where the supplier is not able to send it via integration. These commissions are defined through the plugin so as not to lose the options in which we do not know the type of price sent, since this information is established at contract level between client-supplier. Different commissions can be applied according to the different rules depending on the format that we will described next. The commission that is loaded in the FTP is interpreted like a Gross commission, that is, the commission or profit is included in the price.\nHow to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nExecution example If you want to index by client tokens it is necessary to specify the client token as shown below, if the token is not specified, by default, the system will apply those rules that do not have client tokens.\n{ \u0026quot;criteriaSearch\u0026quot;: { \u0026quot;checkIn\u0026quot;: \u0026quot;2019-10-23\u0026quot;, \u0026quot;checkOut\u0026quot;: \u0026quot;2019-10-24\u0026quot;, \u0026quot;hotels\u0026quot;: [ \u0026quot;1\u0026quot; ], \u0026quot;occupancies\u0026quot;: [ { \u0026quot;paxes\u0026quot;: [ { \u0026quot;age\u0026quot;: 1 }, { \u0026quot;age\u0026quot;: 30 } ] } ], \u0026quot;language\u0026quot;: \u0026quot;en\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;GB\u0026quot;, \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;market\u0026quot;: \u0026quot;ES\u0026quot; }, \u0026quot;settings\u0026quot;: { \u0026quot;context\u0026quot;: null, \u0026quot;client\u0026quot;: \u0026quot;xtg\u0026quot;, \u0026quot;auditTransactions\u0026quot;: true, \u0026quot;testMode\u0026quot;: true, \u0026quot;clientTokens\u0026quot;: [ \u0026quot;testClientTokens\u0026quot; ], \u0026quot;plugins\u0026quot;: [] }, \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;includes\u0026quot;: [ \u0026quot;297\u0026quot; ], \u0026quot;excludes\u0026quot;: null } } }  Files needed to use this plugin  Sequential Commission file format (Mandatory). If the columns chainCodes,destinationCodes are informed then it is mandatory to upload group file.\n Group file format (Optional)\n This file will be necessary in case you want to apply rules depending on a grouping of codes that depend on a context. For this case, it is necessary that you pass with the entity.   Observations\nAlthough the group file is optional if this file is informed before the commission file the values will be used from the group file.\nWe read sequentially the commission file if the columns chainCodes,destinationCodes are informed then it is mandatory to upload group file to be able to read these values from the group file.\nCommission file (Mandatory)  Encoding: UTF-8 File Name: [Context Source]_sequential_commission.csv Headers:\n ruleId ‚Üí rule identifier clientTokens ‚Üí client token used for index the rule supplierCodes ‚Üí supplier code notSupplierCodes ‚Üí supplier code creationDateFrom ‚Üí start creation date Date format creationDateTo ‚Üí end creation date Date format checkInFrom ‚Üí checkin date Date format checkInTo ‚Üí checkout date Date format hotelCodes ‚Üí hotel code nothotelCodes ‚Üí hotel code chainsCodes ‚Üí chain code notChainCodes ‚Üí chain code destinationCodes ‚Üí destination code notDestinationCodes ‚Üí destination code percentage ‚Üí commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;) force ‚Üí (boolean value true/false)\n false value (if the value is false, the rule will not be applied despite of matching all its conditions criteria if a commission is received from the supplier through the integration). true value if the value is true, the rule will be applied if matching all its conditions criteria, regardless of a commission being received or not from the supplier through the integration). Example\n  commission received,forced,result from supplier no,no,rule applied (if matching all its criteria conditions) no,yes,rule applied (if matching all its criteria conditions) yes,no,rule NOT applied regardless of matching all its criteria conditions yes,yes,rule applied (if matching all its criteria conditions)   List of file fields      Field Mandatory Excluded fields* Multi-value     ruleId Yes - No   clientTokens No - No   supplierCodes Yes notSupplierCodes Yes   notSupplierCodes Yes supplierCodes Yes   creationDateFrom No - No   creationDateTo No - No   checkInFrom No - No   checkInTo No - No   hotelCodes No nothotelCodes Yes   nothotelCodes No hotelCodes Yes   chainsCodes No notChainCodes Yes   notChainCodes No chainsCodes Yes   DestinationCodes No notDestinationCodes Yes   notDestinationCodes No DestinationCodes Yes   percentage Yes - No   force Yes - No    *Excluded fields Informed fields will be ignored\n  Delimiter: Comma (‚Äú,‚Äù)\n Separator for multiples codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: XTG_sequential_commission.csv\nData without client tokens:\nSimple value field\nruleId,clientTokens,supplierCodes,notSupplierCodes,creationDateFrom,creationDateTo,checkInFrom,checkInTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,force CE1,testClientTokens,DIN,,,,2018-04-01,2018-10-31,3846,,,,,,18.50,false CE2,,DIN,,,,,,3846,,,,,,15.00,false  Multivalue field\nruleId,clientTokens,supplierCodes,notSupplierCodes,creationDateFrom,creationDateTo,checkInFrom,checkInTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,force CE1,testClientTokens,DIN;HOB;JMB,,,,2018-04-01,2018-10-31,3846,,,,,,18.50,false CE2,,DIN,,,,,,3846,,,,,,15.00,false  Group file (Optional)  Encoding: UTF-8¬† File Name: [Context Source]_[Entity]_group.csv Headers:  key ‚Üí Entity. hotelCodes ‚Üí hotel code chainCodes ‚Üí chain code destinationCodes ‚Üí destination code  Delimiter: Comma (‚Äú,‚Äù)¬† Directory: /F[folder code]\\Maps/HotelX\\Hotel/  Sample File Name: XTG_hotel_group.csv\nData:\nHotel entity example\nkey,chainCodes,destinationCodes 1,OHTEL,DNBFQ;BYWRS;BUJSY;BTENE;CGGSZ;CGUNN;COMERCIAL152 2,000-INDEP,3PR;BYQIW;GCNR;BUJSF;BTENB;CGGSZ;CGUNN;COMERCIAL76  Possible values entity filename    Entity chainCodes destinationCodes hotelCodes     hotel Yes Yes No   destination Yes No Yes    Date format Date format yyyy-mm-dd is mandatory\n "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/common-elements/",
	"title": "Common Elements",
	"tags": [],
	"description": "",
	"content": " This node will be in every request and response objects.\nThe request object contains the supplier\u0026rsquo;s configuration, urls and credentials.\nThe response object contains the status of the request and any possible errors as well as possible messages from the supplier (if previously requested).\nCommon Elements RQ Example \u0026lt;HotelBaseRQ\u0026gt; \u0026lt;echoToken\u0026gt;TEST\u0026lt;/echoToken\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;20000\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;agencyCode\u0026gt;XXXX\u0026lt;/agencyCode\u0026gt; \u0026lt;languageCode\u0026gt;es\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;true\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;optionsQuota\u0026gt;500\u0026lt;/optionsQuota\u0026gt; \u0026lt;ContinuationToken expectedRange = \u0026quot;6000\u0026quot;\u0026gt;\u0026lt;/ContinuationToken\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;USERXX\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;PWXX\u0026lt;/Password\u0026gt; \u0026lt;UrlAvail\u0026gt;www.supplier.com/avail\u0026lt;/UrlAvail\u0026gt; \u0026lt;UrlReservation\u0026gt;www.supplier.com/reservation\u0026lt;/UrlReservation\u0026gt; \u0026lt;UrlValuation\u0026gt;www.supplier.com/valuation\u0026lt;/UrlValuation\u0026gt; \u0026lt;UrlGeneric\u0026gt;www.supplier.com\u0026lt;/UrlGeneric\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;SegundoPW\u0026quot; value = \u0026quot;PWXML\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; ‚Ä¶ \u0026lt;/HotelBaseRQ\u0026gt;  Common Elements RQ Description    Element Number Type Description     HotelBaseRQ 1  Root node.   echoToken 0..1 String Echo token to be returned in response (used for test purposes only).   timeoutMilliseconds 1 Integer Maximum time for a response from the supplier\u0026rsquo;s system.   source / 1  Information about source requesting the operation.   source /agencyCode 0..1 String Agency code requesting the operation (deprecated).   source /languageCode 1 String Language code (ISO 3166-1 alpha-2) format lowercase.   filterAuditData / 1  Activates transaction data sent \u0026amp; received in the supplier\u0026rsquo;s native format.   filterAuditData /registerTransactions 1 Boolean Returns all the transactions (XMLs) exchanged with the supplier.   optionsQuota 0..1 Integer Sets the max number of options by MealPlan.   ContinuationToken 0..1 String Internal Token to identify the next set of HotelList or RoomList.   @expectedRange 0..1 Integer Number of hotels expected in HotelList call.   Configuration / 1  The info required to access the supplier\u0026rsquo;s system.   Configuration /User 0..1 String User code to connect to supplier.   Configuration /Password 0..1 String Password for the connection.   Configuration /UrlGeneric 0..1 String Supplier URL used for multiple methods.   Configuration /UrlAvail 0..1 String Specific Url for Availability method.   Configuration /UrlValuation 0..1 String Specific Url for Valuation method.   Configuration /UrlReservation 0..1 String Specific Url for Reservation method.   Configuration /Parameters / 0..1  Parameters for additional information.   Configuration /Parameters /Parameter 0..n  List of parameters.   @key 1 String Contains the keyword/Id to identify a parameter.   @value 1 String Contains the parameter values    Detailed description optionsQuota:\nThis new tag will be used only for those suppliers returning a very large number of options, about 20.000+ in the same response. In order to avoid this, the client can set the numbers of options wanted by MealPlan, as long as the supplier returns it in this call (see MetaData AllowsBusinessRules). If the supplier has ImplementsBusinessRules = True, the client can then choose between differentbusiness rules to filter the options they are interested in (see in Avail). We also have established a system level limit, so that if the OptionsQuota set by the client is higher than the established limit we then use the smallest of those two values.\nCommon Elements RS Example \u0026lt;HotelBaseRS\u0026gt; \u0026lt;echoToken\u0026gt;TEST\u0026lt;/echoToken\u0026gt; \u0026lt;OperationImplemented\u0026gt;true\u0026lt;/OperationImplemented\u0026gt; \u0026lt;ContinuationToken expectedRange = \u0026quot;4000\u0026quot;\u0026gt;\u0026amp;lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-16\u0026quot;?\u0026amp;gt;\u0026amp;lt;ContinuationToken\u0026amp;gt;\u0026amp;lt;ContinuationToken\u0026amp;gt;\u0026amp;lt;Version\u0026amp;gt;2.0\u0026amp;lt;/Version\u0026amp;gt;\u0026amp;lt;Type\u0026amp;gt;Table\u0026amp;lt;/Type\u0026amp;gt;\u0026amp;lt;NextPartitionKey\u0026amp;gt;1!24!bG93Y29zdGhvbGlkYXlfWk1U\u0026amp;lt;/NextPartitionKey\u0026amp;gt;\u0026amp;lt;NextRowKey\u0026amp;gt;1!40!bG93Y29zdGhvbGlkYXlfWk1UXzBoNFIlMjNvcXBr\u0026amp;lt;/NextRowKey\u0026amp;gt;\u0026amp;lt;TargetLocation\u0026amp;gt;Primary\u0026amp;lt;/TargetLocation\u0026amp;gt;\u0026amp;lt;/ContinuationToken\u0026amp;gt;\u0026amp;lt;/ContinuationToken\u0026amp;gt;\u0026lt;/ContinuationToken\u0026gt; \u0026lt;applicationErrors\u0026gt; \u0026lt;type\u0026gt;102\u0026lt;/type\u0026gt; \u0026lt;code\u0026gt;xxx\u0026lt;/code\u0026gt; \u0026lt;description\u0026gt;xxx\u0026lt;/description\u0026gt; \u0026lt;/applicationErrors\u0026gt; ‚Ä¶ \u0026lt;auditData\u0026gt; \u0026lt;transactions\u0026gt; \u0026lt;timeStamp\u0026gt;2011-10-6T15:19:45.3544495+02:00\u0026lt;/timeStamp\u0026gt; \u0026lt;RQ/\u0026gt; \u0026lt;RS/\u0026gt; \u0026lt;/transactions\u0026gt; ‚Ä¶ \u0026lt;timeStamp\u0026gt;2011-10-26T15:19:43.4014745+02:00\u0026lt;/timeStamp\u0026gt; \u0026lt;processTimeMilliseconds\u0026gt;19532\u0026lt;/processTimeMilliseconds\u0026gt; \u0026lt;/auditData\u0026gt; ‚Ä¶ \u0026lt;/HotelBaseRS\u0026gt;  Common Elements RS Description    Element Number Type Description     HotelBaseRS 1  Root node.   echoToken 0..1 String Echo token to be returned in response (used for test purposes only).   OperationImplemented 1 Boolean Informs whether the method has been implemented by the supplier.   ContinuationToken 0..1 String Internal Token to identify the next set of HotelList or the next set of RoomList.   @expectedRange 0..1 Integer Number of hotels/rooms expected in HotelList/RoomList call.   applicationErrors / 0..n  Application errors reported by supplier.   applicationErrors /type 1 String Error Type as specified by XML Travelgate.   applicationErrors /code 1 String Native error code reported by supplier.   applicationErrors /description 1 String Error description.   auditData / 1  Data sent \u0026amp; received in the supplier\u0026rsquo;s native format.   auditData /transactions / 0..n  List of transactions data.   auditData /transactions /timeStamp 1 Integer TimeStamp of each transaction.   auditData /transactions /RQ 1 String Transaction Request.   auditData /transactions /RS 1 String Transaction Response.   auditData /timeStamp 1 Integer Time when the request has been processed.   auditData /processTimeMilliseconds 1 Integer Process time in milliseconds    Detailed description ContinuationToken:\nThis new tag is useful to split the hotel list or room list response. This is done because there are suppliers with a large amount of hotels (over 200.000) or rooms (over 200.000). In those cases, the response has to be split in order to retrieve all the hotels/rooms available. In case that ContinuationToken is not sent, the HotelList and RoomList return a maximum of 200.000 hotels/rooms. Using this ContinuationToken and the attribute expectedRange the client may decide the number of hotels/rooms expected in each HotelList/RoomList call. If the supplier has more than 200.000 hotels/rooms, in order to get 100% of the hotels/rooms available, the client will need to use the ContinuationToken returned inside the HotelListRS/RoomListRS response until the ContinuationToken field is no longer returned in the response (see the example in Common Elements RS). Once the tag is not returned the hotel list or the room list are complete. The value of this tag is an internal Token identifying the next set of HotelList/RoomList to be returned.\nexpectedRange :\nSpecifies the hotel list range set by the client in each HotelList response. The number of hotels returned is set in the expectedRange value, although it is possible to get more hotels than requested. This means that if the client requests 1000 hotels, the response may contain a range between 1000 to 1999 hotels. In the case this value is not set, the maximum hotel range is 200.000. We strongly recommend using multiples of one thousand.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/common-elements/",
	"title": "Common Elements",
	"tags": [],
	"description": "",
	"content": " This node will be in every request and response objects.\nThe request object contains the supplier\u0026rsquo;s configuration, urls and credentials.\nThe response object contains the status of the request and any possible errors as well as possible messages from the supplier (if previously requested).\nCommon Elements RQ Example \u0026lt;HotelBaseRQ\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;20000\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;agencyCode\u0026gt;XXXX\u0026lt;/agencyCode\u0026gt; \u0026lt;languageCode\u0026gt;es\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;true\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;UrlGeneric\u0026gt;www.supplier.com\u0026lt;/UrlGeneric\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;SegundoPW\u0026quot; value = \u0026quot;PWXML\u0026quot;/\u0026gt; \u0026lt;Parameter key = \u0026quot;User\u0026quot; value = \u0026quot;userXML\u0026quot;/\u0026gt; \u0026lt;Parameter key = \u0026quot;Password\u0026quot; value = \u0026quot;passwordXML\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; ‚Ä¶ \u0026lt;/HotelBaseRQ\u0026gt;  Important Cardinal Number:\nIndicates the number or quantity of elements of a set, whether this quantity is finite. And at the same time, whether or not it is mandatory.\n  1 = Mandatory (One) 1..n = Mandatory (One-to-Many) 0 = Optional (Zero) 0..n = Optional (Zero-to-Many)    Common Elements RQ Description    Element Number Type Description     HotelBaseRQ 1  Root node.   timeoutMilliseconds 1 Integer Maximum time for a response from the supplier\u0026rsquo;s system.   source/ 1  Information about source requesting the operation.   source/ agencyCode 0..1 String Agency code requesting the operation (deprecated).   source/ languageCode 1 String Language code (ISO 3166-1 alpha-2) format lowercase.   filterAuditData/ 1  Activates transaction data sent \u0026amp; received in the supplier\u0026rsquo;s native format.   filterAuditData/ registerTransactions 1 Boolean Returns all the transactions (XMLs) exchanged with the supplier.   Configuration/ 1  The info required to access the supplier\u0026rsquo;s system.   Configuration/ UrlGeneric 0..1 String This URL is used when the supplier has a generic endpoint for all shopping operations (Search, Quote, Book..). We advise that this URL not be used for static content, instead, check if a parameter contains an endpoint for static content.   Configuration/ Parameters/ 0..1  Parameters for additional information.   Configuration/ Parameters/ Parameter 0..n  List of parameters.   @key 1 String Contains the keyword/Id to identify a parameter.   @value 1 String Contains the parameter values.    Common Elements RS Example \u0026lt;HotelBaseRS\u0026gt; \u0026lt;operationImplemented\u0026gt;true\u0026lt;/operationImplemented\u0026gt; \u0026lt;applicationErrors\u0026gt; \u0026lt;type\u0026gt;102\u0026lt;/type\u0026gt; \u0026lt;code\u0026gt;xxx\u0026lt;/code\u0026gt; \u0026lt;description\u0026gt;xxx\u0026lt;/description\u0026gt; \u0026lt;/applicationErrors\u0026gt; ‚Ä¶ \u0026lt;auditData\u0026gt; \u0026lt;transactions\u0026gt; \u0026lt;timeStamp\u0026gt;2011-10-6T15:19:45.3544495+02:00\u0026lt;/timeStamp\u0026gt; \u0026lt;RQ/\u0026gt; \u0026lt;RS/\u0026gt; \u0026lt;/transactions\u0026gt; ‚Ä¶ \u0026lt;timeStamp\u0026gt;2011-10-26T15:19:43.4014745+02:00\u0026lt;/timeStamp\u0026gt; \u0026lt;processTimeMilliseconds\u0026gt;19532\u0026lt;/processTimeMilliseconds\u0026gt; \u0026lt;/auditData\u0026gt; ‚Ä¶ \u0026lt;/HotelBaseRS\u0026gt;  Common Elements RS Description    Element Number Type Description     HotelBaseRS 1  Root node.   operationImplemented 1 Boolean Informs whether the method has been implemented by the supplier.   applicationErrors/ 0..n  Application errors reported by supplier.   applicationErrors/ type 1 String Error Type as specified by XML Travelgate.   applicationErrors/ code 1 String Native error code reported by supplier.   applicationErrors/ description 1 String Error description.   auditData/ 1  Data sent \u0026amp; received in the supplier\u0026rsquo;s native format.   auditData/ transactions/ 0..n  List of transactions data.   auditData/ transactions/ timeStamp 1 Integer TimeStamp of each transaction.   auditData/ transactions/ RQ 1 String Transaction Request.   auditData/ transactions/ RS 1 String Transaction Response.   auditData/ timeStamp 1 Integer Time when the request has been processed.   auditData/ processTimeMilliseconds 1 Integer Process time in milliseconds    "
},
{
	"uri": "https://travelgatex.com/getting-started/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Basic concepts for all of the TravelgateX platform",
	"content": " The TravelgateX platform and APIs all use a consistent set of basic concepts so that whatever API you use on our platform, you can be confident that it will work with the same definitions as all of the others you are familiar with.\nHere is an overview of the key concepts of our platform.\nAccess An Access is a set of credentials and the authentication configuration that enables a Buyer to access a Supplier. To gain access, a Buyer needs to confirm with TravelgateX that they have an agreement in place with each Supplier with whom they want to integrate.\nAPI Gateway Our API gateway is stable, secure, fault tolerant and load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime. We provide realtime details of our uptime and status on our Status page and work at maintaining a minimum 99.99% service performance level.\nOur API gateway provides a single GraphQL endpoint which can be used to make queries against all of our APIs and travel services. This makes it easier for your clients (websites, applications and any other interface) to only call for the exact data that is needed, without parsing a heap of extra information in each API call. (Check out our GraphQL resources to learn more!)\nProfile An Organization uses profiles to determine what type of interaction is required on TravelgateX. At present, profiles are either a Buyer or a Seller.\nBuyer A Buyer Profile uses the TravelgateX platform to book travel services such as hotels for their customers. Buyers include online travel agents, tour operators, niche travel service providers, and travel and pricing apps.\nSeller A Seller Profile uses the TravelgateX platform to sell travel services such as hotels for their customers. Sellers include tour operators, niche travel service providers..\nOrganization An Organization is made up of Partners, Resources, Settings, Permissions and other Metadata.\nPartner A Partner interacts with the TravelgateX API platform. A partners can be a User (that is, a person) or a Service Account (that is, an application). A partner is a member of an Organization, and can be a member of mutiple organizations.\nSupplier A Supplier uses the TravelgateX platfrom to make travel services available to buyers. Suppliers can be suppliers with realtime databases of hotel room vacancies, tours, car rental providers, adventure and activity service suppliers, travel insurance providers or other travel industry service suppliers.\nContext A Context refers to the Supplier codes the request is using. It\u0026rsquo;s a way of specifiying which Supplier codes are being used so they can be transformed and standardized.\nCommon Resources Common resources define common objects that are consistent across all of our API products.\nHUB HUB is the command center of the TravelgateX platform. All connections pass through the HUB.\nProduct A Product is a TravelgateX platform API which is available for the consumption of Resources. We organize our APIs by similarity and common features. Our HotelX API is our first product now available for use in production environments.\nJoin us on Slack to talk with us about how to use TravelgateX APIs in your websites, apps, and products. You can also contact us via our Help Center.\nIf you would like any new features or more information in our documentation, head to TGX Community\n "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/",
	"title": "Connection Types - Buyers",
	"tags": [],
	"description": "Connection Types - Buyers",
	"content": "  Hotel-X Buyers API Hotel-X: NextGen Hotel Search API\n    Channel-X Receive product from your connected Channel Managers\n     Hotel Buyers API (legacy) Read documentation on Hotel Buyers API (legacy)\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/how-to-guides/connectivity/",
	"title": "Connectivity",
	"tags": [],
	"description": "",
	"content": " For connectivities we will use a POST request to the suppliers system.\nThe headers we will use to send the POST request are:\n   Key Value     Content-Type text/xml; charset=utf-8   Accept application/xml   Accept-Encoding gzip   Connection Keep-Alive    The different methods from our API can be sent to 1 unique endpoint or to different enpoints. These endpoints will be set in the configuration TravelgateX receives from the buyer in each request. Endpoints have to be https for Reservation, Cancel, ReservationRead and ReservationList, for other request they can be http or https.\nCorrelation endpoints In this table you can find relation between TravelgateX\u0026rsquo;s API method and the enpoint we will get from the configuration received to send this request:\n   API Method Configuration Parameter Used     All requests UrlGeneric    We expect to receive always a 200 http status. If there is an error in the response it should be notified in the ApplicationError tag.\n"
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/tools/copy-tool/",
	"title": "Copy Tool",
	"tags": [],
	"description": "Copy configurations to make the SetUp process easier and faster",
	"content": " If you to do a lot of configurations in the SetUp process, this might become boring, so in order to make the SetUp easier and faster you will be able to user the Copy Tool in the Inventory tab of the extranet.\n\nFirst step will be to indicate the desired Client-Provider connection. You will see on the Values to copy field that it is possible to choose among different actions to carry:\nSet Up This option will copy the complete SetUp from one or more hotels to a different provider connection. This can be useful if you have the same hotel configurated in different Channel Managers and you want to use the same configurarion (Rates and rooms).\nTo copy the SetUp you will only need to indicate the provider to add the new hotels in the Target Provider field. Then, you will be able to mark with the check fields the hotels you want to copy and click on the Copy button.\n\nRate in same hotel This option is used to copy rates within the same hotel. You\u0026rsquo;ll need to indicate the hotel ID or name and check the rate to be copied. Once selected the rate you should click on the Copy button and you will be asked to introduce a new rate code (remember that this code must be unique per hotel), a new name and a new meal plan.\nOnce the new values are set, click the SEND button to save the changes or the CANCEL button if you want to reject them.\n\nRate Information This option allows you to copy rate information from one hotel to a different one or within the same hotel as the original. As an example, this tool can be used in case you want to substitute the cancellation policies of a rate with those of a preexisting rate.\nFirst you need to indicate the hotel ID or name and the source rate. After that, all its information fields will shown so you will be able to select which information you want to copy. By last, select the hotel and rate destination and click on the Copy button.\n\nPrice \u0026amp; Allotments This option allows you to copy the prices or the allotment that have been loaded for a certain room to other rooms in other hotels. Those two options will also include the copy of the supplements, conditions or restrictions that may be loaded.\nYou can copy a specific range of dates or all the dates for which the product has been loaded. By default, the information will be copied for all dates, unless a date range is specified. You can also copy both allotment and prices at the same time or just one of the two. This method allows you to copy multiple destination rooms from multiple rates and multiple hotels.\n\nIn case of copying prices, it is important to check that the destination rooms are configured with the same occupancies as the selected room. This tool does not take responsibility for differences in occupancy prices that could appear if this rule is not followed. Derived Rates This option allows you to copy derived rates from a source hotel to a destination hotel. Notice that the source hotel can be the same as the destination hotel. In addition, it is also possible to copy more than one derived rate from more than one source base rate to several destination rates in different destination hotels.\n\nWhen you click the Copy button, a pop up window will appear where you will be able to select the rooms that you want to apply this derived rate to. You would have to select at least one room.\n\nIn case you want to copy the derived rate to a rate without rooms, the following pop-up window will appear:\n\nIn this case, you will have to select All rooms,in order to indicate that the derived rate will be applied to all rooms that will be added to this rate in the future. If you don\u0026rsquo;t want the derived rate to be applied to all future rates, you will first have to add the rooms you want the derived rate to apply to, then select them when copying the derived rate.\nIt should be pointed out that derived rates can have the same meal plan as the base rate or they can have their own. If it copies the same meal plan as the base rate, when you copy the derived rate, it will assume the meal plan of the new base rate it has been copied to. If the derived rate has its own meal plan, the new derived rate will retain it. If you want to change the meal plan of a derived rate it can be done in the SetUp section.\n ## Rates \u0026amp; Rooms\nThis option allows you to copy rates and rooms from one hotel to another one. To use it, you have to select the source hotel and the rates and rooms you want to copy from the From tab and then select the hotels to which you want to copy the information to.\n\nRooms This option allows you to copy the selected rooms from one rate to another within the same hotel. You have to indicate the hotel ID or name and then the rate and rooms you want to copy. By last, select the rate destination and click the Copy button.\n\nOffers This option allows you to copy offers from a source hotel to a destination hotel. Notice that the source hotel can be the same as the destination hotel. In addition, it is also possible to copy one offer to several destination rates in different destination hotels.\n\n "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/currencylist/",
	"title": "CurrencyList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns a list of currencies the supplier supports in Avail.\nRequest Format The request does not require any elements. Empty request.\nResponse Format The result returns a list of currencies.\nCurrencyListRQ Example \u0026lt;CurrencyListRQ\u0026gt; \u0026lt;/CurrencyListRQ\u0026gt;  CurrencyListRQ Description    Element Number Type Description     CurrencyListRQ 1  Root node.    CurrencyListRS Example \u0026lt;CurrencyListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Currencies\u0026gt; \u0026lt;Currency\u0026gt; \u0026lt;Code\u0026gt;EUR\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Euro\u0026lt;/Name\u0026gt; \u0026lt;/Currency\u0026gt; \u0026lt;Currency\u0026gt; \u0026lt;Code\u0026gt;USD\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Dollar\u0026lt;/Name\u0026gt; \u0026lt;/Currency\u0026gt; \u0026lt;/Currencies\u0026gt; \u0026lt;/CurrencyListRS\u0026gt;  CurrencyListRS Description    Element Number Type Description     CurrencyListRS 1  Root node.   UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   Currencies 1  Contains a list of currencies.   Currency 0..n  Contains details of the currency.   @code 1 String ISO - 3 Code.   @Name 1 String Name of the currency.    "
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/dataset-tooling/",
	"title": "Data Reporting Tool",
	"tags": [],
	"description": "Tool for datasets visualization",
	"content": "If you don\u0026rsquo;t have your own reporting tools as Tableau or PowerBI, the easiest way to interact with Insights datasets is via our free Google Data Studio Templates.\n   Dataset information Version GDS Template     Seller: Performance, Insights and Benchmark (Performance and Insights level) 2.0 https://datastudio.google.com/s/rhHCR2SAoRQ   Buyer: Performance, Insights and Benchmark (Performance and Insights level) 2.0 https://datastudio.google.com/s/hW8TCMldzhU    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/data-structure/",
	"title": "Data Structure",
	"tags": [],
	"description": "",
	"content": "The structure of the API specification follows a standard. This document intends to explain every aspect of this structure and their fields.\nThe integration will have the following methods:\n   Booking Flow Method Input Output Required Description     Avail AvailRQ AvailRS Yes Makes an availability request to check which rooms are available for the requested hotels or for the hotels in the requested destination for a given range of dates and for a given pax distribution.   Valuation ValuationRQ ValuationRS Yes Makes a quote of an option selected from availability response: updates price and shows cancellation policies.   Reservation ReservationRQ ReservationRS Yes Makes a booking.   Cancel CancelRQ CancelRS No Cancels a booking.   ReservationRead ReservationReadRQ ReservationReadRS No Retrieves booking details.   ReservationList ReservationListRQ ReservationListRS No Retrieves a list of bookings.    \n   Static Content Method Input Output Required Description     Configuration ConfigurationRQ ConfigurationRS Yes Retrieves the supplier‚Äôs configuration in order to build the activation form in our platform   Geographic DestinationTree Geographic DestinationTreeRQ Geographic DestinationTreeRS Yes Returns a tree of supplier\u0026rsquo;s destinations.   HotelList HotelListRQ HotelListRS Yes Returns a list of available hotels.   Descriptive Info Descriptive InfoRQ Descriptive InfoRS No Retrieves information for current hotel such as photos, descriptions, amenities,etc as well as basic info (code,name, town, address, contact).   RoomList RoomListRQ RoomListRS No Returns available room types.   MealPlanList MealPlanListRQ MealPlanListRS No Returns a list of available boards.   CategoryList CategoryListRQ CategoryListRS No Returns a list of available categories.   CurrencyList CurrencyListRQ CurrencyListRS No Returns a list of available currencies.   MarketList MarketListRQ MarketListRS No Returns a list of available markets.   MetaData MetaDataRQ MetaDataRS Yes Retrieves the supplier‚Äôs static configuration.    The data structure will always have common elements in all objects as well as specific objects related to the operation\nYou can find full specification of each method at the Hotel API Methods page.\n"
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/api-methods/code-list/data-type/",
	"title": "Data Types",
	"tags": [],
	"description": "Data Types format in Reservation API",
	"content": " Data Types Formats to be used with each data type are presented in the following table:\n   Data Type Format     decimal Value has to be set using \u0026lsquo;.\u0026rsquo; as separator.   boolean Value has to be set using false/true.   date Value is a date passed as string and has to be set with the format \u0026ldquo;yyyy-MM-dd\u0026rdquo; (no hour/minutes/seconds information will be used with it).   dateTime Value is a date passed as string and has to be set with the format \u0026ldquo;yyyy-MM-dd HH:mm:ss\u0026rdquo; or \u0026ldquo;yyyy-MM-dd\u0026rdquo; (in the second case it is completed with \u0026ldquo;00:00:00\u0026rdquo; if it is a \u0026lsquo;from\u0026rsquo; date and with \u0026ldquo;23:59:59\u0026rdquo; if it is a \u0026lsquo;to\u0026rsquo; date).    "
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/",
	"title": "Datasets and reporting",
	"tags": [],
	"description": "Understand Insights datasets",
	"content": "   Datasets formats Learn about what datasets types can you use\n     Datasets content Insights Datasets content\n     Data Reporting Tool Tool for datasets visualization\n    "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/",
	"title": "Extranet",
	"tags": [],
	"description": "Learn how to use the extranet and load your pricing rules",
	"content": "   Overview Extranet rules Overview\n     Agencies Learn to manage the basic entities of Distribution-X\n     Rules management Manage princing rules, filters and blacklists\n     Booking Panel Panel that allows you to check your reservations and their details\n     Tools Tools that will help you manage your Distribution-loaded data\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/channel-x/faq/",
	"title": "FAQ",
	"tags": [],
	"description": "Frequently asked questions",
	"content": " Generic What is the timezone displayed in the messages?\nTime zone is always UTC.\nHotelRatePlanInventoryNotif, HotelRatePlanNotif and HotelAVailNotif all include another message called \u0026ldquo;Derived\u0026rdquo;. What is a Derived rate and what is its purpose?\nA derived rate is a rate that has derived from its base rate, but you can change its condition so that you can present it as a discounted rate or some sort of offer. In the derived rate message you will also see a RateBasePlanCode. This is used to show the code of the parent rate of the Derived Rate.\nWhat is LocationCodesInclusive used for?\nIf set as true, this means that you are able to sell the hotel only for specific markets based on the value of \u0026ldquo;CountryCode\u0026rdquo;. If set as false, you will not be able ot sell the hotel for the markets indicated in the \u0026ldquo;CountryCode\u0026rdquo;.\nThere are currency codes displayed on both HotelRatePlanInventoryNotif and HotelRatePlanNotif. Is it possible for the currency to be different between these two messages?\nThe channel will receive an error if they try to introduce different currencies in these fields. It is not allowed to have different values for the currency in these fields.\nCould the system send overlapped dates between \u0026ldquo;End\u0026rdquo; in one load and \u0026ldquo;Start\u0026rdquo; in a new? (Ex. 1st load is for Start = 1 Aug | End = 31 Aug and 2nd load is for Start 31 Aug | End 30 Sept).\nYes, it is possible, but it is not common. When this happens, the last product loaded will be the one to be applied. In case they were loaded in the same request, the order goes from top to bottom, and the lowest line containing the overlapping date will be the one that is applied.\nSuppose one ARI sent by Travelgate contained multiple rate plans and then a few of them may not be in the right format (i.e. rate plan name missing, etc.). What happens in this case?\nIf there is an error at the time the product is pushed into your system, you need to return an error. You have to process the whole request correctly. As for the error description, it is up to you.\nFullCopy What is FullCopy for?\nIt is a tool that allows to make a Full Product copy of the selected hotels inside InventoryX system.\nHow do I know whether it is a Delta or a *Full Copy* - If you get an HotelRatePlanInventoryNotif call with an element\n\u0026lt;TPA_Extensions xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Attribute key = \u0026quot;HotelNotifType\u0026quot; value = \u0026quot;FullCopy\u0026quot;/\u0026gt; \u0026lt;/TPA_Extensions\u0026gt;   Full Copy will send a lot more information than a simple Delta  What happens if a rate is deleted, does Travelgate inform us of this in the Full Copy?\nNot in Full Copy. When a Full Copy is run after a rate has been deleted, you will only receive the information that is currently loaded in the system. You will be notified of a rate being removed by a Delta instead of a Full Copy after its removal.\nInventory For HotelRatePlanInventoryNotif, what does the \u0026lsquo;RatePlanNotifType\u0026rsquo; (New, Delta and Remove) stand for?\nRates can be created/deleted/modified. The status New means that it\u0026rsquo;s a rate that has been created (a new rate), the status Delta is for a rate that has been modified and the status Removed is for a deleted rate.\nIn HotelRatePlanInventoryNotif, what does CancelPenalty Start and End dates represent?\nStart and End dates in this instance show the range of dates in which these cancellation policies are going to be applied. The start and end days are included in the cancellation policy range.\nWhat does the \u0026ldquo;RatePlan Duration\u0026rdquo; atrribute in HotelRatePlanInventoryNotif mean?\nDuration is no longer being used and will be removed from the documentation.\nFrom the HotelRatePlanInventoryNotif, can you set \u0026lt;RatePlanStatusType = Deactivated\u0026gt; for specific periods? It also contains a start and end for rate plan attribute as well.\nThis is used to deactivate a rate. The deactivation can either be for an indefinite amount of time, of a specific time frame, and the date range (start and end) indicates this range.\nIf your RatePlanInventory ARI provided \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;??\u0026quot;/\u0026gt;, then the Supplement attribute will be present, is this correct? And, is it possible for it to show up when Mealplancode is \u0026lsquo;Room Only\u0026rsquo;?\nThe RatePlanInventory informs of what the base MealPlan for this rate is (Room only, Bed and Breakfast, All Inclusive, etc). A base rate cannot have more than one MealPlan. The Supplement is not indicated here, it is indicated in the RatePlanNotif. The MealPlanCode displayed in MealsIncluded is the push system code for the meal plans which can be found in the code list in the static infomration.\nAvail What does \u0026ldquo;LengthsOfStay ArrivalDateBased\u0026rdquo; mean? What\u0026rsquo;s different between the true and false values?\nIf this is set as true, the type of Min/Max LOS is on arrival for that specific day. For this type, the values for Min/Max LOS on arrival, only apply if it is applied to the check-in day. If this is set as false, it\u0026rsquo;s a normal Min/Max LOS.\nDoes TravelgateX have a default maxmimum nights restriction (Ex. max 30 days) if your HotelAvailNotif does not provide max LOS information for that rate?\nTravelgateX does not have any restriction on default maximum nights.\nWhat does Master/ArrivalClose/DepartureClose mean?\nThe Closed On Arrival means that the check-in day cannot be the same day as the one that has Closed On Arrival applied to it, but this day can be inside the Availability search range. The Closed On Departure means that the check-out day cannot be the same day as the one that has Closed On Departure applied, but this day can be in the Availability search range. Closed Master means that the hotel is closed that day. The Closed Master means that in the indicated dates, none of the days can be a check-in day, check-out day or a day inside the range of the search.\nPrices For the standard occupancy calculation, should the data from \u0026lt;Quantities StandardNumBeds\u0026gt; or \u0026lt;BaseByGuestAmt NumberOfGuests\u0026gt; be consumed?\nThe first part indicates the StandardOccupancy number (value). The second indicates the format in which prices are returned when they are loaded by price.\nBoth tax \u0026lsquo;ChargeFrequency\u0026rsquo; and \u0026lsquo;ChargeUnit\u0026rsquo; are optional bits of information. So, what happens if they are not returned in a push message we send you? Do you need to re-calculate the price from HotelRatePlanNotif (if have tax elements are returned), or are you able to assume AmountAfterTax is the final price?\nIf these elements are not returned, then a fixed amount will be returned as a tax if you have set it up in the SetUp part of the extranet and depending on the type of tax you have set up. You always have to calculate the price that is returned in this tag with the tax.\nExample - suppose you set up an additional tax (i.e. per pax and per night), should we add up or subtract it from AmountAfterTax attribute?\nThe AmountAfterTax attribute inside the RatePlanNotify does not include the taxes you will set up (it might include any taxes the channel has loaded on their end if they have done so). The AmountAfterTax at the time of booking (the Reservation RS logs) will include the taxes indicated by you.\nReferring to the RatePlan message, there are \u0026lt;Supplement\u0026gt;. Understanding price is for meal basis, should you require calculation to add with \u0026lt;AmountAfterTax\u0026gt;, the purpose of this is an extra cost for supplement in case there are \u0026lt;AdditionalGuest\u0026gt; applied.\nThe Supplement tag is for MealPlans, not for additional paxes. The price indicated in there, shows the price of the supplement.\nWhat happens if more than one price type is loaded for the same day/range of days and for the same room/rooms?\nAll price types can be loaded at the same time (or at different times without overwriting). This isn\u0026rsquo;t usually the case and almost never is there more than 1 price type loaded at a time. If all price types are loaded at the same time, or only two are loaded at the same time, at the time of the Availability search the price that is returned is the cheapest one.\n "
},
{
	"uri": "https://travelgatex.com/applications/insights/faqs/",
	"title": "FAQs",
	"tags": [],
	"description": "Insights FAQs",
	"content": " In order to analyze and access useful insights, we recommend you to read Insights FAQs.\nData sets and Reporting:  How do I get access to my data sets?  Insights data sets are stored in BigQuery. Once Insights is acquired, we will provide you with the credentials to access and connect to the database with your data sets.\n How often are the data sets updated?  Insights stores data from all transactions passing through TravelgateX. Everyday, data from the previous day is uploaded automatically to data sets. There is a delay of 24 hours due to data ingest and data cleansing.\nHotel Rates dataset is update weekly.\n Can I create my own BI dashboard with my business data from TravelgateX?  Once you have access to the data sets, it is possible to create customizable BI dashboards for all business areas. Insights datasets are compatible with different BI tools, such as Data Studio, Micro Strategy, Power BI, Tableau, etc.\n How can I use the Data Studio template as report tool for my business?  Insights makes available a Data Studio template for clients and providers connected in TravelgateX. By using this template, it is possible to monitor KPis of each connectivity, analyse bookings and know your competitiveness on TravelgateX platform. Once data set is connected to Data Studio, it is possible to modify the template according to your preferences and analysis.\n What is the level of detail provided by Insights?  Performance, Insights and Benchmark datasets allow clients and suppliers analyse data from transactions at a client / provider and city levels. Hotel Rates Benchmark dataset provides information at hotel level.\n What is the time based aggregation?  Insights data is aggregated on a daily, weekly or monthly basis.\n Can I compare two time ranges in one report?  Yes. Insights has up to three years historical data. So it is possible to compare data to previous periods.\nPerformance Data Sets:  If I do ‚Äúmulti search‚Äù for search request, how are these searches captured in Insights?  In Performance datasets, search requests counts multisearch as one unique search. However, in Insights datasets, the request goes till hotel level, it would be equivalent to N hotel searches for each multi-search.\n How is ‚Äú%Searches Ok‚Äù calculated?  In Performance datasets, the percentage of searches ok is calculated over the total amount of search requests, no matter the amount of searched hotels. However, in Insights datasets, that metric is calculated over the total of one specific hotel.\n Are searches made for price comparison included in ‚ÄúSearches‚Äù?  Yes. All searches are included, even those made to compare rates or create rate calendars.\n How has ‚ÄúResponse Time‚Äù been calculated on searches ,quotes, bookings and cancellations?  Response Time (RP) is the total time aggregated. Example: client RP + TGX RP-supplier RP + TGX RP+ client RP\n What do errors on searches, quotes and bookings mean and how could I solve each type?\n ‚ÄúNo results‚Äù: it is a common error and refers to ‚Äúnon availability‚Äù for one search (hotel, distribution, check in, nights, etc).\n ‚ÄúCommunication‚Äù: time out due to problems to connect with providers.\n ‚ÄúSeller‚Äù: error returned by the supplier that could not be tagged.\n ‚ÄúBad Request‚Äù: means bad requests: the supplier does not accept the distribution, dates or the requests.\n ‚ÄúIntegration‚Äù: Unexpected error on TravelgateX‚Äô side.\n   Insights Data Sets:  Revenue is always in Euros currency; how is the exchange calculated?  Everyday Insights check the exchange rate and convert all currencies to Euros.\n Can I have data from requests at a destination level?  Although some providers allow searches by destination (non standard destinations), at this moment TravelgateX only captures hotel requests.\n What does ‚Äúsource market‚Äù refer to?  Source Market refers to the value sent by client via API on ‚Äúmarket‚Äù field. In case the field ‚Äúmarket‚Äù is empty, Insights will take the field ‚Äúnationality‚Äù. Source market is based on the standard ISO 31661-2 apha-2.\n How is ‚ÄúAmount Cancelled‚Äù calculated ?  ‚ÄúAmount Cancelled‚Äù is the total amount of cancelled revenue from the cancelled bookings in a period of time.\n Some fields like ‚Äúorigin market‚Äù or ‚Äúdestination‚Äù do not return real values, just ‚Äú-‚Äù or ‚Äúnull‚Äù. Why is this happening?  When clients or providers do not send the value on the field, Insights captures the register as ‚Äúnull‚Äù. We recommend investigate the case and find out the provider / client that is not sharing the right value.\n What is ‚ÄúCancel Window‚Äù?  Cancel window is the average time (days) between the booking date and the date the booking was canceled.\n In case of cancelled bookings, would the revenue from bookings be updated?  Yes. Revenue from bookings and cancelled revenue will be updated every day once cancelled bookings data has been checked.\n Hotels Portfolio, is this the number of unique hotels?  Hotels displayed in Portfolio report are unique at a provider level.\n How is a ‚Äúmultisearch‚Äù for search request captured in Insights?  In Insights datasets, the request goes till hotel level, it would be equivalent to N hotel searches for each multi-search. However, at search request level, Performance datasets count multisearch as one unique search.\n How can I optimize requests and hotels portfolio to reduce costs and improve performance?  Thanks to Portfolio dataset you will be able to monitor hotels portfolio for each client / provider. It is possible to analyse at a hotel level, the total requests, errors, performance ratios from search to book, number of bookings, cancelations, etc.\n How to understand hotel ‚Äústatus‚Äù on portfolio page?\n \u0026ldquo;Hotels not in portfolio queried\u0026rdquo;: requested hotels not available in provider‚Äôs portfolio. Those requests might happen due to mapping errors or non updated inventory.\n \u0026ldquo;Hotels not queried\u0026rdquo;: hotels in provider‚Äôs portfolio not being requested. One of the reasons might be that mapping is not updated or the client does not operate in that destination.\n \u0026ldquo;Hotels in portfolio queried\u0026rdquo;: hotels in provider‚Äôs portfolio being requested.\n \u0026ldquo;Hotels not dadded\u0026rdquo;: hotels requested but not added in provider‚Äôs portfolio. If you are on the client side, we recommend you to check with your providers that hotels have been updated on TravelgateX platform.\n  ‚ÄúTotal Hotels Available‚Äù, how is this metric calculated?\n  Report Page ‚ÄúSummary‚Äù of DS-Insights template, displays the number of ‚ÄúTotal Hotels Available‚Äù. This metric refers to the total of hotels that have received at least one search during the previous month.\nBenchmark Data Sets:  What is compared in benchmarking?  Benchmarking is a competitive analysis of main indicators in TravelgateX: performance, availability (available hotels, both offered and received), revenue from bookings and number of bookings. Clients / providers will see their position in TravelgateX rank up to ‚Äúcity‚Äù level against other clients / providers in TravelgateX.\n What is ‚ÄúComp. Set‚Äù?  Comp. Set (Competitive Set) is a group of suppliers / buyers that are seen as direct competitors to your own business and are selling / buying through TravelgateX. All data is anonymous; Insights keeps Connected Partners‚Äô privacy and any company name will never be shared.\n What is TravelgateX ranking?  TravelgateX ranking shows, for the same search criteria, the achieved position by one client / provider in TravelgateX. For example, as a provider, you will be able to see your position in the ranking selling to one specific destination.\n What does ‚ÄúTotal TGX‚Äù metric on benchmarking mean?  Total TGX (TravelgateX) shows you the number of total hotels, bookings or revenue in TravelgateX for the same search key. This metric is a reference to understand how well that destination is performing (up to city level) on TravelgateX Platform. Clients and providers will be able to know if there are opportunities to improve on those destinations and how many competitors are making more revenue and bookings.\n Can I know how many competitors are selling / buying in my destinations?  Yes. Thanks to Benchmark data sets it is possible to know the number of competitors on your destinations. Besides, you will be able to know the volume of bookings and estimate your growth potential for that destination.\n Is my price strategy competitive?  Thanks to Benchmark datasets you will be able to compare your price strategy for the search key ‚Äúsource market | destination | booking window‚Äù against other buyers / suppliers in TravelgateX.\n Is my L2B (Look-to-Book) being competitive in TravelgateX?  Benchmark datasets allows L2B comparison for the search key ‚Äúsource market | destination (city) | booking window\u0026rdquo;. Use this metric as a reference of your competitiveness in our platform.\n How to increase bookings and revenue with new connections?  Table ‚ÄúOpportunities‚Äù shows the number of potential clients / providers not connected with you but selling or buying in your markets or destinations. This will allow you to identify potential partnerships to boost your business by selling your product into new markets or new destinations.\n"
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/configuration/filters/",
	"title": "Filters",
	"tags": [],
	"description": "Configuration filters by different market conditions",
	"content": " Filter Payment Type With this rule it can be set a list of payment types and then only the sellings that match any of these payment types will be sold and the ones that do not match any of the payment types will be discarded. Payment types:\n Merchant Pay Later Pay Card Booking Pay Card Checkin Pay  By default the list for an agency is empty and so it inherits the list set on the general settings.\nThis rule can be set by agency or by organization on general settings: if it is defined by agency then it will be applied the value set by agency and if it is not defined by agency then it will be applied the value set on the general settings. The agency value and the general settings value are not mixed.\nFilter Package Rates With this filter there can be selected which types of sellings have to be offered based on if they include a package rate or not. By default filters are not activated.\nThis rule can only be set by agency.\nFilter NRF With this filter there can be selected which types of sellings have to be offered based on if they are non refundable (NRF) or refundable (RF). By default filters are not activated.\nThis rule can only be set by agency.\nFilter Binding With this filter there can be selected which types of sellings have to be offered based on if their price is binding or not. By default filters are not activated.\nThis rule can only be set by agency.\nFilter Room Rates If this filter is set with a list of Room Rates (codes) then it is applied the following condition to any selling for the agency: if a selling contains exclusively room rates of the list then this selling will be returned on the response, but if a selling has any room rate (or all) that is not in the list then this selling is discarded.\nAs there is not master of Room Rates on Distribution-X this rule does not have a selector. To enter a new Room Rate on the list just type its code and press enter. If this rule is no set with a value then the previous condition will not be applied. By default filters are not activated.\nThis rule can only be set by agency.\n "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/general-stop-sales/",
	"title": "General stop sales",
	"tags": [],
	"description": "Define general stop sales by different conditions",
	"content": " Overview Blacklists are filters that allow us to exclude products from sale. This filter can be applied to hotels directly, or to some property contained by several hotels. This page allows us to apply, modify or eliminate Blacklists quickly and easily on the different categories:\n Providers Hotel chains Markets Countries Cities Destinations Hotels  Create and configurate a new rule To create a general stop sale you will only need to add the values to filter in each stop sale condition box and write a comment. For example, to blacklist some markets you will add the market name in the Markets Blacklisted with a comment:\nDon\u0026rsquo;t forget to click on the green button to save your rule. For each box, and as is shown in the previous image, you will find three different buttons:\n Information: Check last update and stop sale comments. Save: Save your changes. Delete the rule.   "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/rules/general-stop-sales/",
	"title": "General stop sales",
	"tags": [],
	"description": "Define general stop sales by different conditions",
	"content": " General Stop Sales Considerations It is an absolute load, so bear in mind these considerations:\n If all the data on the file is correct then the existing definition of \u0026ldquo;General Stop Sales\u0026rdquo; is removed and file\u0026rsquo;s data is inserted into the system to define the new \u0026ldquo;General Stop Sales\u0026rdquo;.\n If there is any problem with the file or its data then the load is cancelled and the existing definition of \u0026ldquo;General Stop Sales\u0026rdquo; is not removed.\n  \nSpecifications  File name: Rules_GeneralStopSales.csv\n Each line represents a unique agency and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n The fields are separated by #. If a field is a list of values it also has its values separated by ;.\n  \n   Case Example Description     Field without data \u0026hellip;##\u0026hellip; We have the separator # and nothing inside.   Field directly with data and no lists \u0026hellip;#12#\u0026hellip; It is just the value 12.   Field with a list of elements \u0026hellip;#AS;XF;TR#\u0026hellip; Its value is a list and its elements are separated with \u0026ldquo;;\u0026rdquo; (\u0026ldquo;AS\u0026rdquo;, \u0026ldquo;XF\u0026rdquo; and \u0026ldquo;TR\u0026rdquo;).    \nControl Lines  Control lines allow us to determine how the content of the file has to be interpreted.\n This type of lines do not contain data, they contain orders for the process and these orders take effect from the control line forward, so control lines should be placed at the begining of the file (and after any header).\n Each control operation has to be given on a separate line (one line one control operation).\n  \n   Control Description     @CTRL:separator= With the control line @CTRL:separator= followed by a character or string it can be defined the fields separator to be used, overwriting the default one or any previous definition. The specified character or string cannot be used inside data because fields would be gathered in a wrong way. Example of line to set # as the fields separator: @CTRL:separator=#.   @CTRL:separatorlist= With the control line** @CTRL:separatorlist=** followed by a character or string it can be defined the separator to be used with list items, overwriting the default one or any previous definition. The specified character or string cannot be used inside list data because list items would be gathered in a wrong way. Example of line to set # as the list items separator: @CTRL:separatorlist=#.    \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes enum Defines the entity of the stop sale. It may be one of the following types: PRV = Provider Blacklist. If you wish to discard all the product of one or more providers.MRK = Market Blacklist. If you wish to prevent the sales for specific markets. (Country ISO-2)CHA = Chain Blacklist. If you wish to prevent the sales for specific chains. COU = Country Blacklist. If you wish to prevent the sales for specific countries. (Country ISO-2)CIT = City Blacklist. If you wish to prevent the sales for specific cities.HOT = Hotel Blacklist. If you wish to prevent the sales for specific hotels.DES = Destination Blacklist. If you wish to prevent the sales for specific destinations.DESGR = Destination Group Blacklist. If you wish to prevent the sales for specific destination groups.   1 Yes Yes enum Defines the type of operation that will be done with the blacklist. U = Update. ‚Üí Updates the blacklist setting the new values (and removing any previous BL definition).D = Delete. ‚Üí Removes the blacklist from the system.   2 Yes Yes/- list of strings List of codes of entities included into the blacklist. If the operation is Update then this field must contain a list (it can not be empty).If the operation is Delete then this field must be empty. In the case that the rule is applied for the entity Provider, then in this field there are 2 specific values that can be used: *@ALLDIRECT@ = Rule is applied for all direct providers.**@ALLEXTERNAL@ = Rule is applied for all external providers.* These 2 codes can be mixed with other specific provider codes. i.e \u0026ldquo;abc;xj123;@ALLDIRECT@;mcefb\u0026rdquo;. The character \u0026ldquo;@\u0026rdquo; cannot be used as separator on this file.   3 Yes Yes enum Defines if the blacklist is applied over all the agencies or only for a list of agencies. ALL = all the agencies.LIST = a list of concrete agencies.   4 Yes Yes/- list of string List of agencies for with the blacklist is applied. If the operation is done for a set of agencies then this field must contain a list (it can not be empty).If the operation is done for all agencies then this field must be empty.    Notes  Country and market are in ISO 3166-1 alpha-2 code format (i.e. \u0026ldquo;ES\u0026rdquo;, \u0026ldquo;PT\u0026rdquo;, \u0026ldquo;FR\u0026rdquo;,\u0026hellip;).   "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/graphql-schema-changes/",
	"title": "GraphQL Schema Changes",
	"tags": ["graphql-changelog"],
	"description": "It includes backwards-compatible changes, schema previews, and upcoming breaking changes.",
	"content": " The GraphQL HotelX schema change log is a list of recent and upcoming changes to our GraphQL API schema. It includes backwards-compatible changes, schema previews, and upcoming breaking changes.\nCheck out this list of new releases and changes applied on the HotelX GraphQL API.\n2021-05-25  Added new input supplierCode in hotels query. You can see more details of hotels query in the documentation here.   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/graphql-schema-changes/",
	"title": "GraphQL Schema Changes",
	"tags": ["graphql-changelog"],
	"description": "It includes backwards-compatible changes, schema previews, and upcoming breaking changes.",
	"content": " The GraphQL schema change log is a list of recent and upcoming changes to our GraphQL API schema. It includes backwards-compatible changes, schema previews, and upcoming breaking changes.\nCheck out this list of new releases and changes applied on the TravelgateX GraphQL API.\n2021-02-09 üõë Field suitFolder was removed from object type AdminMutation\nüõë Enum value FOLDER_DEFAULT was removed from enum FolderTemplate\nüõë Type SuitFolderInput was removed\n‚ö†Ô∏è Enum value FOLDER_BUYER was added to enum FolderTemplate\n‚ö†Ô∏è Enum value FOLDER_SELLER was added to enum FolderTemplate\n‚úÖ Field createFolder was added to object type AdminMutation\n‚úÖ Input field trafficType was added to input object type StatsFilterInput\n‚úÖ Field originMarket was added to object type AggregateSum\n‚úÖ Input field isSeller was added to input object type UpdateGroupInput\n‚úÖ Input field isBuyer was added to input object type UpdateGroupInput\n‚úÖ Type CreateFolderInput was added\n2020-12-21 ‚ö†Ô∏è Union member Access was added to Union type Connection\n‚úÖ Input field serviceApi was added to input object type ActiveFilterInput\n‚úÖ Input field threeDomainSecurity was added to input object type PaymentCardInput\n‚úÖ Input field virtualCreditCard was added to input object type PaymentCardInput\n‚úÖ Input field isVCC was added to input object type PaymentCardInput\n‚úÖ Type ThreeDSSignatureStatusType was added\n‚úÖ Type ThreeDSCardEnrolledStatusType was added\n‚úÖ Type PayerResponseStatusType was added\n‚úÖ Type ThreeDomainSecurityInput was added\n‚úÖ Type VirtualCreditCardInput was added\n2020-12-03 üõë Enum value ROOM_HOTEL was removed from enum MappingType\n‚ö†Ô∏è Enum value supplierOrganization was added to enum BookingsReportGroupByInput\n‚ö†Ô∏è Enum value clientOrganization was added to enum BookingsReportGroupByInput\n‚ö†Ô∏è Enum value PROMOTION was added to enum MappingType\n‚ö†Ô∏è Enum value PROMOTION_MAP was added to enum PluginType\n‚úÖ Field clientOrganization was added to object type AggregateSum\n‚úÖ Field supplierOrganization was added to object type AggregateSum\n‚úÖ Field clientCode was added to object type AggregateSum\n‚úÖ Field supplierCode was added to object type AggregateSum\n‚úÖ Field destinationCountry was added to object type AggregateSum\n‚úÖ Field supplierCode was added to object type Promotion\n2020-11-23 ‚ö†Ô∏è Enum value HOTEL_ROOM was added to enum MappingType\n‚ö†Ô∏è Enum value ORGANIZATION_BUYER_SELLER was added to enum OrganizationTemplate\n‚ö†Ô∏è Enum value ORGANIZATION_SELLER was added to enum OrganizationTemplate\n‚ö†Ô∏è Enum value ORGANIZATION_BUYER was added to enum OrganizationTemplate\n‚úÖ Field isSeller was added to object type OrganizationData\n‚úÖ Field isBuyer was added to object type OrganizationData\n‚úÖ Field isSeller was added to object type GroupData\n‚úÖ Field isBuyer was added to object type GroupData\n2020-08-31 ‚úÖ Field HotelOptionQuote.searchPrice description changed from Specifies the price of the previous Search Option. Returned only if the shown Quote price differs from the price shown at the Search Option. If the price does not change, this field will be returned Null. to Specifies the price of the previous search option\n‚úÖ Field rooms was added to object type HotelOptionQuote\n‚úÖ Input field providerID was added to input object type AccessFilter\n‚úÖ Input field supplierID was added to input object type AccessFilter\n‚úÖ Input field isActive was added to input object type AccessFilter\n‚úÖ Input field hasMaster was added to input object type AccessFilter\n‚úÖ Input field providerID was added to input object type SupplierFilter\n‚úÖ Type RoomOptionQuote was added\n2020-07-27 ‚ö†Ô∏è Enum value WARRANTY was added to enum RateRulesType\n‚ö†Ô∏è Enum value MOBILE was added to enum RateRulesType\n‚úÖ Description for enum value RateRulesType.ESSENTIAL_WORKER changed from Special hotel rates for essential workers. to ESSENTIAL_WORKER are special hotel rates for essential workers.\n‚úÖ Description for enum value RateRulesType.NON_REFUNDABLE changed from The rate non refundable is applied to non refundable options to NON_REFUNDABLE is applicable to non refundable options.\n‚úÖ Description for enum value RateRulesType.NORMAL changed from The rate normal refers to options without RateRule to NORMAL are options without RateRule.\n‚úÖ Description for enum value RateRulesType.UNEMPLOYED changed from The rate unemployed is applied to those without work. to UNEMPLOYED is applicable to those without work.\n‚úÖ Description for enum value RateRulesType.PUBLIC_SERVANT changed from The rate publicServant is applicable to public servants only. to PUBLIC_SERVANT is applicable to public servants only.\n‚úÖ Description for enum value RateRulesType.HONEYMOON changed from The rate honeymoon is applied to those who just got married and is determined by each supplier. to HONEYMOON is applicable to those who just got married and is determined by each supplier.\n‚úÖ Description for enum value RateRulesType.LARGE_FAMILY changed from The rate largeFamily is applied to large families and is determined by each supplier to LARGE_FAMILY is applicable to large families and is determined by each supplier.\n‚úÖ Description for enum value RateRulesType.BALEARIC_RESIDENT changed from The rate BalearicResident is applicable to Balearic Islands residents only. to BALEARIC_RESIDENT is applicable to Balearic Islands residents only.\n‚úÖ Description for enum value RateRulesType.CANARY_RESIDENT changed from The rate CanaryResident is applicable to Canary Islands residents only. to CANARY_RESIDENT is applicable to Canary Islands residents only.\n‚úÖ Description for enum value RateRulesType.OLDER65 changed from Options that can only be sold to people who are 65 and older. to OLDER65 can only be sold to people who are 65 and older.\n‚úÖ Description for enum value RateRulesType.OLDER60 changed from Options that can only be sold to people who are 60 and older. to OLDER60 can only be sold to people who are 60 and older.\n‚úÖ Description for enum value RateRulesType.OLDER55 changed from Options that can only be sold to people who are 55 and older. to OLDER55 can only be sold to people who are 55 and older.\n2020-05-28 ‚ö†Ô∏è Enum value ESSENTIAL_WORKER was added to enum RateRulesType\n2020-04-15 üõë Field Partner was removed from object type AdminQuery\nüõë Field PartnerData was removed from object type Partner\n‚úÖ Field partner was added to object type AdminQuery\n‚úÖ Input field title was added to input object type BookPaxInput\n‚úÖ Field partnerData was added to object type Partner\n‚úÖ Input field title was added to input object type HolderInput\n‚úÖ Type PersonalTitleType was added\n2020-03-31 üõë Field informFees was removed from object type MetadataQuote\nüõë Field allowsBlockOption was removed from object type MetadataQuote\nüõë Field informRoomFees was removed from object type MetadataSearch\nüõë Field informFees was removed from object type MetadataSearch\nüõë Field informOffers was removed from object type MetadataSearch\nüõë Field allowsBusinessRules was removed from object type MetadataSearch\nüõë Field amenities was removed from object type MetadataContent\nüõë Field currencies was removed from object type MetadataContent\nüõë Field markets was removed from object type MetadataContent\nüõë Field categories was removed from object type MetadataContent\nüõë Field boards was removed from object type MetadataContent\nüõë Field rooms was removed from object type MetadataContent\nüõë Field destinations was removed from object type MetadataContent\nüõë Field hotels was removed from object type MetadataContent\nüõë Field informExclusiveDeal was removed from object type MetadataContent\nüõë Field allowsClientLocator was removed from object type MetadataCancel\nüõë Field allowsProvideLocator was removed from object type MetadataCancel\nüõë Field implemented was removed from object type MetadataCancel\nüõë Field informPropertyReservationNumber was removed from object type MetadataBooking\nüõë Field allowsClientLocator was removed from object type MetadataBooking\nüõë Field allowsProvideLocator was removed from object type MetadataBooking\nüõë Field implemented was removed from object type MetadataBooking\nüõë Field informPropertyReservationNumber was removed from object type MetadataBook\nüõë Field content was removed from object type MetadataData\nüõë Field bookingList was removed from object type MetadataData\nüõë Type MetadataGeneric was removed\nüõë Type MetadataStatic was removed\nüõë Type MetadataBookingList was removed\n‚ö†Ô∏è Enum value AMENITY was added to enum MappingType\n‚úÖ Description for enum value MappingType.BOARD changed from HOTEL - Comming soon to ``\n‚úÖ Field mandatory was added to object type HotelRuntimeParameter\n‚úÖ Field requiredNationality was added to object type MetadataQuote\n‚úÖ Field informSurcharges was added to object type MetadataQuote\n‚úÖ Field MetadataSearch.maxStay description changed from Maximum number of days allowed for booking. -1 means there is no restriction to Maximum number of days allowed for booking.\n‚úÖ Field requiredNationality was added to object type MetadataSearch\n‚úÖ Field informRoomSurcharges was added to object type MetadataSearch\n‚úÖ Field informSurcharges was added to object type MetadataSearch\n‚úÖ Field informPromotions was added to object type MetadataSearch\n‚úÖ Description Contnet static metadata information, allow you know if some static information or API it's supported by the supplier on type MetadataContent has changed to Informs the content information, return null if not implemented\n‚úÖ Field languages was added to object type MetadataContent\n‚úÖ Field mutableByClientReference was added to object type MetadataCancel\n‚úÖ Field mutableBySupplierReference was added to object type MetadataCancel\n‚úÖ Field MetadataBooking.informPriceCancel description changed from The supplier informs the cancellation price. to Informs the cancellation price.\n‚úÖ Field MetadataBooking.informCancelPolicies description changed from Informs cancellation policies. to Informs the cancellation policies.\n‚úÖ Field informHotelReference was added to object type MetadataBooking\n‚úÖ Field queryableByCheckinDate was added to object type MetadataBooking\n‚úÖ Field queryableByCreationDate was added to object type MetadataBooking\n‚úÖ Field queryableByClientReference was added to object type MetadataBooking\n‚úÖ Field queryableBySupplierReference was added to object type MetadataBooking\n‚úÖ Field MetadataBook.informBillingSupplier description changed from Informs if the supplier returns the property reservation number. to Informs if the supplier billing code.\n‚úÖ Field requiredNationality was added to object type MetadataBook\n‚úÖ Field informHotelReference was added to object type MetadataBook\n‚úÖ Field MetadataData.cancel description changed from Cancel medatadata to Cancel metadata\n‚úÖ Field MetadataData.booking description changed from Booking medatadata to Booking metadata\n‚úÖ Field MetadataData.book description changed from Book medatadata to Book metadata\n‚úÖ Field MetadataData.quote description changed from Quote medatadata to Quote metadata\n‚úÖ Field MetadataData.search description changed from Search medatadata to Search metadata\n‚úÖ Field amenities was added to object type MetadataData\n‚úÖ Field currencies was added to object type MetadataData\n‚úÖ Field markets was added to object type MetadataData\n‚úÖ Field categories was added to object type MetadataData\n‚úÖ Field boards was added to object type MetadataData\n‚úÖ Field rooms was added to object type MetadataData\n‚úÖ Field destinations was added to object type MetadataData\n‚úÖ Field hotels was added to object type MetadataData\n2020-03-10 üõë Field audit was removed from object type Query\nüõë Field audit was removed from object type Mutation\nüõë Input field AlertUpdateErrorRateComparativeConfigurationByTimeInput.windowing changed type from AlertCommonByTimeInput to AlertUpdateCommonByTimeInput\nüõë Input field AlertUpdatePeakTrafficComparativeByTimeInput.configuration changed type from AlertUpdatePeakTrafficComprarativeConfigurationByTimeInput to AlertUpdatePeakTrafficComparativeConfigurationByTimeInput\nüõë Input field AlertPeakTrafficComparativeByTimeInput.configuration changed type from AlertPeakTrafficComprarativeConfigurationByTimeInput! to AlertPeakTrafficComparativeConfigurationByTimeInput!\nüõë Type AuditQuery was removed\nüõë Type AuditMutation was removed\nüõë Type AlertUpdatePeakTrafficComprarativeConfigurationByTimeInput was removed\nüõë Type AlertPeakTrafficComprarativeConfigurationByTimeInput was removed\n‚úÖ Description The service used to access the stats of every connection that uses the HUB on type AuditRule has changed to The service used to access the stats of every connection that uses the HUB\n‚úÖ Field AuditRule.code description changed from GUID to ``\n‚úÖ Field InsightsQuery.hotelXMappingReport description changed from ## Retrieve Mapping Report for HotelX to Retrieve Mapping Report for HotelX\n‚úÖ Field InsightsQuery.bookingsReport description changed from ## Retrieve Bookings Details and Summary to Retrieve Bookings Details and Summary\n‚úÖ Field logging was added to object type Mutation\n‚úÖ Field allAuditRules was added to object type LoggingQuery\n‚úÖ Input field AlertUpdatePriceRelativeConfigurationByTimeInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertUpdatePriceRelativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdatePriceRelativeConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertUpdatePriceRelativeConfigurationByTimeInput.price description changed from `toConfiguration of amount \u0026amp; commission values`\n‚úÖ Input field AlertUpdatePriceRelativeConfigurationByRequestsInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertUpdatePriceRelativeConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdatePriceRelativeConfigurationByRequestsInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertUpdatePriceRelativeConfigurationByRequestsInput.price description changed from `toConfiguration of amount \u0026amp; commission values`\n‚úÖ Input field AlertUpdatePriceInput.amountBy description changed from `toAmount can be checked by its total value or night`\n‚úÖ Input field AlertUpdatePriceInput.range description changed from Low or greater values of amount/commission (value included) to Low or greater values of amount/commission (value included)\n‚úÖ Input field AlertUpdatePriceAbsoluteConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdatePriceAbsoluteConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertUpdatePriceAbsoluteConfigurationByTimeInput.price description changed from `toConfiguration of amount \u0026amp; commission values`\n‚úÖ Input field AlertUpdatePriceAbsoluteConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdatePriceAbsoluteConfigurationByRequestsInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertUpdatePriceAbsoluteConfigurationByRequestsInput.price description changed from `toConfiguration of amount \u0026amp; commission values`\n‚úÖ Input field AlertUpdatePeakTrafficAbsoluteConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdatePeakTrafficAbsoluteConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertUpdatePeakTrafficAbsoluteConfigurationByTimeInput.bounds description changed from `toLimits for number of requests`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByTimeInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByTimeInput.toCompare description changed from `toError codes to compare. By defaults all traffic is compared`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByTimeInput.toCheck description changed from `toError codes to check. By default all error codes are checked`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByRequestsInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByRequestsInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByRequestsInput.toCompare description changed from `toError codes to compare. By defaults all traffic is compared`\n‚úÖ Input field AlertUpdateErrorRateRelativeConfigurationByRequestsInput.toCheck description changed from `toError codes to check. By default all error codes are checked`\n‚úÖ Input field AlertUpdateErrorRateComparativeConfigurationByTimeInput.comparative description changed from `toCommon configuration of comparative mode type`\n‚úÖ Input field AlertUpdateErrorRateComparativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdateErrorRateComparativeConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertUpdateErrorRateComparativeConfigurationByTimeInput.toCompare description changed from `toError codes to compare. By defaults all traffic is compared`\n‚úÖ Input field AlertUpdateErrorRateComparativeConfigurationByTimeInput.toCheck description changed from `toError codes to check. By default all error codes are checked`\n‚úÖ Input field AlertUpdateBoundsInput.lowerBound description changed from `toLower bound limit`\n‚úÖ Input field AlertUpdateBoundsInput.upperBound description changed from `toUpper bound limit`\n‚úÖ Input field AlertUpdateBoundsInput.bound description changed from `toBound limits to be used`\n‚úÖ Input field AlertUpdateCommonRelativeInput.percentageToAlert description changed from `topercentage to be considered status ALERTING`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByTimeInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByTimeInput.maxAverageTime description changed from `toAverage time value not allowed in miliseconds`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByTimeInput.maxTime description changed from `toTime value not allowed in miliseconds`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByRequestsInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByRequestsInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByRequestsInput.maxAverageTime description changed from `toAverage time value not allowed in miliseconds`\n‚úÖ Input field AlertUpdateAverageTimeRelativeConfigurationByRequestsInput.maxTime description changed from `toTime value not allowed in miliseconds`\n‚úÖ Input field AlertUpdateCommonComparativeInput.percentageToAlert description changed from `toPercentage of traffic to be considered status ALERTING`\n‚úÖ Input field AlertUpdateCommonComparativeInput.variation description changed from `toAccording to percentageToAlert value`\n‚úÖ Input field AlertUpdateCommonComparativeInput.offset description changed from `toTime frame in minutes to set the beginning of historicalWindow`\n‚úÖ Input field AlertUpdateCommonComparativeInput.historicalWindow description changed from `toThe time frame in minutes to be used to compare with the window time frame`\n‚úÖ Input field AlertUpdateAverageTimeComparativeConfigurationByTimeInput.comparative description changed from `toCommon configuration of comparative mode type`\n‚úÖ Input field AlertUpdateAverageTimeComparativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdateAverageTimeComparativeConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertUpdateCommonByTimeInput.minNumberRequests description changed from `toMinimum number of requests must be in window to check the alert`\n‚úÖ Input field AlertUpdateCommonByTimeInput.window description changed from `toThe time frame in minutes`\n‚úÖ Input field AlertUpdateCommonByTimeInput.periodicity description changed from `toFrequency of time in minutes in which the alert will be reviewed`\n‚úÖ Input field AlertUpdateCommonByRequestsInput.minNumberRequests description changed from `tominimum number of requests to check the alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByTimeInput.requestsToAlert description changed from `toNumber of requests with anomaly to set alert in ALERTING status`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByTimeInput.maxAverageTime description changed from `toAverage time value not allowed in miliseconds`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByTimeInput.maxTime description changed from `toTime value not allowed in miliseconds`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByRequestsInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByRequestsInput.requestsToAlert description changed from `toNumber of requests with anomaly to set alert in ALERTING status`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByRequestsInput.maxAverageTime description changed from `toAverage time value not allowed in miliseconds`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteConfigurationByRequestsInput.maxTime description changed from `toTime value not allowed in miliseconds`\n‚úÖ Input field AlertPriceRelativeConfigurationByTimeInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertPriceRelativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertPriceRelativeConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertPriceRelativeConfigurationByTimeInput.price description changed from `toConfiguration of amount \u0026amp; commission values`\n‚úÖ Input field AlertPriceRelativeConfigurationByRequestsInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertPriceRelativeConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertPriceRelativeConfigurationByRequestsInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertPriceRelativeConfigurationByRequestsInput.price description changed from `toConfiguration of amount \u0026amp; commission values`\n‚úÖ Input field AlertPriceInput.amountBy description changed from `toAmount can be checked by its total value or night`\n‚úÖ Input field AlertPriceAbsoluteConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertPriceAbsoluteConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertPriceAbsoluteConfigurationByTimeInput.price description changed from `toConfiguration of amount \u0026amp; commission values`\n‚úÖ Input field AlertPriceAbsoluteConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertPriceAbsoluteConfigurationByRequestsInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertPriceAbsoluteConfigurationByRequestsInput.price description changed from `toConfiguration of amount \u0026amp; commission values`\n‚úÖ Input field AlertPeakTrafficAbsoluteConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertPeakTrafficAbsoluteConfigurationByTimeInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertPeakTrafficAbsoluteConfigurationByTimeInput.bounds description changed from `toLimits for number of requests`\n‚úÖ Input field AlertErrorRateRelativeConfigurationByTimeInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertErrorRateRelativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertErrorRateRelativeConfigurationByTimeInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertErrorRateRelativeConfigurationByRequestsInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertErrorRateRelativeConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertErrorRateRelativeConfigurationByRequestsInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertErrorRateRelativeConfigurationByRequestsInput.toCompare description changed from By defaults all traffic is compared to Error codes to compare. By defaults all traffic is compared\n‚úÖ Input field AlertErrorRateRelativeConfigurationByRequestsInput.toCheck description changed from By default all error codes are checked to Error codes to check. By default all error codes are checked\n‚úÖ Input field AlertErrorRateComparativeConfigurationByTimeInput.comparative description changed from `toCommon configuration of comparative mode type`\n‚úÖ Input field AlertErrorRateComparativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertErrorRateComparativeConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type`\n‚úÖ Input field AlertErrorRateComparativeConfigurationByTimeInput.toCompare description changed from By defaults all traffic is compared to Error codes to compare. By defaults all traffic is compared\n‚úÖ Input field AlertErrorRateComparativeConfigurationByTimeInput.toCheck description changed from By default all error codes are checked to Error codes to check. By default all error codes are checked\n‚úÖ Input field AlertGroupInput.isInclusive description changed from to indicate if tr√°fic with the code group has to be checked or not for this alert to Can be filtered traffic setting as inclusive or excludent\n‚úÖ Input field AlertGroupInput.comercialType description changed from `toSELLER or BUYER`\n‚úÖ Input field AlertGroupInput.code description changed from `toGroup code`\n‚úÖ Input field AlertObjectInput.isInclusive description changed from to indicate if tr√°fic with the code object has to be checked or not for this alert to Can be filtered traffic setting as inclusive or excludent\n‚úÖ Input field AlertErrorTypeInput.isInclusive description changed from to indicate if tr√°fic with the error type code has to be checked or not for this alert to Can be filtered traffic setting as inclusive or excludent\n‚úÖ Input field AlertErrorTypeInput.code description changed from `toError type code`\n‚úÖ Input field AlertErrorCodeInput.isInclusive description changed from `toCan be filtered traffic setting as inclusive or excludent`\n‚úÖ Input field AlertErrorCodeInput.code description changed from `toError code`\n‚úÖ Input field AlertHubStatusInput.isInclusive description changed from `toCan be filtered traffic setting as inclusive or excludent`\n‚úÖ Input field AlertHubStatusInput.code description changed from `toHub status code`\n‚úÖ Input field AlertEmailInput.type description changed from email type to Destination email type\n‚úÖ Input field AlertEmailInput.address description changed from address ID to Email address\n‚úÖ Description `on typeAlertBoundsInputhas changed toLimit of requests to define`\n‚úÖ Input field AlertBoundsInput.lowerBound description changed from `toLower bound limit`\n‚úÖ Input field AlertBoundsInput.upperBound description changed from `toUpper bound limit`\n‚úÖ Input field AlertBoundsInput.bound description changed from `toBound limits to be used`\n‚úÖ Input field AlertCommonRelativeInput.percentageToAlert description changed from percentage to be considered status ALERTING to percentage of traffic to be considered status ALERTING\n‚úÖ Input field AlertAverageTimeRelativeConfigurationByTimeInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertAverageTimeRelativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertAverageTimeRelativeConfigurationByTimeInput.windowing description changed from `toCommon configuration of time window type`\n‚úÖ Input field AlertAverageTimeRelativeConfigurationByTimeInput.maxAverageTime description changed from Average time not allowed in miliseconds. to Average time not allowed in miliseconds\n‚úÖ Input field AlertAverageTimeRelativeConfigurationByTimeInput.maxTime description changed from Time not allowed in miliseconds. to Time not allowed in miliseconds\n‚úÖ Input field AlertAverageTimeRelativeConfigurationByRequestsInput.relative description changed from `toCommon configuration of relative mode type`\n‚úÖ Input field AlertAverageTimeRelativeConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertAverageTimeRelativeConfigurationByRequestsInput.windowing description changed from Average time not allowed in miliseconds. to Common configuration for requests window type\n‚úÖ Input field AlertAverageTimeRelativeConfigurationByRequestsInput.maxTime description changed from Time not allowed in miliseconds. to Time not allowed in miliseconds\n‚úÖ Input field maxAverageTime was added to input object type AlertAverageTimeRelativeConfigurationByRequestsInput\n‚úÖ Input field AlertCommonComparativeInput.percentageToAlert description changed from According to percentageToAlert value to Percentage to be considered status ALERTING\n‚úÖ Input field AlertCommonComparativeInput.variation description changed from Percentage to be considered status ALERTING to According to percentageToAlert value\n‚úÖ Input field AlertAverageTimeComparativeConfigurationByTimeInput.comparative description changed from `toCommon configuration of comparative mode type`\n‚úÖ Input field AlertAverageTimeComparativeConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertAverageTimeComparativeConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type.`\n‚úÖ Input field AlertCommonByTimeInput.minNumberRequests description changed from minimum number of requests to check the alert to Minimum number of requests must be in window to check the alert\n‚úÖ Input field AlertAverageTimeAbsoluteConfigurationByTimeInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertAverageTimeAbsoluteConfigurationByTimeInput.windowing description changed from `toCommon configuration for time window type.`\n‚úÖ Input field AlertAverageTimeAbsoluteConfigurationByRequestsInput.common description changed from `toCommon configuration alert`\n‚úÖ Input field AlertAverageTimeAbsoluteConfigurationByRequestsInput.windowing description changed from `toCommon configuration for requests window type`\n‚úÖ Input field AlertAverageTimeAbsoluteConfigurationByRequestsInput.requestsToAlert description changed from Requests vs total requests checked to consider alert in ALERTING status. to Number of requests with anomaly to set alert in ALERTING status\n‚úÖ Input field AlertAverageTimeAbsoluteConfigurationByRequestsInput.maxAverageTime description changed from Average time not allowed in miliseconds. to Average time not allowed in miliseconds\n‚úÖ Input field AlertAverageTimeAbsoluteConfigurationByRequestsInput.maxTime description changed from Time not allowed in miliseconds. to Time not allowed in miliseconds\n‚úÖ Input field AlertCriteriaInput.shared description changed from List of shared type to shared alerts\n‚úÖ Input field AlertCriteriaInput.isActive description changed from active or not to enabled or desabled alerts\n‚úÖ Input field AlertUpdatePriceAbsoluteByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdatePriceAbsoluteByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdatePriceAbsoluteByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdatePriceAbsoluteByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdatePriceAbsoluteByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdatePriceAbsoluteByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdatePriceAbsoluteByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdatePriceAbsoluteByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdatePriceRelativeByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdatePriceRelativeByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdatePriceRelativeByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdatePriceRelativeByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdatePriceRelativeByTimeInput.isActive description changed from status to To enable or desable the alert\n‚úÖ Input field AlertUpdatePriceRelativeByTimeInput.configuration description changed from configuration to Configuration of the alert\n‚úÖ Input field AlertUpdatePriceRelativeByTimeInput.description description changed from description to Description of the alert\n‚úÖ Input field AlertUpdatePriceRelativeByTimeInput.name description changed from name to Name of the alert\n‚úÖ Input field AlertUpdatePeakTrafficComparativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdatePeakTrafficComparativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdatePeakTrafficComparativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdatePeakTrafficComparativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdatePeakTrafficAbsoluteByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdatePeakTrafficAbsoluteByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdatePeakTrafficAbsoluteByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdatePeakTrafficAbsoluteByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdateAverageTimeComparativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdateAverageTimeComparativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdateAverageTimeComparativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdateAverageTimeComparativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdateAverageTimeAbsoluteByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdateAverageTimeRelativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdateErrorRateComparativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdateErrorRateComparativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdateErrorRateComparativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdateErrorRateComparativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertUpdateErrorRateRelativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertPriceAbsoluteByRequestsInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertPriceAbsoluteByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertPriceAbsoluteByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertPriceAbsoluteByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertPriceAbsoluteByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertPriceAbsoluteByTimeInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertPriceAbsoluteByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertPriceAbsoluteByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertPriceAbsoluteByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertPriceAbsoluteByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertPriceRelativeByRequestsInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertPriceRelativeByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertPriceRelativeByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertPriceRelativeByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertPriceRelativeByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertPriceRelativeByTimeInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertPriceRelativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertPriceRelativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertPriceRelativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertPriceRelativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertPeakTrafficComparativeByTimeInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertPeakTrafficComparativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertPeakTrafficComparativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertPeakTrafficComparativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertPeakTrafficComparativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertPeakTrafficAbsoluteByTimeInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertPeakTrafficAbsoluteByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertPeakTrafficAbsoluteByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertPeakTrafficAbsoluteByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertPeakTrafficAbsoluteByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertAverageTimeComparativeByTimeInput.group description changed from `toGroup where the alert is setted`\n‚úÖ Input field AlertAverageTimeComparativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertAverageTimeComparativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertAverageTimeComparativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertAverageTimeComparativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertAverageTimeAbsoluteByRequestsInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertAverageTimeAbsoluteByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertAverageTimeAbsoluteByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertAverageTimeAbsoluteByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertAverageTimeAbsoluteByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertAverageTimeAbsoluteByTimeInput.group description changed from `toGroup where the alert is setted`\n‚úÖ Input field AlertAverageTimeAbsoluteByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertAverageTimeAbsoluteByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertAverageTimeAbsoluteByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertAverageTimeAbsoluteByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertAverageTimeRelativeByRequestsInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertAverageTimeRelativeByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertAverageTimeRelativeByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertAverageTimeRelativeByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertAverageTimeRelativeByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertAverageTimeRelativeByTimeInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertAverageTimeRelativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertAverageTimeRelativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertAverageTimeRelativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertAverageTimeRelativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertErrorRateComparativeByTimeInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertErrorRateComparativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertErrorRateComparativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertErrorRateComparativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertErrorRateComparativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertErrorRateRelativeByRequestsInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertErrorRateRelativeByRequestsInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertErrorRateRelativeByRequestsInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertErrorRateRelativeByRequestsInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertErrorRateRelativeByRequestsInput.name description changed from `toName of the alert`\n‚úÖ Input field AlertErrorRateRelativeByTimeInput.group description changed from `togroups where the alert is setted`\n‚úÖ Input field AlertErrorRateRelativeByTimeInput.isActive description changed from `toTo enable or desable the alert`\n‚úÖ Input field AlertErrorRateRelativeByTimeInput.configuration description changed from `toConfiguration of the alert`\n‚úÖ Input field AlertErrorRateRelativeByTimeInput.description description changed from `toDescription of the alert`\n‚úÖ Input field AlertErrorRateRelativeByTimeInput.name description changed from `toName of the alert`\n‚úÖ Type LoggingMutation was added\n‚úÖ Type AlertUpdatePeakTrafficComparativeConfigurationByTimeInput was added\n‚úÖ Type AlertPeakTrafficComparativeConfigurationByTimeInput was added\n2020-03-09 ‚úÖ Field audit was added to object type Query\n‚úÖ Field audit was added to object type Mutation\n‚úÖ Type AuditRuleData was added\n‚úÖ Type AuditRuleEdge was added\n‚úÖ Type AuditRuleWhereUniqueInput was added\n‚úÖ Type AuditRule was added\n‚úÖ Type AuditRuleCreateInput was added\n‚úÖ Type AuditRuleStatus was added\n‚úÖ Type AuditRuleProductInput was added\n‚úÖ Type AuditRuleWhereInput was added\n‚úÖ Type AuditRuleConnection was added\n‚úÖ Type AuditQuery was added\n‚úÖ Type AuditMutation was added\n2020-03-03 ‚úÖ Field MetadataSearch.maxStay description changed from Maximum number of days allowed for booking. to Maximum number of days allowed for booking. -1 means there is no restriction\n2020-02-27 üõë Field allCustomerAccounts was removed from object type AdminQuery\nüõë Field customerAccount was removed from object type AdminQuery\nüõë Argument PartnerCode: ID! added to field AdminMutation.deleteAgent\nüõë Argument CustomerAccountCode: ID! was removed from field AdminMutation.deleteAgent\nüõë Field AdminMutation.deleteAgent changed type from CustomerAccount! to Partner!\nüõë Argument PartnerCode: ID! added to field AdminMutation.addAgent\nüõë Argument CustomerAccountCode: ID! was removed from field AdminMutation.addAgent\nüõë Field AdminMutation.addAgent changed type from CustomerAccount! to Partner!\nüõë Field setPrimaryCustomerAccount was removed from object type AdminMutation\nüõë Field deleteCustomerAccountFromOrganization was removed from object type AdminMutation\nüõë Field addCustomerAccountToOrganization was removed from object type AdminMutation\nüõë Field deleteCustomerAccount was removed from object type AdminMutation\nüõë Field updateCustomerAccount was removed from object type AdminMutation\nüõë Field createCustomerAccount was removed from object type AdminMutation\nüõë Input field AlertPriceInput.range changed type from RangePrice! to AlertRangePrice!\nüõë Input field AlertPriceInput.check changed type from CheckPrice! to AlertCheckPrice!\nüõë Input field mode was removed from input object type AlertPriceInput\nüõë Input field AlertCriteriaInput.shared changed type from [SharedType!] to [AlertSharedType!]\nüõë Input field alertCodes was removed from input object type AlertCriteriaInput\nüõë Field updateAlert was removed from object type AlertsXMutation\nüõë Field createAlert was removed from object type AlertsXMutation\nüõë Input field AlertGroupInput.comercialType changed type from ComercialType! to AlertComercialType!\nüõë Field AlertPrice.range changed type from RangePrice! to AlertRangePrice!\nüõë Field AlertPrice.check changed type from CheckPrice! to AlertCheckPrice!\nüõë Field mode was removed from object type AlertPrice\nüõë Field max_average was removed from object type AlertTypeConfiguration\nüõë Field offset was removed from object type AlertTypeConfiguration\nüõë Field historicalWindow was removed from object type AlertTypeConfiguration\nüõë Enum value NO_TRAFFIC was removed from enum AlertType\nüõë Field count was removed from object type AlertConnection\nüõë Field AlertConfiguration.comercialType changed type from ComercialType to AlertComercialType\nüõë Type for argument type on field AlertConfiguration.email changed from EmailType to AlertEmailType\nüõë Field AlertConfiguration.email changed type from [Email]! to [AlertEmail]\nüõë Field AlertConfiguration.minNumberRequests changed type from Int! to Int\nüõë Field AlertData.events changed type from EventConnection! to AlertEventConnection!\nüõë Field allCustomerAccounts was removed from object type OrganizationData\nüõë Field primaryCustomerAccount was removed from object type OrganizationData\nüõë Type unitTime was removed\nüõë Type SharedType was removed\nüõë Type ErrorTypeInput was removed\nüõë Type ErrorCodeInput was removed\nüõë Type HubStatusInput was removed\nüõë Type EmailInput was removed\nüõë Type EventType was removed\nüõë Type EventEdge was removed\nüõë Type Event was removed\nüõë Type EventData was removed\nüõë Type AlertPriceUpdateInput was removed\nüõë Type AlertUpdateConfigurationInputPrice was removed\nüõë Type AlertUpdateConfigurationInputPeakTraffic was removed\nüõë Type AlertUpdateConfigurationInputAverageTime was removed\nüõë Type AlertUpdateConfigurationInputErrorRate was removed\nüõë Type AlertUpdateConfigurationInputNoTraffic was removed\nüõë Type AlertUpdateInput was removed\nüõë Type AlertConfigurationInputPrice was removed\nüõë Type AlertConfigurationInputPeakTraffic was removed\nüõë Type AlertConfigurationInputAverageTime was removed\nüõë Type AlertConfigurationInputErrorRate was removed\nüõë Type AlertConfigurationInputNoTraffic was removed\nüõë Type AlertInput was removed\nüõë Type RangePrice was removed\nüõë Type CheckPrice was removed\nüõë Type ModePrice was removed\nüõë Type EventConnection was removed\nüõë Type ComercialType was removed\nüõë Type EmailType was removed\nüõë Type Email was removed\nüõë Type UpdateCustomerAccountInput was removed\nüõë Type CustomerAccountWhereUniqueInput was removed\nüõë Type CustomerAccountUpdateInput was removed\nüõë Type CustomerAccountCreateInput was removed\nüõë Type CustomerAccountOrderByInput was removed\nüõë Type CustomerAccountWhereInput was removed\nüõë Type CustomerAccountConnection was removed\nüõë Type CustomerAccountEdge was removed\nüõë Type CustomerAccount was removed\nüõë Type CustomerAccountData was removed\n‚úÖ Field allPartners was added to object type AdminQuery\n‚úÖ Field Partner was added to object type AdminQuery\n‚úÖ Field setPrimaryPartner was added to object type AdminMutation\n‚úÖ Field deletePartnerFromOrganization was added to object type AdminMutation\n‚úÖ Field addPartnerToOrganization was added to object type AdminMutation\n‚úÖ Field deletePartner was added to object type AdminMutation\n‚úÖ Field updatePartner was added to object type AdminMutation\n‚úÖ Field createPartner was added to object type AdminMutation\n‚úÖ Input field amountBy was added to input object type AlertPriceInput\n‚úÖ Input field AlertCriteriaInput.groups description changed from List of group codes where alerts are located to Group codes\n‚úÖ Input field codes was added to input object type AlertCriteriaInput\n‚úÖ Field deleteAlert was added to object type AlertsXMutation\n‚úÖ Field updateAlertPriceAbsoluteByRequests was added to object type AlertsXMutation\n‚úÖ Field updateAlertPriceAbsoluteByTime was added to object type AlertsXMutation\n‚úÖ Field updateAlertPriceRelativeByRequests was added to object type AlertsXMutation\n‚úÖ Field updateAlertPriceRelativeByTime was added to object type AlertsXMutation\n‚úÖ Field updateAlertPeakTrafficComparativeByTime was added to object type AlertsXMutation\n‚úÖ Field updateAlertPeakTrafficAbsoluteByTime was added to object type AlertsXMutation\n‚úÖ Field updateAlertAverageTimeComparativeByTime was added to object type AlertsXMutation\n‚úÖ Field updateAlertAverageTimeAbsoluteByRequests was added to object type AlertsXMutation\n‚úÖ Field updateAlertAverageTimeAbsoluteByTime was added to object type AlertsXMutation\n‚úÖ Field updateAlertAverageTimeRelativeByRequests was added to object type AlertsXMutation\n‚úÖ Field updateAlertAverageTimeRelativeByTime was added to object type AlertsXMutation\n‚úÖ Field updateAlertErrorRateComparativeByTime was added to object type AlertsXMutation\n‚úÖ Field updateAlertErrorRateRelativeByRequests was added to object type AlertsXMutation\n‚úÖ Field updateAlertErrorRateRelativeByTime was added to object type AlertsXMutation\n‚úÖ Field createAlertPriceAbsoluteByRequests was added to object type AlertsXMutation\n‚úÖ Field createAlertPriceAbsoluteByTime was added to object type AlertsXMutation\n‚úÖ Field createAlertPriceRelativeByRequests was added to object type AlertsXMutation\n‚úÖ Field createAlertPriceRelativeByTime was added to object type AlertsXMutation\n‚úÖ Field createAlertPeakTrafficComparativeByTime was added to object type AlertsXMutation\n‚úÖ Field createAlertPeakTrafficAbsoluteByTime was added to object type AlertsXMutation\n‚úÖ Field createAlertAverageTimeComparativeByTime was added to object type AlertsXMutation\n‚úÖ Field createAlertAverageTimeAbsoluteByRequests was added to object type AlertsXMutation\n‚úÖ Field createAlertAverageTimeAbsoluteByTime was added to object type AlertsXMutation\n‚úÖ Field createAlertAverageTimeRelativeByRequests was added to object type AlertsXMutation\n‚úÖ Field createAlertAverageTimeRelativeByTime was added to object type AlertsXMutation\n‚úÖ Field createAlertErrorRateComparativeByTime was added to object type AlertsXMutation\n‚úÖ Field createAlertErrorRateRelativeByRequests was added to object type AlertsXMutation\n‚úÖ Field createAlertErrorRateRelativeByTime was added to object type AlertsXMutation\n‚úÖ Field amountBy was added to object type AlertPrice\n‚úÖ Description Depending on the talert type, typeConfiguration will use some fields on type AlertTypeConfiguration has changed to Depending on the alert type, typeConfiguration will use some fields\n‚úÖ Field AlertTypeConfiguration.toCompare description changed from Error codes to be Compared with Checked codes. By default all error codes to Error codes to be Compared with Checked codes. By default all error codes. Used for Error rate alert type\n‚úÖ Field AlertTypeConfiguration.toCheck description changed from Error codes to be Checked. By default all error codes excepts 0 to Error codes to be Checked. By default all error codes excepts 0. Used for Error rate alert type\n‚úÖ Field bounds was added to object type AlertTypeConfiguration\n‚úÖ Field requestsToAlert was added to object type AlertTypeConfiguration\n‚úÖ Field maxTime was added to object type AlertTypeConfiguration\n‚úÖ Field maxAverageTime was added to object type AlertTypeConfiguration\n‚úÖ Field AlertConnection.pageInfo description changed from Indicates info about page to ``\n‚úÖ Field totalCount was added to object type AlertConnection\n‚úÖ Field AlertConfiguration.percentageToAlert description changed from Minimum percentage to be considered status ALERTING to percentage to be considered status ALERTING\n‚úÖ Field AlertConfiguration.typeConfiguration description changed from specific configuration according to the alert type to Specific configuration according to the alert type\n‚úÖ Field variation was added to object type AlertConfiguration\n‚úÖ Field offset was added to object type AlertConfiguration\n‚úÖ Field historicalWindow was added to object type AlertConfiguration\n‚úÖ Field windowType was added to object type AlertConfiguration\n‚úÖ Field mode was added to object type AlertConfiguration\n‚úÖ Field group was added to object type AlertData\n‚úÖ Field allPartners was added to object type OrganizationData\n‚úÖ Field primaryPartner was added to object type OrganizationData\n‚úÖ Type AlertUpdatePriceRelativeConfigurationByTimeInput was added\n‚úÖ Type AlertUpdatePriceRelativeConfigurationByRequestsInput was added\n‚úÖ Type AlertUpdatePriceInput was added\n‚úÖ Type AlertUpdatePriceAbsoluteConfigurationByTimeInput was added\n‚úÖ Type AlertUpdatePriceAbsoluteConfigurationByRequestsInput was added\n‚úÖ Type AlertUpdatePeakTrafficComprarativeConfigurationByTimeInput was added\n‚úÖ Type AlertUpdatePeakTrafficAbsoluteConfigurationByTimeInput was added\n‚úÖ Type AlertUpdateErrorRateRelativeConfigurationByTimeInput was added\n‚úÖ Type AlertUpdateErrorRateRelativeConfigurationByRequestsInput was added\n‚úÖ Type AlertUpdateErrorRateComparativeConfigurationByTimeInput was added\n‚úÖ Type AlertUpdateBoundsInput was added\n‚úÖ Type AlertUpdateCommonRelativeInput was added\n‚úÖ Type AlertUpdateAverageTimeRelativeConfigurationByTimeInput was added\n‚úÖ Type AlertUpdateAverageTimeRelativeConfigurationByRequestsInput was added\n‚úÖ Type AlertUpdateCommonComparativeInput was added\n‚úÖ Type AlertUpdateAverageTimeComparativeConfigurationByTimeInput was added\n‚úÖ Type AlertUpdateCommonByTimeInput was added\n‚úÖ Type AlertUpdateCommonConfigurationInput was added\n‚úÖ Type AlertUpdateCommonByRequestsInput was added\n‚úÖ Type AlertUpdateAverageTimeAbsoluteConfigurationByTimeInput was added\n‚úÖ Type AlertUpdateAverageTimeAbsoluteConfigurationByRequestsInput was added\n‚úÖ Type AlertPriceRelativeConfigurationByTimeInput was added\n‚úÖ Type AlertPriceRelativeConfigurationByRequestsInput was added\n‚úÖ Type AlertPriceAbsoluteConfigurationByTimeInput was added\n‚úÖ Type AlertPriceAbsoluteConfigurationByRequestsInput was added\n‚úÖ Type AlertPeakTrafficComprarativeConfigurationByTimeInput was added\n‚úÖ Type AlertPeakTrafficAbsoluteConfigurationByTimeInput was added\n‚úÖ Type AlertErrorRateRelativeConfigurationByTimeInput was added\n‚úÖ Type AlertErrorRateRelativeConfigurationByRequestsInput was added\n‚úÖ Type AlertErrorRateComparativeConfigurationByTimeInput was added\n‚úÖ Type AlertSharedType was added\n‚úÖ Type AlertErrorTypeInput was added\n‚úÖ Type AlertErrorCodeInput was added\n‚úÖ Type AlertHubStatusInput was added\n‚úÖ Type AlertEmailInput was added\n‚úÖ Type AlertBoundsInput was added\n‚úÖ Type AlertCommonRelativeInput was added\n‚úÖ Type AlertAverageTimeRelativeConfigurationByTimeInput was added\n‚úÖ Type AlertAverageTimeRelativeConfigurationByRequestsInput was added\n‚úÖ Type AlertCommonComparativeInput was added\n‚úÖ Type AlertAverageTimeComparativeConfigurationByTimeInput was added\n‚úÖ Type AlertCommonByTimeInput was added\n‚úÖ Type AlertCommonConfigurationInput was added\n‚úÖ Type AlertCommonByRequestsInput was added\n‚úÖ Type AlertAverageTimeAbsoluteConfigurationByTimeInput was added\n‚úÖ Type AlertAverageTimeAbsoluteConfigurationByRequestsInput was added\n‚úÖ Type AlertUpdatePriceAbsoluteByRequestsInput was added\n‚úÖ Type AlertUpdatePriceAbsoluteByTimeInput was added\n‚úÖ Type AlertUpdatePriceRelativeByRequestsInput was added\n‚úÖ Type AlertUpdatePriceRelativeByTimeInput was added\n‚úÖ Type AlertUpdatePeakTrafficComparativeByTimeInput was added\n‚úÖ Type AlertUpdatePeakTrafficAbsoluteByTimeInput was added\n‚úÖ Type AlertUpdateAverageTimeComparativeByTimeInput was added\n‚úÖ Type AlertUpdateAverageTimeAbsoluteByRequestsInput was added\n‚úÖ Type AlertUpdateAverageTimeAbsoluteByTimeInput was added\n‚úÖ Type AlertUpdateAverageTimeRelativeByRequestsInput was added\n‚úÖ Type AlertUpdateAverageTimeRelativeByTimeInput was added\n‚úÖ Type AlertUpdateErrorRateComparativeByTimeInput was added\n‚úÖ Type AlertUpdateErrorRateRelativeByRequestsInput was added\n‚úÖ Type AlertUpdateErrorRateRelativeByTimeInput was added\n‚úÖ Type AlertPriceAbsoluteByRequestsInput was added\n‚úÖ Type AlertPriceAbsoluteByTimeInput was added\n‚úÖ Type AlertPriceRelativeByRequestsInput was added\n‚úÖ Type AlertPriceRelativeByTimeInput was added\n‚úÖ Type AlertPeakTrafficComparativeByTimeInput was added\n‚úÖ Type AlertPeakTrafficAbsoluteByTimeInput was added\n‚úÖ Type AlertAverageTimeComparativeByTimeInput was added\n‚úÖ Type AlertAverageTimeAbsoluteByRequestsInput was added\n‚úÖ Type AlertAverageTimeAbsoluteByTimeInput was added\n‚úÖ Type AlertAverageTimeRelativeByRequestsInput was added\n‚úÖ Type AlertAverageTimeRelativeByTimeInput was added\n‚úÖ Type AlertErrorRateComparativeByTimeInput was added\n‚úÖ Type AlertErrorRateRelativeByRequestsInput was added\n‚úÖ Type AlertErrorRateRelativeByTimeInput was added\n‚úÖ Type AlertAmountBy was added\n‚úÖ Type AlertRangePrice was added\n‚úÖ Type AlertCheckPrice was added\n‚úÖ Type AlertEventType was added\n‚úÖ Type AlertEventEdge was added\n‚úÖ Type AlertEvent was added\n‚úÖ Type AlertEventData was added\n‚úÖ Type AlertEventConnection was added\n‚úÖ Type AlertComercialType was added\n‚úÖ Type AlertEmailType was added\n‚úÖ Type AlertEmail was added\n‚úÖ Type AlertVariation was added\n‚úÖ Type AlertWindowType was added\n‚úÖ Type AlertMode was added\n‚úÖ Type AlertBounds was added\n‚úÖ Type AlertBound was added\n‚úÖ Type UpdatePartnerInput was added\n‚úÖ Type PartnerWhereUniqueInput was added\n‚úÖ Type PartnerUpdateInput was added\n‚úÖ Type PartnerCreateInput was added\n‚úÖ Type PartnerOrderByInput was added\n‚úÖ Type PartnerWhereInput was added\n‚úÖ Type PartnerConnection was added\n‚úÖ Type PartnerEdge was added\n‚úÖ Type Partner was added\n‚úÖ Type PartnerData was added\n2020-02-25 üõë Input field HotelCriteriaBookingInput.typeSearch changed type from BookingCriteriaType! to BookingCriteriaType\nüõë Input field HotelCancelInput.reference changed type from BookReferenceInput! to BookReferenceInput\nüõë Argument codes: [ID!] was removed from field OrganizationData.clients\nüõë Argument codes: [ID!] was removed from field OrganizationData.suppliers\nüõë Argument codes: [ID!] was removed from field OrganizationData.accesses\nüõë Argument codes: [ID!] was removed from field GroupData.clients\nüõë Argument codes: [ID!] was removed from field GroupData.suppliers\nüõë Argument codes: [ID!] was removed from field GroupData.accesses\nüõë Argument codes: [ID!] was removed from field GroupCommonData.clients\nüõë Argument codes: [ID!] was removed from field GroupCommonData.suppliers\nüõë Argument codes: [ID!] was removed from field GroupCommonData.accesses\nüõë Field allMembers was removed from object type GroupCommonData\n‚úÖ Field flightX was added to object type Query\n‚úÖ Field HotelXQuery.booking description changed from Returns detailed information about books, you can indicated a list of locators or a range date. to Returns detailed information about books, you can search this books by indicating a list of locators, our HotelX booking ID or a range dates.\n‚úÖ Field flightX was added to object type Mutation\n‚úÖ Field getProviderMaintainer was added to object type AdminQuery\n‚úÖ Field getSupplierMaintainer was added to object type AdminQuery\n‚úÖ Field setProviderMaintainer was added to object type AdminMutation\n‚úÖ Field setSupplierMaintainer was added to object type AdminMutation\n‚úÖ Description Criteria of book contains basic information to find a book or books. on type HotelCriteriaBookingInput has changed to Criteria of book contains basic information to find a book or books. If you are using our Hotelx locator (bookingID) you don't need to indicate any of the other fields\n‚úÖ Input field HotelCriteriaBookingInput.dates description changed from The dates criteria. to The dates criteria. @deprecated(reason: \u0026quot;deprecated from 2020-02-20. Use bookingID instead).\n‚úÖ Input field HotelCriteriaBookingInput.references description changed from The references criteria. to The references criteria. @deprecated(reason: \u0026quot;deprecated from 2020-02-20. Use bookingID instead).\n‚úÖ Input field HotelCriteriaBookingInput.typeSearch description changed from The search type criteria. to The search type criteria. Necessary if your search if by references or by dates. @deprecated(reason: \u0026quot;deprecated from 2020-02-20. Use bookingID instead).\n‚úÖ Input field HotelCriteriaBookingInput.language description changed from The language code. to The language code. @deprecated(reason: \u0026quot;deprecated from 2020-02-20. Use bookingID instead).\n‚úÖ Input field HotelCriteriaBookingInput.accessCode changed type from String! to String\n‚úÖ Input field HotelCriteriaBookingInput.accessCode description changed from Name of the access that have to use in the request. to Name of the access that have to use in the request. Necessary if your search if by references or by dates. @deprecated(reason: \u0026quot;deprecated from 2020-02-20. Use bookingID instead).\n‚úÖ Input field bookingID was added to input object type HotelCriteriaBookingInput\n‚úÖ Input field HotelCancelInput.reference description changed from Contains the client reference and/or supplier reference. One of them is mandatory. to Contains the client reference and/or supplier reference. @deprecated(reason: \u0026quot;deprecated from 2020-02-20. Use bookingID instead).\n‚úÖ Input field HotelCancelInput.hotelCode changed type from String! to String\n‚úÖ Input field HotelCancelInput.hotelCode description changed from The hotel code. to The hotel code. @deprecated(reason: \u0026quot;deprecated from 2020-02-20. Use bookingID instead).\n‚úÖ Input field HotelCancelInput.language description changed from The language code. to The language code. @deprecated(reason: \u0026quot;deprecated from 2020-02-20. Use bookingID instead).\n‚úÖ Input field HotelCancelInput.accessCode changed type from String! to String\n‚úÖ Input field HotelCancelInput.accessCode description changed from The name of the access to use in the request. to The name of the access to use in the request. @deprecated(reason: \u0026quot;deprecated from 2020-02-20. Use bookingID instead).\n‚úÖ Input field bookingID was added to input object type HotelCancelInput\n‚úÖ Field bookingID was added to object type Reference\n‚úÖ Argument owner: [ID!] added to field OrganizationData.clients\n‚úÖ Argument clientID: [ID!] added to field OrganizationData.clients\n‚úÖ Field OrganizationData.clients description changed from Clients resources in a organization to Clients resources in a group\n‚úÖ Argument isActive: Boolean added to field OrganizationData.suppliers\n‚úÖ Argument serviceAPI: [ID!] added to field OrganizationData.suppliers\n‚úÖ Argument owner: [ID!] added to field OrganizationData.suppliers\n‚úÖ Argument supplierID: [ID!] added to field OrganizationData.suppliers\n‚úÖ Field OrganizationData.suppliers description changed from Supplier resources in a organization to Supplier resources in a group\n‚úÖ Argument owner: [ID!] added to field OrganizationData.accesses\n‚úÖ Argument accessID: [ID!] added to field OrganizationData.accesses\n‚úÖ Field OrganizationData.accesses description changed from Access resources in a organization to Access resources in a group\n‚úÖ Argument owner: [ID!] added to field GroupData.clients\n‚úÖ Argument clientID: [ID!] added to field GroupData.clients\n‚úÖ Argument isActive: Boolean added to field GroupData.suppliers\n‚úÖ Argument serviceAPI: [ID!] added to field GroupData.suppliers\n‚úÖ Argument owner: [ID!] added to field GroupData.suppliers\n‚úÖ Argument supplierID: [ID!] added to field GroupData.suppliers\n‚úÖ Argument owner: [ID!] added to field GroupData.accesses\n‚úÖ Argument accessID: [ID!] added to field GroupData.accesses\n‚úÖ Argument owner: [ID!] added to field GroupCommonData.clients\n‚úÖ Argument clientID: [ID!] added to field GroupCommonData.clients\n‚úÖ Argument isActive: Boolean added to field GroupCommonData.suppliers\n‚úÖ Argument serviceAPI: [ID!] added to field GroupCommonData.suppliers\n‚úÖ Argument owner: [ID!] added to field GroupCommonData.suppliers\n‚úÖ Argument supplierID: [ID!] added to field GroupCommonData.suppliers\n‚úÖ Argument owner: [ID!] added to field GroupCommonData.accesses\n‚úÖ Argument accessID: [ID!] added to field GroupCommonData.accesses\n‚úÖ Type SelectedOfferItem was added\n‚úÖ Type PaymentMethodCodeType was added\n‚úÖ Type PaymentMethod was added\n‚úÖ Type IdentityDocType was added\n‚úÖ Type FlightSupplierInput was added\n‚úÖ Type Arrival was added\n‚úÖ Type Departure was added\n‚úÖ Type IndividualInput was added\n‚úÖ Type PaymentInfo was added\n‚úÖ Type SelectedOffer was added\n‚úÖ Type Discount was added\n‚úÖ Type FlightOriginDestCriteriaInput was added\n‚úÖ Type ContactInfo was added\n‚úÖ Type Phone was added\n‚úÖ Type Address was added\n‚úÖ Type CountryCodeType was added\n‚úÖ Type LocationCode was added\n‚úÖ Type TaxType was added\n‚úÖ Type TitleNameType was added\n‚úÖ Type ProperNameType was added\n‚úÖ Type FlightXQuery was added\n‚úÖ Type FlightOfferOrderByInput was added\n‚úÖ Type FlightSettingsInput was added\n‚úÖ Type FlightOfferWhereInput was added\n‚úÖ Type FlightXMutation was added\n‚úÖ Type FlightOrderCreateInput was added\n‚úÖ Type Individual was added\n‚úÖ Type FlightSegmentOrderByInput was added\n‚úÖ Type FlightSegmentWhereInput was added\n‚úÖ Type FlightServiceData was added\n‚úÖ Type FlightSegment was added\n‚úÖ Type FlightNumber was added\n‚úÖ Type AirlineCode was added\n‚úÖ Type TransportDeparture was added\n‚úÖ Type TransportArrival was added\n‚úÖ Type TaxSummaryType was added\n‚úÖ Type FlightSurcharge was added\n‚úÖ Type FlightPax was added\n‚úÖ Type IATA_PTC_CodeType was added\n‚úÖ Type FlightOrderItemData was added\n‚úÖ Type FlightOrderItem was added\n‚úÖ Type FlightTicket was added\n‚úÖ Type FlightTicketStatusCode was added\n‚úÖ Type FlightOrder was added\n‚úÖ Type FlightOrderData was added\n‚úÖ Type FlightService was added\n‚úÖ Type FlightPrice was added\n‚úÖ Type FlightOfferItemData was added\n‚úÖ Type FlightOfferItem was added\n‚úÖ Type FlightOfferConnection was added\n‚úÖ Type FlightOfferEdge was added\n‚úÖ Type FlightOffer was added\n‚úÖ Type FlightOfferData was added\n‚úÖ Type Fee was added\n‚úÖ Type TextType was added\n‚úÖ Type AmountType was added\n‚úÖ Type ClientWhereUniqueInput was added\n2020-02-13 üõë Input field fiendlyName was removed from input object type CustomerAccountCreateInput\n‚úÖ Field insights was added to object type Query\n‚úÖ Field unencryptedURL was added to object type StatsAsset\n‚úÖ Field unencryptedURL was added to object type LoggingLegacyData\n‚úÖ Input field HotelXHotelListInput.hotelCodes description changed from Search by hotel codes to Search by hotel codes. These hotel codes are used to perform search.\n‚úÖ Input field supplierHotelCodes was added to input object type HotelXHotelListInput\n‚úÖ Input field friendlyName was added to input object type CustomerAccountCreateInput\n‚úÖ Type InsightsQuery was added\n‚úÖ Type BookingsReportOrderByInput was added\n‚úÖ Type BookingsReportGroupByInput was added\n‚úÖ Type HotelXMappingReportWhereInput was added\n‚úÖ Type MappingType was added\n‚úÖ Type BookingsReportWhereInput was added\n‚úÖ Type References was added\n‚úÖ Type DateRange was added\n‚úÖ Type InsightsXBookingReport was added\n‚úÖ Type InsightsXBookingDetailConnection was added\n‚úÖ Type InsightsXBookingDetailEdge was added\n‚úÖ Type InsightsXBookingDetail was added\n‚úÖ Type InsightsXBookingAggregationConnection was added\n‚úÖ Type InsightsXBookingAggregationEdge was added\n‚úÖ Type InsightsXBookingAggregation was added\n‚úÖ Type HotelXMappingReportResponse was added\n‚úÖ Type RetrieveHotelXMappingReport was added\n‚úÖ Type BookingDetail was added\n‚úÖ Type BookingAggregation was added\n‚úÖ Type BookingWindowType was added\n‚úÖ Type PaxTypeType was added\n‚úÖ Type AmountCancelPenalty was added\n‚úÖ Type Aggregate was added\n‚úÖ Type AggregateMax was added\n‚úÖ Type AggregateSum was added\n2020-02-06 üõë Input field code was removed from input object type CustomerAccountCreateInput\nüõë Argument code: ID! was removed from field OrganizationData.primaryCustomerAccount\n‚úÖ Field HotelOptionSearch.rateRules description changed from Specifies rate rules of the option returned. to Specifies rate rules of the option returned. Note: If the option does not have any rate rule, then the option is NORMAL rate.\n‚úÖ Input field _search was added to input object type CustomerAccountWhereInput\n2020-02-03 ‚úÖ Field allCustomerAccounts was added to object type AdminQuery\n‚úÖ Field customerAccount was added to object type AdminQuery\n‚úÖ Field deleteAgent was added to object type AdminMutation\n‚úÖ Field addAgent was added to object type AdminMutation\n‚úÖ Field setPrimaryCustomerAccount was added to object type AdminMutation\n‚úÖ Field deleteCustomerAccountFromOrganization was added to object type AdminMutation\n‚úÖ Field addCustomerAccountToOrganization was added to object type AdminMutation\n‚úÖ Field deleteCustomerAccount was added to object type AdminMutation\n‚úÖ Field updateCustomerAccount was added to object type AdminMutation\n‚úÖ Field createCustomerAccount was added to object type AdminMutation\n‚úÖ Field allCustomerAccounts was added to object type OrganizationData\n‚úÖ Field primaryCustomerAccount was added to object type OrganizationData\n‚úÖ Type UpdateCustomerAccountInput was added\n‚úÖ Type CustomerAccountUpdateInput was added\n‚úÖ Type CustomerAccountWhereUniqueInput was added\n‚úÖ Type CustomerAccountCreateInput was added\n‚úÖ Type CustomerAccountOrderByInput was added\n‚úÖ Type CustomerAccountWhereInput was added\n‚úÖ Type CustomerAgentType was added\n‚úÖ Type CustomerAgent was added\n‚úÖ Type CustomerAccountConnection was added\n‚úÖ Type CustomerAccountEdge was added\n‚úÖ Type CustomerAccount was added\n‚úÖ Type CustomerAccountData was added\n2020-01-29 ‚úÖ Input field cancelRequired was added to input object type ReferenceFilter\n‚úÖ Input field quoteRequired was added to input object type ReferenceFilter\n2020-01-23 ‚ö†Ô∏è Enum value accesses_totalCount_DESC was added to enum OrganizationOrderByInput\n‚ö†Ô∏è Enum value accesses_totalCount_ASC was added to enum OrganizationOrderByInput\n‚ö†Ô∏è Enum value suppliers_totalCount_DESC was added to enum OrganizationOrderByInput\n‚ö†Ô∏è Enum value suppliers_totalCount_ASC was added to enum OrganizationOrderByInput\n‚ö†Ô∏è Enum value clients_totalCount_DESC was added to enum OrganizationOrderByInput\n‚ö†Ô∏è Enum value clients_totalCount_ASC was added to enum OrganizationOrderByInput\n‚ö†Ô∏è Enum value profiles_totalCount_DESC was added to enum OrganizationOrderByInput\n‚ö†Ô∏è Enum value profiles_totalCount_ASC was added to enum OrganizationOrderByInput\n‚úÖ Field deleteContact was added to object type AdminMutation\n‚úÖ Field addContact was added to object type AdminMutation\n‚úÖ Field OrganizationData.owner changed type from Member to Member!\n‚úÖ Field contacts was added to object type OrganizationData\n‚úÖ Argument codeStartsWith: String added to field GroupCommonData.children\n‚úÖ Argument type: GroupType added to field GroupCommonData.children\n‚úÖ Field id was added to object type PaymentCardData\n‚úÖ Type OrganizationContactType was added\n‚úÖ Type OrganizationContact was added\n2020-01-14 üõë Field destinationSameCountryRestriction was removed from object type MetadataSearchDestinations\nüõë Field hotelSameDestinationRestriction was removed from object type MetadataSearchDestinations\nüõë Field maxNumberGeoCodes was removed from object type MetadataSearchDestinations\nüõë Field maxNumberZones was removed from object type MetadataSearchDestinations\nüõë Field maxNumberCities was removed from object type MetadataSearchDestinations\nüõë Field optionTypes was removed from object type MetadataSearch\nüõë Field allowsPreferences was removed from object type MetadataBook\nüõë Field allowsUrlCard was removed from object type MetadataBook\nüõë Field generic was removed from object type MetadataData\nüõë Enum value domain_DESC was removed from enum OrganizationOrderByInput\nüõë Enum value domain_ASC was removed from enum OrganizationOrderByInput\nüõë Enum value name_DESC was removed from enum OrganizationOrderByInput\nüõë Enum value name_ASC was removed from enum OrganizationOrderByInput\nüõë Type HotelOptionType was removed\nüõë Type ReviewedHotelOptionType was removed\nüõë Type BookPreferenceValue was removed\nüõë Type BookPreferenceType was removed\nüõë Type BookPreferenceInfo was removed\nüõë Type ReviewedAllowsBookPreferences was removed\n‚ö†Ô∏è Enum value label_DESC was added to enum OrganizationOrderByInput\n‚ö†Ô∏è Enum value label_ASC was added to enum OrganizationOrderByInput\n‚úÖ Field recommendedNumberHotels was added to object type MetadataSearchDestinations\n‚úÖ Input field master was added to input object type AccessInput\n‚úÖ Field master was added to object type AccessData\n2020-01-07 ‚úÖ Input field country was added to input object type UpdateGroupInput\n‚úÖ Input field country was added to input object type CreateOrganizationInput\n‚úÖ Input field deletedAt_gte was added to input object type HotelXHotelFilterInput\n‚úÖ Input field deletedAt_gt was added to input object type HotelXHotelFilterInput\n‚úÖ Input field deletedAt_lte was added to input object type HotelXHotelFilterInput\n‚úÖ Input field deletedAt_lt was added to input object type HotelXHotelFilterInput\n‚úÖ Input field deletedAt_not_in was added to input object type HotelXHotelFilterInput\n‚úÖ Input field deletedAt_in was added to input object type HotelXHotelFilterInput\n‚úÖ Field totalCount was added to object type OrganizationConnection\n‚úÖ Field adviseMessage was added to object type OrganizationConnection\n‚úÖ Field totalCount was added to object type ProfileConnection\n‚úÖ Field adviseMessage was added to object type ProfileConnection\n‚úÖ Field totalCount was added to object type ClientConnection\n‚úÖ Field adviseMessage was added to object type ClientConnection\n‚úÖ Field totalCount was added to object type SupplierConnection\n‚úÖ Field adviseMessage was added to object type SupplierConnection\n‚úÖ Field totalCount was added to object type MemberConnection\n‚úÖ Field adviseMessage was added to object type MemberConnection\n‚úÖ Field totalCount was added to object type GroupConnection\n‚úÖ Field adviseMessage was added to object type GroupConnection\n‚úÖ Field OrganizationData.allMembers description changed from Response all members in this group's childrens (hierarchically) to Response all members in this group's childrens (hierarchically)\n‚úÖ Field allProfiles was added to object type OrganizationData\n‚úÖ Field allClients was added to object type OrganizationData\n‚úÖ Field allSuppliers was added to object type OrganizationData\n‚úÖ Field allAccesses was added to object type OrganizationData\n‚úÖ Field country was added to object type OrganizationData\n‚úÖ Field totalCount was added to object type AccessConnection\n‚úÖ Field adviseMessage was added to object type AccessConnection\n‚úÖ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n‚úÖ Argument orderBy: OrganizationOrderByInput added to field AdminQuery.organizations\n‚úÖ Type OrganizationOrderByInput was added\n2019-12-17 üõë Argument token: String was removed from field HotelXQuery.search\nüõë Field PageInfo.endCursor changed type from String! to String\nüõë Field PageInfo.startCursor changed type from String! to String\n‚úÖ Description Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) . on type AlertUpdateConfigurationInputPeakTraffic has changed to Configuration update for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .\n‚úÖ Input field AlertUpdateInput.configurationAverageTime description changed from average time configuration to average time configuration\n‚úÖ Input field legacyLink was added to input object type AccessInput\n‚úÖ Description for enum value ConditionType.LT changed from Less-than to \u0026lt;\n‚úÖ Description for enum value ConditionType.LTE changed from Less-than or equal to to \u0026lt;=\n‚úÖ Description for enum value ConditionType.GT changed from Greater-than to \u0026gt;\n‚úÖ Description for enum value ConditionType.GTE changed from Greater-than or equal to to \u0026gt;=\n‚úÖ Input field AlertCriteriaInput.shared description changed from List of shared type to List of shared type\n‚úÖ Field PaymentXQuery.storedCard description changed from Returns a stored card information. to Returns a stored card information.\n‚úÖ Field PaymentXQuery.allStoredCards description changed from Returns the stored card list. For security, this query never will return clear card information. to Returns the stored card list. For security, this query never will return clear card information.\n‚úÖ Input field BusinessRulesInput.optionsQuota description changed from Options quota per search. Maximum numbers of options to be returned by the search query. to Options quota per search. Maximum numbers of options to be returned by the search query. @deprecated(reason: \u0026quot;deprecated from 2019-12-04. This option will be only configurable by settings.\u0026quot;)\n‚úÖ Input field HotelSettingsInput.clientTokens description changed from Used to identify the origin of the request, this is only used in plugins. to Used to identify the origin of the request, this is only used in plugins.\n‚úÖ Field Room.features description changed from List of features of this room to List of features of this room\n‚úÖ Field MandatoryFee.mandatoryFeeCode description changed from Native supplier Mandatry Fee to Native supplier Mandatry Fee\n‚úÖ Field GiataData.updatedAt description changed from Date of last Giata update for this code. to Date of last Giata update for this code.\n‚úÖ Field GiataData.href description changed from Giata url for the hotel info. to Giata url for the hotel info.\n‚úÖ Field metadata was added to object type HotelXQuery\n‚úÖ Field OrganizationData.allMembers description changed from Response all members in this group's childrens (hierarchically) to Response all members in this group's childrens (hierarchically)\n‚úÖ Field legacyLink was added to object type AccessData\n‚úÖ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n‚úÖ Type LegacyLinkInput was added\n‚úÖ Type HotelXMetadataQueryInput was added\n‚úÖ Type MetadataGeneric was added\n‚úÖ Type MetadataStatic was added\n‚úÖ Type MetadataContent was added\n‚úÖ Type MetadataCancel was added\n‚úÖ Type MetadataBookingList was added\n‚úÖ Type MetadataBooking was added\n‚úÖ Type BookPreferenceValue was added\n‚úÖ Type BookPreferenceType was added\n‚úÖ Type BookPreferenceInfo was added\n‚úÖ Type ReviewedAllowsBookPreferences was added\n‚úÖ Type MetadataBook was added\n‚úÖ Type MetadataQuote was added\n‚úÖ Type ReviewedText was added\n‚úÖ Type HotelOptionType was added\n‚úÖ Type ReviewedHotelOptionType was added\n‚úÖ Type ReviewedPaymentType was added\n‚úÖ Type AgeRange was added\n‚úÖ Type ReviewedAgeRanges was added\n‚úÖ Type MetadataBeds was added\n‚úÖ Type ReviewedRateRule was added\n‚úÖ Type RequiredRoomWithSamePaxConfiguration was added\n‚úÖ Type HotelPaxType was added\n‚úÖ Type MetadataCandidate was added\n‚úÖ Type ReviwedPaxTypeRangeInRoomCandidates was added\n‚úÖ Type MetadataRoomCandidates was added\n‚úÖ Type ReviewedBool was added\n‚úÖ Type ReviewedInt was added\n‚úÖ Type MetadataSearchDestinations was added\n‚úÖ Type MetadataSearch was added\n‚úÖ Type MetadataData was added\n‚úÖ Type Metadata was added\n‚úÖ Type MetadataEdge was added\n‚úÖ Type MetadataConnection was added\n‚úÖ Type LegacyLink was added\n2019-12-03 ‚úÖ Input field HotelXDefaultSettingsDataInput.markets changed type from [String!]! to [String!]\n2019-11-28 üõë Input field markets was added to input object type HotelXDefaultSettingsDataInput\nüõë Field HotelOptionSearch.market changed type from String! to String\nüõë Field HotelXDefaultSettingsData.market changed type from String! to String\n‚ö†Ô∏è Enum value AMENITY_MAP was added to enum PluginType\n‚ö†Ô∏è Enum value MARKETS_GROUP was added to enum PluginType\n‚úÖ Input field HotelXDefaultSettingsDataInput.market changed type from String! to String\n‚úÖ Input field HotelXDefaultSettingsDataInput.market description changed from Targeted zone, country or point of sale to be used in request. to Targeted zone, country or point of sale to be used in request. @deprecated(reason: \u0026quot;deprecated from 2019-12-11.\u0026quot;)\n‚úÖ Field paymentCard was added to object type HotelBookingDetail\n‚úÖ Input field HotelCriteriaSearchInput.market description changed from Targeted zone, country or point-ofsale-to be used in request. to Targeted zone, country or point-ofsale-to be used in request. @deprecated(reason: \u0026quot;deprecated from 2019-12-11.\u0026quot;)\n‚úÖ Input field markets was added to input object type HotelCriteriaSearchInput\n‚úÖ Field code was added to object type Surcharge\n‚úÖ Deprecation reason on field HotelOptionSearch.market has changed from to deprecated from 2019-12-11.\n‚úÖ Field markets was added to object type HotelOptionSearch\n‚úÖ Deprecation reason on field HotelXDefaultSettingsData.market has changed from to deprecated from 2019-12-11.\n‚úÖ Field markets was added to object type HotelXDefaultSettingsData\n‚úÖ Type PaymentCardData was added\n‚úÖ Type PaymentCard was added\n2019-11-20 ‚úÖ Description The result could be one of these types on type Connection has changed to ``\n‚úÖ Field HotelBookingDetail.quotePrice description changed from Specifies the price of the previous OptionQuote in Book service. to Specifies the price of the previous OptionQuote. Returned only if the shown Book price differs from the price shown at the Quote Option. If the price does not change, this field will be returned Null.\n‚úÖ Field HotelOptionQuote.searchPrice description changed from Specifies the price of the previous search option to Specifies the price of the previous Search Option. Returned only if the shown Quote price differs from the price shown at the Search Option. If the price does not change, this field will be returned Null.\n‚úÖ Field allAmenities was added to object type RoomData\n‚úÖ Field allAmenities was added to object type HotelData\n‚úÖ Type HotelXMapSettingsInput was added\n‚úÖ Type HotelXMapOptionInput was added\n‚úÖ Type HotelXMappedCode was added\n‚úÖ Type HotelXAmenityData was added\n‚úÖ Type HotelXAmenity was added\n‚úÖ Type HotelXAmenityEdge was added\n‚úÖ Type HotelXAmenityConnection was added\n2019-10-24 ‚úÖ Input field HotelCommitInput.commitReference changed type from String! to String\n‚úÖ Input field HotelCommitInput.commitReference description changed from Contains the commit reference that has been returned in Book response. to Contains the commit reference that has been returned in Book response. @deprecated(reason: \u0026quot;deprecated from 2018-10-21. Please, use reference\u0026quot;)\n‚úÖ Input field reference was added to input object type HotelCommitInput\n‚úÖ Field HotelXMutation.commit description changed from `toCommits an existing booking`\n‚úÖ Deprecation reason on field Reference.commit has changed from to deprecated from 2018-10-21. Please, use SupplierReference\n‚úÖ Field Price.gross changed type from Float to Float!\n‚úÖ Field commitStatusService was added to object type HotelXQuery\n‚úÖ Type HotelXCommitReferenceInput was added\n2019-10-21 üõë Field RoomData.amenities changed type from [Amenity!] to [AmenityStatic!]\nüõë Argument languages: [Language!] was removed from field Amenity.texts\nüõë Field Amenity.texts changed type from [Text!]! to String!\nüõë Field HotelData.amenities changed type from [Amenity!] to [AmenityStatic!]\n‚úÖ Input field delete was added to input object type AlertUpdateInput\n‚úÖ Field amenities was added to object type Room\n‚úÖ Field amenities was added to object type HotelOptionSearch\n‚úÖ Description Indicates where it applies on type ApplicationAreaType has changed to ``\n‚úÖ Field Amenity.texts description changed from Contains the descriptive to Contains the descriptive of amenity.\n‚úÖ Field value was added to object type Amenity\n‚úÖ Field amenityCodeSupplier was added to object type Amenity\n‚úÖ Field HotelData.propertyType description changed from Property information to Indicates property type.\n‚úÖ Deprecation reason on field HotelData.property has changed from to Deprecated from 2019-10-16. Redundant information\n‚úÖ Type AmenityStatic was added\n2019-10-15 ‚ö†Ô∏è Enum value PENDING_COMMIT was added to enum BookStatusType\n‚úÖ Input field commitRequired was added to input object type DefaultSettingsInput\n‚úÖ Field commit was added to object type HotelXMutation\n‚úÖ Input field rangeFilters was added to input object type LoggingLegacyFilterInput\n‚úÖ Input field shared was added to input object type AlertCriteriaInput\n‚úÖ Type for argument criteria on field AlertsXQuery.alerts changed from AlertCriteriaInput! to AlertCriteriaInput\n‚úÖ Description for enum value BookStatusType.UNKNOWN changed from The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown. It is the client‚Äôs responsibility to check if the booking is OK to The reservation process through TGX was completed but due to a supplier error or a timeout, the reservation status is unknown. It is the client‚Äôs responsibility to check if the booking is OK.\n‚úÖ Description for enum value BookStatusType.CANCELLED changed from The status of the booking is cancelled to The status of the booking is cancelled.\n‚úÖ Description for enum value BookStatusType.ON_REQUEST changed from The reservation was completed but the product is still not available, so the reservation goes into a waiting list. It is the client‚Äôs responsibility to check if the booking is OK to The reservation was completed but the product is still not available, so the reservation goes into a waiting list. It is the client‚Äôs responsibility to check if the booking is OK.\n‚úÖ Description for enum value BookStatusType.KO changed from The status of the booking is NOT OK to The status of the booking is KO\n‚úÖ Description for enum value BookStatusType.OK changed from The reservation was completed with no problems to The reservation was completed with no problems.\n‚úÖ Field commit was added to object type Reference\n‚úÖ Input field commitRequired was added to input object type SettingsBaseInput\n‚úÖ Input field commitRequired was added to input object type HotelSettingsInput\n‚úÖ Field deadline was added to object type CancelPenalty\n‚úÖ Field area was added to object type RoomData\n‚úÖ Field beds was added to object type RoomData\n‚úÖ Field medias was added to object type RoomData\n‚úÖ Field views was added to object type RoomData\n‚úÖ Field amenities was added to object type RoomData\n‚úÖ Field state was added to object type Location\n‚úÖ Field checkOut was added to object type HotelData\n‚úÖ Field checkIn was added to object type HotelData\n‚úÖ Field mandatoryFees was added to object type HotelData\n‚úÖ Field propertyType was added to object type HotelData\n‚úÖ Type HotelCommitInput was added\n‚úÖ Type HotelCommitDetails was added\n‚úÖ Type HotelCommitPayload was added\n‚úÖ Type ConditionType was added\n‚úÖ Type TermType was added\n‚úÖ Type RangeFilter was added\n‚úÖ Type SharedType was added\n‚úÖ Type Time was added\n‚úÖ Type TimeRange was added\n‚úÖ Type CheckInformation was added\n‚úÖ Type PriceStatic was added\n‚úÖ Type MandatoryFee was added\n‚úÖ Type PropertyType was added\n‚úÖ Type Area was added\n‚úÖ Type BedStatic was added\n‚úÖ Type View was added\n‚úÖ Type State was added\n2019-09-19 üõë Input field UpdateProfileInput.type changed type from ProfileType to [ProfileType]\nüõë Input field CreateProfileInput.type changed type from ProfileType! to [ProfileType!]!\n‚úÖ Description Map codes. on type Map has changed to Map codes. @deprecated(reason: \u0026quot;deprecated from 2019-09-10. not operating or being used\u0026quot;)\n‚úÖ Description Mapping about client codes with the equivalence per supplier. on type MappingEntity has changed to Mapping about client codes with the equivalence per supplier. @deprecated(reason: \u0026quot;deprecated from 2019-09-10. not operating or being used\u0026quot;)\n‚úÖ Description Returns the differents group contexts on type MappingContext has changed to Returns the differents group contexts @deprecated(reason: \u0026quot;deprecated from 2019-09-10. not operating or being used\u0026quot;)\n‚úÖ Description Returns the mapping for a group. on type Mapping has changed to Returns the mapping for a group. @deprecated(reason: \u0026quot;deprecated from 2019-09-10. not operating or being used\u0026quot;)\n‚úÖ Field HotelXQuery.mapping description changed from Returns map codes of a group. You can get hotel map, room map, and board map. to Returns map codes of a group. You can get hotel map, room map, and board map. @deprecated(reason: \u0026quot;deprecated from 2019-09-10. not operating or being used\u0026quot;)\n‚úÖ Field group was added to object type MacroPermissionData\n‚úÖ Field macroPermissions was added to object type MemberData\n‚úÖ Argument contains: String added to field AdminQuery.organizations\n2019-08-29 üõë Input field ReferenceFilter.supplier changed type from [String] to [String!]\nüõë Input field ReferenceFilter.client changed type from [String] to [String!]\n‚ö†Ô∏è Enum value PRICE was added to enum AlertType\n‚úÖ Input field configurationPrice was added to input object type AlertUpdateInput\n‚úÖ Input field AlertConfigurationInputAverageTime.groupBy description changed from Possibility to group by traffic and calculate its parameters separately to Possibility to group by traffic and calculate its parameters separately\n‚úÖ Input field configurationPrice was added to input object type AlertInput\n‚úÖ Input field hotel was added to input object type ReferenceFilter\n‚úÖ Input field LoggingLegacyFilterInput.to changed type from DateTime! to DateTime\n‚úÖ Input field LoggingLegacyFilterInput.from changed type from DateTime! to DateTime\n‚úÖ Input field groups was added to input object type LoggingLegacyFilterInput\n‚úÖ Input field timeRange was added to input object type LoggingLegacyFilterInput\n‚úÖ Field price was added to object type AlertTypeConfiguration\n‚úÖ Field legacyRoomId was added to object type Room\n‚úÖ Deprecation reason on field AdminQuery.entities has changed from `todeprecated from 2019-08-21. Only for statsX product. Use client, supplier, accesess queries`\n‚úÖ Type AlertPriceUpdateInput was added\n‚úÖ Type AlertUpdateConfigurationInputPrice was added\n‚úÖ Type AlertPriceInput was added\n‚úÖ Type AlertGroupsInsights was added\n‚úÖ Type AlertConfigurationInputPrice was added\n‚úÖ Type RangePrice was added\n‚úÖ Type CheckPrice was added\n‚úÖ Type ModePrice was added\n‚úÖ Type AlertPrice was added\n2019-08-19 üõë Input field ReferenceFilter.supplier changed type from String to [String]\nüõë Input field ReferenceFilter.client changed type from String to [String]\n‚úÖ Description Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information on type PaymentCardInput has changed to Input PaymentCard, if the payment type is DIRECT, CARD_BOOKING or CARD_CHECK_IN, then is mandatory to specify the payment card information\n2019-08-08 ‚ö†Ô∏è Union member API was added to Union type AlertObjectsUnion\n‚úÖ Input field api was added to input object type AlertUpdateConfigurationInputPeakTraffic\n‚úÖ Input field api was added to input object type AlertUpdateConfigurationInputAverageTime\n‚úÖ Input field api was added to input object type AlertUpdateConfigurationInputErrorRate\n‚úÖ Input field api was added to input object type AlertUpdateConfigurationInputNoTraffic\n‚úÖ Input field api was added to input object type AlertConfigurationInputPeakTraffic\n‚úÖ Input field api was added to input object type AlertConfigurationInputAverageTime\n‚úÖ Input field api was added to input object type AlertConfigurationInputErrorRate\n‚úÖ Input field api was added to input object type AlertConfigurationInputNoTraffic\n‚úÖ Field revokeMacroPermissionsFromMember was added to object type AdminMutation\n‚úÖ Field grantMacroPermissionsToMember was added to object type AdminMutation\n‚úÖ Field suitFolder was added to object type AdminMutation\n‚úÖ Input field HotelXDestinationListInput.access changed type from ID! to ID\n‚úÖ Input field group was added to input object type HotelXDestinationListInput\n‚úÖ Type GrantMacroPermissionInput was added\n‚úÖ Type FolderTemplate was added\n‚úÖ Type SuitFolderInput was added\n2019-08-05 üõë Input field PaymentCardInput.cardType changed type from PaymentCardType! to String\nüõë Input field ActiveFilterInput.codes changed type from [ID!] to [ID!]!\n‚úÖ Input field PaymentCardInput.cardType description changed from Indicates the supported card type, the supported card for this option is shown in Quote step. to Indicates the supported card type, the supported card for this option is shown in Quote step. @deprecated(reason: \u0026quot;deprecated from 2019-07-31. Please, use type\u0026quot;)\n‚úÖ Input field type was added to input object type PaymentCardInput\n‚úÖ Field AlertConfiguration.groupBy description changed from Group by traffic and calculate its parameters separately to Group by traffic and calculate its parameters separately\n‚úÖ Field comercialType was added to object type AlertConfiguration\n‚úÖ Field macroPermissions was added to object type ProductData\n‚úÖ Type Permission was added\n‚úÖ Type MacroPermissionData was added\n‚úÖ Type MacroPermission was added\n‚úÖ Type MacroPermissionEdge was added\n‚úÖ Type MacroPermissionsConnection was added\n2019-07-31 üõë Input field PaymentCardInput.cardType changed type from String! to PaymentCardType!\nüõë Input field owner was removed from input object type UpdateProfileInput\nüõë Input field owner was removed from input object type CreateProfileInput\nüõë Field HotelOptionQuote.cardTypes changed type from [String!] to [PaymentCardType!]\nüõë Field HotelData.cardTypes changed type from [String!] to [PaymentCardType!]\n‚úÖ Input field PaymentCardInput.cardType description changed from Indicates the card type. to Indicates the supported card type, the supported card for this option is shown in Quote step.\n‚úÖ Input field api was added to input object type GrantPermissionsInput\n‚úÖ Field grantProfileToGroup was added to object type AdminMutation\n‚úÖ Field deleteProfile was added to object type AdminMutation\n‚úÖ Input field StatsFilterInput.to changed type from DateTime! to DateTime\n‚úÖ Input field StatsFilterInput.to description changed from To date of search to To date of search @deprecated(reason: \u0026quot;deprecated from 2019-07-19. Added new field timeRange.\u0026quot;)\n‚úÖ Input field StatsFilterInput.from changed type from DateTime! to DateTime\n‚úÖ Input field StatsFilterInput.from description changed from From date of search to From date of search @deprecated(reason: \u0026quot;deprecated from 2019-07-19. Added new field timeRange.\u0026quot;)\n‚úÖ Input field StatsFilterInput.mode description changed from Buyer or Seller @deprecated(reason: \u0026quot;deprecated from 2019-04-11. Superfluous field.\u0026quot;) to Buyer or Seller @deprecated(reason: \u0026quot;deprecated from 2019-04-11. Superfluous field.\u0026quot;)\n‚úÖ Input field timeRange was added to input object type StatsFilterInput\n‚úÖ Field adviseMessage was added to object type StatsConnection\n‚úÖ Enum value BookStatusType.KO was deprecated with reason Deprecated from 2019-07-29\n‚úÖ Field HotelOptionQuote.cardTypes description changed from List of credit cards to List of credit cards allowed for this option\n‚úÖ Deprecation reason on field Bed.description has changed from `toDeprecated from 2019-07-29`\n‚úÖ Field occupancies was added to object type RoomData\n‚úÖ Field source was added to object type RoomData\n‚úÖ Field rooms was added to object type HotelData\n‚úÖ Field adviseMessageCatalog was added to object type ProductData\n‚úÖ Argument contains: String added to field AdminQuery.groups\n‚úÖ Type DeleteProfileInput was added\n‚úÖ Type AbsoluteInput was added\n‚úÖ Type Duration was added\n‚úÖ Type RelativeInput was added\n‚úÖ Type TimeRangeInput was added\n‚úÖ Type OccupancyRange was added\n‚úÖ Type OccupancyStatic was added\n‚úÖ Type PaymentCardType was added\n2019-07-15 üõë Field ProfileData.type changed type from ProfileType to [ProfileType!]!\n‚úÖ Input field reference was added to input object type LoggingLegacyFilterInput\n‚úÖ Field getActiveConnection was added to object type StatsQuery\n‚úÖ Deprecation reason on field Destination.error has changed from `toDeprecated from 2019-07-03`\n‚úÖ Field adviseMessage was added to object type Destination\n‚úÖ Deprecation reason on field RoomStatic.error has changed from `toDeprecated from 2019-07-03`\n‚úÖ Field RoomStatic.error description changed from Errors that abort services to Errors that abort services.\n‚úÖ Field adviseMessage was added to object type RoomStatic\n‚úÖ Description By default: Logical AND on all given filters. only hotels that match condition are returned on type HotelXHotelFilterInput has changed to By default: Logical AND on all given filters. Hotels data are returned only if match condition\n‚úÖ Deprecation reason on field Hotel.error has changed from `toDeprecated from 2019-07-03`\n‚úÖ Field adviseMessage was added to object type Hotel\n‚úÖ Deprecation reason on field Category.error has changed from `toDeprecated from 2019-07-03`\n‚úÖ Field adviseMessage was added to object type Category\n‚úÖ Deprecation reason on field Board.error has changed from `toDeprecated from 2019-07-03`\n‚úÖ Field Board.error description changed from Errors that abort services to Errors that abort services.\n‚úÖ Field adviseMessage was added to object type Board\n‚úÖ Field profiles was added to object type GroupData\n‚úÖ Field profiles was added to object type OrganizationData\n‚úÖ Type ReferenceFilter was added\n‚úÖ Type ActiveFilterInput was added\n‚úÖ Type Connection was added\n‚úÖ Type ConnectionEdge was added\n‚úÖ Type ConnectionConnection was added\n2019-07-04 ‚úÖ Field updateSystem was added to object type AdminMutation\n‚úÖ Field createSystem was added to object type AdminMutation\n‚úÖ Field hotel was added to object type Reference\n‚úÖ Field SupplierData.owner changed type from Organization to Organization!\n‚úÖ Field system was added to object type SupplierData\n‚úÖ Field systems was added to object type AdminQuery\n‚úÖ Field logging was added to object type Query\n‚úÖ Type EnvironmentType was added\n‚úÖ Type LoggingFilterInput was added\n‚úÖ Type TGXFilter was added\n‚úÖ Type LoggingEdge was added\n‚úÖ Type LoggingConnection was added\n‚úÖ Type TGX was added\n‚úÖ Type LoggingData was added\n‚úÖ Type Logging was added\n‚úÖ Type UpdateSystemInput was added\n‚úÖ Type CreateSystemInput was added\n‚úÖ Type ErrorFilter was added\n‚úÖ Type LoggingLegacyFilterInput was added\n‚úÖ Type Worker was added\n‚úÖ Type CloudEnvironment was added\n‚úÖ Type EnvironmentName was added\n‚úÖ Type Environment was added\n‚úÖ Type LoggingLegacyData was added\n‚úÖ Type LoggingLegacy was added\n‚úÖ Type LoggingLegacyEdge was added\n‚úÖ Type LoggingLegacyConnection was added\n‚úÖ Type LoggingQuery was added\n‚úÖ Type SystemFilter was added\n‚úÖ Type SystemEdge was added\n‚úÖ Type SystemConnection was added\n‚úÖ Type SystemData was added\n‚úÖ Type System was added\n2019-06-25 üõë Enum value XTG was removed from enum AlertGroups\nüõë Enum value SUPPLIER_EXTERNAL was removed from enum AlertGroups\n‚úÖ Input field label was added to input object type CreateOrganizationInput\n‚úÖ Input field HotelXCategoryQueryInput.access changed type from ID! to ID\n‚úÖ Input field group was added to input object type HotelXCategoryQueryInput\n‚úÖ Argument api: [ID!] added to field AdminQuery.groups\n2019-06-13 ‚ö†Ô∏è Enum value SCHEDULER was added to enum TrafficType\n‚ö†Ô∏è Enum value PAYX was added to enum PaymentType\n‚úÖ Input field AlertUpdateConfigurationInputPeakTraffic.client description changed from Possibility to filter traffic by clients (hub user) to Possibility to filter traffic by clients\n‚úÖ Input field AlertUpdateConfigurationInputPeakTraffic.supplier description changed from Possibility to filter traffic by suppliers (hub provider) to Possibility to filter traffic by suppliers\n‚úÖ Input field AlertUpdateConfigurationInputAverageTime.client description changed from Possibility to filter traffic by clients (hub user) to Possibility to filter traffic by clients\n‚úÖ Input field AlertUpdateConfigurationInputAverageTime.supplier description changed from Possibility to filter traffic by suppliers (hub provider) to Possibility to filter traffic by suppliers\n‚úÖ Input field AlertUpdateConfigurationInputErrorRate.client description changed from Possibility to filter traffic by clients (hub user) to Possibility to filter traffic by clients\n‚úÖ Input field AlertUpdateConfigurationInputErrorRate.supplier description changed from Possibility to filter traffic by suppliers (hub provider) to Possibility to filter traffic by suppliers\n‚úÖ Input field AlertUpdateConfigurationInputNoTraffic.client description changed from Possibility to filter traffic by clients (hub user) to Possibility to filter traffic by clients\n‚úÖ Input field AlertUpdateConfigurationInputNoTraffic.supplier description changed from Possibility to filter traffic by suppliers (hub provider) to Possibility to filter traffic by suppliers\n‚úÖ Input field AlertConfigurationInputPeakTraffic.client description changed from Possibility to filter traffic by clients (hub user) to Possibility to filter traffic by clients\n‚úÖ Input field AlertConfigurationInputPeakTraffic.supplier description changed from Possibility to filter traffic by suppliers (hub provider) to Possibility to filter traffic by suppliers\n‚úÖ Input field AlertConfigurationInputAverageTime.client description changed from Possibility to filter traffic by clients (hub user) to Possibility to filter traffic by clients\n‚úÖ Input field AlertConfigurationInputAverageTime.supplier description changed from Possibility to filter traffic by suppliers (hub provider to Possibility to filter traffic by suppliers\n‚úÖ Input field AlertConfigurationInputErrorRate.client description changed from Possibility to filter traffic by clients (hub user) to Possibility to filter traffic by clients\n‚úÖ Input field AlertConfigurationInputErrorRate.supplier description changed from Possibility to filter traffic by suppliers (hub provider) to Possibility to filter traffic by suppliers\n‚úÖ Input field AlertConfigurationInputNoTraffic.client description changed from Possibility to filter traffic by clients (hub user) to Possibility to filter traffic by clients\n‚úÖ Input field AlertConfigurationInputNoTraffic.supplier description changed from Possibility to filter traffic by suppliers (hub provider) to Possibility to filter traffic by suppliers\n‚úÖ Description for enum value TrafficType.OPTIMIZED changed from Ratios calculated from traffic between Speed and seller to Ratios calculated from traffic between TGX's caches and seller\n‚úÖ Field billingSupplierCode was added to object type HotelBookingDetail\n‚úÖ Field supplierCode was added to object type RatePlan\n‚úÖ Field features was added to object type Room\n‚úÖ Field supplierCode was added to object type Room\n‚úÖ Argument label: String added to field AdminQuery.organizations\n‚úÖ Type Feature was added\n2019-05-30 üõë Field StatsInfo.hits changed type from Int! to Int64!\nüõë Field OperationDetailed.totalHits changed type from Int! to Int64!\nüõë Field StatsData.hits changed type from Int! to Int64!\n‚úÖ Type Int64 was added\n2019-05-30 ‚úÖ Description\nConfiguration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\non type AlertUpdateConfigurationInputAverageTime has changed to\nConfiguration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\n‚úÖ Input field AlertUpdateConfigurationInputAverageTime.minNumberRequests description changed from\nOPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\nto\nOPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\n‚úÖ Description\nConfiguration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.\non type AlertUpdateConfigurationInputErrorRate has changed to\nConfiguration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.\n‚úÖ Input field AlertUpdateConfigurationInputErrorRate.minNumberRequests description changed from\nOPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\nto\nOPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\n‚úÖ Description\nConfiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\non type AlertUpdateConfigurationInputNoTraffic has changed to\nConfiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\n‚úÖ Description\nConfiguration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .\non type AlertConfigurationInputPeakTraffic has changed to\nConfiguration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) . ‚úÖ Description\nConfiguration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\non type AlertConfigurationInputAverageTime has changed to\nConfiguration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\n‚úÖ Input field AlertConfigurationInputAverageTime.minNumberRequests description changed from\nOPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\nto\nOPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\n‚úÖ Description\nConfiguration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.\non type AlertConfigurationInputErrorRate has changed to\nConfiguration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.\n‚úÖ Input field AlertConfigurationInputErrorRate.minNumberRequests description changed from\nOPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\nto\nOPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\n‚úÖ Description\nConfiguration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\non type AlertConfigurationInputNoTraffic has changed to\nConfiguration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\n‚úÖ Description\nInput delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\non type DeltaPriceInput has changed to\nInput delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n‚úÖ Field GeonameData.type description changed from Indicates destination type, zone, city or country\nto\nHierarchy returned by geonames' service. It might change depending on the hotel and its location.\n‚úÖ Argument types: [OperationType!] added to field APIData.operations\n‚úÖ Argument types: [OperationType!] added to field AdminQuery.operations\n2019-05-23 üõë Input field AlertUpdateConfigurationInputPeakTraffic.group changed type from AlertGroupInput to [AlertGroupInput!]\nüõë Input field AlertUpdateConfigurationInputAverageTime.group changed type from AlertGroupInput to [AlertGroupInput!]\nüõë Input field AlertUpdateConfigurationInputErrorRate.group changed type from AlertGroupInput to [AlertGroupInput!]\nüõë Input field AlertUpdateConfigurationInputNoTraffic.group changed type from AlertGroupInput to [AlertGroupInput!]\nüõë Input field AlertConfigurationInputPeakTraffic.group changed type from AlertGroupInput! to [AlertGroupInput!]\nüõë Input field AlertConfigurationInputAverageTime.group changed type from AlertGroupInput! to [AlertGroupInput!]\nüõë Input field AlertConfigurationInputErrorRate.group changed type from AlertGroupInput! to [AlertGroupInput!]\nüõë Input field AlertConfigurationInputNoTraffic.group changed type from AlertGroupInput! to [AlertGroupInput!]\nüõë Field GeonameData.type changed type from DestinationType! to String!\n‚úÖ Input field AlertUpdateConfigurationInputPeakTraffic.group description changed from Possibility to filter traffic by groups. It is mandatory to set an ORG group type. Only ORG, FOLDER and PRODUCT group types are allowed to Must filter traffic by group. Only PRODUCT group type is allowed\n‚úÖ Description Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0. on type AlertUpdateConfigurationInputAverageTime has changed to Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\n‚úÖ Input field AlertUpdateConfigurationInputAverageTime.minNumberRequests description changed from OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert. to OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\n‚úÖ Description Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0. on type AlertUpdateConfigurationInputErrorRate has changed to Configuration update for error rate alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are to options. - OPTION 1: Can verify traffic of a time frame. Set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Set window fild as 0 and minNumRequest higher than 0.\n‚úÖ Input field AlertUpdateConfigurationInputErrorRate.minNumberRequests description changed from OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert. to OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\n‚úÖ Description Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert. on type AlertUpdateConfigurationInputNoTraffic has changed to Confiuration update for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\n‚úÖ Description Configuration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) . on type AlertConfigurationInputPeakTraffic has changed to Configuration for PEAK_TRAFFIC alert type. Peak traffic is used to verify traffic comparing volum of requests between to time frame (window and historical window) .\n‚úÖ Description Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0. on type AlertConfigurationInputAverageTime has changed to Configuration for AVERAGE_TIME. Average time is used to verify requests times. There are 3 options: - OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0. - OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0. - OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.\n‚úÖ Input field AlertConfigurationInputAverageTime.minNumberRequests description changed from OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert. to OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\n‚úÖ Description Configuration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0. on type AlertConfigurationInputErrorRate has changed to Configuration for ERROR_RATE alert type. Error rate alert is used to verify traffic comparing its error codes. Ther are two options. - OPTION 1: Can verify traffic of a time frame. Must set window field higher than 0. - OPTION 2: Can verify traffic of a specific number of requests. Must set window field as 0 and minNumRequest higher than 0.\n‚úÖ Input field AlertConfigurationInputErrorRate.minNumberRequests description changed from OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert. to OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.\n‚úÖ Description Configuration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert. on type AlertConfigurationInputNoTraffic has changed to Configuration for NO_TRAFFIC alert type. No traffic alert is used to verify if there is traffic according to the parameters of the alert.\n‚úÖ Description Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method. on type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n‚úÖ Field quotePrice was added to object type HotelBookingDetail\n‚úÖ Field searchPrice was added to object type HotelOptionQuote\n‚úÖ Deprecation reason on field GeonameData.type has changed from Field is deprecated from 2019-04-30 to ``\n‚úÖ Field adviseMessageCatalog was added to object type APIData\n‚úÖ Type PriceChange was added\n2019-05-16 üõë Input field basicInfoMandatory_in was removed from input object type HotelXHotelFilterInput\nüõë Input field basicInfo_in was removed from input object type HotelXHotelFilterInput\nüõë Input field isoCode_in was removed from input object type HotelXHotelFilterInput\nüõë Field Location.closestDestination changed type from DestinationData! to DestinationData\nüõë Field Location.country changed type from Country! to Country\nüõë Field HotelData.categoryCode changed type from String! to String\nüõë Field HotelData.hotelName changed type from String! to String\n‚úÖ Input field isSchedulerActive was added to input object type AccessInput\n‚úÖ Description By default: Logical AND on all given filters. on type HotelXHotelFilterInput has changed to By default: Logical AND on all given filters. only hotels that match condition are returned\n‚úÖ Input field HotelXHotelFilterInput.coordinates_in description changed from Coordinates returned in Hotel to Hotel Coordinates required for all Hotels\n‚úÖ Input field HotelXHotelFilterInput.name_in description changed from Name returned in Hotel to Hotel Name required for all Hotels\n‚úÖ Input field HotelXHotelFilterInput.destination_in description changed from Destination returnd in Hotel to Hotel destination required for all Hotels\n‚úÖ Input field HotelXHotelFilterInput.category_in description changed from Category returned in Hotel to Hotel Category code required for all Hotels\n‚úÖ Input field HotelXHotelFilterInput.country_in description changed from Country returned in Hotel to Hotel Country required for all Hotels\n‚úÖ Input field HotelXHotelFilterInput.updatedAt_gte description changed from All values greater than or equal the given value. to Return hotels with update time greater than or equal the given value.\n‚úÖ Input field HotelXHotelFilterInput.updatedAt_gt description changed from All values greater than the given value. to Return hotels with update time greater than the given value.\n‚úÖ Input field HotelXHotelFilterInput.updatedAt_lte description changed from All values less than or equal the given value. to Return hotels with update time less than or equal the given value.\n‚úÖ Input field HotelXHotelFilterInput.updatedAt_lt description changed from All values less than the given value. to Return hotels with update time less than the given value.\n‚úÖ Input field HotelXHotelFilterInput.updatedAt_not_in description changed from All values that are not contained in given list. to Return hotels with update time that are not contained in given list.\n‚úÖ Input field HotelXHotelFilterInput.updatedAt_in description changed from All values that are contained in given list. to Return hotels with update time that are contained in given list.\n‚úÖ Input field HotelXHotelFilterInput.createdAt_gte description changed from All values greater than or equal the given value. to Return hotels with creation time greater than or equal the given value.\n‚úÖ Input field HotelXHotelFilterInput.createdAt_gt description changed from All values greater than the given value. to Return hotels with creation time greater than the given value.\n‚úÖ Input field HotelXHotelFilterInput.createdAt_lte description changed from All values less than or equal the given value. to Return hotels with creation time less than or equal the given value.\n‚úÖ Input field HotelXHotelFilterInput.createdAt_lt description changed from All values less than the given value. to Return hotels with creation time less than the given value.\n‚úÖ Input field HotelXHotelFilterInput.createdAt_not_in description changed from All values that are not contained in given list. to Return hotels with creation time that are not contained in given list.\n‚úÖ Input field HotelXHotelFilterInput.createdAt_in description changed from All values that are contained in given list. to Return hotels with creation time in given list.\n2019-05-06 üõë Input field AlertUpdateConfigurationInputPeakTraffic.group changed type from [AlertGroupInput!] to AlertGroupInput\nüõë Input field AlertUpdateConfigurationInputAverageTime.group changed type from [AlertGroupInput!] to AlertGroupInput\nüõë Input field AlertUpdateConfigurationInputErrorRate.group changed type from [AlertGroupInput!] to AlertGroupInput\nüõë Input field AlertUpdateConfigurationInputNoTraffic.group changed type from [AlertGroupInput!] to AlertGroupInput\nüõë Input field editor was removed from input object type AlertUpdateInput\nüõë Input field AlertConfigurationInputPeakTraffic.group changed type from [AlertGroupInput!]! to AlertGroupInput!\nüõë Input field AlertConfigurationInputAverageTime.group changed type from [AlertGroupInput!]! to AlertGroupInput!\nüõë Input field AlertConfigurationInputErrorRate.group changed type from [AlertGroupInput!]! to AlertGroupInput!\nüõë Input field type was removed from input object type AlertGroupInput\nüõë Input field AlertConfigurationInputNoTraffic.group changed type from [AlertGroupInput!]! to AlertGroupInput!\nüõë Input field group was added to input object type AlertInput\nüõë Input field editor was removed from input object type AlertInput\nüõë Type for argument criteria on field AlertsXQuery.alerts changed from AlertCriteriaInput to AlertCriteriaInput!\n‚úÖ Input field AlertUpdateConfigurationInputAverageTime.group description changed from Possibility to filter traffic by groups. It is mandatory to set an ORG group type. Only ORG, FOLDER and PRODUCT group types are allowed to Must filter traffic by group. Only PRODUCT group type is allowed\n‚úÖ Input field AlertUpdateConfigurationInputErrorRate.group description changed from Possibility to filter traffic by groups. It is mandatory to set an ORG group type. Only ORG, FOLDER and PRODUCT group types are allowed to Must filter traffic by group. Only PRODUCT group type is allowed\n‚úÖ Input field AlertUpdateConfigurationInputNoTraffic.group description changed from Possibility to filter traffic by groups. It is mandatory to set an ORG group type. Only ORG, FOLDER and PRODUCT group types are allowed to Must filter traffic by group. Only PRODUCT group type is allowed\n‚úÖ Input field AlertConfigurationInputPeakTraffic.group description changed from Possibility to filter traffic by groups. It is mandatory to set an ORG group type. Only ORG, FOLDER and PRODUCT group types are allowed to Must filter traffic by group. Only PRODUCT group type is allowed\n‚úÖ Input field AlertConfigurationInputAverageTime.group description changed from Possibility to filter traffic by groups. It is mandatory to set an ORG group type. Only ORG, FOLDER and PRODUCT group types are allowed to Must filter traffic by group. Only PRODUCT group type is allowed\n‚úÖ Input field AlertConfigurationInputErrorRate.group description changed from Possibility to filter traffic by groups. It is mandatory to set an ORG group type. Only ORG, FOLDER and PRODUCT group types are allowed to Must filter traffic by group. Only PRODUCT group type is allowed\n‚úÖ Input field AlertConfigurationInputNoTraffic.group description changed from Possibility to filter traffic by groups. It is mandatory to set an ORG group type. Only ORG, FOLDER and PRODUCT group types are allowed to Must filter traffic by group. Only PRODUCT group type is allowed\n‚úÖ Input field groups was added to input object type AlertCriteriaInput\n2019-05-02 ‚úÖ Input field retrieveAssets was added to input object type StatsFilterInput\n2019-04-30 ‚úÖ Input field basicInfoMandatory_in was added to input object type HotelXHotelFilterInput\n‚úÖ Input field basicInfo_in was added to input object type HotelXHotelFilterInput\n‚úÖ Input field isoCode_in was added to input object type HotelXHotelFilterInput\n‚úÖ Input field coordinates_in was added to input object type HotelXHotelFilterInput\n‚úÖ Input field name_in was added to input object type HotelXHotelFilterInput\n‚úÖ Input field destination_in was added to input object type HotelXHotelFilterInput\n‚úÖ Input field category_in was added to input object type HotelXHotelFilterInput\n‚úÖ Input field country_in was added to input object type HotelXHotelFilterInput\n‚úÖ Deprecation reason on field GeonameData.type has changed from `toField is deprecated from 2019-04-30`\n‚úÖ Input field entityIDs was added to input object type ProfileFilter\n‚úÖ Field siblings was added to object type GroupData\n‚úÖ Field OrganizationData.allMembers description changed from Response all members in this group's childrens (hierarchically) to Response all members in this group's childrens (hierarchically)\n2019-04-24 üõë Input field isActive was added to input object type UpdateMemberInput\nüõë Input field label was added to input object type UpdateMemberInput\nüõë Input field method was removed from input object type UpdateMemberInput\nüõë Input field resources was removed from input object type UpdateMemberInput\nüõë Input field role was removed from input object type UpdateMemberInput\nüõë Input field group was removed from input object type UpdateMemberInput\nüõë Input field info was removed from input object type UpdateMemberInput\n‚úÖ Field clonePermissions was added to object type AdminMutation\n‚úÖ Field revokePermissions was added to object type AdminMutation\n‚úÖ Field grantPermissions was added to object type AdminMutation\n‚úÖ Input field StatsFilterInput.mode description changed from Buyer or Seller to Buyer or Seller @deprecated(reason: \u0026quot;deprecated from 2019-04-11. Superfluous field.\u0026quot;)\n‚úÖ Input field owners was added to input object type StatsFilterInput\n‚úÖ Field AdviseMessage.type description changed from Error type: The following types are valid: to Error type: The following types are valid:[type]\n‚úÖ Type ClonePermissionsInput was added\n‚úÖ Type GrantPermissionsInput was added\n2019-04-08 üõë Field Event.adviseMessage changed type from AdviseMessage to [AdviseMessage!]\nüõë Field Alert.adviseMessage changed type from AdviseMessage to [AdviseMessage!]\nüõë Argument trafficType: TrafficType! added to field StatsData.ratios\nüõë Argument ratioSource: RatiosSource! was removed from field StatsData.ratios\nüõë Type RatiosSource was removed\n‚úÖ Field Alert.adviseMessage description changed from Advise Message to List of advise messages.\n‚úÖ Deprecation reason on field OperationDetailed.cache has changed from `todeprecated from 2019-04-03. Added new field trafficType.`\n‚úÖ Field trafficType was added to object type OperationDetailed\n‚úÖ Deprecation reason on field StatsData.ratios has changed from `todeprecated from 2019-04-08. Added hits fields to be able to calculate ratios at client side.`\n‚úÖ Field hits was added to object type StatsData\n‚úÖ Description for enum value BookStatusType.KO changed from The status of the booking is KO to The status of the booking is NOT OK\n‚úÖ Field surcharges was added to object type Room\n‚úÖ Argument filter: AccessFilter added to field SupplierData.accesses\n‚úÖ Argument after: String added to field SupplierData.accesses\n‚úÖ Argument before: String added to field SupplierData.accesses\n‚úÖ Argument last: Int added to field SupplierData.accesses\n‚úÖ Argument first: Int added to field SupplierData.accesses\n‚úÖ Type TrafficType was added\n2019-03-28 üõë Argument ratioSource: RatiosSource! added to field StatsData.ratios\n‚úÖ Field suppliers was added to object type ClientData\n‚úÖ Field clients was added to object type SupplierData\n‚úÖ Argument parentCode: ID added to field AdminQuery.groups\n‚úÖ Type RatiosSource was added\n2019-03-14 üõë Input field api was removed from input object type UpdateGroupInput\nüõë Argument method: Method! was removed from field AdminMutation.updateGroup\n‚úÖ Input field label was added to input object type UpdateGroupInput\n‚úÖ Input field type was added to input object type UpdateGroupInput\n‚úÖ Input field owner was added to input object type UpdateGroupInput\n2019-03-07 üõë Input field UpdateGroupInput.api changed type from ID! to [ID!]!\nüõë Field impersonationJWT was removed from object type MemberData\nüõë Type JWTImpersonation was removed\n‚úÖ Input field UpdateGroupInput.api description changed from `to@deprecated(reason: \u0026ldquo;deprecated from 2019-03-06. Use GrantAPIToGroup / RevokeAPIFromGroup to add or delete apis from groups\u0026rdquo;)`\n‚úÖ Input field updateDateRange was added to input object type AccessInput\n‚úÖ Input field updateList was added to input object type AccessInput\n‚úÖ Input field updateDescriptiveInfo was added to input object type AccessInput\n‚úÖ Input field descriptiveInfoLimit was added to input object type AccessInput\n‚úÖ Field revokeApiFromGroup was added to object type AdminMutation\n‚úÖ Field grantApiToGroup was added to object type AdminMutation\n‚úÖ Field suitOrganization was added to object type AdminMutation\n‚úÖ Deprecation reason on field BookingHotel.checkOut has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Deprecation reason on field BookingHotel.checkIn has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Deprecation reason on field BookingHotel.creationDate has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Field end was added to object type BookingHotel\n‚úÖ Field start was added to object type BookingHotel\n‚úÖ Field bookingDate was added to object type BookingHotel\n‚úÖ Deprecation reason on field Supplement.expireDate has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Deprecation reason on field Supplement.effectiveDate has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Field end was added to object type Supplement\n‚úÖ Field start was added to object type Supplement\n‚úÖ Deprecation reason on field Promotion.expireDate has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Deprecation reason on field Promotion.effectiveDate has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Field end was added to object type Promotion\n‚úÖ Field start was added to object type Promotion\n‚úÖ Deprecation reason on field RatePlan.expireDate has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Deprecation reason on field RatePlan.effectiveDate has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Field end was added to object type RatePlan\n‚úÖ Field start was added to object type RatePlan\n‚úÖ Deprecation reason on field PriceBreakdown.expireDate has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Deprecation reason on field PriceBreakdown.effectiveDate has changed from `todeprecated from 2018-02-28. Incorrect date format.`\n‚úÖ Field end was added to object type PriceBreakdown\n‚úÖ Field start was added to object type PriceBreakdown\n‚úÖ Argument codeStartsWith: String added to field GroupData.parents\n‚úÖ Field template was added to object type OrganizationData\n‚úÖ Field updateDateRange was added to object type AccessData\n‚úÖ Field updateList was added to object type AccessData\n‚úÖ Field descriptiveInfoLimit was added to object type AccessData\n‚úÖ Field updateDescriptiveInfo was added to object type AccessData\n‚úÖ Argument codeStartsWith: String added to field AdminQuery.groups\n‚úÖ Type UpdateGroupAPISInput was added\n‚úÖ Type SuitOrganizationInput was added\n2019-02-20 ‚úÖ Field alertsX was added to object type Mutation\n‚úÖ Field Stats.statsData description changed from GUID The data returned by a Stats query. to The data returned by a Stats query.\n‚úÖ Description Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn't specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: \u0026quot;deprecated from 2018-08-20. Please, use filterSearch\u0026quot;) on type FilterInput has changed to Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn't specified anything. If input both, you will receive a validation error that indicates this error. @deprecated(reason: \u0026quot;deprecated from 2018-08-20. Please, use filterSearch\u0026quot;)\n‚úÖ Input field HotelSettingsInput.connectUser description changed from This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. @deprecated(reason: \u0026quot;deprecated from 2018-03-19. Redundant.\u0026quot;) to This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. @deprecated(reason: \u0026quot;deprecated from 2018-03-19. Redundant.\u0026quot;)\n‚úÖ Description The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: \u0026quot;{\\\u0026quot;int\\\u0026quot;: 1, \\\u0026quot;string\\\u0026quot;: \\\u0026quot;value\\\u0026quot;}\u0026quot;. on type JSON has changed to The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: \u0026quot;{\u0026quot;int\u0026quot;: 1, \u0026quot;string\u0026quot;: \u0026quot;value\u0026quot;}\u0026quot;.\n‚úÖ Description The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026quot;http:\\\\www.travelgatex.com\u0026quot;. on type URI has changed to The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026quot;http:\\www.travelgatex.com\u0026quot;.\n‚úÖ Description on type `APIData` has changed to\n‚úÖ Field alertsX was added to object type Query\n‚úÖ Type unitTime was added\n‚úÖ Type AlertUpdateConfigurationInputPeakTraffic was added\n‚úÖ Type AlertUpdateConfigurationInputAverageTime was added\n‚úÖ Type AlertUpdateConfigurationInputErrorRate was added\n‚úÖ Type AlertUpdateConfigurationInputNoTraffic was added\n‚úÖ Type AlertUpdateInput was added\n‚úÖ Type AlertConfigurationInputPeakTraffic was added\n‚úÖ Type AlertConfigurationInputAverageTime was added\n‚úÖ Type AlertConfigurationInputErrorRate was added\n‚úÖ Type ComercialType was added\n‚úÖ Type AlertGroupInput was added\n‚úÖ Type AlertObjectInput was added\n‚úÖ Type ErrorTypeInput was added\n‚úÖ Type ErrorCodeInput was added\n‚úÖ Type HubStatusInput was added\n‚úÖ Type EmailInput was added\n‚úÖ Type AlertConfigurationInputNoTraffic was added\n‚úÖ Type AlertInput was added\n‚úÖ Type AlertsXMutation was added\n‚úÖ Type AlertCriteriaInput was added\n‚úÖ Type EventType was added\n‚úÖ Type EventData was added\n‚úÖ Type Event was added\n‚úÖ Type EventEdge was added\n‚úÖ Type EventConnection was added\n‚úÖ Type AlertFilterInput was added\n‚úÖ Type AlertGroups was added\n‚úÖ Type AlertObjectsUnion was added\n‚úÖ Type ErrorType was added\n‚úÖ Type HubStatus was added\n‚úÖ Type EmailType was added\n‚úÖ Type Email was added\n‚úÖ Type AlertTypeConfiguration was added\n‚úÖ Type AlertType was added\n‚úÖ Type AlertConfiguration was added\n‚úÖ Type AlertData was added\n‚úÖ Type Alert was added\n‚úÖ Type AlertEdge was added\n‚úÖ Type AlertConnection was added\n‚úÖ Type AlertsXQuery was added\n2019-02-11 üõë Type Search was removed\nüõë Type Quote was removed\nüõë Type Booking was removed\n2019-02-07 ‚úÖ Deprecation reason on field HotelOptionSearch.token has changed from `todeprecated from 2019-02-05.`\n‚úÖ Field giataData was added to object type HotelData\n‚úÖ Type GiataData was added\n2019-01-30 üõë Input field audit was removed from input object type HotelXCommonSettingsDataInput\nüõë Input field clientName was removed from input object type HotelXDefaultSettingsDataInput\nüõë Field audit was removed from object type HotelXCommonSettingsData\nüõë Field clientName was removed from object type HotelXDefaultSettingsData\nüõë Field error was removed from object type Product\nüõë Field error was removed from object type Operation\nüõë Field error was removed from object type API\nüõë Field error was removed from object type Resource\nüõë Field error was removed from object type Role\nüõë Field error was removed from object type Member\nüõë Field error was removed from object type Group\nüõë Field error was removed from object type Organization\nüõë Type HotelXAuditInput was removed\nüõë Type HotelXAudit was removed\n‚ö†Ô∏è Enum value COMMISSION was added to enum PluginType\n‚úÖ Description Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method. on type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n‚úÖ Field PaymentXQuery.storedCard description changed from Returns a stored card information. to Returns a stored card information.\n‚úÖ Field PaymentXQuery.allStoredCards description changed from Returns the stored card list. For security, this query never will return clear card information. to Returns the stored card list. For security, this query never will return clear card information.\n‚úÖ Input field HotelSettingsInput.clientTokens description changed from Used to identify the origin of the request, this is only used in plugins. to Used to identify the origin of the request, this is only used in plugins.\n‚úÖ Description The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026quot;es\u0026quot;. on type Language has changed to The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 639-1 format with enclosing double quotes \u0026quot;en\u0026quot;.\n‚úÖ Field impersonationJWT was added to object type MemberData\n‚úÖ Field domains was added to object type OrganizationData\n‚úÖ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n‚úÖ Argument domains: [DomainName!] added to field AdminQuery.organizations\n‚úÖ Type JWTImpersonation was added\n‚úÖ Type DomainName was added\n‚úÖ Type DomainData was added\n‚úÖ Type Domain was added\n2018-11-20 ‚úÖ Input field CreateOrganizationInput.organization changed type from ID! to ID\n‚úÖ Field country was added to object type GeonameData\n2018-11-07 üõë Field asserts was removed from object type StatsInfo\nüõë Type StatsAssert was removed\n‚úÖ Field assets was added to object type StatsInfo\n‚úÖ Type StatsAsset was added\n2018-10-28 ‚ö†Ô∏è Enum value COUNTRY was added to enum DestinationType\n‚úÖ Field geoNames was added to object type Location\n‚úÖ Type GeonameData was added\n‚úÖ Type Geoname was added\n2018-10-18 üõë Input field type was added to input object type CreateProfileInput\nüõë Field errors was removed from object type HotelXCommonSettings\nüõë Field warnings was removed from object type HotelXCommonSettings\nüõë Field warnings was removed from object type HotelXDefaultSettings\nüõë Field errors was removed from object type HotelXDefaultSettings\nüõë Field downloadHotels was removed from object type HotelXQuery\nüõë Field downloadRooms was removed from object type HotelXQuery\nüõë Field isActive was removed from object type Member\n‚úÖ Description Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method. on type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n‚úÖ Input field type was added to input object type UpdateProfileInput\n‚úÖ Field PaymentXQuery.storedCard description changed from Returns a stored card information. to Returns a stored card information.\n‚úÖ Field PaymentXQuery.allStoredCards description changed from Returns the stored card list. For security, this query never will return clear card information. to Returns the stored card list. For security, this query never will return clear card information.\n‚úÖ Input field HotelSettingsInput.clientTokens description changed from Used to identify the origin of the request, this is only used in plugins. to Used to identify the origin of the request, this is only used in plugins.\n‚úÖ Field adviseMessage was added to object type HotelXCommonSettings\n‚úÖ Field adviseMessage was added to object type HotelXDefaultSettings\n‚úÖ Field type was added to object type ProfileData\n‚úÖ Field isActive was added to object type MemberData\n‚úÖ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n‚úÖ Type ProfileType was added\n2018-09-26 üõë Input field mode was added to input object type StatsFilterInput\n‚úÖ Input field clients was added to input object type StatsFilterInput\n‚úÖ Field count was added to object type HotelConnection\n‚úÖ Type ModeType was added\n2018-09-20 ‚úÖ Input field UpdateProfileInput.label changed type from String! to String\n‚úÖ Input field isPublished was added to input object type UpdateProfileInput\n‚úÖ Input field isActive was added to input object type UpdateProfileInput\n‚úÖ Input field isPublished was added to input object type CreateProfileInput\n‚úÖ Input field isActive was added to input object type CreateProfileInput\n‚úÖ Field isPublished was added to object type ProfileData\n‚úÖ Field isActive was added to object type ProfileData\n2018-09-10 ‚úÖ Description Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\non type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n‚úÖ Field PaymentXQuery.storedCard description changed from Returns a stored card information. to Returns a stored card information.\n‚úÖ Field PaymentXQuery.allStoredCards description changed from Returns the stored card list. For security, this query never will return clear card information. to Returns the stored card list. For security, this query never will return clear card information.\n‚úÖ Input field HotelSettingsInput.clientTokens description changed from Used to identify the origin of the request, this is only used in plugins. to Used to identify the origin of the request, this is only used in plugins.\n‚úÖ Field runtimeConfiguration was added to object type HotelXQuery\n‚úÖ Input field isActive was added to input object type EntityFilter\n‚úÖ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n‚úÖ Type MetadataType was added\n‚úÖ Type TagRuntimeType was added\n‚úÖ Type HotelRuntimeParameter was added\n‚úÖ Type HotelRuntimeConfigurationData was added\n‚úÖ Type HotelRuntimeConfiguration was added\n2018-08-27 ‚úÖ Description Input delta price, indicates price variation permitted by the client. An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation).This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method. on type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n‚úÖ Argument filter: HotelXFilterInput added to field HotelXMutation.cancel\n‚úÖ Argument filter: HotelXFilterInput added to field HotelXMutation.book\n‚úÖ Field PaymentXQuery.storedCard description changed from Returns a stored card information. to Returns a stored card information.\n‚úÖ Field PaymentXQuery.allStoredCards description changed from Returns the stored card list. For security, this query never will return clear card information. to Returns the stored card list. For security, this query never will return clear card information.\n‚úÖ Input field HotelSettingsInput.clientTokens description changed from Used to identify the origin of the request, this is only used in plugins. to Used to identify the origin of the request, this is only used in plugins.\n‚úÖ Argument filter: HotelXFilterInput added to field HotelXQuery.booking\n‚úÖ Argument filter: HotelXFilterInput added to field HotelXQuery.quote\n‚úÖ Argument filterSearch: HotelXFilterSearchInput added to field HotelXQuery.search\n‚úÖ Deprecation reason on field Product.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n‚úÖ Field adviseMessage was added to object type Product\n‚úÖ Deprecation reason on field Operation.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n‚úÖ Field adviseMessage was added to object type Operation\n‚úÖ Deprecation reason on field API.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n‚úÖ Field adviseMessage was added to object type API\n‚úÖ Deprecation reason on field Resource.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n‚úÖ Field adviseMessage was added to object type Resource\n‚úÖ Deprecation reason on field Role.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n‚úÖ Field adviseMessage was added to object type Role\n‚úÖ Deprecation reason on field Member.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n‚úÖ Field Member.error description changed from `toErrors that abort services`\n‚úÖ Field adviseMessage was added to object type Member\n‚úÖ Deprecation reason on field Organization.error has changed from `todeprecated from 2018-08-22. Sustituted by adviseMessage`\n‚úÖ Field adviseMessage was added to object type Organization\n‚úÖ Field AdminQuery.products description changed from Product catalog; specify products codes to filter to Product catalog; specify products codes to filter\n2018-08-22 üõë Text kind changed from INTERFACE to OBJECT\nüõë AdviseMessage kind changed from INTERFACE to OBJECT\n‚úÖ Input field owner was added to input object type UpdateProfileInput\n‚úÖ Input field owner was added to input object type CreateProfileInput\n‚úÖ Input field owner was added to input object type UpdateClientInput\n‚úÖ Input field owner was added to input object type CreateClientInput\n‚úÖ Input field owner was added to input object type AccessInput\n‚úÖ Field parents was added to object type OrganizationData\n‚úÖ Field descendents was added to object type OrganizationData\n‚úÖ Input field owner was added to input object type EntityFilter\n‚úÖ Input field owner was added to input object type ProfileFilter\n‚úÖ Field owner was added to object type ProfileData\n‚úÖ Input field owner was added to input object type PointOfSaleFilter\n‚úÖ Field owner was added to object type PointOfSaleData\n‚úÖ Input field owner was added to input object type ClientFilter\n‚úÖ Input field owner was added to input object type SupplierFilter\n‚úÖ Input field owner was added to input object type AccessFilter\n‚úÖ Field owner was added to object type ClientData\n‚úÖ Field GroupData.parents description changed from Recursive call with all ascendant parents tree to Response all parents groups nodes for this group (nom-hierarchically)\n‚úÖ Field descendents was added to object type GroupData\n‚úÖ Field owner was added to object type SupplierData\n‚úÖ Field isShedulerActive was added to object type AccessData\n‚úÖ Field owner was added to object type AccessData\n‚úÖ Type HotelXFilterSearchInput was added\n‚úÖ Type HotelXFilterPluginTypeInput was added\n‚úÖ Type HotelXPluginFilterInput was added\n‚úÖ Type HotelXFilterInput was added\n2018-08-14 üõë Type for argument input on field PaymentXMutation.storeCard changed from PaymentXStoreCardInput! to PaymentXStoredCardInput!\nüõë Field PaymentXMutation.storeCard changed type from StoredCard! to PaymentXStoredCard!\nüõë Field deleteCard was removed from object type PaymentXMutation\nüõë Field PaymentXQuery.vaultStatusService changed type from ServiceStatus! to AdviseMessage!\nüõë Field cards was removed from object type PaymentXQuery\nüõë Type PaymentXBookingInfoDeleteInput was removed\nüõë Type PointOfSaleInput was removed\nüõë Type PaymentXBookingInfoInput was removed\nüõë Type PaymentXStoreCardInput was removed\nüõë Type PaymentXBookingInfoCriteriaInput was removed\nüõë Type PaymentXBookingInfoFilterInput was removed\nüõë Type ExpireDate was removed\nüõë Type PaymentCard was removed\nüõë Type PaymentXBookingInfo was removed\nüõë Type StoredCardData was removed\nüõë Type StoredCard was removed\nüõë Type StoredCardEdge was removed\nüõë Type StoredCardConnection was removed\n‚úÖ Field deleteStoredCard was added to object type PaymentXMutation\n‚úÖ Field PaymentXQuery.vaultStatusService description changed from Returns status of the search service. to Returns status of the vault service.\n‚úÖ Field storedCard was added to object type PaymentXQuery\n‚úÖ Field allStoredCards was added to object type PaymentXQuery\n‚úÖ Input field countries was added to input object type HotelXHotelListInput\n‚úÖ Type PaymentXStoredCardInput was added\n‚úÖ Type PaymentXStoredCardIDInput was added\n‚úÖ Type PaymentXStoredCardFilterInput was added\n‚úÖ Type PaymentXExpireDate was added\n‚úÖ Type PaymentXStoredCardData was added\n‚úÖ Type PaymentXStoredCard was added\n‚úÖ Type PaymentXStoredCardEdge was added\n‚úÖ Type PaymentXStoredCardConnection was added\n2018-08-13 üõë Field ProfileData.group changed type from Group! to Group\nüõë Field ClientData.group changed type from Group! to Group\nüõë Argument type: GroupType was removed from field GroupData.managedGroups\nüõë Field GroupData.managedGroups changed type from GroupConnection to ManagedGroupConnection\nüõë Field SupplierData.groups changed type from GroupConnection! to GroupConnection\nüõë Field AccessData.groups changed type from GroupConnection! to GroupConnection\n‚úÖ Argument role: [ID!] added to field GroupData.managedGroups\n‚úÖ Argument resource: [ID!] added to field GroupData.managedGroups\n‚úÖ Argument api: [ID!] added to field GroupData.managedGroups\n‚úÖ Argument group: [ID!] added to field GroupData.managedGroups\n‚úÖ Field GroupData.managedGroups description changed from Responses all groups in its group's childrens (hierarchically), to Responses all managed groups by this group.\n‚úÖ Type ManagedGroupData was added\n‚úÖ Type ManagedGroup was added\n‚úÖ Type ManagedGroupEdge was added\n‚úÖ Type ManagedGroupConnection was added\n2018-08-08 ‚úÖ Input field currency was added to input object type SettingsBaseInput\n‚úÖ Field parents was added to object type GroupData\n‚úÖ Deprecation reason on field Group.error has changed from `todeprecated from 2018-08-01. Sustituted by adviseMessage`\n‚úÖ Field adviseMessage was added to object type Group\n‚úÖ Field group was added to object type ProfileData\n‚úÖ Field group was added to object type ClientData\n‚úÖ Field groups was added to object type SupplierData\n‚úÖ Field groups was added to object type AccessData\n2018-07-31 ‚úÖ Field StoredCard.adviseMessage description changed from List of advise messages. to List of messages\n‚úÖ Deprecation reason on field AddOns.distribute has changed from You can find it in distribution AddOn to deprecated from 2018-05-21. You can find it in distribution AddOn\n‚úÖ Field PointOfSale.adviseMessage description changed from List of messages to List of advise messages.\n‚úÖ Field entities was added to object type AdminQuery\n‚úÖ Type EntityFilter was added\n2018-07-26 ‚ö†Ô∏è Enum value ORG was added to enum GroupTypeInput\n‚ö†Ô∏è Enum value ROOT was added to enum GroupTypeInput\n‚ö†Ô∏è Enum value ROOT was added to enum `GroupType\n2018-07-25 üõë Input field HotelSettingsInput.group changed type from String to ID\nüõë Input field HotelSettingsInput.client changed type from String to ID\n‚úÖ Input field HotelSettingsInput.client description changed from This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. to Client name, this field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload.\n‚úÖ Input field clientTokens was added to input object type HotelSettingsInput\n2018-07-16 üõë Input field organizations was removed from input object type StatsFilterInput\nüõë Field error was removed from object type Stats\n‚úÖ Input field groups was added to input object type StatsFilterInput\n‚úÖ Field adviseMessage was added to object type Stats\n‚úÖ Field StoredCard.adviseMessage description changed from List of messages to List of advise messages.\n‚úÖ Description `on typeAdviseMessagehas changed toList of advise messages.`\n2018-07-10 üõë Field deleteDefaultSettings was removed from object type Mutation\nüõë Field updateDefaultSettings was removed from object type Mutation\nüõë Field createDefaultSettings was removed from object type Mutation\nüõë Field loadFile was removed from object type Mutation\nüõë Field hotelCancel was removed from object type Mutation\nüõë Field hotelBook was removed from object type Mutation\nüõë Field Destination.error changed type from [Error!] to [AdviseMessage!]\nüõë Field Hotel.error changed type from [Error!] to [AdviseMessage!]\nüõë Field mapping was removed from object type Query\nüõë Field defaultSettings was removed from object type Query\nüõë Field booking was removed from object type Query\nüõë Field quote was removed from object type Query\nüõë Field search was removed from object type Query\n‚úÖ Input field AccessInput.name changed type from String! to String\n‚úÖ Field removeEntitiesFromProfile was added to object type AdminMutation\n‚úÖ Field addEntitiesToProfile was added to object type AdminMutation\n‚úÖ Field updateProfile was added to object type AdminMutation\n‚úÖ Field createProfile was added to object type AdminMutation\n‚úÖ Input field PaymentXBookingInfoFilterInput.bookingReference changed type from String! to String\n‚úÖ Input field PaymentXBookingInfoFilterInput.bookingReference description changed from Indicates the referece of the booking to Indicates the referece of the booking. @deprecated(reason: \u0026quot;deprecated from 2018-08-03. Please use PaymentXBookingInfoCriteriaInput\u0026quot;)\n‚úÖ Input field PaymentXBookingInfoFilterInput.pointOfSaleCode changed type from ID! to ID\n‚úÖ Input field PaymentXBookingInfoFilterInput.pointOfSaleCode description changed from Indicates the code of the booked property to Indicates the code of the booked property. @deprecated(reason: \u0026quot;deprecated from 2018-08-03. Please use PaymentXBookingInfoCriteriaInput\u0026quot;)\n‚úÖ Input field PaymentXBookingInfoFilterInput.organization changed type from String! to String\n‚úÖ Input field PaymentXBookingInfoFilterInput.organization description changed from Responsible organization of the booked property. to Responsible organization of the booked property. @deprecated(reason: \u0026quot;deprecated from 2018-08-03. Please use PaymentXBookingInfoCriteriaInput\u0026quot;)\n‚úÖ Input field checkOut_gte was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkOut_gt was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkOut_lte was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkOut_lt was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkOut_not_in was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkOut_in was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkIn_gte was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkIn_gt was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkIn_lte was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkIn_lt was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkIn_not_in was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field checkIn_in was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field OR was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Input field AND was added to input object type PaymentXBookingInfoFilterInput\n‚úÖ Argument bookingInfoCriteria: PaymentXBookingInfoCriteriaInput added to field PaymentXQuery.cards\n‚úÖ Input field HotelXHotelListInput.access changed type from ID! to ID\n‚úÖ Input field group was added to input object type HotelXHotelListInput\n‚úÖ Field airports was added to object type Location\n‚úÖ Input field maxSize was added to input object type HotelXRoomQueryInput\n‚úÖ Field token was added to object type RoomConnection\n‚úÖ Field HotelXQuery.destinationSearcher description changed from Returns hotels and destinations that contains the indicated text. to Returns hotels and destinations that contains the indicated text.\n‚úÖ Argument filter: HotelXHotelFilterInput added to field HotelXQuery.hotels\n‚úÖ Argument token: String added to field HotelXQuery.rooms\n‚úÖ Field AdminQuery.products description changed from Members list; specify member codes to filter members to Product catalog; specify products codes to filter\n‚úÖ Field jwt was added to object type AdminQuery\n‚úÖ Type UpdateEntitiesInput was added\n‚úÖ Type UpdateProfileInput was added\n‚úÖ Type EntitiesInput was added\n‚úÖ Type CreateProfileInput was added\n‚úÖ Type PaymentXBookingInfoCriteriaInput was added\n‚úÖ Type HotelXHotelFilterInput was added\n‚úÖ Type AirportData was added\n‚úÖ Type Airport was added\n‚úÖ Type JWT was added\n2018-06-21 üõë Field group was removed from object type PointOfSaleData\n‚úÖ Field Stats.statsData description changed from `GUID\nThe data returned by a `Stats` query.toGUID\nThe data returned by a Stats query.`\n‚úÖ Argument codeStartsWith: String added to field OrganizationData.children\n‚úÖ Argument type: GroupType added to field OrganizationData.children\n‚úÖ Argument codeStartsWith: String added to field GroupData.children\n‚úÖ Field profiles was added to object type AdminQuery\n‚úÖ Type ProfileFilter was added\n‚úÖ Type EntityData was added\n‚úÖ Type Entity was added\n‚úÖ Type EntityEdge was added\n‚úÖ Type EntityConnection was added\n‚úÖ Type ProfileData was added\n‚úÖ Type Profile was added\n‚úÖ Type ProfileEdge was added\n‚úÖ Type ProfileConnection was added\n2018-06-12 üõë Input field group was added to input object type DeleteGroupInput\nüõë Input field code was removed from input object type DeleteGroupInput\nüõë Type LegacyData was removed\n‚úÖ Description Input delta price, indicates price variation permitted by the client on type DeltaPriceInput has changed to Input delta price, indicates price variation permitted by the client An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation). This field is implemented if it‚Äôs native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method.\n‚úÖ Input field DeltaPriceInput.applyBoth description changed from Indicates that the range between valuation price and the new price does not exceed the amount and/or porcentage indicated by the client. to Depending on the value of applyBoth: applyBoth = false: Indicates that one of the conditions (amount or percentage) has to meet the criteria before reservation. applyBoth = true: Indicates that the new price cannot exceed the amount or percentage indicated by the client.\n‚úÖ Deprecation reason on field HotelXMutation.loadFile has changed from `todeprecated from 2018-06-06`\n‚úÖ Description `on typeAdminMutationhas changed toThe admin query root of TravelgateX\u0026rsquo;s for implementing GraphQL mutations.`\n‚úÖ Description Mutations are operations that change or update data on the server on type Mutation has changed to The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server\n‚úÖ Field paymentX was added to object type Mutation\n‚úÖ Description LList of business rules for filtering options based on your interests. on type BusinessRules has changed to List of business rules for filtering options based on your interests.\n‚úÖ Description for enum value ServiceApiType.PACKAGE changed from `toWhen the request has been done against the Package API`\n‚úÖ Description for enum value ServiceApiType.PAYMENT changed from `toWhen the request has been done against the Payment API`\n‚úÖ Description for enum value ServiceApiType.VIRTUALACCOUNT changed from `toWhen the request has been done against the Virtual Account API`\n‚úÖ Description for enum value ServiceApiType.ACTIVITIES changed from `toWhen the request has been done against the Activities API`\n‚úÖ Description for enum value ServiceApiType.TRANSFERS changed from `toWhen the request has been done against the Transfers API`\n‚úÖ Description for enum value ServiceApiType.CAR changed from `toWhen the request has been done against the Car API`\n‚úÖ Description for enum value ServiceApiType.TRANSPORTATION changed from `toWhen the request has been done against the Transportation API`\n‚úÖ Description for enum value ServiceApiType.HOTEL changed from `toWhen the request has been done against the Hotel API`\n‚úÖ Description for enum value ServiceOperationType.OTHER changed from `toWhen the type of the request is Other`\n‚úÖ Description for enum value ServiceOperationType.BOOKING changed from `toWhen the type of the request is Booking`\n‚úÖ Description for enum value ServiceOperationType.QUOTE changed from `toWhen the type of the request is Quote`\n‚úÖ Description for enum value ServiceOperationType.SEARCH changed from `toWhen the type of the request is Search`\n‚úÖ Field StatsAssert.url description changed from `toEndpoint to download the full XML of the request with its response`\n‚úÖ Field StatsAssert.execTime description changed from `toExecution time of the request`\n‚úÖ Field StatsAssert.startTime description changed from `toStart time of the request`\n‚úÖ Description for enum value StatsInfoTypes.OTHER changed from `toStats in NOK state caused by other causes`\n‚úÖ Description for enum value StatsInfoTypes.HUB changed from `toStats in NOK state caused by HUB issues`\n‚úÖ Description for enum value StatsInfoTypes.COMMUNICATION changed from `toStats in NOK state caused by Timeout`\n‚úÖ Description for enum value StatsInfoTypes.PROVIDER changed from `toStats in NOK state caused by supplier issues`\n‚úÖ Description for enum value StatsInfoTypes.INTEGRATION changed from `toStats in NOK state caused by integration issues`\n‚úÖ Description for enum value StatsInfoTypes.OK changed from `toStats in OK state`\n‚úÖ Field StatsInfo.asserts description changed from `toDetails about errors.`\n‚úÖ Field StatsInfo.time description changed from Total time (ms) to Average time (ms)\n‚úÖ Field StatsInfo.hits description changed from Total hits. to Total hits\n‚úÖ Field StatsInfo.type description changed from `toStats type`\n‚úÖ Description `on typeOperationDetailedhas changed toStats information per operation`\n‚úÖ Field OperationDetailed.cache description changed from `toResponsible for the execution of the this stats. If TRUE then cache, else client`\n‚úÖ Field OperationDetailed.detailedHits description changed from Total time time: Time! to Hits grouped depending on their status\n‚úÖ Field OperationDetailed.totalHits description changed from operation: String! operationType: ServiceOperationType! List of service apis. serviceApis: ServiceApiConnection! Total hits. to Total hits.\n‚úÖ Field OperationDetailed.operation changed type from Operation to Operation!\n‚úÖ Field OperationDetailed.operation description changed from `toOperation information`\n‚úÖ Description Details of look to quote and look to book. on type Ratios has changed to Ratios details\n‚úÖ Field Ratios.quoteToBook description changed from `toQuotes needed to do a booking`\n‚úÖ Field Ratios.lookToBook description changed from `toSearches needed to do a booking`\n‚úÖ Field Ratios.lookToQuote description changed from `toSearches needed to do a quote`\n‚úÖ Field StatsData.operations description changed from `toStats information per operation`\n‚úÖ Field StatsData.ratios description changed from Details of look to quote and look to book. to Ratios details\n‚úÖ Field StatsData.client description changed from `toOwner client`\n‚úÖ Field StatsData.access description changed from `toOwner access`\n‚úÖ Field Stats.updatedAt description changed from Date updated to Update date\n‚úÖ Field Stats.createdAt description changed from Date created to Create date\n‚úÖ Field Stats.error description changed from Errors that abort services to Errors that will lead the service to abort\n‚úÖ Field Stats.statsData description changed from `toGUID The data returned by a `Stats` query.`\n‚úÖ Description Plugin Type on type PluginType has changed to Plugin Type. /hotel-x/plugins/overview/\n‚úÖ Description Plugin Step Type on type PluginStepType has changed to Plugin Step Type. /hotel-x/plugins/overview/\n‚úÖ Input field PluginStepInput.pluginsType description changed from `toIndicates the plugin that will be executed.`\n‚úÖ Input field HotelSettingsInput.testMode description changed from Use test access to This flag allows only the accesses checked as test. By default is production.\n‚úÖ Description `on typeMarkupRuleTypehas changed toIndicates what type of value is the markup, by percentage or is an import.`\n‚úÖ Description Options status on type StatusType has changed to Indicartes options status\n‚úÖ Field Response.stats description changed from Application stats in string format to Application stats\n‚úÖ Field DestinationConnection.pageInfo description changed from `toIndicates info about page`\n‚úÖ Field HotelConnection.pageInfo description changed from `toIndicates info about page`\n‚úÖ Input field HotelXRoomQueryInput.access description changed from `toIndicates the access that you want use.`\n‚úÖ Input field HotelXRoomQueryInput.roomCodes description changed from `toIndicates the room codes that you want filter.`\n‚úÖ Field RoomConnection.pageInfo description changed from `toIndicates info about page`\n‚úÖ Input field HotelXCategoryQueryInput.access description changed from `toIndicates the access that you want use.`\n‚úÖ Input field HotelXCategoryQueryInput.categoryCodes description changed from `toIndicates the category codes that you want filter.`\n‚úÖ Field CategoryConnection.pageInfo description changed from `toIndicates info about page`\n‚úÖ Input field HotelXBoardQueryInput.access description changed from `toIndicates the access that you want use.`\n‚úÖ Input field HotelXBoardQueryInput.boardCodes description changed from `toIndicates the board codes that you want filter.`\n‚úÖ Field BoardConnection.pageInfo description changed from `toIndicates info about page`\n‚úÖ Field HotelXQuery.mapping description changed from `toReturns map codes of a group. You can get hotel map, room map, and board map.`\n‚úÖ Field HotelXQuery.bookingStatusService description changed from TODO: me no understand... Returns status of the booking service. to Returns status of the booking service.\n‚úÖ Field ProductData.apis description changed from `toA Product has many APIs`\n‚úÖ Description `on typeProducthas changed toAn APIs collection.`\n‚úÖ Field Product.updatedAt description changed from `toDate updated`\n‚úÖ Field Product.createdAt description changed from `toDate created`\n‚úÖ Field Product.error description changed from `toErrors that abort services`\n‚úÖ Field Operation.updatedAt description changed from `toDate updated`\n‚úÖ Field Operation.createdAt description changed from `toDate created`\n‚úÖ Field Operation.error description changed from `toErrors that abort services`\n‚úÖ Description on type `APIData` has changed to\n‚úÖ Field APIData.operations description changed from `towhich operations are asigned this API?`\n‚úÖ Field APIData.resources description changed from `towhich resources are asigned this API?`\n‚úÖ Field APIData.groups description changed from `towhich groups are asigned this API?`\n‚úÖ Field APIData.label description changed from `toAPI label`\n‚úÖ Field APIData.isEditable description changed from `toIs API Editable or not.`\n‚úÖ Field APIData.code description changed from `toAPI Code`\n‚úÖ Field APIData.id description changed from `toAPI ID`\n‚úÖ Field API.updatedAt description changed from `toDate updated`\n‚úÖ Field API.createdAt description changed from `toDate created`\n‚úÖ Field API.error description changed from `toErrors that abort services`\n‚úÖ Field ResourceData.roles description changed from `towhich roles are asigned or are possibles in this resource?`\n‚úÖ Field ResourceData.apis description changed from `towhich API have asigned this resource?`\n‚úÖ Description `on typeResourcehas changed toResources are those used in APIs and Products.`\n‚úÖ Field Resource.updatedAt description changed from `toDate updated`\n‚úÖ Field Resource.createdAt description changed from `toDate created`\n‚úÖ Field Resource.error description changed from `toErrors that abort services`\n‚úÖ Description for enum value RoleType.SPECIFIC changed from `toAllows a User to make othen kind of operation with the resource. Defined by API.`\n‚úÖ Description for enum value RoleType.EXECUTOR changed from `toAllows a User to make use of reources only for extecutations queries.`\n‚úÖ Description for enum value RoleType.ADMIN changed from `toAllows a User to make All (changes) to the resource`\n‚úÖ Description for enum value RoleType.EDITOR changed from `toAllows a User to make Mutations (changes) to the resource data`\n‚úÖ Description for enum value RoleType.VIEWER changed from `toAllows a User to make Queries of resources, but not change any resource data`\n‚úÖ Field RoleData.resources description changed from `toResources used`\n‚úÖ Field RoleData.special description changed from `toSpecial permission`\n‚úÖ Field RoleData.isSpecial description changed from `toHas any other non-basic permission/s?`\n‚úÖ Field RoleData.isExecutable description changed from `toHas resource Executable permission?`\n‚úÖ Field RoleData.isEnable description changed from `toIs role enabled or not?`\n‚úÖ Field RoleData.isDelete description changed from `toHas resource Delete permission?`\n‚úÖ Field RoleData.isUpdate description changed from `toHas resource Update permission?`\n‚úÖ Field RoleData.isRead description changed from `toHas resource Create permission?`\n‚úÖ Field RoleData.isCreate description changed from `toHas resource Create permission?`\n‚úÖ Description `on typeRolehas changed toPermissions determine what operations are allowed on a resource`\n‚úÖ Field Role.updatedAt description changed from `toDate updated`\n‚úÖ Field Role.createdAt description changed from `toDate created`\n‚úÖ Field Role.error description changed from `toErrors that abort services`\n‚úÖ Field MemberData.roles description changed from `towhich roles the member has in?`\n‚úÖ Field MemberData.groups description changed from `towhich groups the member is in?`\n‚úÖ Field MemberData.type description changed from `toMember Type`\n‚úÖ Description `on typeMemberhas changed toYou grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.`\n‚úÖ Field Member.updatedAt description changed from `toDate updated`\n‚úÖ Field Member.createdAt description changed from `toDate created`\n‚úÖ Field Member.isActive description changed from `toErrors that abort services`\n‚úÖ Field GroupData.roles description changed from `toYou can grant roles to members, which define the roles catalog for a group.`\n‚úÖ Field GroupData.clients description changed from `toClients resources in a group`\n‚úÖ Field GroupData.suppliers description changed from `toSupplier resources in a group`\n‚úÖ Field GroupData.accesses description changed from `toAccess resources in a group`\n‚úÖ Field GroupData.allMembers description changed from `toResponse all members in this group\u0026rsquo;s childrens (hierarchically),`\n‚úÖ Field GroupData.managedGroups description changed from `toResponses all groups in its group\u0026rsquo;s childrens (hierarchically),`\n‚úÖ Field GroupData.apis description changed from `toAPIs assigned to this group. Products have APIs.`\n‚úÖ Field GroupData.members description changed from `toOnly responses members in this group`\n‚úÖ Field GroupData.children description changed from `toOnly responses children.(non-hierarchically)`\n‚úÖ Description `on typeGrouphas changed toGroups are organized hierarchically.`\n‚úÖ Field Group.updatedAt description changed from `toDate updated`\n‚úÖ Field Group.createdAt description changed from `toDate created`\n‚úÖ Field Group.error description changed from `toErrors that abort services`\n‚úÖ Field OrganizationData.clients description changed from `toClients resources in a organization`\n‚úÖ Field OrganizationData.suppliers description changed from `toSupplier resources in a organization`\n‚úÖ Field OrganizationData.accesses description changed from `toAccess resources in a organization`\n‚úÖ Field OrganizationData.allMembers description changed from `toResponse all members in this group\u0026rsquo;s childrens (hierarchically)`\n‚úÖ Field OrganizationData.products description changed from `toProducts asign to a organization`\n‚úÖ Field OrganizationData.apis description changed from `toAPIs assigned to this group. Products have APIs.`\n‚úÖ Field OrganizationData.children description changed from `toOnly responses folders.(non-hierarchically)`\n‚úÖ Description `on typeOrganizationhas changed toOrganization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.`\n‚úÖ Field Organization.updatedAt description changed from `toDate updated`\n‚úÖ Field Organization.createdAt description changed from `toDate created`\n‚úÖ Field Organization.error description changed from `toErrors that abort services`\n‚úÖ Description `on typeClienthas changed toClient identifies who is making the request and holds the configuration assigned to it.`\n‚úÖ Description `on typeSupplierhas changed toA Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers`\n‚úÖ Description `on typeAccesshas changed toAn Access is a set of credentials and configuration in order to access the system of a Supplier.`\n‚úÖ Description `on typeAdminQueryhas changed toThe admin query root of TravelgateX\u0026rsquo;s GraphQL interface.`\n‚úÖ Field pointsOfSale was added to object type AdminQuery\n‚úÖ Description `on typeQueryhas changed toThe query root of TravelgateX\u0026rsquo;s GraphQL interface.`\n‚úÖ Field Query.mappea description changed from `toThe Mappea product query root for implementing GraphQL query.`\n‚úÖ Field Query.stats description changed from `toThe Stats product query root for implementing GraphQL query.`\n‚úÖ Field Query.hotelX description changed from `toThe hotelX product query root for implementing GraphQL query.`\n‚úÖ Field Query.admin description changed from `toThe admin query root of TravelgateX\u0026rsquo;s for implementing GraphQL query.`\n‚úÖ Field paymentX was added to object type Query\n‚úÖ Type PaymentXBookingInfoDeleteInput was added\n‚úÖ Type PointOfSaleInput was added\n‚úÖ Type PaymentXBookingInfoInput was added\n‚úÖ Type PaymentXStoreCardInput was added\n‚úÖ Type PaymentXMutation was added\n‚úÖ Type PaymentXBookingInfoFilterInput was added\n‚úÖ Type ExpireDate was added\n‚úÖ Type CVC was added\n‚úÖ Type CardNumber was added\n‚úÖ Type PaymentCard was added\n‚úÖ Type PaymentXBookingInfo was added\n‚úÖ Type StoredCardData was added\n‚úÖ Type StoredCard was added\n‚úÖ Type StoredCardEdge was added\n‚úÖ Type StoredCardConnection was added\n‚úÖ Type PaymentXQuery was added\n‚úÖ Type PointOfSaleFilter was added\n‚úÖ Type PointOfSaleData was added\n‚úÖ Type PointOfSale was added\n‚úÖ Type PointOfSaleEdge was added\n‚úÖ Type PointOfSaleConnection was added\n2018-06-01 üõë Input field member was added to input object type DeleteMemberInput\nüõë Input field code was removed from input object type DeleteMemberInput\nüõë Input field UpdateGroupInput.api changed type from String! to ID!\nüõë Input field group was added to input object type UpdateGroupInput\nüõë Input field method was removed from input object type UpdateGroupInput\nüõë Input field code was removed from input object type UpdateGroupInput\nüõë Input field UpdateMemberInput.group changed type from String! to ID!\nüõë Input field resources was added to input object type UpdateMemberInput\nüõë Input field role was added to input object type UpdateMemberInput\nüõë Input field member was added to input object type UpdateMemberInput\nüõë Input field resource was removed from input object type UpdateMemberInput\nüõë Input field roles was removed from input object type UpdateMemberInput\nüõë Input field code was removed from input object type UpdateMemberInput\nüõë Input field CreateGroupInput.type changed type from GroupType! to GroupTypeInput!\nüõë Input field group was added to input object type CreateGroupInput\nüõë Input field code was removed from input object type CreateGroupInput\nüõë Input field CreateMemberInput.group changed type from String! to ID!\nüõë Input field resources was added to input object type CreateMemberInput\nüõë Input field role was added to input object type CreateMemberInput\nüõë Input field resource was removed from input object type CreateMemberInput\nüõë Input field roles was removed from input object type CreateMemberInput\nüõë Input field code was removed from input object type CreateMemberInput\nüõë Input field CreateOrganizationInput.user changed type from String! to ID!\nüõë Input field organization was added to input object type CreateOrganizationInput\nüõë Input field code was removed from input object type CreateOrganizationInput\nüõë Argument method: Method! added to field AdminMutation.updateGroup\nüõë Warning object type no longer implements AdviseMessage interface\nüõë Field AdviseMessage.code changed type from String! to ID!\nüõë Error object type no longer implements AdviseMessage interface\nüõë Field error was removed from object type Node\n‚úÖ Input field member was added to input object type CreateMemberInput\n‚úÖ Input field testMode was added to input object type HotelSettingsInput\n‚úÖ Input field HotelCriteriaSearchInput.hotels changed type from [String!]! to [String!]\n‚úÖ Input field HotelCriteriaSearchInput.hotels description changed from Contains the list of hotels's ID to Hotel Codes.\n‚úÖ Input field destinations was added to input object type HotelCriteriaSearchInput\n‚úÖ Field isEditable was added to object type APIData\n‚úÖ Argument type: RoleType added to field ResourceData.roles\n‚úÖ Field isEditable was added to object type ResourceData\n‚úÖ Field isEditable was added to object type RoleData\n‚úÖ Field type was added to object type RoleData\n‚úÖ Argument type: RoleType added to field MemberData.roles\n‚úÖ Argument type: GroupType added to field GroupData.children\n‚úÖ Field roles was added to object type GroupData\n‚úÖ Field managedGroups was added to object type GroupData\n‚úÖ Deprecation reason on field AdviseMessage.type has changed from `todeprecated from 2018-06-01.`\n‚úÖ Field AdviseMessage.type description changed from `TODO:\nError type: The following types are valid:\nXXX: asd asd√±oajskd l√±a ldtoError type: The following types are valid:`\n‚úÖ Field AdviseMessage.code description changed from `TODO:\nError code: The following codes can be returned:\nXXX: XXXXXXXXX XXXXXXtoAM code: The following codes can be returned:`\n‚úÖ Field correlationID was added to object type AdviseMessage\n‚úÖ Field external was added to object type AdviseMessage\n‚úÖ Field level was added to object type AdviseMessage\n‚úÖ Argument type: RoleType added to field AdminQuery.roles\n‚úÖ Deprecation reason on field Query.mapping has changed from deprecated from 2017-11-21. You can find it in query at Admin to deprecated from 2017-11-21. You can find it in query at HotelX\n‚úÖ Deprecation reason on field Query.defaultSettings has changed from deprecated from 2017-11-21. You can find it in query at Admin to deprecated from 2017-11-21. You can find it in query at HotelX\n‚úÖ Type ExternalMessage was added\n‚úÖ Type AdviseMessageLevel was added\n‚úÖ Type GroupTypeInput was added\n‚úÖ Type RoleType was added\n2018-05-21 üõë Input field AccessInput.name changed type from String to String!\n‚úÖ Input field IdAccessConfigurationInput.isActive description changed from Indicates if the access is active. to Indicates if Access is active\n‚úÖ Input field ConnectUserGroupInput.isActive description changed from Indicates if the connect user is active for its connect user to Indicates if the connect user is active for its connected user\n‚úÖ Input field ConnectUserGroupInput.groupCode description changed from group code of the group related to this connect user to Group code of the group related to this connected user\n‚úÖ Input field AccessConfigurationInput.isActive description changed from Indicates if the access is active. to Indicates if Access is active\n‚úÖ Description Pair of groups and accesses. All accesses returned will belong to all the groups in groupCodes on type GroupAccess has changed to Pairs of Groups and Accesses. All Accesses returned will belong to all the Groups in groupCodes.\n‚úÖ Field GroupAccess.groupCodes description changed from group identifiers to Group identifiers\n‚úÖ Field ConnectUserGroup.isActive description changed from Indicates if the connect user is active for its connect user to Indicates if the connect user is active for its connected user\n‚úÖ Field ConnectUserGroup.groupCode description changed from group code of the group related to this connect user to Group code of the group related to this connected user\n‚úÖ Description data related to a connect user and its groups on type ConnectUser has changed to Data related to a connected user and its groups\n‚úÖ Field ConnectUser.connectUserGroups description changed from connect user's related data of its groups to Connected user's related data based on its groups\n‚úÖ Field ConnectUser.isActive description changed from indicates whether a connect user is active to Indicates whether a connected user is active\n‚úÖ Field ConnectUser.code description changed from unique connect user of a supplier to Unique connected user of a supplier\n‚úÖ Description Context type, for now only Code is necessary on type Context has changed to Context type. Currently, only Code is necessary.\n‚úÖ Field Context.updatedAt description changed from Update date to Date updated\n‚úÖ Field Context.createdAt description changed from Create date to Date created\n‚úÖ Field Context.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Input field DefaultSettingsBusinessRulesInput.businessRulesType description changed from Different business rules to filter the options that you are interested. to Different business rules for filtering options that you are interested in\n‚úÖ Input field DefaultSettingsBusinessRulesInput.optionsQuota description changed from Options quota per avail. Numbers of options wanted by avail. to Options quota per availability; numbers of options based on availability\n‚úÖ Input field DefaultSettingsInput.businessRules description changed from Business rules. to Business rules\n‚úÖ Input field DefaultSettingsInput.market description changed from Targeted zone, country or point of sale to be used in request. to Targeted zone, country or point-ofsale-to be used in request.\n‚úÖ Input field DefaultSettingsInput.nationality description changed from Nationality of the guest (use ISO3166_1_alfa_2). to Nationality of the guest (use ISO3166_1_alfa_2)\n‚úÖ Input field DefaultSettingsInput.currency description changed from Currency requested if supported by supplier. to Currency requested if supported by supplier\n‚úÖ Input field DefaultSettingsInput.language description changed from Language to be used in request. to Language to be used in request\n‚úÖ Input field DefaultSettingsInput.connectUser description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.toThis field is occurs only if the authorization header is of the type JWT.. It is used for to change the user that\nhas been set by default in the preload.`\n‚úÖ Field HotelCancelPayload.warnings description changed from Potentially harmful situations or errors that won't force the service to abort to Potentially harmful situations or errors, but ones that will not forcibly abort the service\n‚úÖ Field HotelCancelPayload.errors description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field HotelCancelPayload.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n‚úÖ Description Holder object that contains the pax name and surname. on type HolderInput has changed to Holder object that contains the occupant's (pax's) name and surname.\n‚úÖ Input field HotelBookInput.language description changed from Language to be used in request. to Language to be used in request\n‚úÖ Field HotelBookPayload.warnings description changed from Potentially harmful situations or errors that won't force the service to abort to Potentially harmful situations or errors, but ones that will not forcibly abort the service\n‚úÖ Field HotelBookPayload.errors description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field HotelBookPayload.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n‚úÖ Input field UpdateClientInput.isActive description changed from Indicates whether a Client is active to Indicates whether a Client is active or inactive\n‚úÖ Input field CreateClientInput.isActive description changed from Indicates whether a Client is active to Indicates whether a Client is active or inactive\n‚úÖ Input field AccessInput.shared description changed from Parent access if Shared access. to Parent Access if Shared Access.\n‚úÖ Input field AccessInput.rateRules description changed from Business rules types for the access. to Business rule types for the Access\n‚úÖ Input field AccessInput.markets description changed from Markets allowed for the access. to Markets allowed for the Access\n‚úÖ Input field AccessInput.parameters description changed from List of parameters for additional information. to List of parameters for additional information\n‚úÖ Input field AccessInput.urls description changed from Specific Urls to Specific URLs\n‚úÖ Input field AccessInput.password description changed from Password for the connection. to Password for the connection\n‚úÖ Input field AccessInput.user description changed from User code to connect to supplier. to User code to connect to supplier\n‚úÖ Input field AccessInput.isTest description changed from Indicates if this access can be used for testing or not to Indicates if Access can be used for testing or not\n‚úÖ Input field AccessInput.supplier description changed from supplier for this access. to Supplier for this Access\n‚úÖ Input field AccessInput.isActive description changed from Indicates if the access is active. to Indicates if Access is active\n‚úÖ Input field AccessInput.name description changed from Access descriptive name to Access descriptive unique name\n‚úÖ Field AdminMutation.deleteGroup description changed from Delete group and members from this group. to Delete group and members from this group\n‚úÖ Field AdminMutation.deleteMember description changed from Delete member from specific group. to Delete a member from specific group\n‚úÖ Field AdminMutation.updateGroup description changed from Update group adding or removing apis. to Update group additions or remove APIs\n‚úÖ Field AdminMutation.updateMember description changed from Update member adding or removing roles. to Update member additions or remove roles\n‚úÖ Field AdminMutation.createGroup description changed from Create group. Group \u0026quot;owner\u0026quot; is optional. to Create group; group \u0026quot;owner\u0026quot; is optional\n‚úÖ Field AdminMutation.createMember description changed from Create member. Requires specific group and role. to Create member; requires specific group and role\n‚úÖ Field AdminMutation.deleteSupplierFromGroup description changed from Removes Supplier visibility to groups. to Removes Supplier visibility to groups\n‚úÖ Field AdminMutation.grantSupplierToGroup description changed from Grants Supplier visibility to a group. to Grants Supplier visibility to a group\n‚úÖ Field AdminMutation.deleteAccessFromGroup description changed from Removes Access visibility to groups. to Removes Access visibility to groups\n‚úÖ Field AdminMutation.grantAccessToGroup description changed from Grants Access visibility to a group. to Grants Access visibility to a group\n‚úÖ Field AdminMutation.updateAccess description changed from Updates an Access. to Updates an Access\n‚úÖ Field AdminMutation.createAccess description changed from Creates an Access. to Creates an Access\n‚úÖ Field createOrganization was added to object type AdminMutation\n‚úÖ Description Mutations are operations that change or update data in the server. on type Mutation has changed to Mutations are operations that change or update data on the server\n‚úÖ Description List of business rules to filter the options that you are interested. on type BusinessRules has changed to LList of business rules for filtering options based on your interests.\n‚úÖ Field BusinessRules.businessRulesType description changed from Different business rules to filter the options that you are interested. to Different business rules for filtering options that you are interested in\n‚úÖ Field BusinessRules.optionsQuota description changed from Options quota per avail. Numbers of options wanted by avail. to Options quota per availability; numbers of options based on availability\n‚úÖ Field DefaultSettings.businessRules description changed from Business rules. to Business rules\n‚úÖ Field DefaultSettings.market description changed from Targeted zone, country or point of sale to be used in request. to Targeted zone, country or point-ofsale-to be used in request.\n‚úÖ Field DefaultSettings.nationality description changed from Nationality of the guest (use ISO3166_1_alfa_2). to Nationality of the guest (use ISO3166_1_alfa_2)\n‚úÖ Field DefaultSettings.currency description changed from Currency requested if supported by supplier. to Currency requested if supported by supplier\n‚úÖ Field DefaultSettings.language description changed from Language to be used in request. to Language to be used in request\n‚úÖ Field DefaultSettings.connectUser description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.toThis field is occurs only if the authorization header is of the type JWT.. It is used for to change the user that\nhas been set by default in the preload.`\n‚úÖ Input field organizations was added to input object type StatsFilterInput\n‚úÖ Field Stats.updatedAt description changed from Update date to Date updated\n‚úÖ Field Stats.createdAt description changed from Create date to Date created\n‚úÖ Field Stats.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field Mapping.errors description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Input field CriteriaBookingDatesInput.end description changed from `End date.\nFormat: yyyy-MM-dd.toEnd date.\nFormat: YYYY-MM-DD.`\n‚úÖ Input field CriteriaBookingDatesInput.start description changed from `Start date.\nFormat: yyyy-MM-dd.toStart date.\nFormat: YYYY-MM-DD.`\n‚úÖ Description for enum value BookStatusType.UNKNOWN changed from `The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client‚Äôs responsibility to check if the booking is OKtoThe reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client‚Äôs responsibility to check if the booking is OK`\n‚úÖ Description for enum value BookStatusType.ON_REQUEST changed from `The reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client‚Äôs responsibility to check if the booking is OKtoThe reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client‚Äôs responsibility to check if the booking is OK`\n‚úÖ Field BookingRoom.description description changed from Description about the room. to Description about the room\n‚úÖ Field BookingRoom.code description changed from Indicates the room code. to Indicates the room code\n‚úÖ Field BookingRoom.occupancyRefId description changed from ID reference to the occupancy. to ID reference to the occupancy\n‚úÖ Field BookingHotel.occupancies description changed from List of occupancies of the request. to List of occupancies for the request\n‚úÖ Field BookingHotel.checkOut description changed from `Check-out date for the booking.\nFormat: yyyy-MM-ddtoCheck-out date for the booking.\nFormat: YYYY-MM-DD`\n‚úÖ Field BookingHotel.checkIn description changed from `Check-in date for the booking.\nFormat: yyyy-MM-ddtoCheck-in date for booking\nFormat: YYYY-MM-DD`\n‚úÖ Field BookingHotel.creationDate description changed from `Creation date of the booking.\nFormat: yyyy-MM-ddtoCreation date of the booking.\nFormat: YYYY-MM-DD`\n‚úÖ Description Holder object that contains the pax name and surname. on type Holder has changed to Holder object that contains the occupant's (pax's) name and surname.\n‚úÖ Description Contains information about booking. on type HotelBookingDetail has changed to Contains information about booking\n‚úÖ Field HotelBookingDetail.addOns description changed from Extra information about the option. to Additional information about the option\n‚úÖ Field HotelBooking.warnings description changed from Potentially harmful situations or errors that won't force the service to abort to Potentially harmful situations or errors, but ones that will not forcibly abort the service\n‚úÖ Field HotelBooking.errors description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field HotelBooking.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n‚úÖ Input field HotelCriteriaQuoteInput.language description changed from Language to be used in request. to Language to be used in request\n‚úÖ Description Contains information about quote. on type HotelOptionQuote has changed to Contains information about quote(s)\n‚úÖ Field HotelOptionQuote.addOns description changed from Extra information about the option. to Additional information about the option\n‚úÖ Field HotelQuote.warnings description changed from Potentially harmful situations or errors that won't force the service to abort to Potentially harmful situations or errors, but ones that will not forcibly abort the service\n‚úÖ Field HotelQuote.errors description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field HotelQuote.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n‚úÖ Description Urls Input on type UrlsInput has changed to URLs Input\n‚úÖ Input field UrlsInput.book description changed from Specific Url for Valuation method. to Specific URL for Valuation method.\n‚úÖ Input field UrlsInput.quote description changed from Specific Url for Reservation method. to Specific URL for Reservation method.\n‚úÖ Input field UrlsInput.search description changed from Specific Url for Availability method. to Specific URL for Availability method.\n‚úÖ Input field ConfigurationInput.markets description changed from Source markets allowed for the access. to Source Markets allowed for the Access\n‚úÖ Input field ConfigurationInput.urls description changed from Url or endpoint for the connection. to URL or endpoint for the connection.\n‚úÖ Input field ConfigurationInput.password description changed from Password for the connection. to Password for the connection\n‚úÖ Input field SettingsBaseInput.businessRules description changed from Business rules. to Business rules\n‚úÖ Input field HotelSettingsInput.businessRules description changed from Business rules. to Business rules\n‚úÖ Input field HotelSettingsInput.client description changed from This field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload. to This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload.\n‚úÖ Input field HotelSettingsInput.connectUser description changed from `This field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)toThis field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)`\n‚úÖ Description `Criteria of search contains destination, travel dates and the number of pax in each room.\nYou must preload the other fields in our system by complete the fields absents.on typeHotelCriteriaSearchInputhas changed toSearch criteria contains destination, travel dates and the number of pax in each room.\nYou must preload the other fields in our system by complete the fields absents.`\n‚úÖ Input field HotelCriteriaSearchInput.market description changed from Targeted zone, country or point of sale to be used in request. to Targeted zone, country or point-ofsale-to be used in request.\n‚úÖ Input field HotelCriteriaSearchInput.nationality description changed from Nationality of the guest (use ISO3166_1_alfa_2). to Nationality of the guest (use ISO3166_1_alfa_2)\n‚úÖ Input field HotelCriteriaSearchInput.currency description changed from Currency requested if supported by supplier. to Currency requested if supported by supplier\n‚úÖ Input field HotelCriteriaSearchInput.language description changed from Language to be used in request. to Language to be used in request\n‚úÖ Input field HotelCriteriaSearchInput.occupancies description changed from `For multi room bookings, this array will contain multiple elements (rooms).\nFor each room you have to specify its own occupancy.toFor multi-room bookings, this array will contain multiple elements (rooms).\nFor each room you have to specify its own occupancy.`\n‚úÖ Input field HotelCriteriaSearchInput.hotels description changed from Contains the list of hotels's ID. to Contains the list of hotels's ID\n‚úÖ Input field HotelCriteriaSearchInput.checkOut description changed from `Check-out, date for the booking.\nFormat: yyyy-MM-ddtoCheck-out, booking date\nFormat: YYYY-MM-DD`\n‚úÖ Input field HotelCriteriaSearchInput.checkIn description changed from `Check-in date for the booking.\nFormat: yyyy-MM-ddtoCheck-in date for booking\nFormat: YYYY-MM-DD`\n‚úÖ Description Extra information about the option. on type AddOn has changed to Additional information about the option\n‚úÖ Field AddOn.value description changed from Contains the AddOn values. to Contains AddOn values.\n‚úÖ Field AddOn.key description changed from Contains the keyword/Id to identify the AddOn. to Contains keyword/ID to identify the AddOn.\n‚úÖ Description Extra information about the option. on type AddOns has changed to Additional information about the option\n‚úÖ Deprecation reason on field AddOns.distribute has changed from deprecated from 2018-03-12. You can find it in distribution AddOn. to You can find it in distribution AddOn\n‚úÖ Description Contains information about a cancel penalty. on type CancelPenalty has changed to Contains information for cancellation penalities..\n‚úÖ Field CancelPenalty.value description changed from Value of the cancel policy. to Value of the cancellation policy\n‚úÖ Field CancelPenalty.currency description changed from Currency used in the cancel policy. to Currency used in the cancellation policy\n‚úÖ Field CancelPenalty.penaltyType description changed from Type of penalty. This can be Nights, Percent or Import. to Type of penalty; this can be Nights, Percent or Import\n‚úÖ Field CancelPenalty.hoursBefore description changed from Cancellation fees applicable x number of hours before the check in date. to Cancellation fees applicable X number of hours before the check-in date\n‚úÖ Description Contains information about a cancel policy. on type CancelPolicy has changed to Information about a policy cancellation.\n‚úÖ Field CancelPolicy.cancelPenalties description changed from List of cancel penalties. to List of cancellation penalties\n‚úÖ Field CancelPolicy.refundable description changed from Indicates if the option is refundable or not. to Indicates if the option is refundable or non-refundable\n‚úÖ Field Bed.shared description changed from Specifies if the bed is shared or not. to Specifies if the bed is shared or not\n‚úÖ Field Bed.count description changed from Indicates number of beds in the room. to Indicates number of beds in a room\n‚úÖ Field Bed.description description changed from Description about the bed. to Description about the bed\n‚úÖ Field Bed.type description changed from Specifies the bed type. to Specifies the bed type\n‚úÖ Description Informs about the currency of origin, and the rate applied over result returned by the supplier. on type Exchange has changed to Provides information about the currency of original, and its rate applied over the results returned by the Supplier.\n‚úÖ Field Exchange.rate description changed from Informs about the rate applied over result. to Provides information about the rate applied over results\n‚úÖ Field Exchange.currency description changed from Informs about the currency of origin. to Provide information about the currency of origin\n‚úÖ Description `Price indicates the value of the room/option.\nSupplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.on typePricehas changed toPrice indicates the value of the room/option.\nSupplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.`\n‚úÖ Field Price.exchange description changed from `Informs about the currency of origin, and the rate applied over result returned by the supplier.\nThis information is mandatory.toProvides information about the currency of original, and its rate applied over the results returned by the Supplier.\nThis information is mandatory.`\n‚úÖ Field Room.description description changed from Description about the room. to Description about the room\n‚úÖ Field Room.code description changed from Indicates the room code. to Indicates the room code\n‚úÖ Field Room.occupancyRefId description changed from ID reference to the occupancy. to ID reference to the occupancy\n‚úÖ Description An option includes hotel information, meal plan, total price, conditions and room description. on type HotelOptionSearch has changed to An option includes hotel information, meal plan, total price, conditions and room description\n‚úÖ Field HotelOptionSearch.addOns description changed from Extra information about the option. to Additional information about the option\n‚úÖ Field HotelOptionSearch.occupancies description changed from List of occupancies of the request. to List of occupancies for the request\n‚úÖ Description Criteria of search contains destination, travel dates and the number of pax in each room. on type CriteriaSearch has changed to Search criteria contains destination, travel dates and the number of pax in each room.\n‚úÖ Field CriteriaSearch.market description changed from Targeted zone, country or point of sale to be used in request. to Targeted zone, country or point-ofsale-to be used in request.\n‚úÖ Field CriteriaSearch.nationality description changed from Nationality of the guest (use ISO3166_1_alfa_2). to Nationality of the guest (use ISO3166_1_alfa_2)\n‚úÖ Field CriteriaSearch.currency description changed from Currency requested if supported by supplier. to Currency requested if supported by supplier\n‚úÖ Field CriteriaSearch.language description changed from Language to be used in request. to Language to be used in request\n‚úÖ Field CriteriaSearch.occupancies description changed from `For multi room bookings, this array will contain multiple elements (rooms).\nFor each room you have to specify its own occupancy.toFor multi-room bookings, this array will contain multiple elements (rooms).\nFor each room you have to specify its own occupancy.`\n‚úÖ Field CriteriaSearch.hotels description changed from Contains the list of hotels's ID. to Contains the list of hotels's ID\n‚úÖ Field CriteriaSearch.checkOut description changed from `Check-out, date for the booking.\nFormat: yyyy-MM-ddtoCheck-out, booking date\nFormat: YYYY-MM-DD`\n‚úÖ Field CriteriaSearch.checkIn description changed from `Check-in date for the booking.\nFormat: yyyy-MM-ddtoCheck-in date for booking\nFormat: YYYY-MM-DD`\n‚úÖ Description Data sent \u0026amp; received in the supplier‚Äôs native format. on type AuditData has changed to Data sent and received in the supplier‚Äôs native format.\n‚úÖ Field AuditData.transactions description changed from List of transactions data. to List of transactions data\n‚úÖ Field Response.auditData description changed from Data sent \u0026amp; received in the supplier‚Äôs original format. to Data sent and received in the supplier‚Äôs original format.\n‚úÖ Description Results of Avail Hotel. Contains all the available options for a given date and itinerary. on type HotelSearch has changed to Results from Avail Hotel; contains all the available options for a given date and itinerary\n‚úÖ Field HotelSearch.errors description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field HotelSearch.auditData description changed from Data sent \u0026amp; received in the supplier's native format. to Data sent and received in the supplier's native format.\n‚úÖ Field Destination.updatedAt description changed from Update date to Date updated\n‚úÖ Field Destination.createdAt description changed from Create date to Date created\n‚úÖ Field Destination.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field Media.updatedAt description changed from Update date. to Date updated.\n‚úÖ Description Something, such as a swimming pool or shopping centre, that is intended to make life more pleasant or comfortable for the people. on type Amenity has changed to An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.\n‚úÖ Field Amenity.type description changed from Indicates the type of the amenity. to Indicates the type of Amenity.\n‚úÖ Field DestinationData.type description changed from Indicates destination type, zone or city. to Indicates destination type, zone or city\n‚úÖ Field DestinationData.parent description changed from Parent destination code. to Parent destination code\n‚úÖ Field DestinationData.closestDestinations description changed from Closest destinations, indicates the minimal destinations. to Closest destinations, indicates destinations in proximity\n‚úÖ Field DestinationData.available description changed from Indicates if you can search by destination. to Indicates if you can search by destination\n‚úÖ Description Indicates the location of the hotel. on type Location has changed to Indicates the location of the hotel\n‚úÖ Field HotelData.location description changed from Indicates the location of the hotel. to Indicates the location of the hotel\n‚úÖ Field Hotel.updatedAt description changed from Update date to Date updated\n‚úÖ Field Hotel.createdAt description changed from Create date to Date created\n‚úÖ Field Hotel.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field RoomData.roomCode description changed from Code of the hotel in the Supplier selected. to Code of the hotel in the Supplier selected\n‚úÖ Field RoomData.code description changed from Internal code to perform availability. to Internal code for checking availability\n‚úÖ Field RoomStatic.updatedAt description changed from Update date to Date updated\n‚úÖ Field RoomStatic.createdAt description changed from Create date to Date created\n‚úÖ Field RoomStatic.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field CategoryData.categoryCode description changed from Code of the hotel in the Supplier selected. to Code of the hotel based on the Supplier selected\n‚úÖ Field CategoryData.code description changed from Internal code to perform availability. to Internal code for checking availability\n‚úÖ Field Category.updatedAt description changed from Update date to Date updated\n‚úÖ Field Category.createdAt description changed from Create date to Date created\n‚úÖ Field Category.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field BoardData.boardCode description changed from Code of the hotel in the Supplier selected. to Code of the hotel in the Supplier selected\n‚úÖ Field BoardData.code description changed from Internal code to perform availability. to Internal code for checking availability\n‚úÖ Description Board Type on type Board has changed to Board type.\n‚úÖ Field Board.updatedAt description changed from Update date to Date updated\n‚úÖ Field Board.createdAt description changed from Create date to Date created\n‚úÖ Field Board.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field ClientData.isActive description changed from Indicates whether a Client is active to Indicates whether a Client is active or inactive\n‚úÖ Field Client.updatedAt description changed from Update date to Date updated\n‚úÖ Field Client.createdAt description changed from Create date to Date created\n‚úÖ Field Client.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field Urls.book description changed from Specific Url for Valuation method. to Specific URL for Valuation method.\n‚úÖ Field Urls.quote description changed from Specific Url for Reservation method. to Specific URL for Reservation method.\n‚úÖ Field Urls.search description changed from Specific Url for Availability method. to Specific URL for Availability method.\n‚úÖ Field Supplier.updatedAt description changed from Update date to Date updated\n‚úÖ Field Supplier.createdAt description changed from Create date to Date created\n‚úÖ Field Supplier.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field AccessData.shared description changed from Parent access if Shared access to Parent Access if Shared Access\n‚úÖ Field AccessData.rateRules description changed from Business rules types for the access. to Business rule types for the Access\n‚úÖ Field AccessData.markets description changed from Markets allowed for the access. to Markets allowed for the Access\n‚úÖ Field AccessData.parameters description changed from List of parameters for additional information. to List of parameters for additional information\n‚úÖ Field AccessData.urls description changed from Specific Urls to Specific URLs\n‚úÖ Field AccessData.password description changed from Password for the connection. to Password for the connection\n‚úÖ Field AccessData.user description changed from User code to connect to supplier. to User code to connect to supplier\n‚úÖ Field AccessData.isTest description changed from Indicates if this access can be used for testing or not to Indicates if Access can be used for testing or not\n‚úÖ Field AccessData.supplier description changed from supplier for this access. to Supplier for this Access\n‚úÖ Field AccessData.isActive description changed from Indicates if the access is active. to Indicates if Access is active\n‚úÖ Field Node.updatedAt description changed from Update date to Date updated\n‚úÖ Field Node.createdAt description changed from Create date to Date created\n‚úÖ Field Node.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field Access.updatedAt description changed from Update date to Date updated\n‚úÖ Field Access.createdAt description changed from Create date to Date created\n‚úÖ Field Access.error description changed from Errors that will lead the service to abort to Errors that abort services\n‚úÖ Field AdminQuery.operations description changed from Operations list. Specify operations codes to filter operations. to Operations list; specify operations codes to filter operations.\n‚úÖ Field AdminQuery.roles description changed from Roles list. Specify role codes to filter roles. to Roles list; specify role codes to filter roles.\n‚úÖ Field AdminQuery.resources description changed from Resources list. Specify resource codes to filter resources. to Resources list; specify resource codes to filter resources.\n‚úÖ Field AdminQuery.apis description changed from Apis list. Specify api codes to filter apis. to Apis list; specify api codes to filter apis.\n‚úÖ Field AdminQuery.groups description changed from Groups list. Specify group codes to filter groups. to Groups list; specify group codes to filter groups.\n‚úÖ Field AdminQuery.members description changed from Members list. Specify member codes to filter members. to Members list; specify member codes to filter members.\n‚úÖ Field AdminQuery.products description changed from Products list. Specify product codes to filter products. to Members list; specify member codes to filter members\n‚úÖ Field AdminQuery.organizations description changed from Organizations list. Specify organization codes to filter organizations. to Organizations list; specify organization codes to filter organizations\n‚úÖ Field AdminQuery.serviceApi description changed from Obtain a ServiceApi to Obtain a ServiceAPI\n‚úÖ Field AdminQuery.accesses description changed from Obtain a list of accesses for a filter. to Obtain a list of accesses for a filter\n‚úÖ Type OrganizationTemplate was added\n‚úÖ Type CreateOrganizationInput was added\n2018-05-16 üõë Type for argument input on field MappeaMutation.mapSupplier changed from MappeaXMapSupplierInput! to MappeaMapSupplierInput!\nüõë Type for argument input on field MappeaMutation.uploadFile changed from MappeaXUploadFileInput! to MappeaUploadFileInput!\nüõë Type for argument input on field MappeaMutation.confirmUpload changed from MappeaXConfirmUploadInput! to MappeaConfirmUploadInput!\nüõë Type for argument input on field MappeaQuery.getMappeaStats changed from MappeaXGetMappeaStatsInput! to MappeaGetMappeaStatsInput!\nüõë Field RoleData.label changed type from String! to String\nüõë Type MappeaXEditOrganizationInput was removed\nüõë Type MappeaXAddOrganizationInput was removed\nüõë Type MappeaXMapSupplierInput was removed\nüõë Type MappeaXUploadFileInput was removed\nüõë Type MappeaXSupplierConfirmedInput was removed\nüõë Type MappeaXConfirmUploadInput was removed\nüõë Type MappeaXGetMappeaStatsInput was removed\n‚úÖ Input field AccessInput.name changed type from String! to String\n‚úÖ Field deleteClientFromGroup was added to object type AdminMutation\n‚úÖ Field grantClientToGroup was added to object type AdminMutation\n‚úÖ Field label was added to object type ProductData\n‚úÖ Field label was added to object type OperationData\n‚úÖ Field label was added to object type APIData\n‚úÖ Field label was added to object type ResourceData\n‚úÖ Field label was added to object type MemberData\n‚úÖ Field label was added to object type GroupData\n‚úÖ Field label was added to object type GroupCommonData\n‚úÖ Field label was added to object type OrganizationData\n‚úÖ Type MappeaEditOrganizationInput was added\n‚úÖ Type MappeaAddOrganizationInput was added\n‚úÖ Type MappeaMapSupplierInput was added\n‚úÖ Type MappeaUploadFileInput was added\n‚úÖ Type MappeaSupplierConfirmedInput was added\n‚úÖ Type MappeaConfirmUploadInput was added\n‚úÖ Type MappeaGetMappeaStatsInput was added\n2018-05-03 ‚úÖ Field asserts was added to object type StatsInfo\n‚úÖ Field clients was added to object type GroupData\n‚úÖ Field suppliers was added to object type GroupData\n‚úÖ Field clients was added to object type GroupCommonData\n‚úÖ Field suppliers was added to object type GroupCommonData\n‚úÖ Field clients was added to object type OrganizationData\n‚úÖ Field suppliers was added to object type OrganizationData\n‚úÖ Input field serviceAPI was added to input object type SupplierFilter\n‚úÖ Input field isActive was added to input object type SupplierFilter\n‚úÖ Input field groupID was added to input object type SupplierFilter\n‚úÖ Type StatsAssert was added\n2018-05-02 üõë Enum value BOOK was removed from enum OperationType\n‚ö†Ô∏è Enum value BOOKING was added to enum OperationType\n‚úÖ Input field accesses was added to input object type StatsFilterInput\n‚úÖ Field accesses was added to object type GroupData\n‚úÖ Field allMembers was added to object type GroupData\n‚úÖ Field accesses was added to object type GroupCommonData\n‚úÖ Field allMembers was added to object type GroupCommonData\n‚úÖ Field accesses was added to object type OrganizationData\n‚úÖ Field allMembers was added to object type OrganizationData\n2018-04-25 ‚ö†Ô∏è Field DestinationData.type changed type from DestinationType! to DestinationType\n‚ö†Ô∏è Field type was removed from object type OperationData\n‚ö†Ô∏è Field memberType was removed from object type MemberData\n‚ö†Ô∏è Argument Last: Int was removed from field AdminQuery.clients\n‚ö†Ô∏è Argument Last: Int was removed from field AdminQuery.suppliers\n‚ö†Ô∏è Argument Last: Int was removed from field AdminQuery.accesses\n‚úÖ Enum value ORG was added to enum GroupType\n‚úÖ Field types was added to object type OperationData\n‚úÖ Argument type: OperationType added to field APIData.operations\n‚úÖ Argument type: GroupType added to field APIData.groups\n‚úÖ Argument type: GroupType added to field MemberData.groups\n‚úÖ Field type was added to object type MemberData\n‚úÖ Argument type: MemberType added to field GroupData.members\n‚úÖ Argument type: MemberType added to field GroupCommonData.members\n‚úÖ Argument type: MemberType added to field OrganizationData.members\n‚úÖ Argument type: OperationType added to field AdminQuery.operations\n‚úÖ Argument last: Int added to field AdminQuery.clients\n‚úÖ Argument last: Int added to field AdminQuery.suppliers\n‚úÖ Argument last: Int added to field AdminQuery.accesses\n2018-04-24 ‚ö†Ô∏è Input field groupUsers was removed from input object type StatsFilterInput\n‚úÖ Input field StatsFilterInput.operation changed type from [ServiceOperationType!]! to [ServiceOperationType!]\n‚úÖ Field OperationData.type description changed from `totype: [OperationType!]!`\n‚úÖ Field error was added to object type ServiceApi\n‚úÖ Input field name was added to input object type ClientFilter\n‚úÖ Type OperationType was added\n2018-04-18 ‚ö†Ô∏è Type for argument input on field AdminMutation.updateClient changed from ClientInput! to UpdateClientInput!\n‚ö†Ô∏è Type for argument input on field AdminMutation.createClient changed from ClientInput! to CreateClientInput!\n‚ö†Ô∏è Field StatsData was removed from object type Stats\n‚ö†Ô∏è ClientInput was removed\n‚úÖ Field statsData was added to object type Stats\n‚úÖ Type MappeaXEditOrganizationInput was added\n‚úÖ Type MappeaXAddOrganizationInput was added\n‚úÖ Type UpdateClientInput was added\n‚úÖ Type CreateClientInput was added\n2018-04-17 ‚ö†Ô∏è Field MemberData.roles changed type from String to RoleConnection\n‚úÖ Field mappea was added to object type Mutation\n‚úÖ Field operations was added to object type APIData\n‚úÖ Field children was added to object type GroupData\n‚úÖ Argument codes: [ID!] added to field MemberData.roles\n‚úÖ Argument after: String added to field MemberData.roles\n‚úÖ Argument before: String added to field MemberData.roles\n‚úÖ Argument last: Int added to field MemberData.roles\n‚úÖ Argument first: Int added to field MemberData.roles\n‚úÖ Field children was added to object type GroupCommonData\n‚úÖ Field children was added to object type OrganizationData\n‚úÖ Field travelOperation was added to object type ServiceOperation\n‚úÖ Field operations was added to object type AdminQuery\n‚úÖ Input field HotelSettingsInput.client description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.toThis field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload.`\n‚úÖ Input field HotelSettingsInput.connectUser description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)toThis field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)`\n‚úÖ Input field group was added to input object type HotelSettingsInput\n‚úÖ Field mappea was added to object type Query\n‚úÖ Field stats was added to object type Query\n‚úÖ Type LegacyData was added\n‚úÖ Type MappeaXMapSupplierInput was added\n‚úÖ Type MappeaXUploadFileInput was added\n‚úÖ Type SupplierDetected was added\n‚úÖ Type UploadFileData was added\n‚úÖ Type UploadFileResponse was added\n‚úÖ Type MappeaXSupplierConfirmedInput was added\n‚úÖ Type MappeaXConfirmUploadInput was added\n‚úÖ Type OnlyStatusResponse was added\n‚úÖ Type MappeaMutation was added\n‚úÖ Type MappeaXGetMappeaStatsInput was added\n‚úÖ Type GetMappeaStatsData was added\n‚úÖ Type GetMappeaStatsResponse was added\n‚úÖ Type File was added\n‚úÖ Type GetUploadedFilesData was added\n‚úÖ Type GetUploadedFilesResponse was added\n‚úÖ Type MappeaQuery was added\n‚úÖ Type ServiceApiType was added\n‚úÖ Type StatsFilterInput was added\n‚úÖ Type ServiceOperationType was added\n‚úÖ Type StatsInfoTypes was added\n‚úÖ Type StatsInfo was added\n‚úÖ Type OperationDetailed was added\n‚úÖ Type Ratios was added\n‚úÖ Type StatsData was added\n‚úÖ Type Stats was added\n‚úÖ Type StatsEdge was added\n‚úÖ Type StatsConnection was added\n‚úÖ Type StatsQuery was added\n‚úÖ Type OperationData was added\n‚úÖ Type Operation was added\n‚úÖ Type OperationEdge was added\n‚úÖ Type OperationConnection was added\n2018-04-03 ‚ö†Ô∏è Input field accesses was removed from input object type ClientInput\n‚ö†Ô∏è Field accesses was removed from object type ClientData\n‚úÖ Input field groupID was added to input object type ClientFilter\n‚úÖ Field serviceApi was added to object type AdminQuery\n‚úÖ Description for enum value BookStatusType.UNKNOWN changed from `The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client√¢‚Ç¨‚Ñ¢s responsibility to check if the booking is OKtoThe reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client‚Äôs responsibility to check if the booking is OK`\n‚úÖ Description for enum value BookStatusType.ON_REQUEST changed from `The reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client√¢‚Ç¨‚Ñ¢s responsibility to check if the booking is OKtoThe reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client‚Äôs responsibility to check if the booking is OK`\n‚úÖ Description The information and credentials required to access the supplier√¢‚Ç¨‚Ñ¢s system. on type ConfigurationInput has changed to The information and credentials required to access the supplier‚Äôs system.\n‚úÖ Description Data sent \u0026amp; received in the supplier√¢‚Ç¨‚Ñ¢s native format. on type AuditData has changed to Data sent \u0026amp; received in the supplier‚Äôs native format.\n‚úÖ Field Response.auditData description changed from Data sent \u0026amp; received in the supplier√¢‚Ç¨‚Ñ¢s original format. to Data sent \u0026amp; received in the supplier‚Äôs original format.\n‚úÖ Field AdviseMessage.type description changed from `TODO:\nError type: The following types are valid:\nXXX: asd asd√É¬±oajskd l√É¬±a ldtoTODO:\nError type: The following types are valid:\nXXX: asd asd√±oajskd l√±a ld`\n‚úÖ Type ServiceApiFilter was added\n‚úÖ Type ServiceOperation was added\n‚úÖ Type ServiceApi was added\n2018-03-20 ‚úÖ Input field HotelSettingsInput.connectUser description changed from This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload. to This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload. @deprecated(reason: \u0026quot;deprecated from 2018-03-19. Redundant.\u0026quot;)\n‚úÖ Input field client was added to input object type HotelSettingsInput\n2018-03-14 ‚úÖ Deprecation reason on field AddOns.distribute has changed from `todeprecated from 2018-03-12. You can find it in distribution AddOn.`\n‚úÖ Field distribution was added to object type AddOns\n‚úÖ Type AddOn was added\n2018-03-08 ‚ö†Ô∏è Input field DestinationsCodes was removed from input object type HotelXDestinationListInput\n‚ö†Ô∏è Field boardData was removed from object type Destination\n‚ö†Ô∏è Input field ParameterInput.key changed type from ID! to String!\n‚ö†Ô∏è Field DestinationData.code changed type from String! to ID!\n‚ö†Ô∏è WebSearchResult was removed\n‚úÖ Enum value NON_REFUNDABLE was added to enum RateRulesType\n‚úÖ Enum value NORMAL was added to enum RateRulesType\n‚úÖ Input field destinationCodes was added to input object type HotelXDestinationListInput\n‚úÖ Field token was added to object type DestinationConnection\n‚úÖ Field destinationData was added to object type Destination\n‚úÖ Field destinationSearcher was added to object type HotelXQuery\n‚úÖ Field destinations was added to object type HotelXQuery\n‚úÖ Type HotelXDestinationSearcherInput was added\n‚úÖ Type DestinationSearchResult was added\n2018-03-05 ‚ö†Ô∏è Input field AccessInput.parameters changed type from String to [ParameterInput]\n‚ö†Ô∏è Input field name was added to input object type AccessInput\n‚ö†Ô∏è Input field descriptiveInfoLimit was removed from input object type AccessInput\n‚ö†Ô∏è Input field serviceAPI was removed from input object type SupplierFilter\n‚ö†Ô∏è Input field isActive was removed from input object type SupplierFilter\n‚ö†Ô∏è Field updatedAt was removed from object type Parameter\n‚ö†Ô∏è Field createdAt was removed from object type Parameter\n‚ö†Ô∏è Field error was removed from object type Parameter\n‚ö†Ô∏è Field parameterData was removed from object type Parameter\n‚ö†Ô∏è Field code was removed from object type Parameter\n‚ö†Ô∏è Parameter object type no longer implements Node interface\n‚ö†Ô∏è Field SupplierData.accesses changed type from AccessConnection! to AccessConnection\n‚ö†Ô∏è Field legacy was removed from object type SupplierData\n‚ö†Ô∏è Argument after: String was removed from field AccessData.parameters\n‚ö†Ô∏è Argument before: String was removed from field AccessData.parameters\n‚ö†Ô∏è Argument Last: Int was removed from field AccessData.parameters\n‚ö†Ô∏è Argument first: Int was removed from field AccessData.parameters\n‚ö†Ô∏è Field AccessData.parameters changed type from ParameterConnection to [Parameter]\n‚ö†Ô∏è Field descriptiveInfoLimit was removed from object type AccessData\n‚ö†Ô∏è Input field ParameterInput.key changed type from String! to ID!\n‚ö†Ô∏è Input field filter was removed from input object type HotelXHotelListInput\n‚ö†Ô∏è Field Destination.code changed type from String! to ID!\n‚ö†Ô∏è Field texts was removed from object type Destination\n‚ö†Ô∏è Field available was removed from object type Destination\n‚ö†Ô∏è Field Location.closestDestination changed type from Destination! to DestinationData!\n‚ö†Ô∏è Field HotelConnection.token changed type from String! to String\n‚ö†Ô∏è SupplierInput was removed\n‚ö†Ô∏è ProviderInput was removed\n‚ö†Ô∏è LegacyDataInput was removed\n‚ö†Ô∏è ParameterData was removed\n‚ö†Ô∏è ParameterEdge was removed\n‚ö†Ô∏è ParameterConnection was removed\n‚ö†Ô∏è LegacyData was removed\n‚úÖ Destination object implements Node interface\n‚úÖ Input field isTest was added to input object type AccessInput\n‚úÖ Field updateClient was added to object type AdminMutation\n‚úÖ Field createClient was added to object type AdminMutation\n‚úÖ Description `on typeParameterhas changed toParameters for additional information for the supplier\u0026rsquo;s configuration.`\n‚úÖ Field value was added to object type Parameter\n‚úÖ Field key was added to object type Parameter\n‚úÖ Description TGX Platform API implementation on type Provider has changed to Temporary type to use only during SQL server's lifetime\n‚úÖ Field SupplierData.accesses description changed from Accesses in a Supplier to Accesses where the supplier is referenced\n‚úÖ Field SupplierData.supplierGroup description changed from SupplierGroup to SupplierGroup Internal Supplier grouping\n‚úÖ Field isTest was added to object type AccessData\n‚úÖ Field name was added to object type AccessData\n‚úÖ Field clients was added to object type AdminQuery\n‚úÖ Description Parameters for additional information for the supplier's configuration. on type ParameterInput has changed to Parameters Input.\n‚úÖ Input field ParameterInput.value description changed from Contains the parameter values. to `Contains the parameter values.\nThis information is mandatory.`\n‚úÖ Input field ParameterInput.key description changed from Contains the keyword/Id to identify a parameter. to `Contains the keyword/Id to identify a parameter.\nThis information is mandatory.`\n‚úÖ Description Url's Input on type UrlsInput has changed to Urls Input\n‚úÖ Input field destinationCodes was added to input object type HotelXHotelListInput\n‚úÖ Description Information about destinantion on type Destination has changed to Destination Type\n‚úÖ Field Destination.code description changed from Destination Code to Destination ID\n‚úÖ Field updatedAt was added to object type Destination\n‚úÖ Field createdAt was added to object type Destination\n‚úÖ Field error was added to object type Destination\n‚úÖ Field boardData was added to object type Destination\n‚úÖ Type HotelXDestinationListInput was added\n‚úÖ Type WebSearchResult was added\n‚úÖ Type DestinationEdge was added\n‚úÖ Type DestinationConnection was added\n‚úÖ Type ClientInput was added\n‚úÖ Type ClientFilter was added\n‚úÖ Type ClientData was added\n‚úÖ Type Client was added\n‚úÖ Type ClientEdge was added\n‚úÖ Type ClientConnection was added\n‚úÖ Type DestinationType was added\n‚úÖ Type DestinationData was added\n2018-02-21 ‚ö†Ô∏è Field updateHotel was removed from object type HotelXMutation\n‚ö†Ô∏è Input field SupplierFilter.serviceAPI changed type from Int to [Int]\n‚ö†Ô∏è Field avail was removed from object type Destination\n‚ö†Ô∏è Field name was removed from object type Destination\n‚ö†Ô∏è Field Contact.web changed type from URI! to URI\n‚ö†Ô∏è Field Location.zipCode changed type from String! to String\n‚ö†Ô∏è Field Location.city changed type from String! to String\n‚ö†Ô∏è Field Location.address changed type from String! to String\n‚ö†Ô∏è Field geocode was removed from object type Location\n‚ö†Ô∏è Field Amenity.code changed type from ID! to String!\n‚ö†Ô∏è Field updatedAt was removed from object type Amenity\n‚ö†Ô∏è Field createdAt was removed from object type Amenity\n‚ö†Ô∏è Field error was removed from object type Amenity\n‚ö†Ô∏è Field AmenityData was removed from object type Amenity\n‚ö†Ô∏è Amenity object type no longer implements Node interface\n‚ö†Ô∏è Field Media.code changed type from ID! to String\n‚ö†Ô∏è Field createdAt was removed from object type Media\n‚ö†Ô∏è Field error was removed from object type Media\n‚ö†Ô∏è Field mediaData was removed from object type Media\n‚ö†Ô∏è Media object type no longer implements Node interface\n‚ö†Ô∏è Field HotelData.rank changed type from Rank! to [Int!]!\n‚ö†Ô∏è Field HotelData.contact changed type from Contact! to Contact\n‚ö†Ô∏è Argument after: String was removed from field HotelData.amenities\n‚ö†Ô∏è Argument before: String was removed from field HotelData.amenities\n‚ö†Ô∏è Argument last: Int was removed from field HotelData.amenities\n‚ö†Ô∏è Argument first: Int was removed from field HotelData.amenities\n‚ö†Ô∏è Argument language: String was removed from field HotelData.amenities\n‚ö†Ô∏è Field HotelData.amenities changed type from AmenityConnection to [Amenity!]\n‚ö†Ô∏è Argument after: String was removed from field HotelData.medias\n‚ö†Ô∏è Argument before: String was removed from field HotelData.medias\n‚ö†Ô∏è Argument last: Int was removed from field HotelData.medias\n‚ö†Ô∏è Argument first: Int was removed from field HotelData.medias\n‚ö†Ô∏è Argument type: ApplicationArea was removed from field HotelData.medias\n‚ö†Ô∏è Field HotelData.medias changed type from MediaConnection to [Media!]\n‚ö†Ô∏è Field destination was removed from object type HotelData\n‚ö†Ô∏è Field generalDescription was removed from object type HotelData\n‚ö†Ô∏è Field additionalInformation was removed from object type HotelData\n‚ö†Ô∏è Field name was removed from object type HotelData\n‚ö†Ô∏è Type for argument relay on field HotelXQuery.hotels changed from RelayInput to RelayInput!\n‚ö†Ô∏è Argument criteria: HotelXHotelListInput! added to field HotelXQuery.hotels\n‚ö†Ô∏è Argument hotels: HotelXHotelQueryInput was removed from field HotelXQuery.hotels\n‚ö†Ô∏è StatusResponse was removed\n‚ö†Ô∏è HotelStatus was removed\n‚ö†Ô∏è GiataID was removed\n‚ö†Ô∏è HotelXHotelDataInput was removed\n‚ö†Ô∏è HotelXHotelMutationInput was removed\n‚ö†Ô∏è RankInput was removed\n‚ö†Ô∏è HotelXHotelQueryInput was removed\n‚ö†Ô∏è Rank was removed\n‚ö†Ô∏è Geocode was removed\n‚ö†Ô∏è Information was removed\n‚ö†Ô∏è AmenityData was removed\n‚ö†Ô∏è AmenityEdge was removed\n‚ö†Ô∏è AmenityConnection was removed\n‚ö†Ô∏è ApplicationArea was removed\n‚ö†Ô∏è MediaData was removed\n‚ö†Ô∏è MediaEdge was removed\n‚ö†Ô∏è MediaConnection was removed\n‚úÖ Field accesses was added to object type SupplierData\n‚úÖ Description Destination type on type Destination has changed to Information about destinantion\n‚úÖ Field Destination.code changed type from String to String!\n‚úÖ Field Destination.code description changed from Destination code. to Destination Code\n‚úÖ Field texts was added to object type Destination\n‚úÖ Field available was added to object type Destination\n‚úÖ Description Contact type on type Contact has changed to Contact Data.\n‚úÖ Field Contact.web description changed from Web. to Web\n‚úÖ Field Contact.fax description changed from Fax. to Fax\n‚úÖ Field Contact.telephone description changed from Telephone. to Telephone\n‚úÖ Field Contact.email description changed from Email. to Email\n‚úÖ Description Location on type Location has changed to Indicates the location of the hotel.\n‚úÖ Field Location.country description changed from Country ISO Code to Country where is the Hotel.\n‚úÖ Field Location.zipCode description changed from Zip Code to Contains the zipCode.\n‚úÖ Field Location.city description changed from City to Contains the city\n‚úÖ Field Location.address description changed from Street Address to Contains Hotel Address\n‚úÖ Field closestDestination was added to object type Location\n‚úÖ Field coordinates was added to object type Location\n‚úÖ Description `on typeAmenityhas changed toSomething, such as a swimming pool or shopping centre, that is intended to make life more pleasant or comfortable for the people.`\n‚úÖ Field Amenity.code description changed from `toCode`\n‚úÖ Field texts was added to object type Amenity\n‚úÖ Field type was added to object type Amenity\n‚úÖ Description `on typeMediahas changed toContains media information.`\n‚úÖ Field Media.updatedAt description changed from Update date to Update date.\n‚úÖ Field Media.code description changed from `toCode.`\n‚úÖ Field texts was added to object type Media\n‚úÖ Field url was added to object type Media\n‚úÖ Field type was added to object type Media\n‚úÖ Field order was added to object type Media\n‚úÖ Field HotelData.rank description changed from `toRank indicates the supplier categorization.`\n‚úÖ Field HotelData.contact description changed from Contact information. to Contact cotains information about hotel contact.\n‚úÖ Field HotelData.location description changed from `toIndicates the location of the hotel.`\n‚úÖ Field HotelData.amenities description changed from `toAmenities`\n‚úÖ Field HotelData.medias description changed from `toMedias`\n‚úÖ Field HotelData.hotelCode description changed from Code of the hotel in the Supplier selected. to Code to perform availability.\n‚úÖ Field HotelData.code description changed from Internal code to perform availability to Internal code.\n‚úÖ Field descriptions was added to object type HotelData\n‚úÖ Field cardTypes was added to object type HotelData\n‚úÖ Field chainCode was added to object type HotelData\n‚úÖ Field property was added to object type HotelData\n‚úÖ Field hotelName was added to object type HotelData\n‚úÖ Field hotelCodeSupplier was added to object type HotelData\n‚úÖ Description Hotel type on type Hotel has changed to Hotel Type\n‚úÖ Field token was added to object type HotelConnection\n‚úÖ Argument token: String added to field HotelXQuery.hotels\n‚úÖ Field rooms was added to object type HotelXQuery\n‚úÖ Field categories was added to object type HotelXQuery\n‚úÖ Field boards was added to object type HotelXQuery\n‚úÖ Type HotelXRoomQueryInput was added\n‚úÖ Type RoomData was added\n‚úÖ Type RoomStatic was added\n‚úÖ Type RoomEdge was added\n‚úÖ Type RoomConnection was added\n‚úÖ Type HotelXHotelListInput was added\n‚úÖ Type DescriptionType was added\n‚úÖ Type Description was added\n‚úÖ Type ApplicationAreaType was added\n‚úÖ Type Coordinates was added\n‚úÖ Type Property was added\n‚úÖ Type HotelXCategoryQueryInput was added\n‚úÖ Type CategoryData was added\n‚úÖ Type Category was added\n‚úÖ Type CategoryEdge was added\n‚úÖ Type CategoryConnection was added\n‚úÖ Type HotelXBoardQueryInput was added\n‚úÖ Type Text was added\n‚úÖ Type BoardData was added\n‚úÖ Type Board was added\n‚úÖ Type BoardEdge was added\n‚úÖ Type BoardConnection was added\n2018-01-30 ‚ö†Ô∏è Input field hotelCode was added to input object type HotelXHotelDataInput\n‚ö†Ô∏è Input field supplierCode was removed from input object type HotelXHotelDataInput\n‚ö†Ô∏è Field rsAccess was removed from object type StatAccess\n‚ö†Ô∏è Field rqAccess was removed from object type StatAccess\n‚ö†Ô∏è Field dockerID was removed from object type StatAccess\n‚ö†Ô∏è Field dockerID was removed from object type StatPlugin\n‚ö†Ô∏è Field rsPlugin was removed from object type StatsRequest\n‚ö†Ô∏è Field rqPlugin was removed from object type StatsRequest\n‚ö†Ô∏è Field rs was removed from object type StatsRequest\n‚ö†Ô∏è Field rq was removed from object type StatsRequest\n‚ö†Ô∏è Field config was removed from object type StatsRequest\n‚ö†Ô∏è Field supplierCode was removed from object type HotelData\n‚úÖ Description for enum value BookStatusType.UNKNOWN changed from The status of the booking is unknown to `The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client\u0026rsquo;s responsibility to check if the booking is OK`\n‚úÖ Description for enum value BookStatusType.ON_REQUEST changed from The status of the booking is on request to `The reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client\u0026rsquo;s responsibility to check if the booking is OK`\n‚úÖ Description for enum value BookStatusType.OK changed from The status of the booking is available to The reservation was completed with no problems\n‚úÖ Field StatTransaction.parseResponse description changed from `toParse response time`\n‚úÖ Field StatTransaction.workerCommunication description changed from `toWorker connection time`\n‚úÖ Field StatTransaction.buildRequest description changed from `toBuild request time`\n‚úÖ Field StatTransaction.total description changed from `toTotal transaction time`\n‚úÖ Field StatTransaction.reference description changed from `toExtra information about transaction.`\n‚úÖ Field StatAccess.plugins description changed from `toPlugin execution time`\n‚úÖ Field StatAccess.transactions description changed from `toDetail transaction time`\n‚úÖ Field StatAccess.cities description changed from `toNumber of cities`\n‚úÖ Field StatAccess.zones description changed from `toNumber of zones`\n‚úÖ Field StatAccess.hotels description changed from `toNumber of hotels`\n‚úÖ Field StatAccess.staticConfiguration description changed from `toStatic configuration time`\n‚úÖ Field StatAccess.total description changed from `toTotal access time`\n‚úÖ Field StatAccess.name description changed from `toAccess name`\n‚úÖ Field responseAccess was added to object type StatAccess\n‚úÖ Field requestAccess was added to object type StatAccess\n‚úÖ Field StatPlugin.total description changed from `tototal plugin time`\n‚úÖ Field StatPlugin.name description changed from `toPlugin name`\n‚úÖ Field StatsRequest.Accesses description changed from `toDetail access time`\n‚úÖ Field StatsRequest.dockerID description changed from `toDocker Id`\n‚úÖ Field StatsRequest.cities description changed from `toNumber of cities`\n‚úÖ Field StatsRequest.zones description changed from `toNumber of zones`\n‚úÖ Field StatsRequest.hotels description changed from `toNumber of hotels`\n‚úÖ Field StatsRequest.process description changed from `toProcess time. Contains communication time, parse time and plugin time.`\n‚úÖ Field StatsRequest.validation description changed from `toRequest validation time`\n‚úÖ Field StatsRequest.total description changed from `toTotal transaction time`\n‚úÖ Field responsePlugin was added to object type StatsRequest\n‚úÖ Field requestPlugin was added to object type StatsRequest\n‚úÖ Field response was added to object type StatsRequest\n‚úÖ Field request was added to object type StatsRequest\n‚úÖ Field configuration was added to object type StatsRequest\n‚úÖ Field hotelCode was added to object type HotelData\n2018-01-29 ‚ö†Ô∏è Field HotelCancelPayload.stats changed type from RequestStats to StatsRequest\n‚ö†Ô∏è Field HotelBookPayload.stats changed type from RequestStats to StatsRequest\n‚ö†Ô∏è Input field supplierCode was added to input object type HotelXHotelDataInput\n‚ö†Ô∏è Input field code was removed from input object type HotelXHotelDataInput\n‚ö†Ô∏è Type for argument relay on field HotelXMutation.updateHotel changed from HotelXRelayInput to RelayInput\n‚ö†Ô∏è Field HotelBooking.stats changed type from RequestStats to StatsRequest\n‚ö†Ô∏è Field HotelQuote.stats changed type from RequestStats to StatsRequest\n‚ö†Ô∏è Field external was removed from object type StatAccess\n‚ö†Ô∏è Field Response.stats changed type from RequestStats to StatsRequest\n‚ö†Ô∏è Field HotelSearch.stats changed type from RequestStats to StatsRequest\n‚ö†Ô∏è Input field codes was removed from input object type HotelXHotelQueryInput\n‚ö†Ô∏è Type for argument language on field HotelData.generalDescription changed from Language to String\n‚ö†Ô∏è Type for argument language on field HotelData.additionalInformation changed from Language to String\n‚ö†Ô∏è Type for argument language on field HotelData.amenities changed from Language to String\n‚ö†Ô∏è Type for argument relay on field HotelXQuery.hotels changed from HotelXRelayInput to RelayInput\n‚ö†Ô∏è RequestStats was removed\n‚ö†Ô∏è HotelXRelayInput was removed\n‚úÖ Input field supplierGroup was added to input object type SupplierInput\n‚úÖ Input field serviceAPI was added to input object type SupplierFilter\n‚úÖ Input field isActive was added to input object type SupplierFilter\n‚úÖ Field supplierGroup was added to object type SupplierData\n‚úÖ Description Url's on type UrlsInput has changed to Url's Input\n‚úÖ Field plugins was added to object type StatAccess\n‚úÖ Field rsAccess was added to object type StatAccess\n‚úÖ Field rqAccess was added to object type StatAccess\n‚úÖ Field dockerID was added to object type StatAccess\n‚úÖ Field cities was added to object type StatAccess\n‚úÖ Field zones was added to object type StatAccess\n‚úÖ Field hotels was added to object type StatAccess\n‚úÖ Input field supplierCodes was added to input object type HotelXHotelQueryInput\n‚úÖ Field HotelData.code description changed from Internal code to perform availability and/or supplier code. to Internal code to perform availability\n‚úÖ Field supplierCode was added to object type HotelData\n‚úÖ Type StatPlugin was added\n‚úÖ Type StatsRequest was added\n‚úÖ Type RelayInput was added\n2018-01-17 ‚ö†Ô∏è Field AccessEdge.node changed type from Supplier to Access\n‚ö†Ô∏è Field value was removed from object type Parameter\n‚ö†Ô∏è Field key was removed from object type Parameter\n‚ö†Ô∏è Field supplierGroups was removed from object type SupplierData\n‚ö†Ô∏è Field hotelCodes was removed from object type SupplierData\n‚ö†Ô∏è Field dll was removed from object type SupplierData\n‚ö†Ô∏è Field Supplier.supplierData changed type from SupplierData! to SupplierData\n‚ö†Ô∏è Field AccessData.parameters changed type from [Parameter!] to ParameterConnection\n‚ö†Ô∏è Field AccessData.urls changed type from Urls! to Urls\n‚ö†Ô∏è Field AccessData.supplier changed type from String! to Supplier!\n‚ö†Ô∏è Field AccessData.code changed type from String! to ID!\n‚ö†Ô∏è Field id was removed from object type AccessData\n‚ö†Ô∏è Field suppliers was removed from object type AccessData\n‚ö†Ô∏è Field Access.accessData changed type from AccessData! to AccessData\n‚úÖ Parameter object implements Node interface\n‚úÖ Description Parameters for additional information for the supplier's configuration. on type Parameter has changed to ``\n‚úÖ Field updatedAt was added to object type Parameter\n‚úÖ Field createdAt was added to object type Parameter\n‚úÖ Field error was added to object type Parameter\n‚úÖ Field parameterData was added to object type Parameter\n‚úÖ Field code was added to object type Parameter\n‚úÖ Field legacy was added to object type SupplierData\n‚úÖ Field serviceApi was added to object type SupplierData\n‚úÖ Field context was added to object type SupplierData\n‚úÖ Field provider was added to object type SupplierData\n‚úÖ Field name was added to object type SupplierData\n‚úÖ Argument after: String added to field AccessData.parameters\n‚úÖ Argument before: String added to field AccessData.parameters\n‚úÖ Argument Last: Int added to field AccessData.parameters\n‚úÖ Argument first: Int added to field AccessData.parameters\n‚úÖ Field AccessData.code description changed from Access code. to Unique AccessConfiguration identifier\n‚úÖ Field shared was added to object type AccessData\n‚úÖ Field rateRules was added to object type AccessData\n‚úÖ Field descriptiveInfoLimit was added to object type AccessData\n‚úÖ Field deleteSupplierFromGroup was added to object type AdminMutation\n‚úÖ Field grantSupplierToGroup was added to object type AdminMutation\n‚úÖ Field deleteAccessFromGroup was added to object type AdminMutation\n‚úÖ Field grantAccessToGroup was added to object type AdminMutation\n‚úÖ Field updateAccess was added to object type AdminMutation\n‚úÖ Field createAccess was added to object type AdminMutation\n‚úÖ Input field RankInput.rank4 changed type from Boolean! to Boolean\n‚úÖ Input field RankInput.rank3 changed type from Boolean! to Boolean\n‚úÖ Input field RankInput.rank2 changed type from Boolean! to Boolean\n‚úÖ Input field RankInput.rank1 changed type from Boolean! to Boolean\n‚úÖ Field suppliers was added to object type AdminQuery\n‚úÖ Field accesses was added to object type AdminQuery\n‚úÖ Field CancelPolicy.refundable description changed from Indicates if the option is refundable or not. This information is mandatory. to Indicates if the option is refundable or not.\n‚úÖ Input field ranks was added to input object type HotelXHotelQueryInput\n‚úÖ Type SupplierInput was added\n‚úÖ Type ProviderInput was added\n‚úÖ Type LegacyDataInput was added\n‚úÖ Type Context was added\n‚úÖ Type GroupInput was added\n‚úÖ Type AccessInput was added\n‚úÖ Type SupplierFilter was added\n‚úÖ Type SupplierEdge was added\n‚úÖ Type SupplierConnection was added\n‚úÖ Type AccessFilter was added\n‚úÖ Type ParameterData was added\n‚úÖ Type ParameterEdge was added\n‚úÖ Type ParameterConnection was added\n‚úÖ Type LegacyData was added\n‚úÖ Type Provider was added\n2018-01-11 ‚ö†Ô∏è Field codes was removed from object type Map\n‚ö†Ô∏è Field supplierCode was removed from object type Map\n‚ö†Ô∏è Field maps was removed from object type MappingEntity\n‚ö†Ô∏è Argument BoardCodes: [String!] was removed from field MappingContext.boards\n‚ö†Ô∏è Argument roomCodes: [String!] was removed from field MappingContext.rooms\n‚ö†Ô∏è Argument hotelCodes: [String!] was removed from field MappingContext.hotels\n‚ö†Ô∏è Field rates was removed from object type MappingContext\n‚ö†Ô∏è Field contextCode was removed from object type MappingContext\n‚ö†Ô∏è Argument supplierCodes: [String!] was removed from field Mapping.contexts\n‚ö†Ô∏è Argument contextCodes: [String!] was removed from field Mapping.contexts\n‚ö†Ô∏è Field DefaultSettings.market changed type from String! to String\n‚ö†Ô∏è Field DefaultSettings.connectUser changed type from String! to String\n‚ö†Ô∏è Input field HotelSettingsInput.suppliers changed type from [SupplierInput!] to [HotelXSupplierInput!]\n‚ö†Ô∏è Field HotelSearch.requestCriteria changed type from CriteriaSearch! to CriteriaSearch\n‚ö†Ô∏è Field HotelSearch.context changed type from String! to String\n‚ö†Ô∏è Field Geocode.longitude changed type from String! to Float!\n‚ö†Ô∏è Field Geocode.latitude changed type from String! to Float!\n‚ö†Ô∏è Argument after: String was removed from field HotelXQuery.hotels\n‚ö†Ô∏è Argument before: String was removed from field HotelXQuery.hotels\n‚ö†Ô∏è Argument last: Int was removed from field HotelXQuery.hotels\n‚ö†Ô∏è Argument first: Int was removed from field HotelXQuery.hotels\n‚ö†Ô∏è Argument language: String was removed from field HotelXQuery.hotels\n‚ö†Ô∏è Argument codes: [String!] was removed from field HotelXQuery.hotels\n‚ö†Ô∏è HotelInput was removed\n‚ö†Ô∏è AccessInput was removed\n‚ö†Ô∏è SupplierInput was removed\n‚úÖ Field loadFile was added to object type HotelXMutation\n‚úÖ Field updateHotel was added to object type HotelXMutation\n‚úÖ Field maps was added to object type Map\n‚úÖ Field code was added to object type Map\n‚úÖ Field contexts was added to object type MappingEntity\n‚úÖ Argument codes: [String!] added to field MappingContext.boards\n‚úÖ Field MappingContext.boards description changed from Mapping of boards. Filter by board code. to Mapping of boards, you can filter by board code.\n‚úÖ Argument codes: [String!] added to field MappingContext.rooms ‚úÖ Field MappingContext.rooms description changed from Mapping of rooms. Filter by room code. to Mapping of rooms, you can filter by room code.\n‚úÖ Argument codes: [String!] added to field MappingContext.hotels ‚úÖ Field MappingContext.hotels description changed from Mapping of hotels. Filter by hotel code. to Mapping of hotels, you can filter by hotel code.\n‚úÖ Field code was added to object type MappingContext\n‚úÖ Argument codes: [String!] added to field Mapping.contexts\n‚úÖ Field warnings was added to object type Mapping\n‚úÖ Field errors was added to object type Mapping\n‚úÖ Argument type: GroupType added to field AdminQuery.groups\n‚úÖ Argument type: MemberType added to field AdminQuery.members\n‚úÖ Field rank was added to object type HotelData\n‚úÖ Argument relay: HotelXRelayInput added to field HotelXQuery.hotels\n‚úÖ Argument hotels: HotelXHotelQueryInput added to field HotelXQuery.hotels\n‚úÖ Field mapping was added to object type HotelXQuery\n‚úÖ Type StatusResponse was added\n‚úÖ Type HotelStatus was added\n‚úÖ Type RankInput was added\n‚úÖ Type HotelXHotelDataInput was added\n‚úÖ Type HotelXHotelMutationInput was added\n‚úÖ Type HotelXAccessInput was added\n‚úÖ Type HotelXSupplierInput was added\n‚úÖ Type HotelXRelayInput was added\n‚úÖ Type HotelXHotelQueryInput was added\n‚úÖ Type Rank was added\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/product-load/hotelrateplannotif/",
	"title": "HotelRatePlanNotif",
	"tags": [],
	"description": "HotelRatePlanNotif message",
	"content": " Providers will send a HotelRatePlanNotifRQ message to push Rate Plans to sellers. TGX will process the data and respond with an error code if needed or success if everything is correct.\nHotelRatePlanNotifRQ Example for a RatePlan\n\u0026lt;HotelRatePlanNotif\u0026gt; \u0026lt;request\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;/\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;/\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;HOT123\u0026quot;\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;TAR321\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2007-04-01\u0026quot; End = \u0026quot;2007-12-31\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;1\u0026quot; AmountAfterTax = \u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax = \u0026quot;130.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;3\u0026quot; AmountAfterTax = \u0026quot;195.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; Amount = \u0026quot;20.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;43\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2007-04-01\u0026quot; End = \u0026quot;2007-12-31\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Amount = \u0026quot;20.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2007-04-01\u0026quot; End = \u0026quot;2007-12-31\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;10.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;TAR333\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax = \u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;43\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Amount = \u0026quot;20.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;10.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;TAR333\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; Code = \u0026quot;2-0-0\u0026quot; AmountAfterTax = \u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; Code = \u0026quot;3-0-0\u0026quot; AmountAfterTax = \u0026quot;180.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;43\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Amount = \u0026quot;20.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-04-01\u0026quot; End = \u0026quot;2013-12-31\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;10.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;TAR333\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-01-01\u0026quot; End = \u0026quot;2014-02-01\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax = \u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; Code = \u0026quot;2-0-0\u0026quot; AmountAfterTax = \u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; Code = \u0026quot;3-0-0\u0026quot; AmountAfterTax = \u0026quot;180.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;1\u0026quot; AmountAfterTax = \u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax = \u0026quot;130.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;3\u0026quot; AmountAfterTax = \u0026quot;195.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Percent = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; Percent = \u0026quot;20.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;43\u0026quot; InvType = \u0026quot;ROOM\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2014-01-01\u0026quot; End = \u0026quot;2014-02-01\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Amount = \u0026quot;20.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2014-01-01\u0026quot; End = \u0026quot;2014-02-01\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;10.00\u0026quot; InvCode = \u0026quot;1\u0026quot; SupplementType = \u0026quot;Board\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanNotif\u0026gt;  Example for a Derived RatePlan\n\u0026lt;HotelRatePlanNotif\u0026gt; \u0026lt;request Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID = \u0026quot;Provider1\u0026quot;\u0026gt;\u0026lt;/RequestorID\u0026gt; \u0026lt;BookingChannel\u0026gt; \u0026lt;CompanyName Code = \u0026quot;ClientTravelAgency1\u0026quot;\u0026gt;\u0026lt;/CompanyName\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-07-01\u0026quot; End = \u0026quot;2014-07-31\u0026quot; AdjustedPercentage = \u0026quot;10\u0026quot; AdjustUpIndicator = \u0026quot;0\u0026quot;\u0026gt;\u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-08-01\u0026quot; End = \u0026quot;2014-08-31\u0026quot; AdjustedPercentage = \u0026quot;10\u0026quot; AdjustUpIndicator = \u0026quot;0\u0026quot;\u0026gt;\u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanNotif\u0026gt;     Element Number Type Description     HotelRatePlanNotif/request 1  Root Node.   RatePlans 1     @HotelCode 1 String Hotel code whose information is provided by the method.   RatePlans/RatePlan 1..n  Present if rate exists.   @RatePlanCode 1 String Rate code.   @RatePlanStatusType 0..1 String Active or Deactivated (You can save prices with initial status deactivated if you want). If this attribute is missing, the price is saved as active. This is only valid for derived rates, the prices for a base rate always are saved as active. This attribute does not deactivate the rate.   @BaseRatePlanCode 0..1 String Rate code of the base RatePlan. Only used for derived rates.   @CurrencyCode 0..1 String ISO Currency (EUR). Not used for derived rates.   RatePlans/RatePlan/Rates/Rate 1     @Start 1 Date Start date of rate.   @End 1 Date End date of rate.   @AdjustedPercentage 0..1 Decimal The percentage off the base rate plan amount used to determine the price of this derived rate plan. Only used for derived rates.   @AdjustedAmount 0..1 Decimal The amount which should be added to the base rate plan to determine the price of this derived rate plan. Only used for derived rates.   @AdjustUpIndicator 0..1 Boolean When true, the adjusted amount or adjusted percentage is added to the amount specified for the base rate plan to determine the derived rate amount. When false, the adjusted amount or adjusted percentage is subtracted from the amount specified for the base rate plan to determine the derived rate amount. Only used for derived rates.   RatePlans/RatePlan/Rates/Rate/BaseByGuestAmts 0..1  Different types of price can come in the same BaseByGuestAmts element.   RatePlans/RatePlan/Rates/Rate/BaseByGuestAmts/BaseByGuestAmt 1..n     @AmountAfterTax 1 Decimal Total amount for @NumberOfGuests indicated by day. This amount doesn\u0026rsquo;t include fees, however include taxes.   @NumberOfGuests 0..1 Integer Number of passengers. If @NumberOfGuests is not informed then @Type must be specified. The maximum @NumberOfGuests is the standard occupancy of the room.   @Type 0..1 Integer Amounts per Room or per Occupancy. If @Type=25 the price is per room. If @Type=14 price is per occupancy, @Code is mandatory and @NumberOfGuests and AdditionalGuestAmounts are not allowed.   @Code 0..1 String Mandatory if @Type=14. The occupancy code is defined by AdultNumber-ChildNumber-InfantNumber. @Code for an occupancy of 2 adults, 1 child and 0 babies would be \u0026ldquo;2-1-0\u0026rdquo;.   \u0026hellip;/Rate/AdditionalGuestAmounts 0..1  Not used for derived rates.   \u0026hellip;/AdditionalGuestAmounts/AdditionalGuestAmount 1..n  Price and information about the additional pax (children, infants or extra adults).   @MaxAdditionalGuests 1 Integer Number of additional pax, one node for each additional pax, int the above example has one for first child, and one for second.   @Type 0..1 String OTA AmountDeterminationType. If not specified then the price is a supplement, if @Type is Exclusive then the the price is absolute.   @AgeQualifyingCode 1 Integer (10 - Adult,8 - Child,7 - Infant).   @Amount 0..1 Decimal Price for each additional pax.   @Percent 0..1 Decimal Percent for each additional pax.   RatePlans/Supplements 0..1  Present if supplements by board exists. Not used for derived rates.   RatePlans/Supplements/Supplement 1..n     @Start 1 Date Start date of this supplement.   @End 1 Date End date of this supplement.   @AgeQualifyingCode 0..1 Integer Age qualifyingCode which affects this supplement (10 - Adult,8 - Child,7 - Infant). Not allowed if charging board supplement by occupancy.   @Amount 1 Decimal Amount of supplement.   @SupplementType 1 String (Board).   @InvCode 1 String OTA MPT Code if @SupplementType is Board.   RatePlans/RatePlan/SellableProducts 0..1  List of sellable products. Null for derived rates.   RatePlans/SellableProducts/SellableProduct 1..n     @InvCode 1 Integer Sellable Product Code.   @InvType 1 Integer Sellable product type (ROOM).    \nImportant information:  You must always load only one price type per message/notif. If you send different price type in the same message, our system will only use and load one with the following criteria: price by occupancy, price by guest/standard occupancy, price per room. If you send different price type for the same day in different messages, only the newest one would be loaded. The prices under the standard occupancy are ALWAYS loaded with BaseByGuestAmts. Children and babies are not allowed in BaseByGuestAmts. Children and babies must always be defined in AdditionalGuestAmounts. The possible Type values in the AdditionalGuestAmount tag are Exclusive and not specified.  If there\u0026rsquo;s no value specified then the price is a relative and it\u0026rsquo;s added to the price of the current pax. If the value is \u0026ldquo;Exclusive\u0026rdquo; then the price is absolute and it\u0026rsquo;s the total price of the current pax.  If NumberOfGuests is not specified in tag BaseByGuestAmt then Type=\u0026quot;25\u0026quot; (price per room) or Type=\u0026quot;14\u0026quot; (price per occupancy) must be specified. If Type=\u0026quot;25\u0026quot; only one tag BaseByGuestAmt is allowed. If the price is per room then all AdditionalGuestAmount must be relative. If the price is per occupancy then Type should be 14 and Code should be specified. The occupancy code is defined by AdultNumber-ChildNumber-InfantNumber, for an occupancy of 2 adults, 1 child and 0 babies should be \u0026ldquo;2-1-0\u0026rdquo;. In the examples, the room uses are specified using = AdultNumber - ChildNumber - InfantNumber.  Notify amounts by Guests (Standard Occupancy): Case 1:\nStandard occupancy = 2.\nRoom uses = 1-0-0, 2-0-0.\nWe only load the price for the standard occupancy.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;  There is no price for one adult, so it won\u0026rsquo;t be available.\nThe price for two adults will be 100 = 2*(100\u0026frasl;2).\nCase 2:\nStandard occupancy = 2.\nRoom uses = 1-0-0, 2-0-0.\nWe load the price for the standard occupancy and the price for 1 Adult.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;1\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;130.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;  The price for one Adult will be 100 = 100.\nThe price for two adults will be 130 = 2*(130\u0026frasl;2).\nCase 3:\nStandard occupancy = 2.\nRoom uses = 1-0-0, 2-0-0, 3-0-0.\nWe load the price for the standard occupancy and the price for 1 additional Adult Type default.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  There is no price for one Adult, so it won\u0026rsquo;t be available.\nThe price for two Adults will be 100 = 2*(100\u0026frasl;2).\nThe price for three Adults will be 190 = (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) + (40).\nCase 4:\nStandard occupancy = 2\nRoom uses = 1-0-0, 2-0-0, 3-0-0\nWe load the price for the standard occupancy and the price for 1 additional Adult Type Exclusive.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Type=\u0026quot;Exclusive\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  There is no price for one Adult, so it won\u0026rsquo;t be available.\nThe price for two Adults will be 100 = 2*(100\u0026frasl;2).\nThe price for three Adults will be 140 = (100\u0026frasl;2) + (100\u0026frasl;2) + 40.\nCase 5:\nStandard occupancy = 2.\nRoom uses = 1-0-0, 2-0-0, 1-1-0.\nWe load the price for the standard occupancy and the price for 1 additional Child (AgeQualifyingCode = \u0026ldquo;8\u0026rdquo;) Type default.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  There is no price for one Adult, so it won\u0026rsquo;t be available.\nThe price for two Adults will be 100 = 2*(100\u0026frasl;2).\nThe price for one Adult and one Child will be 100 = 2*(100\u0026frasl;2). All pax under the standard occupancy are considered as Adults.\nCase 5.1:\nstandard occupancy = 2.\nroom uses = 1-0-0, 2-0-0, 1-0-1.\nNOTE: The same samples with children are valid for babies specifying AgeQualifyingCode = \u0026ldquo;7\u0026rdquo;.\nWe load the price for the standard occupancy and the price for 1 additional Baby (AgeQualifyingCode = \u0026ldquo;7\u0026rdquo;) Type default.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;7\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  There is no price for one Adult, so it won\u0026rsquo;t be available.\nThe price for two Adults will be 100 = 2*(100\u0026frasl;2).\nThe price for one Adult and one Child will be 100 = 2*(100\u0026frasl;2). All pax under the standard occupancy are considered as adults.\nCase 6:\nStandard occupancy = 2.\nRoom uses = 1-0-0, 2-0-0, 2-1-0.\nWe load the price for the standard occupancy and the price for 1 additional Child Type default negative price\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;-40.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  There is no price for one Adult, so it won\u0026rsquo;t be available.\nThe price for two Adults will be 100 = 2*(100\u0026frasl;2)\nThe price for one Adult and one Child will be 60 = 2*(100\u0026frasl;2) + ((100\u0026frasl;2) -40).\nCase 7:\nStandard occupancy = 2.\nRoom uses = 1-0-0, 2-0-0, 3-0-0, 4-0-0.\nWe load the price for the standard occupancy and the price for 1 additional Adult and the price for 2 additional Adults.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;10.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; Amount = \u0026quot;-15.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  There is no price for one Adult, so it won\u0026rsquo;t be available.\nThe price for two Adults will be 100 = 2*(100\u0026frasl;2).\nThe price for three Adults will be 160 = (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) + 10).\nThe price for four Adults will be 195 = (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) + 10) + ((100\u0026frasl;2) - 15).\nCase 8:\nStandard occupancy = 2.\nRoom uses = 1-0-0, 2-0-0, 3-0-0, 4-0-0.\nWe load the price for the standard occupancy and the price for each additional Adult (Without specifying MaxAdditionalGuests).\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;-10.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  There is no price for one Adult, so it won\u0026rsquo;t be available.\nThe price for two Adults will be 100 = 2*(100\u0026frasl;2).\nThe price for three Adults will be 140 = (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) -10).\nThe price for four Adults will be 180 = (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) -10) + ((100\u0026frasl;2) - 10).\nCase 9:\nStandard occupancy = 3.\nRoom uses = 1-0-0, 2-0-0, 3-0-0, 4-0-0, 5-0-0.\nWe load the price for the standard occupancy and the price for 1 additional Adult and the price for 2 additional adults.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;3\u0026quot; AmountAfterTax=\u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;-10.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; Amount = \u0026quot;15.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  There is no price for one Adult, so it won\u0026rsquo;t be available.\nThere is no price for two Adults, so it won\u0026rsquo;t be available.\nThe price for three Adults will be 150 = 3*(150\u0026frasl;3).\nThe price for four Adults will be 190 = (150\u0026frasl;3) + (150\u0026frasl;3) + (150\u0026frasl;3) + ((150\u0026frasl;3) - 10).\nThe price for five Adults will be 255 = (150\u0026frasl;3) + (150\u0026frasl;3) + (150\u0026frasl;3) + ((150\u0026frasl;3) - 10) + ((150\u0026frasl;3) + 15).\nNotify amounts with price per room and additional guests Case 1:\nStandard occupancy = 2.\nRoom uses = 1-0-0, 2-0-0, 1-1-0.\nWe load the price per room Type=\u0026ldquo;25\u0026rdquo;.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;  The price for one Adult will be 100.\nThe price for two Adults will be 100.\nThe price for one Adult and one Child will be 100.\nCase 2:\nStandard occupancy = 2.\nRoom uses = 1-0-0, 2-0-0, 3-0-0, 1-1-0, 3-1-0.\nWe load the price per room but also the price for 1 additional Adult and the price for 1 additional child.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;20.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;10.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  The price for one Adult will be 100.\nThe price for two Adults will be 100.\nThe price for three Adults will be 170 = 100 + (100\u0026frasl;2 + 20).\nThe price for one Adult and one Child will be 100.\nThe price for three Adults and one Child will be 230 = 100 + (100\u0026frasl;2 + 20) + (100\u0026frasl;2 + 10).\nCase 3:\nStandard occupancy = 3.\nRoom uses = 1-0-0, 2-0-0, 3-0-0, 4-0-0.\nWe load the price per room but also the price for 1 additional Adult.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax=\u0026quot;120.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;20.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  The price for one Adult will be 120.\nThe price for two Adults will be 120.\nThe price for three Adults will be 120.\nThe price for four Adults will be 180 = 120 + (120\u0026frasl;3 + 20).\nNotify amounts by Occupancy: Case 1:\nRoom uses = 1-0-0, 2-0-0, 3-0-0.\nWe only load price occupancy = 2 Adults, 0 child and 0 baby.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot; Code = \u0026quot;2-0-0\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;  Room will not be available for 1 or 3 Adults.\nThe price of 2 Adults, 0 child and 0 baby will be 100.\nCase 2:\nRoom uses = 2-1-0, 2-0-1.\nWe load price occupancy = 2 Adults, 1 child and 0 baby; and for occupancy = 2 Adults, 0 child and 1 baby.\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; AmountAfterTax=\u0026quot;95.00\u0026quot; Code = \u0026quot;2-1-0\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; AmountAfterTax=\u0026quot;80.00\u0026quot; Code = \u0026quot;2-0-1\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;  The price for 2 Adults, 1 child and 0 baby will be 95.\nThe price for 2 Adults, 0 child and 1 baby will be 80.\nHotelRatePlanNotifRS Success Response\n\u0026lt;HotelRatePlanNotifResponse xmlns=\u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelRatePlanNotifResult\u0026gt; \u0026lt;Success xmlns=\u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;/\u0026gt; \u0026lt;/HotelRatePlanNotifResult\u0026gt; \u0026lt;/HotelRatePlanNotifResponse\u0026gt;  Error Response\n\u0026lt;HotelRatePlanNotifResponse xmlns=\u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelRatePlanNotifResult\u0026gt; \u0026lt;Errors xmlns=\u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;Error ShortText=\u0026quot;Incomplete AdditionalGuestAmount values\u0026quot; Code=\u0026quot;7\u0026quot;/\u0026gt; \u0026lt;/Errors\u0026gt; \u0026lt;/HotelRatePlanNotifResult\u0026gt; \u0026lt;/HotelRatePlanNotifResponse\u0026gt;  "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/hotels/",
	"title": "Hotels",
	"tags": [],
	"description": "Create and update your hotels",
	"content": " How to add a hotel \nConsiderations It is an incremental load, so bear in mind these considerations:\n If a meal plan exists then it is updated.\n If a meal plan does not exist then it is created.\n Existing meal plans that are not referenced are not removed.\n If an existing meal plan has to be removed from system then you have to contact with TravelgateX.\n If there is any problem with a meal plan\u0026rsquo;s information then it is omitted (and logged) but the load continues.\n  \nSpecifications  File name: Master_Hotels.csv or Master_Portfolio.csv\n Each line represents a unique hotel and contains all the information (fields) about it.\n Inside a line fields are separated using the character |. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8 Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;||\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nControl Lines  Control lines allow us to determine how the content of the file has to be interpreted.\n This type of lines do not contain data, they contain orders for the process and these orders take effect from the control line forward, so control lines should be placed at the begining of the file (and after any header).\n Each control operation has to be given on a separate line (one line one control operation).\n     Control Description     @CTRL:separator= With the control line @CTRL:separator= followed by a character or string it can be defined the fields separator to be used, overwriting the default one or any previous definition. The specified character or string cannot be used inside data because fields would be gathered in a wrong way.  Example of line to set # as the fields separator: @CTRL:separator=#.    \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Hotel code   1 Yes Yes string Hotel name   2 Yes No string Address   3 Yes No decimal Longitude   4 Yes No decimal Latitude   5 Yes No string Phone   6 Yes No string Category code   7 Yes No string Category name   8 Yes No string City code   9 Yes No string City name   10 Yes No string ISO Country Code (2 chars)   11 Yes No string ZIP code   12 Yes No string Chain code   13 Yes No string Chain name    \nExample HotelCode|HotelName|Address|Longitude|Latitude|Phone|CategoryCode|CategoryName|Citycode|CityName|ISOCountryCode|ZIPCode|ChainCode|ChainName 123|Hotel Test Distribution|Parc Bit, 1 (Mallorca)|39.637070|2.63170357|+34871968181|5|5 stars|16563|Palma de Mallorca|ES|||  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/howtos/",
	"title": "How-to Guides",
	"tags": [],
	"description": "To learn the skills you need about Hotel-X",
	"content": " How-to Guides   Multimedia      Guides     "
},
{
	"uri": "https://travelgatex.com/product_template/howtos/",
	"title": "How-to guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": " The guides  Getting Started     Resources     "
},
{
	"uri": "https://travelgatex.com/alerts-x/howtos/",
	"title": "How-to guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": " The guides   Create Alert How to perform mutations on your alerts\n     Query Alerts How to query about your alerts\n     Update Alert How to update your alerts\n    "
},
{
	"uri": "https://travelgatex.com/applications/insights/",
	"title": "Insights",
	"tags": [],
	"description": "Anticipate contracting, mark-ups and trends with data",
	"content": "Insights, our data-driven solution, helps you to know how the market is performing, understand the demand, discover new opportunities and decide the right pricing. We provide benchmark reports at destination and hotel level where Partners can compare their performance against their competitors, using always anonymous competitive sets.\nThe innovative way we store, manage and process data allows us to produce real-time data, historical trends and forecast the travel industry to match your own needs.\n  Overview Insights Overview\n     Datasets and reporting Understand Insights datasets\n     FAQs Insights FAQs\n     Insights changelog Releases Noter for Insights Datasets\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/listsdata/",
	"title": "Lists of Data",
	"tags": [],
	"description": "",
	"content": " Method Goals This paragraph aims to return all of the data lists used in our system: language codes, error codes,currency list, credit cards, nationality and market.\nLanguage Codes    Language Code     English en   Spanish es   Portuguese pt   Italian it   French fr   German de   Brazilian br    Error codes    Code Description     101 TravelgateX\u0026rsquo;s System Exception. (It is possible that it is caused by a bad request.)   102 Error typed from your system.   103 Too many requests.   104 Timeout (Timeout during the execution of an operation (look in the common attribute timeout )).   105 Communication Error between your system and TravelgateX.   201 Hotels not found in HotelList   204 Your system does not return any results (For example no availability).   205 Your system does not accept the distribution in the request.   206 Your system does not accept the dates of the request.   207 Your system does not accept the request.   301 Option not found in policies.   302 Hotel Not Found in DescriptiveInfo.   303 The booking has not been confirmed on your system.    Credit Cards    Codes Names     VI Visa   AX American Express   BC BC Card   CA MasterCard   CB Carte Blanche   CU China Union Pay   DS Discover   DC Diners Club   T Carta Si   R Carte Bleue   N Dankort   L Delta   E Electron   JC Japan Credit Bureau   TO Maestro   S Switch   EC Electronic Cash   EU EuroCard   TP universal air travel card   OP optima   ER Air Canada/RnRoute   XS access   O others    Currency codes Our system uses a standard ISO - 3 for all suppliers.\nMarkets Most suppliers use a standard ISO - 3166_1_alfa_2, but it depends on each individual supplier.\nNationality We use a standard ISO - 3166_1_alfa_2.\nPayment Types    Codes Description     MerchantPay The payment is managed by the supplier.   LaterPay The payment is managed by the hotel. The customer will use a credit-card as a guarantee for the hotel and the payment will be completed at check in.   CardBookingPay The payment is managed by the supplier. The payment is effectuated at the time of booking.   CardChekInPay The payment is managed by the supplier. The payment is effectuated at check in in the hotel.   PayX The payment is managed by TravelgateX\u0026rsquo;s payment system.    Electronic Commerce Indicator Codes Visa, American Express, Diners Club and JCB    ECI Value Description     05 3DS authentication was successful, transactions are secured by 3DS.   06 Authentication was attempted but was not or could not be completed; possible reasons being either the card or its Issuing Bank has yet to participate in 3DS.   07 3DS authentication is either failed or could not be attempted; possible reasons being both card and Issuing Bank are not secured by 3DS, technical errors, or improper configuration.    MasterCard    ECI Value Description     00 3DS authentication is either failed or could not be attempted; possible reasons being both card and Issuing Bank are not secured by 3DS, technical errors, or improper configuration.   01 3DS authentication was attempted but was not or could not be completed; possible reasons being either the card or its Issuing Bank has yet to participate in 3DS, or cardholder ran out of time to authorize.   02 3DS authentication is successful.    PARes Status    Status Value Description     Y Successful Authentication.   N Failed Authentication.   U Unable to complete Authentication.   A Successful Attempts Transaction.   B You can proceed to authorisation using the information received.   R Authentication Rejected.    Card Enrollment Status    Status Value Description     Y Cardholder is enrolled. Bank is participating in 3-D Secure protocol and will return the ACSUrl.   N Cardholder Not Participating ‚Äì Cardholder is not enrolled.   U Unavailable. The DS or ACS is not available for authentication at the time of the request.    Signature Verification Status    Status Value Description     Y Signature of the PARes has been validated successfully.   N PARes could not be validated.    Rate Conditions    Codes Description     NonRefundable Cancellation fee is a 100% from the moment the reservation is create.   Negotiated Special rates the supplier offers to specific buyers. Each one has a code and a description.   Custom A way of setting less standardized rates. Can specify the restrictions that it deems convenient and that are not typified by TGX.   Older55 Rate that can only be sold to people who are 55 yeasrs or older.   Older60 Rate that can only be sold to people who are 60 yeasrs or older.   Older65 Rate that can only be sold to people who are 65 yeasrs or older.   Package Rate can\u0026rsquo;t be sold separately from another product attached to it, such as a flight.   CanaryResident Rate applicable to Canary Islands residents only.   BalearicResident Rate applicable to Balearic Islands residents only.   LargeFamily Rate applied to large families and is determined by each supplier.Check remarks for more details.   Honeymoon Rate applied to those who just got married and is determined by each supplier. Check remarks for more details.   PublicServant Rate applicable to public servants only.   Unemployed Rate applied to those without work.   Mobile Rate applicable to options booked by mobile.   Warranty Rate applicable to options with cancellation warranty.    Restriction Type    Enum Type     1 Company   2 Market   3 Others    Option Type    Codes Description     soloHotel Option Type used for hotels    View Codes    Codes Description     Others Other View.   Airport Airport View.   Bay Bay View.   Golf Golf View.   Mountain Mountain View.   Ocean Ocean View.   Pool Pool View.   River River View.   Water Water View.   Beach Beach View.   Garden Garden View.   Park Park View.   Forest Forest View.   RainForest RainForest View.   Various Various Views.   Countryside Countryside View.   Sea Sea View.    Room Classifications    Codes Description     Others Other kind of room   House House   AllEstablishment All Establishment   Aparthotel Room is in a Aparthotel   Cave Cave Room   Plaza Plaza Room   Bed Bed   Aparments Room is an apartment   Studios Studio Room   Cottage Cottage Room   Bungalow Bungalow   JuniorSuite JuniorSuite Room   Classic Classic Room   Comfort Classic Room   Deluxe Deluxe Room   DeluxeSuite Deluxe Suite   Economy Economy Room   Luxury Luxury Room   Premier Premier Room   Standard Standard Room   Superior Superior Room    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/reservationmanagement/",
	"title": "Management",
	"tags": [],
	"description": "Management operations for bookings performed via TGX",
	"content": " Management operations allows you to operate over the performed bookings with a specific Seller.\nThere are three main operations to manage bookings:\nReservation Management   Booking List How to request a list of your bookings via TGX\n     Amendments How to amend a booking\n     Cancellation How to cancel a booking\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-mappea/",
	"title": "Mappea",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \tTo make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/markets_groups/",
	"title": "Market Group",
	"tags": [],
	"description": "Groups the Search result by markets that share the same product",
	"content": " Market Group X is an optional plugin that allows the user to group the Search result by markets that share the same Options.\nWhat it does The Market Group X plugin groups the input markets from Search depending on the agrupations you\u0026rsquo;ve decided before hand (with a configuration file. More details regarding configuration below.). In order to be able to use the plugin, you\u0026rsquo;ll have to decide which markets to join for which supplier. This way the Search will only process as much transactions as groups has been formed by the plugin, since all of the markets of a same group, would return the same options.\nYou\u0026rsquo;ll have for instance a configuration file with two market groups \u0026ldquo;ES\u0026rdquo;, \u0026ldquo;EN\u0026rdquo; and \u0026ldquo;FR\u0026rdquo;, \u0026ldquo;DE\u0026rdquo;, \u0026ldquo;IT\u0026rdquo; for the supplier AAA. You\u0026rsquo;ld then be launching a Search query with the markets \u0026ldquo;ES\u0026rdquo;, \u0026ldquo;EN\u0026rdquo;, \u0026ldquo;DE\u0026rdquo;, \u0026ldquo;PT\u0026rdquo;, \u0026ldquo;IT\u0026rdquo;. As the \u0026ldquo;ES\u0026rdquo;-\u0026ldquo;EN\u0026rdquo; markets share a same group in the configuration file, we\u0026rsquo;ll only be requesting to AAA supplier one query, instead of two. The same would happen with \u0026ldquo;DE\u0026rdquo; and \u0026ldquo;IT\u0026rdquo;. With the plugin we will be running only 3 querys:\n ES-EN DE-IT PT  instead of 5.\nFollowing the same example case, in the response you\u0026rsquo;ll find the search options with the following market groups: \u0026ldquo;ES\u0026rdquo;, \u0026ldquo;EN\u0026rdquo; and \u0026ldquo;FR\u0026rdquo;, \u0026ldquo;DE\u0026rdquo;, \u0026ldquo;IT\u0026rdquo;.\nThe main goal we\u0026rsquo;re seeking with this plugin is allow the client the possibility to configure the markets as he may find it suits better their supplier connections. The plugin also reduces the transactions processed through our system and to your connected suppliers, which may also improve the response time in some cases.\nBear in mind that this plugin is only available in Search step and the market groups will not be recalculated after Search step. So if you take an option from Search that has been executed with market groups, those groups will remain the same through all the booking flow, even if you change those groups via ftp. This characteristic could also affect the interaction with other plugins like commission, which recalculate the rules in Quote and Book steps.\nHow to use it Use this plugin by adding it to the settings in your HotelX Search Query. You\u0026rsquo;ll also need to add a configuration file.\nExecution example In order to use the plugin, we shoud send the following json in the query variables\n\u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;market_groupX\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;MARKETS_GROUP\u0026quot; } } ]  Loading a Market Group X configuration file is as easy as following the steps below:\nFile Format The file should be in the below format:\n Encoding: UTF-8 File Name: markets_groups.csv Header Row: Supplier,Markets,Other\n Supplier: Identifier of the supplier (supplier code). Markets: List of groups of market. Each group will be separated by \u0026lsquo;;\u0026rsquo; and each market will be separated by \u0026lsquo;#\u0026rsquo;. Other: There will be a value true or false. If the value set is true, the Search input markets (HotelCriteriaSearchInput) not found in this configuration file, will be joined together and we will launch a query to the provider searching for options in this markets. If the value is false, these markets will be discarted.  Delimiter: Comma (\u0026ldquo;,\u0026rdquo;)\n Directory: /F[folder code][unique code]/HotelX[unique code]/\n  Sample File Name: markets_groups.csv\nSample Data:\nSupplier,Markets,Other ABR,ES#EN#IT;FR#DE,false ATH,ES#EN;FR#DE,false BAR,ES#EN;FR#DE,false BSEA,ES#EN;FR#DE#IT,false CAN,ES;EN#IT#FR#DE,false ELB,ES#EN#IT;FR#DE,false HOTELTEST,FR#ES;EN#DE,true  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/codelist/meal-plan-codes/",
	"title": "Meal Plan Codes (OTA MPT)",
	"tags": [],
	"description": "List of Meal Plan Codes",
	"content": "   Code Description     1 All inclusive   2 American   3 Bed \u0026amp; breakfast   4 Buffet breakfast   5 Caribbean breakfast   6 Continental breakfast   7 English breakfast   8 European plan   9 Family plan   10 Full board   11 Full breakfast   12 Half board/modified American plan   13 As brochured   14 Room only   15 Self catering   16 Bermuda   17 Dinner bed and breakfast plan   18 Family American   19 Breakfast   20 Modified   255 Full board And Drinks   256 Half board And Drinks   257 All inclusive Premium   258 Gala Dinner   259 All Inclusive Light   260 Bed and breakfast + Half board   261 All Inclusive Limited    "
},
{
	"uri": "https://travelgatex.com/flight-x/methods/",
	"title": "Methods",
	"tags": [],
	"description": "Flight-X Methods",
	"content": "   Booking Flow How to book\n    "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/configuration/modifiers/",
	"title": "Modifiers",
	"tags": [],
	"description": "Configuration modifiers",
	"content": " Maximum Time to Quote With this rule it can be set the maximum time in minutes than can elapse between the execution of an availability search and the execution of the valuation of any of its selling options: if the elapsed minutes are greater than the maximum then the valuation can not be performed and an error is returned. If this rule is no set with a maximum value then the previous condition will not be applied.\nBy default the value for an agency inherits the one set on the general settings.\nThis rule can be set by agency or by organization on general settings: when defined by agency it can be chosen to set a concrete behaviour or to inherit the value set on the general settings.\nMaximum Time to Booking With this rule it can be set the maximum time in minutes than can elapse between the execution of a valuation and the execution of its reservation: if the elapsed minutes are greater than the maximum then the valuation can not be performed and an error is returned. If this rule is no set with a maximum value then the previous condition will not be applied.\nBy default the value for an agency inherits the one set on the general settings.\nThis rule can be set by agency or by organization on general settings: when defined by agency it can be chosen to set a concrete behaviour or to inherit the value set on the general settings.\nSelling Release If this rule is set with a value then it is applied the following condition to any selling for the agency: if the booking date is NOT included on the release (counting from the check-in date, inclusive) then it cannot be sold (\u0026ldquo;No availability\u0026rdquo; is returned). If this rule is no set with a value then the previous condition will not be applied. By default there is no Selling Release set for an agency.\nExamples:\n If \u0026ldquo;Selling Release\u0026rdquo; is set to 0 then we can only sell on the same day of the check-in. If \u0026ldquo;Selling Release\u0026rdquo; is set to 1 then we can only sell on the same day of the check-in and one day before. If \u0026ldquo;Selling Release\u0026rdquo; is set to 5 then we can only sell on the same day of the check-in and up until five days before.  This rule can only be set by agency.\nClosing Release If this rule is set with a value then it is applied the following condition to any selling for the agency: if the booking date IS included on the release (from the check-in date, inclusive) then it cannot be sold (\u0026ldquo;No availability\u0026rdquo; is returned). If this rule is no set with a value then the previous condition will not be applied. By default there is no Closing Release set for an agency.\nExamples:\n If \u0026ldquo;Closing Release\u0026rdquo; is set to 0 then we cannot sell on the same day of the check-in. If \u0026ldquo;Closing Release\u0026rdquo; is set to 1 then we cannot sell on the same day of the check-in nor one day before. If \u0026ldquo;Closing Release\u0026rdquo; is set to 5 then we cannot sell on the same day of the check-in nor up until five days before.  This rule can only be set by agency.\nFixed Market If there is a market defined then this market will be always used for the agency in any operation and any market received on any request will be discarted. If not then the system will use the market received on the request, or the default one if none is given.\nBy default there is no Fixed Market defined for an agency.\nThis rule can only be set by agency.\n "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Develop our API and connect your system to the markeplace",
	"content": "Overview of API\nTravelgate-X offers the possibility for you to integrate our API and start selling to our portfolio of Buyers just as quick as you can finish the development! When you integrate our API, your system will be able to receive Travelgate\u0026rsquo;s methods and you will be ready to sell!\nTo be able to explain exactly how this connectivity works we will define 3 concepts:\n Buyer: system¬†sending¬†requests¬†to¬†obtain¬†the¬†product¬†(availability)¬†with¬†the¬†purpose¬†of¬†booking. TGX (TravelgateX): system connecting a buyer to a seller. Seller: supplier of hotel product that will be bought by a buyer.  A Buyer\u0026rsquo;s request (for example an availability) can be explained in 6 steps:\n1- A buyer sends a request in TGX\u0026rsquo;s API format to TGX.\n2- TGX receives the request from the buyer, checks if it has the correct format and it sends it to the supplier\u0026rsquo;s endpoint, but with the same TGX API structure. The request is not modified.\n3- Seller receives the request from TGX system in TGX API.\n4- Seller has to build the response following TGX API and send it back to TGX.\n5- TGX receives the response and returns it to the buyer. The response is not modified.\n6- Buyer receives the response in TGX\u0026rsquo;s format.\nThe seller has to be able to receive requests for TravelgateX\u0026rsquo;s API methods. In every request there is a configuration element with the credential information.\nThis connectivity will be by POST method, you can find more information at our suppliers connectivity page\nYou can find a brief definition of the methods to implement, and if they are mandatory for the connectivity or not, in our Data Structure page.\nAlso, it is highly¬†recommended to have a look at our booking flow to understand exactly how the clients will work with the connectivity.\n"
},
{
	"uri": "https://travelgatex.com/getting-started/playground/",
	"title": "Playground",
	"tags": [],
	"description": "Try our API now",
	"content": " Try it For Yourself API Playground is an interactive, fun, and super quick way to get to know our APIs.\nIn the API Playground, as you start to type the query, it will autocomplete with the fields available to complete your query parameters. You can also click on the green Schema button on the right of the Playground window to learn more about our data model and to see all of the options available for building your query.\nYou can set Query variables in the bottom left pane of the Playground. This lets you customize the response you will receive so that only the fields you need are returned in the response.\n(insert a GIF like the one in the launchpad blog post)\nYour First Query Try to make a query now for searching for hotels available:\nquery (hotels in Mallorca)  Click on the big play button in the middle of the playground to see the response.\nYou should get the following:\n(put in query response)   const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x228626cf56-e364-4fd1-4fe0-311e23ac6355\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/ba0469dda654a1639294edaadfed1a65\\/raw\\x22,\\x22divname\\x22:\\x22div_main_playground\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }    \nMore Queries Now try these query examples:\n1. Add query variables to search for a particular date range - explain/show\n2. Search for hotels in Mallorca with a swimming pool - explain/show\nOnce you are comfortable with making queries in the API Playground, you can use the same query structure in your applications. Check out the pages Learning GraphQL to learn more about including queries in the code of your client applications.\nFurther Reading  https://dev-blog.apollodata.com/4-simple-ways-to-call-a-graphql-api-a6807bcdb355 https://medium.com/graphql-mastery/graphql-quick-tip-how-to-pass-variables-into-a-mutation-in-graphiql-23ecff4add57  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/preference/",
	"title": "Preference",
	"tags": [],
	"description": "To give preference to the options that match the preference rules.",
	"content": " Preference is an optional plugin and allows to offer options preferentially in relation to the rules informed by the client.\nWhat it does The preference plugin Gives preference to the options that match the preference rules By doing this, the options will be returned in a preferential way.\nSequentially, the rules will be evaluated until a match is found, upon finding it, the process will be stopped and the preference will be evaluated. In the same way, if the rule is not found, the option will be validated.\nThe matching process uses client Tokens filed, which identify the provided by the client and it is used to filter which business rules can be applied in the request sent.\nPreference plugin workflow We\u0026rsquo;ll try to explain the basics concepts of a preference plugin workflow:\n First starts getting all the args set by the client in the query, like options, parameters (primaryKey among others), client tokens, etc. Gets the rules stored in database which will establish which options will be added or discarted based on several factors as % of tolerance of the price, options status, hotelcodes, supplier, etc. Then builds a group function which will help to clasify the options slice in n different groups based on the primary key established in the query by the client and the rules stored in the data base (ftp preference file). Now sorts the options in price order (from cheap to expensive). Go over each option and group them by primary key index. However not all the options will be filled in these aggrupations. This is where the rules come into play. To determine if an option will be discarted or not we have to check the group function which does the following: 6.1. If it is the first option in the pk index, this option will be automatically added 6.2. If the rule says that the competitors has to be discarted, all the options of that pk index will be discarted except for the first (the cheapest) 6.3. If it isnt the first option and there aren\u0026rsquo;t any rule that matches the option, this option will be discarted 6.4. If it isnt the first option and the price is higher than the tolerance % established in the rules for that pk index, the option will also be discarted With the resulting options grouped by pk indexes, finally collects all of them and return them to the service process which has used the plugin.  How to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nExecution example { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE\u0026quot;, \u0026quot;pluginsType\u0026quot;: [{ \u0026quot;name\u0026quot;: \u0026quot;preference\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot;, \u0026quot;parameters\u0026quot;: [{ \u0026quot;key\u0026quot;: \u0026quot;primaryKey\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;hotel,currency\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;optionsPerKey\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;4\u0026quot; }] }] }  Possible values in \u0026ldquo;key\u0026rdquo;:\u0026ldquo;primaryKey\u0026rdquo; are supplier, hotel, market, board, payment, room, promotion, supplement, surcharges, rateRules or/and cancelPolicy\n Example of use Percentage = 1, Supplier A: 126 ‚Ç¨, Supplier B: 125 ‚Ç¨\n126 - 126 * 0.01 = 124,74 \u0026lt;= 125 ‚Ç¨, then the selected one is supplier A\nPercentage = 1, Supplier A: 128 ‚Ç¨, Supplier B: 125 ‚Ç¨\n128 - 128 * 0.01 = 126.72\u0026gt; 125 ‚Ç¨, then the selected one is supplier B\nFile format  Encoding: UTF-8 File Name: [Context Source]_sequential_preference.csv Extension file: csv Headers:\n ruleId ‚Üí rule identifier clientTokens ‚Üí client Tokens* supplierCodes ‚Üí supplier code notSupplierCodes ‚Üí supplier code bookingDateFrom ‚Üí booking date from Date format bookingDateTo ‚Üí booking date to Date format startDateFrom ‚Üí start date from Date format startDateTo ‚Üí start date to Date format hotelCodes ‚Üí hotel code nothotelCodes ‚Üí hotel code chainsCodes ‚Üí chain code notChainCodes ‚Üí chain code destinationCodes ‚Üí destination code notDestinationCodes ‚Üí destination code status ‚Üí option status (OK, RQ)\n notStatus ‚Üí option status (OK, RQ)\n percentage ‚Üí commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;) _filtercompetitors ‚Üí filter competitors\n  client tokens Identifier provided by the client that is used to filter which business rules can be applied for the sent request.\n List file fields\n   Field Mandatory Excluded fields* Multi-value     ruleId Yes - No   clientTokens Yes - Yes   supplierCodes Yes notSupplierCodes Yes   notSupplierCodes Yes supplierCodes Yes   bookingDateFrom No - No   bookingDateTo No - No   startDateFrom No - No   startDateTo No - No   hotelCodes No nothotelCodes Yes   nothotelCodes No hotelCodes Yes   chainsCodes No notChainCodes Yes   notChainCodes No chainsCodes Yes   DestinationCodes No notDestinationCodes Yes   notDestinationCodes No DestinationCodes Yes   status No notStatus Yes   notStatus No status Yes   percentage Yes - No   filter_competitors Yes - Yes    *Excluded fields Informed field will be ignored\n  Delimiter: Comma (‚Äú,‚Äù)\n Separator for multiple codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: XTG_sequential_preference.csv\nData:\nSimple value field\nruleId,clientTokens,supplierCodes,notSupplierCodes,bookingDateFrom,bookingDateTo,startDateFrom,startDateTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,filter_competitors T1,,RIU,,,,,,,,,,,,999.00,TRUE T3,,BAR,,,,,,,,,,,,999.00,FALSE T4,,SEN,,,,,,,,,,,,999.00,FALSE T7,,RHO,,,,,,,,,,,,10.0,FALSE T9,subcanal-EROSKI_B2B,INT,,,,,,,,,,,BTEMX,5.0,TRUE  Multivalue field\nruleId,clientTokens,supplierCodes,notSupplierCodes,bookingDateFrom,bookingDateTo,startDateFrom,startDateTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,filter_competitors, status T1,,RIU,,,,,,,,,,,,RQ;OK,,999.00,TRUE T3,,BAR,,,,,,,,,,,,RQ,,999.00,FALSE T4,,SEN,,,,,,,,,,,,RQ,,999.00,FALSE T7,,RHO,,,,,,,,,,,,RQ,,10.0,FALSE T9,subcanal-EROSKI_B2B,INT,,,,,,,,,,,RQ,,BTEMX,5.0,TRUE T10,,GTA;HOBV2;TOU,,,,,,,,,,RQ;OK,,ACDMS,,5.5,FALSE  Date format Date format yyyy-mm-dd is mandatory\n "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/channel-x/api-reference/pricetut/",
	"title": "Price Use Cases",
	"tags": [],
	"description": "Some examples on how to operate prices",
	"content": " Three price charging types are allowed: price per Room, price per Pax and price per Occupancy. When more than one price is charged for the same day, the newest price will be returned as available price.\n1. Price per Room\nWhen a price is charged per Room means that all occupancies allowed in the room will have the same price. If an AdditionalGuestAmount are charged for occupancies over the standard occupancy, they will be applied.\n2. Price per Pax/Guest (Standard Occupancy)\nWhen a price is charged per Pax means that the price is for the number of guests specified.\nIf NumberOfGuests is equal or under the standard occupancy, the price returned will have to be the same as the price charged. If NumberOfGuests is over the Standard Occupancy, the price is calculated from the Standard Occupancy price and the AdditionalGuestAmount charged.\n3. Price per Occupancy\nWhen a price is charged per Occupancy means that this price will only be available for the specified occupancy. No AdditionalGuestAmount are applied.\nNotes\n Children and babies are not allowed in BaseByGuestAmts. Children and babies are always defined in AdditionalGuestAmounts. The possible Type values in the AdditionalGuestAmount tag are Exclusive and not specified. \u0026gt; If there is no value specified, then the price is a relative and it is added to the price of the current pax.\nIf the value is \u0026ldquo;Exclusive\u0026rdquo;, then the price is absolute and will represent the total price of the current pax.\n If the price is per Room, then all AdditionalGuestAmount must be relative.\n If the price is per Occupancy then @Type should be 14 and @Code should be specified.\n An Occupancy is defined by AdultNumber-ChildNumber-InfantNumber. E.g.: @Code for an occupancy of 2 adults, 1 child and 0 babies would be \u0026ldquo;2-1-0\u0026rdquo;\n  \nPrice per Pax/Guest Case 1:\nStandard occupancy = 2\nRoom uses:\n1-0-0\n2-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100    \nCase 2:\nStandard occupancy = 2\nRoom uses:\n1-0-0\n2-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;1\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;130.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     1-0-0 100   2-0-0 2*(130\u0026frasl;2) = 130    \nCase 3:\nStandard occupancy = 2\nRoom uses:\n1-0-0\n2-0-0\n3-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) + (40) = 190    \nCase 4:\nStandard occupancy = 2\nRoom uses:\n1-0-0\n2-0-0\n3-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; Type=\u0026quot;Exclusive\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + 40 = 140    \nCase 5:\nStandard occupancy = 2\nRoom uses:\n1-0-0\n2-0-0\n1-1-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   1-1-0 2*(100\u0026frasl;2) = 100    \nCase 5.1:\nStandard occupancy = 2\nRoom uses:\n1-0-0\n2-0-0\n1-0-1\n NOTE: The same samples with children are valid for babies specifying AgeQualifyingCode = \u0026ldquo;7\u0026rdquo;.\n Message:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;40.00\u0026quot; AgeQualifyingCode = \u0026quot;7\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   1-1-0 2*(100\u0026frasl;2) = 100    \nCase 6:\nStandard occupancy = 2\nRoom uses:\n1-0-0\n2-0-0\n2-1-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;-40.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   2-1-0 2*(100\u0026frasl;2) + ((100\u0026frasl;2) -40) = 60    \nCase 7:\nStandard occupancy = 2\nRoom uses:\n1-0-0\n2-0-0\n3-0-0\n4-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;10.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; Amount = \u0026quot;-15.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) + 10) = 160   4-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) + 10) + ((100\u0026frasl;2) - 15) = 195    \nCase 8:\nStandard occupancy = 2\nRoom uses:\n1-0-0\n2-0-0\n3-0-0\n4-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;-10.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) -10) = 140   4-0-0 (100\u0026frasl;2) + (100\u0026frasl;2) + ((100\u0026frasl;2) -10) + ((100\u0026frasl;2) - 10) = 180    \nCase 9:\nStandard occupancy = 3\nRoom uses:\n1-0-0\n2-0-0\n3-0-0\n4-0-0\n5-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;3\u0026quot; AmountAfterTax=\u0026quot;150.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;-10.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; Amount = \u0026quot;15.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 2*(100\u0026frasl;2) = 100   3-0-0 3*(150\u0026frasl;3) = 150   4-0-0 (150\u0026frasl;3) + (150\u0026frasl;3) + (150\u0026frasl;3) + ((150\u0026frasl;3) - 10) = 190   5-0-0 (150\u0026frasl;3) + (150\u0026frasl;3) + (150\u0026frasl;3) + ((150\u0026frasl;3) - 10) + ((150\u0026frasl;3) + 15) = 255    \nPrice per Room Case 1:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n1-1-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     1-0-0 100   2-0-0 100   1-1-0 100    \nCase 2:\nStandard occupancy = 2\nRoom uses\n1-0-0\n2-0-0\n3-0-0\n1-1-0\n3-1-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;20.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;10.00\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 100   2-0-0 100   3-0-0 100 + (100\u0026frasl;2 + 20) = 170   1-1-0 100   3-1-0 100 + (100\u0026frasl;2 + 20) + (100\u0026frasl;2 + 10) = 230    \nCase 3:\nStandard occupancy = 3\nRoom uses\n1-0-0\n2-0-0\n3-0-0\n4-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;25\u0026quot; AmountAfterTax=\u0026quot;120.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;20.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; /\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;     Occupancy Price     1-0-0 120   2-0-0 120   3-0-0 120   4-0-0 120 + (120\u0026frasl;3 + 20) = 180    \nPrice per Occupancy Case 1:\nRoom uses\n1-0-0\n2-0-0\n3-0-0\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot; Code = \u0026quot;2-0-0\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     1-0-0 -   2-0-0 100   3-0-0 -    \nCase 2:\nRoom uses\n2-1-0\n2-0-1\nMessage:\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; AmountAfterTax=\u0026quot;95.00\u0026quot; Code = \u0026quot;2-1-0\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt Type = \u0026quot;14\u0026quot; AmountAfterTax=\u0026quot;80.00\u0026quot; Code = \u0026quot;2-0-1\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;     Occupancy Price     2-1-0 95   2-0-1 80     "
},
{
	"uri": "https://travelgatex.com/community/integrations-changelog/public-changelog/",
	"title": "Public changelog example",
	"tags": [],
	"description": "Public changelog, to be published at documentation site",
	"content": " Public changelog On the documentation an Integrations section will be maintained with the respectives changelogs as can be seen here, all integrations will have his own changelog, integrations will be grouped by lines (hotel, flights, payment).\nChangelogs will have a folder per day containing the releases done on that date. Inside an unique index.md will contain all the changes made.\nThus on the public documentation site we\u0026rsquo;ll have (example for guestincomming at hotel line):\n \\integrations\\hotel\\gue\\changelog\\2000-01-31\\index.md \\integrations\\hotel\\gue\\changelog\\2000-02-01\\index.md \\integrations\\hotel\\gue\\changelog... as folders as needed  This files will be the copies of the content at the Changelog.md that is hosted on the code repository. There will be a single file with the content grouped by date of release as explained here.\nindex.md structure for a release the file will have the following structure (this process is planned to be done automatically but a this moment must be handmade):\n Header: As shown at the example, only the dates must be updated (date is used 3 times at the header -title, pagetitle and date- plus another time at the body at the title 2) Single release by file: On each release an index.md file must be created on a folder named as the date of release in iso format, at the file will found a single title 2 with the date so in format iso. Use containers with lists: Copy all the content related to the release from the Changelog.md keeping the container structure.  Example of index.md file +++ title = \u0026quot;2000-01-31\u0026quot; pagetitle = \u0026quot;2000-01-31\u0026quot; description = \u0026quot;Contains a chronologically ordered list of notable changes at our website\u0026quot; weight = 1 icon = \u0026quot;fa-cube\u0026quot; svgicon = \u0026quot;https://media.graphcms.com/TZIRsCAGSD6uCfBeDhc9\u0026quot; alwaysopen = false date = 2000-01-31 hidden = true tags = [\u0026quot;integration-changelog\u0026quot;] +++ ## 2000-01-31 {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - Addition explanation #3 - Addition explanation #2 - Addition explanation #1 - ... {{% /release-notes-container %}} {{% release-notes-container type=\u0026quot;d\u0026quot; %}} - Deprecation explanation #3 - Deprecation explanation #2 - Deprecation explanation #1 - ... {{% /release-notes-container %}} {{% release-notes-container type=\u0026quot;f\u0026quot; %}} - Fix explanation #3 - Fix explanation #2 - Fix explanation #1 - ... {{% /release-notes-container %}}  Auxiliary index.md at the integration level and at the changelog level At the previous example: - \\integrations\\hotel\\gue\\changelog\nAll the folders need a generic \u0026ldquo;_index.md\u0026rdquo; file (with the underscore), so when we create the folder structure for a new integration, we\u0026rsquo;ll need to create two files named \u0026ldquo;_index.md\u0026rdquo; with the following structure:\n_index.md at \\integrations\\line\\dll +++ title = \u0026quot;dll_name\u0026quot; pagetitle = \u0026quot;dll_name\u0026quot; description = \u0026quot;dll_name\u0026quot; weight = 1 alwaysopen = false isDirectory = false icon = \u0026quot;fa-info\u0026quot; \u0026lt;!-- Optional: you can upload an svg to show the company logo in format svg, you must upload it to the folder \\integrations\\line\\dll\\images\\ an use the following configuration line: --\u0026gt; svgicon=\u0026quot;/images/custom.svg\u0026quot; +++ {{% custom-children %}}  _index.md at \\integrations\\line\\dll\\changelog +++ title = \u0026quot;dll_name changelog\u0026quot; icon = \u0026quot;fa-exchange\u0026quot; +++ # DLL Name Changelog Easily accessible log of notable changes to DLL integration {{% changelog-entry %}}  "
},
{
	"uri": "https://travelgatex.com/travelgatex/concepts/request-headers/",
	"title": "Request Headers",
	"tags": [],
	"description": "HTTP request headers required in all API requests",
	"content": " The following HTTP request headers are relevant to all request methods (GET, PUT, POST and DELETE) and they are required in all API requests.\nAuthorization (Required) The HTTP Authorization request header contains the credentials to authenticate a user agent with a server, usually after the server has responded with a 401 Unauthorized status and the WWW-Authenticate header.\nSyntax Authorization: \u0026lt;type\u0026gt; \u0026lt;credentials\u0026gt;  Directives \u0026lt;type\u0026gt;:\n ApiKey Bearer  \u0026lt;credential\u0026gt;: String\nExample Authorization:¬†Apikey dumq8ggx-poVDW76Kw9-18hwnnRvxlZm-AP2QZ\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/reservationmanagement/reservationlist/",
	"title": "ReservationList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return a list of bookings for a given time period being that either booking date or the travelling date.\nRequest Format The request requires one of the following data depending on provider:\n DateType: indicates the date type: either booking creation date or booking start date Start: the date from End: the date to  Response Format The result returns a list of bookings details, with the same format as ReservationReadRS.\nRemarks The maximum time, that is permitted in our system, before the connection is closed, is of 240000 milliseconds.\nReservationListRQ Example \u0026lt;ReservationListRQ\u0026gt; \u0026lt;DateType\u0026gt;A\u0026lt;/DateType\u0026gt; \u0026lt;Start\u0026gt;01/01/2014\u0026lt;/Start\u0026gt; \u0026lt;End\u0026gt;22/02/2014\u0026lt;/End\u0026gt; \u0026lt;/ReservationListRQ\u0026gt;  ReservationListRQ Description    Element Number Type Description     ReservationListRQ 1  Root node.   DateType 1 String Type search (A = arrival date, B = booking creation).   Start 1 String Start date.   End 1 String End date.   Currency 1 String Currency code.    ReservationListRS Example \u0026lt;ReservationListRS\u0026gt; \u0026lt;Reservations\u0026gt; \u0026lt;Reservation\u0026gt; \u0026lt;auditData\u0026gt; \u0026lt;timeStamp\u0026gt;2014-01-21T15:12:12.0558866+00:00\u0026lt;/timeStamp\u0026gt; \u0026lt;processTimeMilliseconds\u0026gt;0\u0026lt;/processTimeMilliseconds\u0026gt; \u0026lt;/auditData\u0026gt; \u0026lt;operationImplemented\u0026gt;true\u0026lt;/operationImplemented\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;2196\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;1AAAA966\u0026lt;/Provider\u0026gt; \u0026lt;Property\u0026gt;HCN8273\u0026lt;/Property\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Name\u0026gt;LAS VEGAS (BENIDORM)\u0026lt;/Name\u0026gt; \u0026lt;Code\u0026gt;58475\u0026lt;/Code\u0026gt; \u0026lt;CreationDate\u0026gt;30/09/2013\u0026lt;/CreationDate\u0026gt; \u0026lt;StartDate\u0026gt;25/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;16/02/2014\u0026lt;/EndDate\u0026gt; \u0026lt;Holder name = \u0026quot;AAAA\u0026quot; surname = \u0026quot;Test\u0026quot;/\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;658.94\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;27441\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; description = \u0026quot;Doble Standard\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;72\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2014-01-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;pagoMinorista\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;29.95\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;TransactionStatus\u0026gt; \u0026lt;ComunicationStatus\u0026gt;OK\u0026lt;/ComunicationStatus\u0026gt; \u0026lt;RSStatus\u0026gt;EXISTE\u0026lt;/RSStatus\u0026gt; \u0026lt;ResStatus\u0026gt;OK\u0026lt;/ResStatus\u0026gt; \u0026lt;/TransactionStatus\u0026gt; \u0026lt;/Reservation\u0026gt; \u0026lt;Reservation\u0026gt; \u0026lt;auditData\u0026gt; \u0026lt;timeStamp\u0026gt;2014-01-21T15:12:12.6657414+00:00\u0026lt;/timeStamp\u0026gt; \u0026lt;processTimeMilliseconds\u0026gt;0\u0026lt;/processTimeMilliseconds\u0026gt; \u0026lt;/auditData\u0026gt; \u0026lt;operationImplemented\u0026gt;true\u0026lt;/operationImplemented\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;2578478\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;10TTT31\u0026lt;/Provider\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Name\u0026gt;LEO\u0026lt;/Name\u0026gt; \u0026lt;Code\u0026gt;10\u0026lt;/Code\u0026gt; \u0026lt;CreationDate\u0026gt;17/01/2014\u0026lt;/CreationDate\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2014\u0026lt;/EndDate\u0026gt; \u0026lt;Holder name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot;/\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4582\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; description = \u0026quot;Doble Standard..\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;120\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2014-01-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;pagoMinorista\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;72.40\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;TransactionStatus\u0026gt; \u0026lt;ComunicationStatus\u0026gt;OK\u0026lt;/ComunicationStatus\u0026gt; \u0026lt;RSStatus\u0026gt;EXISTE\u0026lt;/RSStatus\u0026gt; \u0026lt;ResStatus\u0026gt;OK\u0026lt;/ResStatus\u0026gt; \u0026lt;/TransactionStatus\u0026gt; \u0026lt;/Reservation\u0026gt; ... \u0026lt;/Reservations\u0026gt; \u0026lt;/ReservationListRS\u0026gt;  ReservationListRS Description    Element Number Type Description     ReservationListRS 1  Root node.   ReservationListRS /Reservations / 0..1  Reservations.   ReservationListRS /Reservations /Reservation 1  Same structure as ReservationReadRS.    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/reservationmanagement/reservationlist/",
	"title": "ReservationList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return a list of bookings for a given time period being that either booking date or the travelling date.\nRequest Format The request requires one of the following data depending on provider:\n DateType: indicates the date type: either booking creation date or booking start date Start: the date from End: the date to  Response Format The result returns a list of bookings details, with the same format as ReservationReadRS.\nRemarks The maximum time, that is permitted in our system, before the connection is closed, is of 240000 milliseconds.\nReservationListRQ Example In the request for this call it is necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the information in the section \u0026lsquo;Common elements\u0026rsquo;.\n\u0026lt;ReservationListRQ\u0026gt; \u0026lt;DateType\u0026gt;A\u0026lt;/DateType\u0026gt; \u0026lt;Start\u0026gt;01/01/2014\u0026lt;/Start\u0026gt; \u0026lt;End\u0026gt;22/02/2014\u0026lt;/End\u0026gt; \u0026lt;/ReservationListRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nReservationListRQ Description    Element Number Type Description     ReservationListRQ 1  Root node.   DateType 1 String Type search (A = arrival date, B = booking creation).   Start 1 String Start date. Format dd/MM/yyyy   End 1 String End date. Format dd/MM/yyyy   Currency 1 String Currency code.    ReservationListRS Example \u0026lt;ReservationListRS\u0026gt; \u0026lt;Reservations\u0026gt; \u0026lt;Reservation\u0026gt; \u0026lt;auditData\u0026gt; \u0026lt;timeStamp\u0026gt;2014-01-21T15:12:12.0558866+00:00\u0026lt;/timeStamp\u0026gt; \u0026lt;processTimeMilliseconds\u0026gt;0\u0026lt;/processTimeMilliseconds\u0026gt; \u0026lt;/auditData\u0026gt; \u0026lt;operationImplemented\u0026gt;true\u0026lt;/operationImplemented\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;2196\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;1AAAA966\u0026lt;/Provider\u0026gt; \u0026lt;Property\u0026gt;HCN8273\u0026lt;/Property\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Name\u0026gt;LAS VEGAS (BENIDORM)\u0026lt;/Name\u0026gt; \u0026lt;Code\u0026gt;58475\u0026lt;/Code\u0026gt; \u0026lt;CreationDate\u0026gt;30/09/2013\u0026lt;/CreationDate\u0026gt; \u0026lt;StartDate\u0026gt;25/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;16/02/2014\u0026lt;/EndDate\u0026gt; \u0026lt;Holder name = \u0026quot;AAAA\u0026quot; surname = \u0026quot;Test\u0026quot;/\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;658.94\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;27441\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; description = \u0026quot;Doble Standard\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;72\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;01/01/2014T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;pagoMinorista\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;29.95\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;TransactionStatus\u0026gt; \u0026lt;ComunicationStatus\u0026gt;OK\u0026lt;/ComunicationStatus\u0026gt; \u0026lt;RSStatus\u0026gt;EXISTE\u0026lt;/RSStatus\u0026gt; \u0026lt;ResStatus\u0026gt;OK\u0026lt;/ResStatus\u0026gt; \u0026lt;/TransactionStatus\u0026gt; \u0026lt;/Reservation\u0026gt; \u0026lt;Reservation\u0026gt; \u0026lt;auditData\u0026gt; \u0026lt;timeStamp\u0026gt;2014-01-21T15:12:12.6657414+00:00\u0026lt;/timeStamp\u0026gt; \u0026lt;processTimeMilliseconds\u0026gt;0\u0026lt;/processTimeMilliseconds\u0026gt; \u0026lt;/auditData\u0026gt; \u0026lt;operationImplemented\u0026gt;true\u0026lt;/operationImplemented\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;2578478\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;10TTT31\u0026lt;/Provider\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Name\u0026gt;LEO\u0026lt;/Name\u0026gt; \u0026lt;Code\u0026gt;10\u0026lt;/Code\u0026gt; \u0026lt;CreationDate\u0026gt;17/01/2014\u0026lt;/CreationDate\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2014\u0026lt;/EndDate\u0026gt; \u0026lt;Holder name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot;/\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4582\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; description = \u0026quot;Doble Standard..\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;120\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2014-01-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;pagoMinorista\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;72.40\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;TransactionStatus\u0026gt; \u0026lt;ComunicationStatus\u0026gt;OK\u0026lt;/ComunicationStatus\u0026gt; \u0026lt;RSStatus\u0026gt;EXISTE\u0026lt;/RSStatus\u0026gt; \u0026lt;ResStatus\u0026gt;OK\u0026lt;/ResStatus\u0026gt; \u0026lt;/TransactionStatus\u0026gt; \u0026lt;/Reservation\u0026gt; ... \u0026lt;/Reservations\u0026gt; \u0026lt;/ReservationListRS\u0026gt;  ReservationListRS Description    Element Number Type Description     ReservationListRS / 1  Root node.   ReservationListRS /Reservations / 0..1  Reservations.   ReservationListRS /Reservations /Reservation 1  Same structure as ReservationReadRS.    "
},
{
	"uri": "https://travelgatex.com/travelgatex/concepts/http-response-status-codes/",
	"title": "Response status codes",
	"tags": [],
	"description": "HTTP response status codes indicate whether a specific HTTP request has been successfully completed",
	"content": " General Codes The status codes are divided into the five categories presented below.\n Informational responses (100‚Äì199), Successful responses (200‚Äì299), Redirects (300‚Äì399), Client errors (400‚Äì499), Server errors (500‚Äì599).  The below status codes are defined by section 10 of RFC 2616.\nYou can find an updated specification in RFC 7231.\nSpecifics TravelgateX response codes    Code Reason Description     200 success    180 Informational    280 Success    380 Redirect    480 ClientError    580 ServerError         400 invalidParameter Indicates that a request parameter has an invalid value.   400 badRequest Indicates that the query was invalid.   401 invalidCredentials Indicates that the auth token is invalid or has expired   401 insufficientPermissions Indicates that the user does not have sufficient permissions for the entity specified in the query.   403 LimitExceeded Indicates that user has exceeded the quota   403 userRateLimitExceeded Indicates that the Queries per X   403 rateLimitExceeded Indicates that the organization/Instance rate limits have been exceeded.   403 quotaExceeded Indicates the concurrent requests per view has been reached   405 methodNotAllowed Deprecated and protected queries   408 requestTimeout    406 notAcceptable     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/staticcontent/room/",
	"title": "Room",
	"tags": [],
	"description": "Learn about how to manage static content data in your site: Hotels, Boards, Categories...",
	"content": "  const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x228626cf56-e364-4fd1-4fe0-311e23ac6355\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/aeb082e484710ebf6b7a4ec5173064cc\\/raw\\x22,\\x22divname\\x22:\\x22div_hotels\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/4737228c495b09566474fa2db38fc72d\\/raw\\x22,\\x22divname\\x22:\\x22div_destinations\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/519b4223de8b44cb20c5c33212c62654\\/raw\\x22,\\x22divname\\x22:\\x22div_boards\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/0815561e9c25ce49bc416dbc73f36388\\/raw\\x22,\\x22divname\\x22:\\x22div_rooms\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/aa1be23b8c9229c8363c142036afb1f5\\/raw\\x22,\\x22divname\\x22:\\x22div_categories\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }  Rooms Rooms Query returns a simple rooms map that can include translations to other languages. You can search by room codes, if you don\u0026rsquo;t introduce any room codes, you will receive all of them. The full response is split into pages. By default, the number of rooms in each page is 1000, however, you can choose the size with a value between 100 and 10000.\nHave in mind the response object roomData is shared with Hotels Query but not necessarily it will share the same data. For example with Hotels Query you may recieve \u0026ldquo;amenities\u0026rdquo; in roomData whereas in Rooms Query you\u0026rsquo;ll not.\nCriteria Mandatory fields\n- access-\u0026gt; It represents the access for which you want to receive the room description.\nOptional fields\n- roomCodes-\u0026gt; it allows to filter by room codes\n- maxSize-\u0026gt; it allows to specify the number of elements per page\nToken The token allows to request the next page of rooms. The correct way of obtaining multiple pages of rooms is mantaining this field empty for the first execution and request the token field in the response graph. Then, subsequent queries filling in the token field with the value returned in the previous response.\nPlayground Samples  Rooms     Categories Category static data returns a simple categories map that can include translations to other languages.\nPlayground Samples  Categories     "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/",
	"title": "Rules management",
	"tags": [],
	"description": "Manage princing rules, filters and blacklists",
	"content": "You will find the following 4 sections in your \u0026ldquo;General Settings\u0026rdquo;, both at Organization and Agency level:\n Configuration Selling Pricing Rules General Stop Sales Specific Stop Sales  You will also be able to identify if these rules are applied to your Organization (General Settings) or only to a specific Agency (Agency name) by checking the top menu.\n  Configuration Configurate general rules and filters by different conditions\n     Selling pricing rules Apply commissions or markups for different market conditions\n     General stop sales Define general stop sales by different conditions\n     Specific stop sales Define specific stop sales by different conditions\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/soap-examples/",
	"title": "SOAP Examples",
	"tags": [],
	"description": "",
	"content": " Avail \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:Avail\u0026gt; \u0026lt;ns:availRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;18000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQs\u0026gt; \u0026lt;ns:ProviderRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;AvailRQ\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;99999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlAvail\u0026gt;http://www.test.net/test_XML_V10.php?\u0026lt;/UrlAvail\u0026gt; \u0026lt;UrlReservation\u0026gt;http://www.test.net/scr/reservation_xml.php\u0026lt;/UrlReservation\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;AvailDestinations\u0026gt; \u0026lt;Destination type = \u0026quot;CTY\u0026quot; code = \u0026quot;XXX\u0026quot;/\u0026gt; \u0026lt;/AvailDestinations\u0026gt; \u0026lt;StartDate\u0026gt;08/08/2012\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;12/12/2012\u0026lt;/EndDate\u0026gt; \u0026lt;Currency\u0026gt;EUR\u0026lt;/Currency\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;/AvailRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:ProviderRQ\u0026gt; \u0026lt;/ns:providerRQs\u0026gt; \u0026lt;/ns:availRQ\u0026gt; \u0026lt;/ns:Avail\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  Multi Avail \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:Avail\u0026gt; \u0026lt;ns:availRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;18000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQs\u0026gt; \u0026lt;ns:ProviderRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;AvailRQ\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;17700\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlAvail\u0026gt;http://www.test.net/test_XML_V10.php?\u0026lt;/UrlAvail\u0026gt; \u0026lt;UrlReservation\u0026gt;http://www.test.net/scr/reservation_xml.php\u0026lt;/UrlReservation\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;SearchType\u0026gt;Combined\u0026lt;/SearchType\u0026gt; \u0026lt;CancellationPolicies\u0026gt;true\u0026lt;/CancellationPolicies\u0026gt; \u0026lt;AvailDestinations\u0026gt; \u0026lt;Destination type = \u0026quot;CTY\u0026quot; code = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;/AvailDestinations\u0026gt; \u0026lt;StartDate\u0026gt;10/12/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;12/12/2014\u0026lt;/EndDate\u0026gt; \u0026lt;Currency\u0026gt;EUR\u0026lt;/Currency\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;/AvailRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:ProviderRQ\u0026gt; \u0026lt;ns:ProviderRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;2\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;AvailRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;18000\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlAvail\u0026gt;http://www.test.net/test_XML_V10.php?\u0026lt;/UrlAvail\u0026gt; \u0026lt;UrlReservation\u0026gt;http://www.test.net/scr/reservation_xml.php\u0026lt;/UrlReservation\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;SearchType\u0026gt;Combined\u0026lt;/SearchType\u0026gt; \u0026lt;CancellationPolicies\u0026gt;false\u0026lt;/CancellationPolicies\u0026gt; \u0026lt;AvailDestinations\u0026gt; \u0026lt;Destination type = \u0026quot;CTY\u0026quot; code = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/AvailDestinations\u0026gt; \u0026lt;StartDate\u0026gt;05/11/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;06/11/2014\u0026lt;/EndDate\u0026gt; \u0026lt;Currency\u0026gt;EUR\u0026lt;/Currency\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate cantidad = \u0026quot;1\u0026quot; id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;/AvailRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:ProviderRQ\u0026gt; \u0026lt;/ns:providerRQs\u0026gt; \u0026lt;/ns:availRQ\u0026gt; \u0026lt;/ns:Avail\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  Valuation \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:Valuation\u0026gt; \u0026lt;ns:valuationRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;180000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;ValuationRQ\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;10000\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;true\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlAvail\u0026gt;http://www.test.net/test_XML_V10.php?\u0026lt;/UrlAvail\u0026gt; \u0026lt;UrlReservation\u0026gt;http://www.test.net/scr/reservation_xml.php\u0026lt;/UrlReservation\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;StartDate\u0026gt;08/08/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;07/11/2014\u0026lt;/EndDate\u0026gt; \u0026lt;MealPlanCode\u0026gt;AC\u0026lt;/MealPlanCode\u0026gt; \u0026lt;HotelCode\u0026gt;0001\u0026lt;/HotelCode\u0026gt; \u0026lt;PaymentType\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt; \u0026lt;OptionType\u0026gt;Hotel\u0026lt;/OptionType\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;91\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;91\u0026quot; description = \u0026quot;Standard Room\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;/ValuationRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:valuationRQ\u0026gt; \u0026lt;/ns:Valuation\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  GeographicalDestinationTree \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:GeographicDestinationTree\u0026gt; \u0026lt;ns:geographicDestinationTreeRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;300000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;GeographicDestinationTreeRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;999999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlGeneric\u0026gt;http://test.Service\u0026lt;/UrlGeneric\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;/GeographicDestinationTreeRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:geographicDestinationTreeRQ\u0026gt; \u0026lt;/ns:GeographicDestinationTree\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  Hotel List \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:HotelList\u0026gt; \u0026lt;ns:hotelListRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;300000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;HotelListRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;270000\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlGeneric\u0026gt;http://test.Service\u0026lt;/UrlGeneric\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;/HotelListRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:hotelListRQ\u0026gt; \u0026lt;/ns:HotelList\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  DescriptiveInfo \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:DescriptiveInfo\u0026gt; \u0026lt;ns:descriptiveInfoRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;180000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;DescriptiveInfoRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;999999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlGeneric\u0026gt;http://test.Service\u0026lt;/UrlGeneric\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;XXXX\u0026lt;/Code\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;/DescriptiveInfoRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:descriptiveInfoRQ\u0026gt; \u0026lt;/ns:DescriptiveInfo\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  Room List \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:RoomList\u0026gt; \u0026lt;ns:roomListRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;240000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;RoomListRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;999999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlAvail\u0026gt;http://www.test.net/test_XML_V10.php?\u0026lt;/UrlAvail\u0026gt; \u0026lt;UrlReservation\u0026gt;http://www.test.net/scr/reservation_xml.php\u0026lt;/UrlReservation\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;/RoomListRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:roomListRQ\u0026gt; \u0026lt;/ns:RoomList\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  MealPlanList \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:MealPlanList\u0026gt; \u0026lt;ns:mealPlanListRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;240000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;MealPlanListRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;999999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlAvail\u0026gt;http://www.test.net/test_XML_V10.php?\u0026lt;/UrlAvail\u0026gt; \u0026lt;UrlReservation\u0026gt;http://www.test.net/scr/reservation_xml.php\u0026lt;/UrlReservation\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;/MealPlanListRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:mealPlanListRQ\u0026gt; \u0026lt;/ns:MealPlanList\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  Reservation \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;xxx\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;xxxx\u0026lt;/wsse:Password\u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:Reservation\u0026gt; \u0026lt;ns:reservationRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;15000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;ReservationRQ\u0026gt; \u0026lt;echoToken\u0026gt;TEST\u0026lt;/echoToken\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;14000\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;agencyCode\u0026gt;XXXX\u0026lt;/agencyCode\u0026gt; \u0026lt;languageCode\u0026gt;es\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;true\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt;\u0026lt;/Configuration\u0026gt; \u0026lt;ClientLocator\u0026gt;XXXXXXX\u0026lt;/ClientLocator\u0026gt; \u0026lt;StartDate\u0026gt;28/07/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;31/07/2014\u0026lt;/EndDate\u0026gt; \u0026lt;MealPlanCode\u0026gt;XX\u0026lt;/MealPlanCode\u0026gt; \u0026lt;HotelCode\u0026gt;XXX\u0026lt;/HotelCode\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;500.00\u0026quot; binding = \u0026quot;true\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;ResGuests\u0026gt; \u0026lt;Guests\u0026gt; \u0026lt;Guest roomCandidateId = \u0026quot;1\u0026quot; paxId = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;GivenName\u0026gt;PRUEBAS\u0026lt;/GivenName\u0026gt; \u0026lt;SurName\u0026gt;TEST\u0026lt;/SurName\u0026gt; \u0026lt;/Guest\u0026gt; \u0026lt;Guest roomCandidateId = \u0026quot;1\u0026quot; paxId = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;GivenName\u0026gt;PRUEBAS\u0026lt;/GivenName\u0026gt; \u0026lt;SurName\u0026gt;TEST\u0026lt;/SurName\u0026gt; \u0026lt;/Guest\u0026gt; \u0026lt;/Guests\u0026gt; \u0026lt;/ResGuests\u0026gt; \u0026lt;PaymentType\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;10\u0026quot; description = \u0026quot;Superior\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;codigoOferta\u0026quot; value = \u0026quot;XXX\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/ReservationRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:reservationRQ\u0026gt; \u0026lt;/ns:Reservation\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  Cancel \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:Cancel\u0026gt; \u0026lt;ns:cancelRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;180000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;CancelRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot; hotelCode = \u0026quot;\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;999999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;true\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlAvail\u0026gt;http://www.test.net/test_XML_V10.php?\u0026lt;/UrlAvail\u0026gt; \u0026lt;UrlReservation\u0026gt;http://www.test.net/scr/reservation_xml.php\u0026lt;/UrlReservation\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Provider\u0026gt;XXXXXXX\u0026lt;/Provider\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;StartDate\u0026gt;28/11/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;28/11/2014\u0026lt;/EndDate\u0026gt; \u0026lt;/CancelRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:cancelRQ\u0026gt; \u0026lt;/ns:Cancel\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  ReservationRead \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:ReservationRead\u0026gt; \u0026lt;ns:reservationReadRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;180000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;ReservationReadRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;999999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;true\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration/\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;XXXXXXX\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;XXXXXXX\u0026lt;/Provider\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;StartDate\u0026gt;28/11/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;28/11/2014\u0026lt;/EndDate\u0026gt; \u0026lt;CreationDate\u0026gt;28/11/2014\u0026lt;/CreationDate\u0026gt; \u0026lt;Currency\u0026gt;XXXX\u0026lt;/Currency\u0026gt; \u0026lt;/ReservationReadRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:reservationReadRQ\u0026gt; \u0026lt;/ns:ReservationRead\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  ReservationList \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:ReservationList\u0026gt; \u0026lt;ns:reservationListRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;240000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;ReservationListRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;999999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlAvail\u0026gt;http://www.test.net/test_XML_V10.php?\u0026lt;/UrlAvail\u0026gt; \u0026lt;UrlReservation\u0026gt;http://www.test.net/scr/reservation_xml.php\u0026lt;/UrlReservation\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;Start\u0026gt;28/11/2014\u0026lt;/Start\u0026gt; \u0026lt;End\u0026gt;28/11/2014\u0026lt;/End\u0026gt; \u0026lt;DateType\u0026gt;X\u0026lt;/DateType\u0026gt; \u0026lt;/ReservationListRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:reservationListRQ\u0026gt; \u0026lt;/ns:ReservationList\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  RunTimeConfiguration \u0026lt;soapenv:Envelope xmlns:soapenv = \u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot; xmlns:ns = \u0026quot;http://schemas.xmltravelgate.com/hub/2012/06\u0026quot; xmlns:wsse = \u0026quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\u0026quot;\u0026gt; \u0026lt;soapenv:Header\u0026gt; \u0026lt;wsse:Security\u0026gt; \u0026lt;wsse:UsernameToken\u0026gt; \u0026lt;wsse:Username\u0026gt;XXXXXX\u0026lt;/wsse:Username\u0026gt; \u0026lt;wsse:Password\u0026gt;XXXXXX\u0026lt;/wsse:Password\u0026gt; \u0026lt;/wsse:UsernameToken\u0026gt; \u0026lt;/wsse:Security\u0026gt; \u0026lt;/soapenv:Header\u0026gt; \u0026lt;soapenv:Body\u0026gt; \u0026lt;ns:RuntimeConfiguration\u0026gt; \u0026lt;ns:runtimeConfigurationRQ\u0026gt; \u0026lt;ns:timeoutMilliseconds\u0026gt;10000\u0026lt;/ns:timeoutMilliseconds\u0026gt; \u0026lt;ns:version\u0026gt;1\u0026lt;/ns:version\u0026gt; \u0026lt;ns:providerRQ\u0026gt; \u0026lt;ns:code\u0026gt;XXX\u0026lt;/ns:code\u0026gt; \u0026lt;ns:id\u0026gt;1\u0026lt;/ns:id\u0026gt; \u0026lt;ns:rqXML\u0026gt; \u0026lt;RuntimeConfigurationRQ xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;999999\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;false\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User\u0026gt;\u0026lt;/User\u0026gt; \u0026lt;Password\u0026gt;\u0026lt;/Password\u0026gt; \u0026lt;UrlGeneric\u0026gt;http://test.Service\u0026lt;/UrlGeneric\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlListHoteles\u0026quot; value = \u0026quot;http://www.test.net/scr/searchxml/location.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;UrlConsulta\u0026quot; value = \u0026quot;https://www.test.net/scr/xml/travelgate.php?\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;office\u0026quot; value = \u0026quot;55555\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;Parameter key = \u0026quot;password\u0026quot; value = \u0026quot;XXXXXX\u0026quot;\u0026gt;\u0026lt;/Parameter\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;/RuntimeConfigurationRQ\u0026gt; \u0026lt;/ns:rqXML\u0026gt; \u0026lt;/ns:providerRQ\u0026gt; \u0026lt;/ns:runtimeConfigurationRQ\u0026gt; \u0026lt;/ns:RuntimeConfiguration\u0026gt; \u0026lt;/soapenv:Body\u0026gt; \u0026lt;/soapenv:Envelope\u0026gt;  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/safety_margin/",
	"title": "Safety Margin",
	"tags": [],
	"description": "Discards those options that have a commission higher than expected.",
	"content": " Safety Margin is an optional plugin that allows discarding options that have a commission lower than expected. The expected commission has to be loaded in safety-margin file, and is the commission over gross, in other words, the commission/profit is already included in the price.\nWhat it does The safety margin plugin discards those options that have a commission lower than expected. By doing this, only options that have a commission over gross, equal or lower than those reported in the file will be returned.\nSequentially, the rules will be evaluated until a match is found, upon finding it, the process will be stopped and the commission will be evaluated. In the same way, if the rule is not found, the option will be validated.\nThe matching process uses client Tokens filed, which identify the provided by the client and it is used to filter which business rules can be applied in the request sent.\nHow to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nExecution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;safety_margin\u0026quot; } ] } }  Files needed to use this plugin  Safety Margin file format (Mandatory)\n Net Compare file format (Optional)\n  Safety Margin file (Mandatory)  Encoding: UTF-8 File Name: [Context Source]_sequential_safetymargin.csv Headers:\n ruleId ‚Üí rule identifier clientTokens ‚Üí client Tokens* supplierCodes ‚Üí supplier code notSupplierCodes ‚Üí supplier code creationDateFrom ‚Üí start creation date Date format creationDateTo ‚Üí end creation date Date format checkInFrom ‚Üí checkinfrom date Date format checkInTo ‚Üí checkinto date Date format hotelCodes ‚Üí hotel code nothotelCodes ‚Üí hotel code chainsCodes ‚Üí chain code notChainCodes ‚Üí chain code destinationCodes ‚Üí destination code notDestinationCodes ‚Üí destination code percentage ‚Üí commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;)\n  client tokens Identifier provided by the client that serves to filter which business rules can be applied for the sent request.\n List file fields\n   Field Mandatory Excluded fileds* Multi-value     ruleId Yes - No   clientTokens Yes - Yes   supplierCodes Yes notSupplierCodes Yes   notSupplierCodes Yes supplierCodes Yes   creationDateFrom No - No   creationDateTo No - No   checkInFrom No - No   checkInTo No - No   hotelCodes No nothotelCodes Yes   nothotelCodes No hotelCodes Yes   chainsCodes No notChainCodes Yes   notChainCodes No chainsCodes Yes   DestinationCodes No notDestinationCodes Yes   notDestinationCodes No DestinationCodes Yes   percentage Yes - No    *Excluded fileds Informed field will be ignored\n  Delimiter: Comma (‚Äú,‚Äù)\n Separator for multiples codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: XTG_sequential_safetymargin.csv\nData:\nSimple value field\nruleId,clientTokens,supplierCodes,notSupplierCodes,creationDateFrom,creationDateTo,checkInFrom,checkInTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage CE1,XXX,DIN,,,,2018-04-01,2018-10-31,3846,,,,,,18.50 CE2,YYY,DIN,,,,,,3846,,,,,,15.00  Multivalue field\nruleId,clientTokens,supplierCodes,notSupplierCodes,creationDateFrom,creationDateTo,checkInFrom,checkInTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage CE1,XXX,DIN;HOB;JMB,,,,2018-04-01,2018-10-31,3846,,,,,,18.50 CE2,YYY,DIN,,,,,,3846,,,,,,15.00  Date format Date format yyyy-mm-dd is mandatory\n Net Compare file (Optional) The net compare file should be in the format below:\n Encoding: UTF-8 File Name: [Context Source]_sequential_netCompare.csv Headers:\n ruleId ‚Üí rule identifier clientTokens ‚Üí client Tokens* supplierCodes ‚Üí supplier code notSupplierCodes ‚Üí supplier code bookingDateFrom ‚Üí booking date from Date format bookingDateTo ‚Üí booking date to Date format startDateFrom ‚Üí start date from Date format startDateTo ‚Üí start date to Date format hotelCodes ‚Üí hotel code nothotelCodes ‚Üí hotel code chainsCodes ‚Üí chain code notChainCodes ‚Üí chain code destinationCodes ‚Üí destination code notDestinationCodes ‚Üí destination code percentage ‚Üí commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;) amount ‚Üí amount\n  client tokens Identifier provided by the client that is used to filter which business rules can be applied for the sent request.\n List file fields\n   Field Mandatory Excluded fields* Multi-value     ruleId Yes - No   clientTokens Yes - Yes   supplierCodes Yes notSupplierCodes Yes   notSupplierCodes Yes supplierCodes Yes   bookingDateFrom No - No   bookingDateTo No - No   startDateFrom No - No   startDateTo No - No   hotelCodes No nothotelCodes Yes   nothotelCodes No hotelCodes Yes   chainsCodes No notChainCodes Yes   notChainCodes No chainsCodes Yes   DestinationCodes No notDestinationCodes Yes   notDestinationCodes No DestinationCodes Yes   percentage Yes amount No   amount Yes percentage No    *Excluded fields Informed field will be ignored\n  Delimiter: Comma (‚Äú,‚Äù)\n Separator for multiples codes in the same row: Semicolon (\u0026ldquo;;\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: XTG_sequential_netCompare.csv\nData:\nSimple value field\nruleId,clientTokens,supplierCodes,notSupplierCodes,bookingDateFrom,bookingDateTo,startDateFrom,startDateTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,amount 2795,,SUN2,,2018-06-04,2018-06-17,,2018-12-31,,,,,,,-2,1 2796,,EPL,,2018-06-04,2018-06-17,,2018-12-31,,,,,,,-1,2 2327,,TEC,,,,,2019-04-30,59735,,,,,,-3,3 2429,,CFT,,,,,2019-04-30,,,,,,,2.5, 2193,,DIN,,,,,2018-12-31,16038,,,,,,-2, 1315,,CIM,,,,,2018-12-31,39088,,,,,,-2, 1272,,TEC,,,,,2018-12-31,40912,,,,,,-4, 1332,,DIN,,,,,2018-12-31,40371,,,,,,3.5, 1323,,SMD,,,,,2018-12-31,,,DCHOT,,,,-3, 2213,,GNA,,,,,2018-12-31,,,GHT,,,,-2.5, 2225,,PRS,,,,,2019-04-30,,,MEDIT,,,,-4, 1019,,MED,,,,,2019-04-30,,,MEDP,,,,-3, 1020,,SEN,,,,,2019-04-30,,,PLYHT,,,,-4.25,  Multivalue field\nruleId,clientTokens,supplierCodes,notSupplierCodes,bookingDateFrom,bookingDateTo,startDateFrom,startDateTo,hotelCodes,notHotelCodes,chainCodes,notChainCodes,destinationCodes,notDestinationCodes,percentage,amount 2795,,SUN2;DIN;HOB;JMB,,2018-06-04,2018-06-17,,2018-12-31,,,,,,,-2,1 2796,,EPL,,2018-06-04,2018-06-17,,2018-12-31,,,,,,,-1,2 2327,,TEC,,,,,2019-04-30,59735,,,,,,-3,3 2429,,CFT,,,,,2019-04-30,,,,,,,2.5, 2193,,DIN,,,,,2018-12-31,16038,,,,,,-2, 1315,,CIM,,,,,2018-12-31,39088,,,,,,-2, 1272,,TEC,,,,,2018-12-31,40912,,,,,,-4, 1332,,DIN,,,,,2018-12-31,40371,,,,,,3.5, 1323,,SMD,,,,,2018-12-31,,,DCHOT,,,,-3, 2213,,GNA,,,,,2018-12-31,,,GHT,,,,-2.5, 2225,,PRS,,,,,2019-04-30,,,MEDIT,,,,-4, 1019,,MED,,,,,2019-04-30,,,MEDP,,,,-3, 1020,,SEN,,,,,2019-04-30,,,PLYHT,,,,-4.25,  Date format Date format yyyy-mm-dd is mandatory\n "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nIn this pages you can find all the relevant scalars for Flight-X. You can take look to this pages for more enums in our platform.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/mappea/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": "Scalars are types of objects that are available in our schema (such as String or Integer). By defining scalars we make sure you can only enter or receive data that fits the objects in our data model.\nEach Scalar is described in the same way: - A short definition of the Scalar - An interactive GraphQL schema definition - A list of which objects require this Scalar - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/tools/",
	"title": "Tools",
	"tags": [],
	"description": "Tools that will help you manage your inventory",
	"content": "   Availability simulator      Copy Tool Copy configurations to make the SetUp process easier and faster\n     Delete product Delete the availability conditions and prices loaded in Inventory-X\n     Management Manage users and hotels\n     Permissions Assign and manage your users and hotels relation\n     Booking List \u0026amp; Price Details Retrieve booking information from a specific hotel.\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/hotel-solutions/transfers/",
	"title": "Transfers",
	"tags": [],
	"description": "Add Transfer options back and forth the Hotel from nearby Airports",
	"content": " This solution lets you add transfer options from hotels and nearby airports to your hotel shopping flow with minimum effort.\nWhat does it do? We use the Hotel geolocation to identify nearby airports, look for available transfers with our connected providers and return them in the Quote response, within the GraphQL Extensions section.\nHow to implement it? As a Buyer, you\u0026rsquo;ll need to be connected to our latest API, Hotel-X. From there, in just a few steps you can start booking one-way or round-trip transfers as an added value to your hotel offering.\n Obtain your development and/or production API Key from Servantrip and share it with us. Start a Hotel Search as you normally would. Without changes in the Hotel Quote request, you will receive a list of available transfers back and forth to the selected hotel from nearby airports. In Hotel Book we need the Transfer Option Identifier, returned in step (3), plus the flight number and contact details (email and phone) to successfully complete the booking process.  The reason the final client\u0026rsquo;s contact details are mandatory is so that the transfer company can be aware of any changes to the booking.\n Workflow example This workflow assumes that you have previously activated the Hotel+Transfer feature.\n Search No changes are required in this step.\nQuote You don‚Äôt have to add anything to your current structure as we will use the hotel geolocation to identify nearby airports as well as the check-in and check-out dates for arrival and departure respectively, and also the number of guests will determine the passengers to transfer.\nWithin the current hotel information, you will find a list of transfer options which includes information about the pick-up and drop-off locations, images, vehicle types, price, cancellation policies, paxes and baggage limits. This information is in the GraphQL Extensions section of the response.\nEvery transfer option comes with an OptionId that uniquely identifies the product. This identifier will be required to book a transfer in the book step.\nThis is the response structure (removed data information for brevity):\n{ \u0026quot;data\u0026quot;: {}, \u0026quot;extensions\u0026quot;: { \u0026quot;appStore\u0026quot;: { \u0026quot;apps\u0026quot;: [{ \u0026quot;code\u0026quot;: \u0026quot;ProviderTransfersApp\u0026quot;, \u0026quot;schema\u0026quot;: \u0026quot;AppSchemaTransferSearch\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;language\u0026quot;: \u0026quot;en\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;GB\u0026quot;, \u0026quot;locations\u0026quot;: [{ \u0026quot;code\u0026quot;: \u0026quot;ChIJAQAAANAxQg0R786FD-old24\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(MAD) Madrid-Barajas Adolfo Su√°rez Airport (MAD), Avenida de la Hispanidad, Madrid, Spain\u0026quot; }, { \u0026quot;code\u0026quot;: \u0026quot;GhIJzt-EQgQ0REARJAFqatlaDcA\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Claridge Madrid\u0026quot; } ], \u0026quot;transfers\u0026quot;: [{ \u0026quot;pickupCode\u0026quot;: \u0026quot;ChIJAQAAANAxQg0R786FD-old24\u0026quot;, \u0026quot;dropoffCode\u0026quot;: \u0026quot;GhIJzt-EQgQ0REARJAFqatlaDcA\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Shared Shuttle Transfer\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/shared.png\u0026quot;, \u0026quot;vehicle\u0026quot;: \u0026quot;Mercedes Sprinter, Volkswagen Transporter or similar\u0026quot;, \u0026quot;options\u0026quot;: [{ \u0026quot;optionId\u0026quot;: \u0026quot;VkZVNE5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2UVhSUk1FVXhVa1ZaZWsxRVRrVlBWRWt3V0hwRmQwMUVSVDA9fDQyLjY4fDIwMjItMDctMTVUMDA6MDA6MDAuMDAwMDAwMCswMjowMA==\u0026quot;, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 42.68 }, \u0026quot;tags\u0026quot;: [\u0026quot;shared\u0026quot;, \u0026quot;meet_point\u0026quot;, \u0026quot;stops_in_between\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;no_green_friendly\u0026quot;], \u0026quot;paxLimit\u0026quot;: 99, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 3 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-14T00:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } }, { \u0026quot;optionId\u0026quot;: \u0026quot;VkZVNE5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2UVhSVFJVcElWV3BSTUZGVVFrVlNhazE0V0hwRmQwMUVSVDA9fDQ3Ljc0fDIwMjItMDctMTVUMDA6MDA6MDAuMDAwMDAwMCswMjowMA==\u0026quot;, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 47.74 }, \u0026quot;tags\u0026quot;: [\u0026quot;meet_point\u0026quot;, \u0026quot;direct_ride\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;shared\u0026quot;, \u0026quot;green_friendly\u0026quot;], \u0026quot;paxLimit\u0026quot;: 99, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 3 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-14T00:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } } ] }, { \u0026quot;pickupCode\u0026quot;: \u0026quot;ChIJAQAAANAxQg0R786FD-old24\u0026quot;, \u0026quot;dropoffCode\u0026quot;: \u0026quot;GhIJzt-EQgQ0REARJAFqatlaDcA\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Private Standard SUV\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/SUV_Standard.png\u0026quot;, \u0026quot;vehicle\u0026quot;: \u0026quot;Ford Eco Sport or similar\u0026quot;, \u0026quot;options\u0026quot;: [{ \u0026quot;optionId\u0026quot;: \u0026quot;VkZVNE5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2UVhSTlZGWkhUMFZaTkU5VlVrSlNhMDB6V0hwRmQwMUVTVDA9fDIxOS43OHwyMDIyLTA3LTE1VDAwOjAwOjAwLjAwMDAwMDArMDI6MDA=\u0026quot;, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 219.78 }, \u0026quot;tags\u0026quot;: [\u0026quot;private\u0026quot;, \u0026quot;direct_ride\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;no_green_friendly\u0026quot;, \u0026quot;meet_greet\u0026quot;], \u0026quot;paxLimit\u0026quot;: 4, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 4 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-14T00:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } } ] }, { \u0026quot;pickupCode\u0026quot;: \u0026quot;ChIJAQAAANAxQg0R786FD-old24\u0026quot;, \u0026quot;dropoffCode\u0026quot;: \u0026quot;GhIJzt-EQgQ0REARJAFqatlaDcA\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Private Business SUV \u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/SUV_business.png\u0026quot;, \u0026quot;vehicle\u0026quot;: \u0026quot;Toyota RAV4 or similar\u0026quot;, \u0026quot;options\u0026quot;: [{ \u0026quot;optionId\u0026quot;: \u0026quot;VkZVNE5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2UVhSTlZGWkhUMFZaTkU5VlVrSlNhMDB6V0hwRmQwMUVXVDA9fDI2Ny40OXwyMDIyLTA3LTE1VDAwOjAwOjAwLjAwMDAwMDArMDI6MDA=\u0026quot;, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 267.49 }, \u0026quot;tags\u0026quot;: [\u0026quot;private\u0026quot;, \u0026quot;direct_ride\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;no_green_friendly\u0026quot;, \u0026quot;meet_greet\u0026quot;], \u0026quot;paxLimit\u0026quot;: 4, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 4 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-14T00:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } } ] }, { \u0026quot;pickupCode\u0026quot;: \u0026quot;GhIJzt-EQgQ0REARJAFqatlaDcA\u0026quot;, \u0026quot;dropoffCode\u0026quot;: \u0026quot;ChIJAQAAANAxQg0R786FD-old24\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Private Standard SUV\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/SUV_Standard.png\u0026quot;, \u0026quot;vehicle\u0026quot;: \u0026quot;Ford Eco Sport or similar\u0026quot;, \u0026quot;options\u0026quot;: [{ \u0026quot;optionId\u0026quot;: \u0026quot;VkZWTk5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2UlhSTlZGWkhUMFZaTkU5VlVrSlNhMDB6V0hwRmQwMUVTVDA9fDE3NC40OXwyMDIyLTA3LTE5VDIxOjAwOjAwLjAwMDAwMDArMDI6MDA=\u0026quot;, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 174.49 }, \u0026quot;tags\u0026quot;: [\u0026quot;private\u0026quot;, \u0026quot;direct_ride\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;no_green_friendly\u0026quot;, \u0026quot;meet_greet\u0026quot;], \u0026quot;paxLimit\u0026quot;: 4, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 4 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-18T21:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } } ] }, { \u0026quot;pickupCode\u0026quot;: \u0026quot;GhIJzt-EQgQ0REARJAFqatlaDcA\u0026quot;, \u0026quot;dropoffCode\u0026quot;: \u0026quot;ChIJAQAAANAxQg0R786FD-old24\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Private Minibus\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/Minibus.png\u0026quot;, \u0026quot;vehicle\u0026quot;: \u0026quot;Medium size bus\u0026quot;, \u0026quot;options\u0026quot;: [{ \u0026quot;optionId\u0026quot;: \u0026quot;VkZWTk5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2UlhSTlZGWkhUMFZaTkU5VlVrSlNhMDB6V0hwRmQwMUVVVDA9fDE3NC40OXwyMDIyLTA3LTE5VDIxOjAwOjAwLjAwMDAwMDArMDI6MDA=\u0026quot;, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 174.49 }, \u0026quot;tags\u0026quot;: [\u0026quot;private\u0026quot;, \u0026quot;direct_ride\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;no_green_friendly\u0026quot;, \u0026quot;meet_greet\u0026quot;], \u0026quot;paxLimit\u0026quot;: 16, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 16 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-18T21:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } }, { \u0026quot;optionId\u0026quot;: \u0026quot;VkZWTk5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2UlhSUk1FVXhVa1ZaZWsxRVRrVlBWRWt3V0hwRmQwMUVZejA9fDE2NC42MXwyMDIyLTA3LTE5VDIxOjAwOjAwLjAwMDAwMDArMDI6MDA=\u0026quot;, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 164.61 }, \u0026quot;tags\u0026quot;: [\u0026quot;private\u0026quot;, \u0026quot;meet_greet\u0026quot;, \u0026quot;direct_ride\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;no_green_friendly\u0026quot;], \u0026quot;paxLimit\u0026quot;: 16, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 16 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-18T21:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } } ] }, { \u0026quot;pickupCode\u0026quot;: \u0026quot;GhIJzt-EQgQ0REARJAFqatlaDcA\u0026quot;, \u0026quot;dropoffCode\u0026quot;: \u0026quot;ChIJW4P2yGM2Qg0RzCE_hCcBIKg\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Private Premium Sedan\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/Transfer-Premium.png\u0026quot;, \u0026quot;vehicle\u0026quot;: \u0026quot;Mercedes S class, Audi A8 or similar\u0026quot;, \u0026quot;options\u0026quot;: [{ \u0026quot;optionId\u0026quot;: \u0026quot;VkZWTk5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2VFhSTlZGWkhUMFZaTkU5VlVrSlNhMDB6V0hwRmQwMUVaejA9fDE5LjQ1fDIwMjItMDctMjBUMDA6MDA6MDAuMDAwMDAwMCswMjowMA==\u0026quot;, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 19.45 }, \u0026quot;tags\u0026quot;: [\u0026quot;private\u0026quot;, \u0026quot;direct_ride\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;no_green_friendly\u0026quot;, \u0026quot;meet_greet\u0026quot;], \u0026quot;paxLimit\u0026quot;: 6, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 5 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-19T00:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } } ] } ] } } ] } } }  Book Once you have selected the required transfer options you need to include the corresponding option identifiers in the Book Mutation.\nWithin the HotelXMutation.Book there is a property called AppsInput which lets you add information required to confirm the service.\nFor example, to book a round-trip transfer you must specify two appsInput, one for arrival and another one for departure.\nThis is an example of the variable structure:\n{ \u0026quot;appsInput\u0026quot;: [{ \u0026quot;where\u0026quot;: { \u0026quot;code\u0026quot;: \u0026quot;TransfersApp\u0026quot; }, \u0026quot;data\u0026quot;: { \u0026quot;parameters\u0026quot;: [{ \u0026quot;key\u0026quot;: \u0026quot;OptionId\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;VkZVNE5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2UVhSTlZGWkhUMFZaTkU5VlVrSlNhMDB6V0hwRmQwMUVTVDA9fDIxOS43OHwyMDIyLTA3LTE1VDAwOjAwOjAwLjAwMDAwMDArMDI6MDA=\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;FlightNumber\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;IB475\u0026quot; } ] } }, { \u0026quot;where\u0026quot;: { \u0026quot;code\u0026quot;: \u0026quot;TransfersApp\u0026quot; }, \u0026quot;data\u0026quot;: { \u0026quot;parameters\u0026quot;: [{ \u0026quot;key\u0026quot;: \u0026quot;OptionId\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;VkZWTk5rNXRTVEJhYWxGNVdsUkZkRTVVWXpGYWFUQXdUbXBuZDB4VWF6UlBWMVYwV1dwQmVWbDZWbTFQUjBVeldWZE5lRmg2UlhSTlZGWkhUMFZaTkU5VlVrSlNhMDB6V0hwRmQwMUVTVDA9fDE3NC40OXwyMDIyLTA3LTE5VDIxOjAwOjAwLjAwMDAwMDArMDI6MDA=\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;FlightNumber\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;IB473\u0026quot; } ] } } ] }  Additionally, in order to book Hotel + transfer, it is necessary to include all the holder\u0026rsquo;s information:\n{ \u0026quot;holder\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Doe\u0026quot;, \u0026quot;contactInfo\u0026quot;: { \u0026quot;phone\u0026quot;: { \u0026quot;countryCode\u0026quot;: \u0026quot;+34\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;123456789\u0026quot; }, \u0026quot;email\u0026quot;: \u0026quot;john@doe.com\u0026quot; } } }  A successful response looks like this:\n{ \u0026quot;data\u0026quot;: {}, \u0026quot;extensions\u0026quot;: { \u0026quot;appStore\u0026quot;: { \u0026quot;apps\u0026quot;: [{ \u0026quot;code\u0026quot;: \u0026quot;ProviderTransfersApp\u0026quot;, \u0026quot;schema\u0026quot;: \u0026quot;AppSchemaTransferBook\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;ok\u0026quot;, \u0026quot;reference\u0026quot;: { \u0026quot;bookingId\u0026quot;: \u0026quot;EAFF6E46\u0026quot; }, \u0026quot;holder\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Doe\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;john@doe.com\u0026quot;, \u0026quot;phone\u0026quot;: { \u0026quot;countryCode\u0026quot;: \u0026quot;+34\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;123456789\u0026quot; } }, \u0026quot;transfers\u0026quot;: [{ \u0026quot;pickupWhen\u0026quot;: \u0026quot;2022-07-15T00:00:00\u0026quot;, \u0026quot;pickupLocation\u0026quot;: \u0026quot;(MAD) Madrid-Barajas Adolfo Su√°rez Airport (MAD), Avenida de la Hispanidad, Madrid, Spain\u0026quot;, \u0026quot;dropoffLocation\u0026quot;: \u0026quot;Claridge Madrid\u0026quot;, \u0026quot;options\u0026quot;: [{ \u0026quot;contact\u0026quot;: { \u0026quot;Emergency Phone\u0026quot;: \u0026quot;+34 911 23 34 92\u0026quot; }, \u0026quot;instructions\u0026quot;: \u0026quot;After collecting your luggage, please make your way to the arrival hall using any of the available exits. Your name will be displayed on a TransferProvider sign. In case you cannot find your driver please contact him directly using the mobile number sent to you via SMS or use our Self Service Centre. Your driver will start waiting for you 550 minutes after flight arrival. The included free waiting time from then onward is 45 minutes.\u0026quot;, \u0026quot;optionId\u0026quot;: null, \u0026quot;provider\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;TransferProvider\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/providers/logos/providerlogo_15F8F89DAFC7.png\u0026quot; }, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 219.78 }, \u0026quot;tags\u0026quot;: [\u0026quot;private\u0026quot;, \u0026quot;direct_ride\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;no_green_friendly\u0026quot;, \u0026quot;meet_greet\u0026quot;], \u0026quot;paxLimit\u0026quot;: 0, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 4 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-14T00:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } } ], \u0026quot;pickupCode\u0026quot;: \u0026quot;ChIJAQAAANAxQg0R786FD-old24\u0026quot;, \u0026quot;dropoffCode\u0026quot;: \u0026quot;GhIJzt-EQgQ0REARJAFqatlaDcA\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Private Standard SUV\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/SUV_Standard.png\u0026quot;, \u0026quot;vehicle\u0026quot;: \u0026quot;Ford Eco Sport or similar\u0026quot; }, { \u0026quot;pickupWhen\u0026quot;: \u0026quot;2022-07-19T00:00:00\u0026quot;, \u0026quot;pickupLocation\u0026quot;: \u0026quot;Claridge Madrid\u0026quot;, \u0026quot;dropoffLocation\u0026quot;: \u0026quot;(MAD) Madrid-Barajas Adolfo Su√°rez Airport (MAD), Avenida de la Hispanidad, Madrid, Spain\u0026quot;, \u0026quot;options\u0026quot;: [{ \u0026quot;contact\u0026quot;: { \u0026quot;Emergency Phone\u0026quot;: \u0026quot;+34 911 23 34 92\u0026quot; }, \u0026quot;instructions\u0026quot;: \u0026quot;The driver will wait for you in front of the building that you have indicated as your pick-up point. In case you cannot find your driver, please contact him directly using the mobile number sent to you via SMS or use our Self Service Centre.\u0026quot;, \u0026quot;optionId\u0026quot;: null, \u0026quot;provider\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;TransferProvider\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/providers/logos/providerlogo_15F8F89DAFC7.png\u0026quot; }, \u0026quot;price\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;net\u0026quot;: 174.49 }, \u0026quot;tags\u0026quot;: [\u0026quot;private\u0026quot;, \u0026quot;direct_ride\u0026quot;, \u0026quot;refundable\u0026quot;, \u0026quot;no_weelchair_adapted\u0026quot;, \u0026quot;no_green_friendly\u0026quot;, \u0026quot;meet_greet\u0026quot;], \u0026quot;paxLimit\u0026quot;: 0, \u0026quot;baggage\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;standard_suitcase\u0026quot;, \u0026quot;quantity\u0026quot;: 4 } ], \u0026quot;cancelPolicy\u0026quot;: { \u0026quot;refundable\u0026quot;: true, \u0026quot;cancelPenalties\u0026quot;: [{ \u0026quot;deadline\u0026quot;: \u0026quot;2022-07-18T00:00:00+02:00\u0026quot;, \u0026quot;penaltyType\u0026quot;: \u0026quot;percentage\u0026quot;, \u0026quot;amount\u0026quot;: 100.0 } ] } } ], \u0026quot;pickupCode\u0026quot;: \u0026quot;GhIJzt-EQgQ0REARJAFqatlaDcA\u0026quot;, \u0026quot;dropoffCode\u0026quot;: \u0026quot;ChIJAQAAANAxQg0R786FD-old24\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Private Standard SUV\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;https://media.imagebank.com/resources/img/SUV_Standard.png\u0026quot;, \u0026quot;vehicle\u0026quot;: \u0026quot;Ford Eco Sport or similar\u0026quot; } ] } } ] } } }  Booking If you need to retrieve the booked transfer information you can use the Booking List Query sending the reference of every transfer previously booked.\nThe AppsInput property lets you include the Transfer Booking Identifiers using variables as follows:\n{ \u0026quot;appsInput\u0026quot;: [ { \u0026quot;where\u0026quot;: { \u0026quot;code\u0026quot;: \u0026quot;TransfersApp\u0026quot; }, \u0026quot;data\u0026quot;: { \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;BookingId\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;EAFF6E46\u0026quot; } ] } } ] }   The response structure is the same as the book response.\n Cancel To cancel a transfer book use the following structure including BookingId and CancelReason.\n{ \u0026quot;appsInput\u0026quot;: [ { \u0026quot;where\u0026quot;: { \u0026quot;code\u0026quot;: \u0026quot;TransfersApp\u0026quot; }, \u0026quot;data\u0026quot;: { \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;BookingId\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;EAFF6E46\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;CancelReason\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;I will travel on other dates.\u0026quot; } ] } } ] }   The response structure is the same as the book response.\n You can see that status has the value \u0026ldquo;cancelled\u0026rdquo;.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/howtos/guides/certification_process/usecases/",
	"title": "Use cases",
	"tags": [],
	"description": "Different use cases you have to attach during certification process",
	"content": "To ensure that your connection to our HotelX API is set up correctly, you‚Äôll need to make the following test scenario. You can choose the hotel and dates you prefer:\n Case 1: 1 room with 2 Adults for a Package rate rule. Case 2: 1 room with 2 Adults and 1 room with 2 adults + 1 Child 5 years old for a non-refundable rate. Case 3: 1 room with 2 Adults and 1 room with 2 adults + 1 Child 5 years old and 1 room for 3 adults for a refundable rate. Case 4: 1 room with 2 Adults for a payment type different than MERCHANT  "
},
{
	"uri": "https://travelgatex.com/community/gist/",
	"title": "Using gist to include GraphQL examples",
	"tags": [],
	"description": "Use gist to document GraphQL examples",
	"content": " Using hists on md pages This document assists on using GIST to show GraphQl examples.\nTo use Gist it\u0026rsquo;s needed to include the hists on the header and call it on the md page body.\nSetups on header On the page header we\u0026rsquo;ll keep the usual page fields needed (like title, pagetitle\u0026hellip;) and we\u0026rsquo;ll add a new key \u0026ldquo;gists\u0026rdquo; as a list of elements with this atributes:\n   Atribute Explanation     n The Gist title that will be shown   g The Gist Id something like: 765fa8dbddd6a17571feb012f9c876bc   o The language that must be in [\u0026ldquo;graphiql\u0026rdquo;, \u0026ldquo;curl\u0026rdquo;, \u0026ldquo;other\u0026rdquo;]   u The user Id that hosts the gist   ak The auth key of the referred user something like: 8777cfff-e333\u0026hellip;    EXAMPLE:\n{ \u0026quot;title\u0026quot;: \u0026quot;SOME TITLE HERE\u0026quot;, \u0026quot;pagetitle\u0026quot;: \u0026quot;SOME PAGETITLE HERE\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;SOME DESCRIPTION HERE\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;fa-SOME-ICON\u0026quot;, \u0026quot;weight\u0026quot;: 1, \u0026quot;alwaysopen\u0026quot;: false, \u0026quot;default_user\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;gists\u0026quot;: [ { \u0026quot;n\u0026quot;:\u0026quot;GIST TITLE\u0026quot;, \u0026quot;g\u0026quot;:\u0026quot;GIST ID\u0026quot;, \u0026quot;o\u0026quot;:[\u0026quot;graphiql\u0026quot;], \u0026quot;u\u0026quot;:\u0026quot;SOME_USER_ID\u0026quot;, \u0026quot;ak\u0026quot;:\u0026quot;AUTH KEY\u0026quot; }, { \u0026quot;n\u0026quot;:\u0026quot;GIST TITLE 2\u0026quot;, \u0026quot;g\u0026quot;:\u0026quot;GIST ID\u0026quot;, \u0026quot;o\u0026quot;:[\u0026quot;graphiql\u0026quot;], \u0026quot;u\u0026quot;:\u0026quot;SOME_USER_ID\u0026quot;, \u0026quot;ak\u0026quot;:\u0026quot;AUTH KEY\u0026quot; }, { \u0026quot;n\u0026quot;:\u0026quot;GIST TITLE 3\u0026quot;, \u0026quot;g\u0026quot;:\u0026quot;GIST ID\u0026quot;, \u0026quot;o\u0026quot;:[\u0026quot;graphiql\u0026quot;], \u0026quot;u\u0026quot;:\u0026quot;SOME_USER_ID\u0026quot;, \u0026quot;ak\u0026quot;:\u0026quot;AUTH KEY\u0026quot; } ] }  Page content setup In the body page well need to include at the place where we want to show the code the following:\n{{% graphiql-tabs %}} {{% /graphiql-tabs %}} {{/*\u0026lt; graphiql-styles \u0026gt;*/}} {{% graphiql-script-tabs %}}  The tabs label will show the menu to select the gist and the script-tabs will show the code.\nView an example\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/bookingflow/valuation/",
	"title": "Valuation",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return the total price and cancellation policies of the Option selected in the previous step (Avail).\nRequest Format The Valuation request format is similar to that of availabilityRQ. It\u0026rsquo;s here you will add data to the option selected.\nResponse Format The returned XML contains the total price and list of cancellation policies.\nRemarks Our system allows for a maximum of 180000 milliseconds before the connection is closed.\nValuationRQ Example \u0026lt;ValuationRQ\u0026gt; \u0026lt;StartDate\u0026gt;04/07/2016\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;11/07/2016\u0026lt;/EndDate\u0026gt; \u0026lt;MealPlanCode\u0026gt;15\u0026lt;/MealPlanCode\u0026gt; \u0026lt;HotelCode\u0026gt;6259\u0026lt;/HotelCode\u0026gt; \u0026lt;PaymentType\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt; \u0026lt;OptionType\u0026gt;Hotel\u0026lt;/OptionType\u0026gt; \u0026lt;OnRequest\u0026gt;false\u0026lt;/OnRequest\u0026gt; \u0026lt;BlockOption\u0026gt;false\u0026lt;/BlockOption\u0026gt; \u0026lt;Nationality\u0026gt;ES\u0026lt;/Nationality\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;ID1\u0026quot; value = \u0026quot;ID#1#VR\u0026quot;/\u0026gt; \u0026lt;Parameter key = \u0026quot;ID2\u0026quot; value = \u0026quot;ID#2#FGR#45187#10-5\u0026quot;/\u0026gt; \u0026lt;Parameter key = \u0026quot;PSR\u0026quot; value = \u0026quot;511.28\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;ITD10\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;TW\u0026quot; description = \u0026quot;Twinn\u0026quot;/\u0026gt; \u0026lt;Room id = \u0026quot;IOG22\u0026quot; roomCandidateRefId = \u0026quot;2\u0026quot; code = \u0026quot;IND\u0026quot; description = \u0026quot;Individual\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;/ValuationRQ\u0026gt;  ValuationRQ Description    Element Number Type Description     ValuationRQ 1  Root node.   StartDate 1 String Start date of rate search.   EndDate 1 String End date of rates search.   OnRequest 1 Boolean Indicates if you want to receive the on request options in AvailRS, as long as the supplier returns it in this method (see MetaData).   BlockOption 1 Boolean Indicates if you want to block the option selected in AvailRS, as long as the supplier allows it in this method (see MetaData).   MealPlanCode 1 String MealPlan code.   HotelCode 1 String Hotel code.   PaymentType 1 String Indicates payment type (See full type list at Lists of Data).   OptionType 1 String Indicates option types.   Nationality 1 String Guest nationality (use ISO3166_1_alfa_2).   Rooms / 1  Rooms in this option (room list).   Rooms /Room 1..n  Room Details.   @id 1 String Room Identifier.   @roomCandidateRefId 1 Integer Room candidate Identifier.   @code 1 String Room code.   @description 1 String Room description.   RoomCandidates /RoomCandidate 1..n  Room required.   @id 1 Integer Id of requested room (starting at 1).   RoomCandidates /RoomCandidate/Paxes/Pax 1..n  Pax required.   @age 1 Integer Passenger age on the day of check-in.   @id 1 Integer Passenger id (starting at 1).   Parameters / 0..1  Additional parameters reported in AvailRS. If you receive parameters in AvailRS it is mandatory to send them exactly the same as received. If you don\u0026rsquo;t send exactly the same parameters as received the Valuation could fail.   Parameters /Parameter 0..n  Additional parameter requiring integration.   @key 1 String Contains keyword/Id to identify a parameter.   @value 1 String Contains parameter value.    ValuationRS Example \u0026lt;ValuationRS xmlns:xsd = \u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot; xmlns:xsi = \u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;bd1\u0026quot; value = \u0026quot;43\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;Status\u0026gt;OK\u0026lt;/Status\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;106.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;72\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;25.00\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;48\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-02T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;72.40\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;Fees\u0026gt; \u0026lt;Fee includedPriceOption = \u0026quot;true\u0026quot; description = \u0026quot;TaxAndServiceFee\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;8.11\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Code\u0026gt;SPE\u0026lt;/Code\u0026gt; \u0026lt;/Fee\u0026gt; \u0026lt;/Fees\u0026gt; \u0026lt;Remarks/\u0026gt; \u0026lt;PaymentOptions cash = \u0026quot;false\u0026quot; bankAcct = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Cards\u0026gt; \u0026lt;Card code = \u0026quot;VI\u0026quot;/\u0026gt; \u0026lt;Card code = \u0026quot;AX\u0026quot;/\u0026gt; \u0026lt;Card code = \u0026quot;CA\u0026quot;/\u0026gt; \u0026lt;/Cards\u0026gt; \u0026lt;/PaymentOptions\u0026gt; \u0026lt;CancelPoliciesDescription/\u0026gt; \u0026lt;/ValuationRS\u0026gt;  ValuationRS Description    Element Number Type Description     ValuationRS 1  Root node.   Parameters / 0..1  Parameters for additional information.   Parameters /Parameter 1..n  List of parameters.   @key 1 String Contains the keyword/Id to identify a parameter.   @value 1 String Contains parameter value.   Status 1  Status option (OK = available, RQ = on request).   Price 1  Total price of this valuation.   @currency 1 String Currency code.   @amount 1 Decimal Option Amount.   @binding 1 Boolean Identifies if the price is binding (When true the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission: -1 = not specified (indicated in contract with the supplier), 0 = net price, X = % of the commission applied to the amount.   CancelPenalties / 1  Cancellation policy details.   @nonRefundable 1 Boolean Indicate if this option is nonRefundable (true or false).   CancelPenalties /CancelPenalty 0..n  Listing cancellation penalties.   CancelPenalties /CancelPenalty/HoursBefore 1 String Number of hours prior to checkin date in which this Cancellation policy applies .   CancelPenalties /CancelPenalty/Deadline 1 String Date on UTC Standard TimeZone in which this Cancellation policy applies (ISO 8601 e.g: 2016-07-01T05:00:00Z)   CancelPenalties /CancelPenalty/CalculatedDeadline 1 Boolean Indicate if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate -\u0026gt; true = has been calculated by XTG / false = bypass of supplier data without calculation   CancelPenalties /CancelPenalty/Penalty 1  Contains the value to apply.   @type 1 String Type of possible penalty values: \u0026ldquo;Noches\u0026rdquo; (nights) , \u0026ldquo;Porcentaje\u0026rdquo; (percentage) ,\u0026ldquo;Importe\u0026rdquo; (price value).   @currency 1 String Currency code.   @paymentType 1 String Indicates payment type of penalty (See full type list at Lists of Data) .   CancelPenalties /CancelPenalty/Deadline 0..1 String Cancellation fees will be applicabled between this date and check-in date.   Remarks 0..1 String Remarks (see MetaData in order to verify if a supplier implements it).   PaymentOptions / 0..1 String Payment Types allowed by the supplier. This tag is mandatory only if payment type is different than MerchantPay.   PaymentOptions /Cards 0..1  List of cards allowed.   PaymentOptions /Cards/Card 1..n  Details of card.   @code 1 String Code card. Se the full list of card codes at Lists of Data   Fees / 0..1  Contains a list of fees.   Fees /Fee 1..n  Contains details of the fee.   Fees /Fee/Code 1 String Specifies the fee code in case it has one.   @includedPriceOption 1 Boolean Indicates if the fee is included or not in the final price (value indicated in the node Price in ValuationRS).   @description 1 String Remarks regarding fee.   Fees /Fee/Price 1  Contains details of price.   @currency 1 String Currency code.   @amount 1 Decimal Fee Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed.   @commission 1 Decimal Commission: -1 = not specified (indicated in contract with supplier), 0 = net price, X = % of the commission applied to the amount.   CancelPoliciesDescription 0..1 String Contains the cancellation penalties in free text (see MetaData in order to verify if a supplier implements it).   Option / 0..1 Option quoted    Option /Rooms / 0..1  Rooms in the option (room list).   Option /Rooms /Room 1..n  Room details.   @id 1 String Room ID.   @roomCandidateRefId 1 Integer Room candidate ID.   @code 1 String Room code has to be unique to identify a specific room type. If the RoomList Method is implemented, you can find the description of the room type in the RoomList.   @description 0..1 String Room description. Mandatory if the supplier doesn\u0026rsquo;t allow RoomList Method. If the supplier implements RoomList Method, this field could be empty.    Detailed Description Suppliers with block allotment\nThere are some suppliers who use block allotments, sometimes called pre-confirmation or quote. In that case, you will have 30 minutes to complete the booking, if not, you will have to re-launch Valuation 30 minutes after the last request, normally just before booking request.\nStatus:\nThe valuation response depends if the parameter  is set: if it is set as false, the integration will filter this option. If the supplier provides us a new status in ValuationRS, then we return an error because the supplier changed the status option.\nCancelPenalty:\nBooking cancellation penalties are affected by the following elements:\n HoursBefore: cancellation fees applicable x number of hours before the check in date\n Deadline: cancellation fees applies from the date displayed on the deadline, which is on UTC Standard. For more information about how TimeZones are handled please check our MetaData content.\n CalculatedDeadline: Specifies if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate according to ISO 8601\n    true: The deadline has been converted to UTC-0 by XTG.\n false: The supplier returns the deadline on UTC-0, so no calculation is needed.\n    Type: There are three values that can be inside types:    Noches: indicates the number of nights to be penalized.\n Porcentaje: indicates the percentage to pay based on the option price.\n Importe: indicates the exact amount payable\n    Currency: currency of the penalty fee.  In this example you can see 2 CancelPenalty with different HoursBefore:\n\u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;72\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;25.00\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;48\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-02T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;72.40\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt;  This means that depending on when you cancel the booking you should pay one penalty or the other, but not both. If you cancel 24 hours before the check-in you should pay 72.40‚Ç¨\nFinal buying price:\nUsually the final price is the one indicated in the valuation response (except if the supplier allows DeltaPrice, in which case the final price will be the one in the reservation response), as it is the one agreed previously to the reservation.\nNote:\nKeep the parameters in the avail response to include them in the valuation request.\nKeep the parameters in the valuation response to include them in the reservation request.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/booking-flow-methods/valuation/",
	"title": "Valuation",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return the total price and cancellation policies of the Option selected in the previous step (Avail).\nRequest Format The Valuation request format is similar to that of availabilityRQ. It\u0026rsquo;s here you will add data to the option selected.\nResponse Format The returned XML contains the total price and list of cancellation policies.\nRemarks Our system allows for a maximum of 180000 milliseconds before the connection is closed.\nValuationRQ Example In the request for this call it is necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the information in the section \u0026lsquo;Common elements\u0026rsquo;.\n\u0026lt;ValuationRQ\u0026gt; \u0026lt;StartDate\u0026gt;04/07/2016\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;11/07/2016\u0026lt;/EndDate\u0026gt; \u0026lt;MealPlanCode\u0026gt;15\u0026lt;/MealPlanCode\u0026gt; \u0026lt;HotelCode\u0026gt;6259\u0026lt;/HotelCode\u0026gt; \u0026lt;PaymentType\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt; \u0026lt;OptionType\u0026gt;Hotel\u0026lt;/OptionType\u0026gt; \u0026lt;OnRequest\u0026gt;false\u0026lt;/OnRequest\u0026gt; \u0026lt;Nationality\u0026gt;ES\u0026lt;/Nationality\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;ID1\u0026quot; value = \u0026quot;ID#1#VR\u0026quot;/\u0026gt; \u0026lt;Parameter key = \u0026quot;ID2\u0026quot; value = \u0026quot;ID#2#FGR#45187#10-5\u0026quot;/\u0026gt; \u0026lt;Parameter key = \u0026quot;PSR\u0026quot; value = \u0026quot;511.28\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;ITD10\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;TW\u0026quot; description = \u0026quot;Twinn\u0026quot;/\u0026gt; \u0026lt;Room id = \u0026quot;IOG22\u0026quot; roomCandidateRefId = \u0026quot;2\u0026quot; code = \u0026quot;IND\u0026quot; description = \u0026quot;Individual\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;/ValuationRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nValuationRQ Description    Element Number Type Description     ValuationRQ 1  Root node.   StartDate 1 String Start date of rate search. Format dd/MM/yyyy   EndDate 1 String End date of rates search. Format dd/MM/yyyy   OnRequest 1 Boolean Indicates if you want to receive the on request options in AvailRS, as long as the supplier returns it in this method (see MetaData).   MealPlanCode 1 String MealPlan code.   HotelCode 1 String Hotel code.   PaymentType 1 String Indicates payment type (See full type list at Lists of Data).   OptionType 1 String Indicates option types.   Nationality 1 String Guest nationality (use ISO3166_1_alfa_2).   Rooms 1  Rooms in this option (room list).   Rooms/Room 1..n  Room Details.   @id 1 String Room Identifier.   @roomCandidateRefId 1 Integer Room candidate Identifier.   @code 1 String Room code.   @description 1 String Room description.   RoomCandidates/RoomCandidate 1..n  Room required.   @id 1 Integer Id of requested room (starting at 1).   RoomCandidates/RoomCandidate/Paxes/Pax 1..n  Pax required.   @age 1 Integer Passenger age on the day of check-in.   @id 1 Integer Passenger id (starting at 1).   Parameters 0..1  Additional parameters reported in AvailRS. If you receive parameters in AvailRS it is mandatory to send them exactly the same as received. If you don\u0026rsquo;t send exactly the same parameters as received the Valuation could fail.   Parameters/Parameter 0..n  Additional parameter requiring integration.   @key 1 String Contains keyword/Id to identify a parameter.   @value 1 String Contains parameter value.    ValuationRS Example \u0026lt;ValuationRS\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;bd1\u0026quot; value = \u0026quot;43\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;Status\u0026gt;OK\u0026lt;/Status\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;106.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;72\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;25.00\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;48\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-02T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;72.40\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;Fees\u0026gt; \u0026lt;Fee includedPriceOption = \u0026quot;true\u0026quot; description = \u0026quot;TaxAndServiceFee\u0026quot;\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;8.11\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Code\u0026gt;SPE\u0026lt;/Code\u0026gt; \u0026lt;/Fee\u0026gt; \u0026lt;/Fees\u0026gt; \u0026lt;Remarks/\u0026gt; \u0026lt;PaymentOptions cash = \u0026quot;false\u0026quot; bankAcct = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;Cards\u0026gt; \u0026lt;Card code = \u0026quot;VI\u0026quot;/\u0026gt; \u0026lt;Card code = \u0026quot;AX\u0026quot;/\u0026gt; \u0026lt;Card code = \u0026quot;CA\u0026quot;/\u0026gt; \u0026lt;/Cards\u0026gt; \u0026lt;/PaymentOptions\u0026gt; \u0026lt;CancelPoliciesDescription/\u0026gt; \u0026lt;/ValuationRS\u0026gt;  ValuationRS Description    Element Number Type Description     ValuationRS 1  Root node.   Parameters / 0..1  Parameters for additional information.   Parameters /Parameter 1..n  List of parameters.   @key 1 String Contains the keyword/Id to identify a parameter.   @value 1 String Contains parameter value.   Status 1  Status option (OK = available, RQ = on request).   Price 1  Total price of this valuation.   @currency 1 String Currency code.   @amount 1 Decimal Option Amount.   @binding 1 Boolean Identifies if the price is binding (When true the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission: -1 = not specified (indicated in contract with the supplier), 0 = net price, X = % of the commission applied to the amount.   CancelPenalties / 1  Cancellation policy details.   @nonRefundable 1 Boolean Indicate if this option is nonRefundable (true or false).   CancelPenalties /CancelPenalty 0..n  Listing cancellation penalties.   CancelPenalties /CancelPenalty/HoursBefore 1 String Number of hours prior to checkin date in which this Cancellation policy applies   CancelPenalties /CancelPenalty/Deadline 1 String Date on UTC Standard TimeZone in which this Cancellation policy applies (ISO 8601 e.g: 2016-07-01T05:00:00Z)   CancelPenalties /CancelPenalty/CalculatedDeadline 1 Boolean Indicate if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate -\u0026gt; true = has been calculated by XTG / false = bypass of supplier data without calculation   CancelPenalties /CancelPenalty/Penalty 1  Contains the value to apply.   @type 1 String Type of possible penalty values: \u0026ldquo;Noches\u0026rdquo; (nights) , \u0026ldquo;Porcentaje\u0026rdquo; (percentage) , \u0026ldquo;Importe\u0026rdquo; (price value).   @currency 1 String Currency code.   @paymentType 1 String Indicates payment type of penalty (See full type list at Lists of Data) .   Remarks 0..1 String Remarks (see MetaData in order to verify if a supplier implements it).   PaymentOptions / 0..1 String Payment Types allowed by the supplier. This tag is mandatory only if payment type is different than MerchantPay.   PaymentOptions /Cards 0..1  List of cards allowed.   PaymentOptions /Cards/Card 1..n  Details of card.   @code 1 String Code card. Se the full list of card codes at Lists of Data   Fees / 0..1  Contains a list of fees.   Fees /Fee 1..n  Contains details of the fee.   @includedPriceOption 1 Boolean Indicates if the fee is included or not in the final price (value indicated in the node Price in ValuationRS).   @description 1 String Remarks regarding fee.   Fees /Fee/Price 1  Contains details of price.   Fees /Fee/Code 1 String Specifies the fee code in case it has one.   @currency 1 String Currency code.   @amount 1 Decimal Fee Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed.   @commission 1 Decimal Commission: -1 = not specified (indicated in contract with supplier), 0 = net price, X = % of the commission applied to the amount.   CancelPoliciesDescription 0..1 String Contains the cancellation penalties in free text (see MetaData in order to verify if a supplier implements it).    Detailed Description Suppliers with block allotment\nThere are some suppliers who use block allotments, sometimes called pre-confirmation or quote. In that case, you will have 30 minutes to complete the booking, if not, you will have to re-launch Valuation 30 minutes after the last request, normally just before booking request.\nStatus:\nThe valuation response depends if the parameter  is set: if it is set as false, the integration will filter this option. If the supplier provides us a new status in ValuationRS, then we return an error because the supplier changed the status option.\nCancelPenalty:\nBooking cancellation penalties are affected by the following elements:\nHoursBefore: cancellation fees applicable x number of hours before the check in date.\nDeadline: cancellation fees applies from the date displayed on the deadline, which is on UTC Standard. For more information about how TimeZones are handled please check our MetaData content.\n CalculatedDeadline: Specifies if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate according to ISO 8601     true: The deadline has been converted to UTC-0 by XTG.\n false: The supplier returns the deadline on UTC-0, so no calculation is needed.\n   Type:\nThere are three values that can be inside types:\n  Noches: Indicates the number of nights to be penalized.\n Porcentaje: Indicates the percentage to pay based on the option price.\n Importe: Indicates the exact amount payable.\n    Currency: currency of the penalty fee.  In this example you can see 2 CancelPenalty with different HoursBefore:\n\u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;72\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;25.00\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;48\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-02T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;72.40\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt;  This means that depending on when you cancel the booking you should pay one penalty or the other, but not both. If you cancel 24 hours before the check-in you should pay 72.40‚Ç¨\nFinal buying price:\nIf the price in the reservation is lower, we recommend taking into account the price in valuation, given that it is the price which the end customer will see. The price in reservation should always be kept in mind, especially in case it is higher than the one in valuation.\nNote:\nKeep the parameters in the avail response to include them in the valuation request.\nKeep the parameters in the valuation response to include them in the reservation request.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/vcc_gen/",
	"title": "Vcc Gen",
	"tags": [],
	"description": "Creates a virtual credit card at Book step",
	"content": " Vcc Gen is an optional plugin that adds the possibility to create a virtual credit card at Book step, in order to pay the reservation\u0026rsquo;s import with it.\nWhat it does The Vcc Gen plugin creates a virtual credit card with an activation and expiration date chosen by the client. The client must also send the token for the virtual credit card. The service will return the information of the newly created payment card in the response, even if the Book step has failed. This information includes the holder name, credit card number, CVC, expiration date and the card type (for instance VI) (TODO: list of available card types). It also returns the source or the supplier that has created this virtual credit card.\nYou can apply rules through the genvcc.csv configuration file, in order to use or not the a certain vcc, depending on the file configuration and the request parameters. More details regarding configuration below.\nHow to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nExecution example In order to use the plugin, we shoud send the following json in the query variables\n\u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;REQUEST\u0026quot;, \u0026quot;pluginsType\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;genvcc\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;PRE_STEP\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;activationDate\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2020/05/22\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;expirationDate\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2020/05/25\u0026quot; }, { \u0026quot;key\u0026quot; : \u0026quot;useGross\u0026quot;, \u0026quot;value\u0026quot; : \u0026quot;true\u0026quot; } ] } } ]  You should bear in mind that the parameters are not mandatory. In case those parameters were not specified, the default values would be:\n Default activation date: same day as the Book has been processed through HotelX Default expiration date: one month later after the checkin date of the hotel  The useGross parameter is optional and it is used to specify if want charge the gross amount on the generated card. If this parameter is not specified we will use the net amount.\nTo apply specific rule, we should add client token in our request\n\u0026quot;settings\u0026quot;: { \u0026quot;context\u0026quot;: null, \u0026quot;client\u0026quot;: \u0026quot;xtg\u0026quot;, \u0026quot;auditTransactions\u0026quot;: true, \u0026quot;testMode\u0026quot;: true, \u0026quot;clientTokens\u0026quot;: [ \u0026quot;testToken\u0026quot; ], \u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;REQUEST\u0026quot;, \u0026quot;pluginsType\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;genvcc\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;PRE_STEP\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;activationDate\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2020/05/22\u0026quot; } ] } } ] },  Loading a GenVcc is as easy as following the steps below:\nFile Format The file should be in the below format:\n Encoding: UTF-8 File Name: [Context Source]_sequential_genvcc.csv Header Row: IdRule,ClientToken,NoClientToken,Supplier,NoSupplier,Hotels,NotHotels,Access,NoAccess,CardType,VccAccess\n IdRule: Unique identifier of the rule. Used only for debug.\n Criteria columns:\n ClientToken, NoClientToken: List of clienttoken separated by \u0026lsquo;;\u0026rsquo; Supplier, NoSupplier: List of supplier codes separated by \u0026lsquo;;\u0026rsquo; Hotels, NoHotels: List of hotels codes separated by \u0026lsquo;;\u0026rsquo; Access, NoAccess: List of access codes separated by \u0026lsquo;;\u0026rsquo;  Result columns:\n CardType: Card Type of the virtual credit card to be created VccAccess: Virtual Credit Card access   You should bear in mind that this file is a collection of rules and we chose in every Book the first rule that matches the criteria sent in the Query. You should specify the more restrictive rules on the top of the file. If there is no value for any rule criteria row, it means that any value in the request matches this row. It is important to indicate the contexts used in values on the rule criteria to improve rule matching.\n Delimiter: Comma (\u0026ldquo;,\u0026rdquo;)\n Directory: /F[folder code][unique code]/HotelX[unique code]/\n  Sample File Name: HOTELTEST_sequential_genvcc.csv\nSample Data:\nIdRule,ClientToken,NoClientToken,Supplier,NoSupplier,Hotels,NotHotels,Access,NoAccess,CardType,VccAccess r1,,,,HOTELTEST;TESTPRV,,,,,CA,vccAccess1 r2,,,supplier_test,,hotel1;hotel2,,access1;access2,,VI,vccAccess2  "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-inventory/log/legacy/",
	"title": "Inventory",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/staticcontent/boards/",
	"title": "Boards",
	"tags": [],
	"description": "Learn about how to manage static content data in your site: Hotels, Boards, Categories...",
	"content": "  const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x228626cf56-e364-4fd1-4fe0-311e23ac6355\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/aeb082e484710ebf6b7a4ec5173064cc\\/raw\\x22,\\x22divname\\x22:\\x22div_hotels\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/4737228c495b09566474fa2db38fc72d\\/raw\\x22,\\x22divname\\x22:\\x22div_destinations\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/519b4223de8b44cb20c5c33212c62654\\/raw\\x22,\\x22divname\\x22:\\x22div_boards\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/0815561e9c25ce49bc416dbc73f36388\\/raw\\x22,\\x22divname\\x22:\\x22div_rooms\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/aa1be23b8c9229c8363c142036afb1f5\\/raw\\x22,\\x22divname\\x22:\\x22div_categories\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }  Boards Boards Query returns a simple boards map that can include translations to other languages.\nPlayground Samples  Boards     "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/booking-search/",
	"title": "Booking Panel",
	"tags": [],
	"description": "Panel that allows you to check your reservations and their details",
	"content": " The booking panel tool allows you to obtain a list of all your agencies bookings and cancellations and get more detailed information about it. To obtain a list with base information you can use the Booking List panel. To check a specific booking and obtain all its details you can use the Booking Read panel. \n\nYou can also download a .csv file with a detailed report of your bookings from our section Booking List Reports (this functionality is especially used by our DMC clients).\n\n\nBooking List Booking list allows you to filter by different conditions:\n Dates:  Booking dates: The date range when the booking was confirmed by the agency. Check-in date: The date range of the booking check-in.  Transaction type/status:  Include cancellations: List of both effective and cancelled bookings. Only cancellations: List of only cancelled bookings. Only errors: List of bookings that failed and couldn\u0026rsquo;t be confirmed successfully.  Hotel:  Name: Filter bookings by hotel name. Code: Filter bookings by hotel code.  Agency: Filter bookings by agency/client. Provider: In case you work with different suppliers, you can filter by provider name.  \n\nBooking Read In order to obtain more detailed information of a specific booking you can use the Booking read panel on the left and filter by one of the booking locators (Client, Provider or TGX).\nFor each booking you will find the following information:\n Locators: All booking locators. Context:  Status: Booking status (success, cancelled, error) Booking date Agency Supplier Access  Configuration  Hotel: Hotel code and name Check-in date Check-out date Mealplan Market Nationality  Price \u0026amp; Conditions  Payment type Cancellation price Selling price Purchasing price Currency exchange Quote selling price Quote purchasing price Quote currency exchange Quote selling cancel penalties Quote purchasing cancel penalties  Pricing  Type Final Markup Tax  Breakdown  Base Markup Base Rappel Selling pricing rules: Total  Rooms  Main Guest Name Room: Room name, code, and number of pax    \nBooking List Reports The booking reports tool allows you to obtain a file with all the bookings that have been done inside the report parameters specified. The search parameters will be the same as can be seen in the Booking Read.\nNote that even though you should add a valid name to the report (alphanumeric format) our system will also add a datetime format at the beginning of this name in order to ensure it is unique.\nThe display of the reports created can be shown in the List of Reports. There are two importants thing to know:\n Only one report can be generated every 15 minutes. So, once a generation is asked, the user should wait 15 minutes to ask for a new one.\n The generation of the report is not instant and it might take some time, depending on the volume of bookings to return. If Generation Status is equal to ‚ÄúExecuting‚Äù the file is not processed yet, so it is still not available.\n  \n When the status changes to \u0026ldquo;Finished ok\u0026rdquo;, the download button will be available.   \n "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/howtos/guides/certification_process/",
	"title": "Certification process",
	"tags": [],
	"description": "Perform specific tasks",
	"content": " The following is a quick reference to the certification process. In this section we will give you all the necessary information to complete the Certification process, which will ensure that your integration is ready to go Live. Please, consider that reading this section carefully and planning your implementation ahead (knowing what is going to be specifically requested by us) can lead to a much better experience and a sooner reaching of the goal: Being Live and ready to buy.\nOf course, you can contact us with any doubts or questions at: info@xmltravelgate.com\nThe guides   Certification Goals Why we ask for certification process\n     How to apply How you can apply for certification process\n     Use cases Different use cases you have to attach during certification process\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "To get started with Hotel-X",
	"content": " Quickstart   Basic Concepts Understand Hotel-X basic concepts\n     Advanced Concepts Understand Hotel-X advanced concepts\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/",
	"title": "Connection Types - Sellers",
	"tags": [],
	"description": "Connection Types - Sellers",
	"content": "   Hotel Pull Sellers API Read documentation on Hotel Pull Sellers API\n     Hotel Push Sellers API Read documentation on Hotel Push Sellers API\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/staticcontent/",
	"title": "Content",
	"tags": [],
	"description": "How to manage content: Hotels, Boards, Categories, Metadata...",
	"content": "Learn how to manage the content calls such as Hotel-List, Hotel-Room, Hotel-Board, Hotel-Category, Destinations and Metadata.\nWe strongly recommend that our Buyers implement content calls as supplier codes might differ from the ones returned through our API. The metadata call is also extremely important when considering connecting a Seller, as it returns all the restrictions and settings for that Seller. .   Hotel Hotels from a supplier\n     Metadata Supplier restriction and configuration\n     Destination Learn about how to manage static content data in your site: Hotels, Boards, Categories...\n     Room Learn about how to manage static content data in your site: Hotels, Boards, Categories...\n     Boards Learn about how to manage static content data in your site: Hotels, Boards, Categories...\n    "
},
{
	"uri": "https://travelgatex.com/alerts-x/howtos/howto-create-alerts/",
	"title": "Create Alert",
	"tags": [],
	"description": "How to perform mutations on your alerts",
	"content": " This page shows you how to create Alerts using API or TravelgateX Web.\nHow to request You must choose a type alert to create it. The alert types are: Error rate, No traffic, Average time and Peak traffic.\nThere are different ways to configure the alert types. Below there are references of some values of configuration to create the alert needed.\nError rate alert    WHAT IS NEEDED? window periodicity percentage minNumberRequests to check to compare     check by time frame w \u0026gt; 0 p \u0026gt; 0 pg \u0026gt;= 0 mnr \u0026gt;= 0 error codes error codes   check by requests number w = 0 p = 0 pg \u0026gt;= 0 mnr \u0026gt; 0 error codes error codes    By default, you may check all error codes except for 0, and compare all error codes.\n Average time alert    WHAT IS NEEDED? window periodicity percentage minNumberRequests offset historical windows maximum average     check by time frame w \u0026gt; 0 p \u0026gt; 0 pg \u0026gt;= 0 mnr \u0026gt;= 0 o \u0026gt;= 0 hw \u0026gt;= 0 ma = 0   check maximum average by time frame w \u0026gt; 0 p \u0026gt; 0 pg \u0026gt;= 0 mnr \u0026gt; 0 o \u0026gt;= 0 hw = 0 ma \u0026gt;= 0   check be requests number w = 0 p = 0 pg \u0026gt;= 0 mnr \u0026gt; 0 o \u0026gt;= 0 hw = 0 ma \u0026gt;= 0    No traffic alert    WHAT IS NEEDED? window periodicity percentage minNumberRequests     check by time frame w \u0026gt; 1 p \u0026gt; 0 pg = 0 mnr \u0026gt;= 0    Peak traffic alert    WHAT IS NEEDED? window periodicity percentage minNumberRequests offset historical windows     check by time frame w \u0026gt; 0 p \u0026gt; 0 pg = 0 mnr \u0026gt;= 0 o \u0026gt;= 0 hw \u0026gt; 0    Below you will find some examples for different casuistry:\n       #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"708148bb87432be5fbca20c0e5fd0f68\",\"n\":\"Error rate - by time frame\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"4b07be538f151b2a75a184d22f26af9a\",\"n\":\"Error rate - by requests\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"cce260c5bd43d2da1b252e89e7044967\",\"n\":\"Average time - by time frame\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"67d52550bbe837e9021144cba561359b\",\"n\":\"Average time - by time frame and maximum average\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"694e031b53c6b4e5f83547b3eaa0629a\",\"n\":\"Average time - by requests\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"af50aa4ff1c8534a88960d2fc2df76e5\",\"n\":\"No traffic\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"ec1edcea1e1427d83911223bf57654a6\",\"n\":\"Peak traffic\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/configuration/currencies/",
	"title": "Currencies",
	"tags": [],
	"description": "Currencies modifiers",
	"content": " Distribution allows you to make a currency exchange from the currency your suppliers provide you to the currency that your buyers are requesting you. The currency exchange used by default in Distribution is updated every day from the European Central Bank. However, you can customize your own currency exchange using the currency exchange master file to indicate your own base currencye and the exchanges you prefer.\nIs possible to check the exact currency exchange that Distribution is using in that moment in the Searches panel at the extranet. Block currencies by country With this rule a default currency and a list of not admitted currencies can be set for a concrete country. When applying this rule to a selling it must be used the definition for the country of the selling\u0026rsquo;s hotel. If a selling is received from the supplier with a currency included on the not admitted ones (for the hotel\u0026rsquo;s country definition) then this currency must be exchanged to the default currency: if it cannot be exchanged then the selling will be discarded. If this rule is not set for the country of a selling\u0026rsquo;s hotel then the previous condition will not be applied.\nThis rule will be applied together with the rest of the rules that affect the currencies: the most restrictive rules have priority over the others. Be careful when setting various currency rules as they can create a conflict and some sellings can be discarded unwittingly.\nBy default there are no blocked currencies for any country.\nThis rule can only be set by organization on general settings (the same behaviour for all agencies).\nIf this rule is used together with the Allow Currency Exchange rule (by agency) then there may be conflicts as both rules share behaviour on currencies. It is strongly recomended to use only the \u0026lsquo;Allow Currency Exchange\u0026rsquo; rule if possible. Force Requested Currency If the requested currency is forced to be returned then all the sellings of the response have to be returned with the currency received on the request (without exception). If a selling is not received from the supplier with the correct currency then it must be exchanged to it: if it cannot be exchanged then the selling will be discarded. If the requested currency is not forced to be returned then the previous condition will not be applied.\nThis rule will be applied together with the rest of the rules that affect the currencies: the most restrictive rules have priority over the others. Be careful when setting various currency rules as they can create a conflict and some sellings can be discarded unwittingly.\nBy default the requested currency is not forced.\nThis rule can only be set by agency.\nAllowed Currencies With this rule it can be set a default currency and a list of currencies and so force all the sellings of the response to be returned with any of these currencies. If a selling is not received from the supplier for a currency of the list then it will be exchanged to the default currency: if it cannot be exchanged then the selling will be discarded. If the rule is not set for any currency then the previous condition will not be applied.\nThis rule will be applied together with the rest of the rules that affect the currencies: the most restrictive rules have priority over the others. Be careful when setting various currency rules as they can create a conflict and some sellings can be discarded unwittingly.\nBy default this rule is not set for any currency.\nThis rule can only be set by agency.\nIf this rule is used together with the Allow Currency Exchange rule (by agency) then there may be conflicts as both rules share behaviour on currencies. It is strongly recomended to use only the \u0026lsquo;Allow Currency Exchange\u0026rsquo; rule if possible. Allow Currency Exchange This rule has two modes of operation:\n Do not allow exchange and apply filters: with this mode it can be set in general and for a concrete country a list of currencies and so force all the sellings of the response to be returned with any of these currencies. When applying this rule to a selling it must be used the definition for the country of the selling\u0026rsquo;s hotel and if it is not set for that country then the general definition will be used. If a selling is received from the supplier with a currency not included on the admitted ones then it will be discarded. There cannot be done any currency exchange. Allow only custom exchange: with this mode it can be set in general and for a concrete country a default currency and a list of admitted currencies. When applying this rule to a selling the definition for the country of the selling\u0026rsquo;s hotel must be used and if it is not set for that country then the general definition will be used. If a selling is received from the supplier with a currency not included on the admitted ones (for the hotel\u0026rsquo;s country definition) then this currency must be exchanged to the default currency: if it cannot be exchanged then the selling will be discarded.  If the rule is not set in none of the two modes then the previous conditions will not be applied. This rule will be applied together with the rest of the rules that affect the currencies: the most restrictive rules have priority over the others. Be careful when setting various currency rules as they can create a conflict and some sellings can be discarded unwittingly.\nBy default this rule is not set for none of the modes.\nThis rule can only be set by agency.\nIf this rule is used together with the \u0026lsquo;Allowed Currencies\u0026rsquo; rule (by agency) or the Block currencies by country rule (general settings) then there may be conflicts as all these rules share behaviour on currencies. It is strongly recomended to use only the Allow Currency Exchange rule if possible.  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/converter/",
	"title": "Currency Converter",
	"tags": [],
	"description": "Convert currency in order to have a unified response.",
	"content": " Currency converter is an optional plugin that allows to apply currency conversion over all the prices in one Option.\nWhat it does This plugin receives an Option and a currency and returns the same option with currency conversion applied over all the prices. It reads the information about rates from a file located in our ftp. Is mandatory that this file exists in the ftp and satisfies all the requirements below. Otherwise, an error will be returned. The node in graphQL that indicates the currency exchange rate is:\n\u0026quot;exchange\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;currency\u0026quot;, \u0026quot;rate\u0026quot;: 1 },  If the plugin is not executed, you will receive:\n\u0026quot;exchange\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, //Same currency of option with no currency exchange applied \u0026quot;rate\u0026quot;: 1 //No currency exchange applied },  otherwise, you will receive:\n\u0026quot;exchange\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;USD\u0026quot;, //New currency \u0026quot;rate\u0026quot;: 0.86 //Rate exchange applied },  How to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nExecution example The value of step, type, and name is always the specified in the example below. The two parameters are mandatory and their value means:\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026ldquo;currency\u0026rdquo;: It is a string value in ISO 4217 standard (\u0026ldquo;XXX\u0026rdquo;). It is the currency to which you want to convert.\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026ldquo;exclude\u0026rdquo;: is a Boolean value (true / false). This parameter only has an effect on the search query. It determines if the options on which the currency change cannot be applied (no currency found in ftp) are excluded. { \u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;CURRENCY_CONVERSION\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;currency_exchange\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;currency\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;GBP\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;exclude\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;true\u0026quot; } ] } ] } ] }  In addition, it is necessary that option and parameter currencies are in ftp file.\nFile Format The file should be in the below format:\n Encoding: UTF-8¬† File Name: currency_map.csv Header Row: Code,Rate¬† Decimal separator for rate must be point (\u0026ldquo;.\u0026rdquo;)  Delimiter: Comma (‚Äú,‚Äù)¬† Directory: /[folder code]_[unique code]/HotelX_[unique code]/  Sample File Name: currency_map.csv\nData:\nCode,Rate AED,4.74 CAD,1.61 CHF,1.26 EUR,1.09 GBP,1.00 INR,84.40 MAD,12.17 THB,42.91 USD,1.29  The rate with value 1.00 is the base rate. Other rates are calculated from it.\n"
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/tools/delete-product/",
	"title": "Delete product",
	"tags": [],
	"description": "Delete the availability conditions and prices loaded in Inventory-X",
	"content": "In order to delete the availability conditions and prices loaded in Inventory-X for a specific hotel, you will need to go to the Product tab and then select the Delete Product option in the Inventory-X extranet.\n\nThis feature is available for administrator users. Please contact your administrator in order to remove any data. Important: This feature allows removing real product from our system. Remove the incorrect product may involve future product discrepancies and incorrect bookings. In order to avoid it, please make responsible use of this feature. First step will be to indicate the desired Client-Provider connection and then the hotel to delete information. After that, you will be able to select the rates or derived rates as well as the load type:\n Availability: With this option you will be able to delete, by date range, availability conditions like ‚Äò*booking limit (allotment)*‚Äô, ‚Äò*minimum or maximum length of stay*‚Äô, ‚Äò*minimum or maximum length of stay on arrival*‚Äô and ‚Äò*minimum or maximum release*‚Äô.  \n Price: With this option you will be able to delete, by date range, all kinds of prices (price per room, prices per pax and price per occupancy) and occupancy and meal plan supplements. Bear in mind that the meal plan supplements will be deleted for all types of passengers (Adult, child and baby).  \n "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/descriptiveinfo/",
	"title": "DescriptiveInfo",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns the details of a hotel (pictures, descriptions \u0026hellip;) in a given language.\nRequest Format The request just requires the hotel code and language code (ISO-639-1) - this is specified within the source\u0026ndash;\u0026gt;languageCode).\nResponse Format The result returns the details of that hotel.\nRemarks The maximum time permitted in our system before the connection is closed is 180000 milliseconds.\nDescriptiveInfoRQ Example \u0026lt;DescriptiveInfoRQ\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;524AC\u0026lt;/Code\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;/DescriptiveInfoRQ\u0026gt;  DescriptiveInfoRQ Description    Element Number Type Description     DescriptiveInfoRQ/ 1  Root node.   DescriptiveInfoRQ/ Hotel/ 1 String Hotel requested.   DescriptiveInfoRQ/ Hotel/ Code 1 String Code.    DescriptiveInfoRS Example \u0026lt;DescriptiveInfoRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;70\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Nice Stay\u0026lt;/Name\u0026gt; \u0026lt;Address\u0026gt;Avenue Doctor Brown S/N\u0026lt;/Address\u0026gt; \u0026lt;Airports\u0026gt; \u0026lt;Airport\u0026gt; \u0026lt;IATACode\u0026gt;LON\u0026lt;/IATACode\u0026gt; \u0026lt;/Airport\u0026gt; \u0026lt;/Airports\u0026gt; \u0026lt;Town\u0026gt;London\u0026lt;/Town\u0026gt; \u0026lt;ZipCode\u0026gt;21449\u0026lt;/ZipCode\u0026gt; \u0026lt;CountryISOCode\u0026gt;UK\u0026lt;/CountryISOCode\u0026gt; \u0026lt;AvailDestination code = \u0026quot;2\u0026quot; name = \u0026quot;London\u0026quot;/\u0026gt; \u0026lt;GeographicDestination code = \u0026quot;2\u0026quot; name = \u0026quot;London\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;Contact\u0026gt; \u0026lt;Email\u0026gt;emailhotel@xxx.com\u0026lt;/Email\u0026gt; \u0026lt;Telephone\u0026gt;91547892\u0026lt;/Telephone\u0026gt; \u0026lt;Fax\u0026gt;\u0026lt;/Fax\u0026gt; \u0026lt;/Contact\u0026gt; \u0026lt;BookingContact\u0026gt; \u0026lt;Email\u0026gt;bookinghotel@xxx.com\u0026lt;/Email\u0026gt; \u0026lt;Telephone\u0026gt;91547880\u0026lt;/Telephone\u0026gt; \u0026lt;Fax\u0026gt;910200200\u0026lt;/Fax\u0026gt; \u0026lt;/BookingContact\u0026gt; \u0026lt;CategoryCode\u0026gt;4 Stars\u0026lt;/CategoryCode\u0026gt; \u0026lt;ShortDescription\u0026gt;the hotel.....\u0026lt;/ShortDescription\u0026gt; \u0026lt;LongDescription\u0026gt;the hotel....\u0026lt;/LongDescription\u0026gt; \u0026lt;HowToGet\u0026gt;\u0026lt;/HowToGet\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room code = \u0026quot;201232338\u0026quot; size = \u0026quot;0\u0026quot; viewCode = \u0026quot;Others\u0026quot; classificationCode = \u0026quot;Others\u0026quot; occupancy = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;Beds\u0026gt; \u0026lt;Bed numberOfBeds = \u0026quot;1\u0026quot; type = \u0026quot;QueenBed\u0026quot;/\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;Attributes\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;2403\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Free WiFi\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;2399\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Flat-panel TV\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;2398\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Cable TV service\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;4951\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Free cribs/infant beds\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;318\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Balcony\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Images\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;URL\u0026gt;https://i.travelapi.com/hotels/8000000/7770000/7769600/7769581/72588f9a_z.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;0001-01-01T00:00:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;URL\u0026gt;https://i.travelapi.com/hotels/8000000/7770000/7769600/7769581/bd3da76f_z.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;0001-01-01T00:00:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;/Images\u0026gt; \u0026lt;Description\u0026gt;Small Double Room with Balcony\u0026lt;/Description\u0026gt; \u0026lt;Views\u0026gt; \u0026lt;View\u0026gt; \u0026lt;Code\u0026gt;4219\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Mountain view\u0026lt;/Name\u0026gt; \u0026lt;/View\u0026gt; \u0026lt;/Views\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;SituationDescription\u0026gt;....\u0026lt;/SituationDescription\u0026gt; \u0026lt;Attributes\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;10\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;City center: 3000\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;21\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Bus stop: 70000\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;32\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Bathroom\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;43\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Minibar\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;54\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Jacuzzi\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;65\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Radio\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;76\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Safe\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;87\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HOT\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Playground\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;98\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;SER\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Internet\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;90\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Restaurant\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;01\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;TV\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;31\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HOT\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Pool\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Images\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;URL\u0026gt;http://www.images.net/infor/work/imagen/hotel_07/mapa.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Map view\u0026lt;/Description\u0026gt; \u0026lt;Ordered\u0026gt;1\u0026lt;/Ordered\u0026gt; \u0026lt;Code\u0026gt;50\u0026lt;/Code\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;URL\u0026gt;http://www.images.net/infor/work/imagen/hotel_02/M.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;External view\u0026lt;/Description\u0026gt; \u0026lt;Ordered\u0026gt;2\u0026lt;/Ordered\u0026gt; \u0026lt;Code\u0026gt;100\u0026lt;/Code\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;/Images\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room code = \u0026quot;821\u0026quot;\u0026gt; \u0026lt;Beds\u0026gt; \u0026lt;Bed numberOfBeds = \u0026quot;1\u0026quot; type = \u0026quot;SINGLE\u0026quot;/\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;RoomOccupancy\u0026gt; \u0026lt;Adults\u0026gt; \u0026lt;Min\u0026gt;1\u0026lt;/Min\u0026gt; \u0026lt;Max\u0026gt;1\u0026lt;/Max\u0026gt; \u0026lt;/Adults\u0026gt; \u0026lt;Children\u0026gt; \u0026lt;Min\u0026gt;0\u0026lt;/Min\u0026gt; \u0026lt;Max\u0026gt;0\u0026lt;/Max\u0026gt; \u0026lt;/Children\u0026gt; \u0026lt;Infants\u0026gt; \u0026lt;Min\u0026gt;0\u0026lt;/Min\u0026gt; \u0026lt;Max\u0026gt;0\u0026lt;/Max\u0026gt; \u0026lt;/Infants\u0026gt; \u0026lt;Total\u0026gt; \u0026lt;Min\u0026gt;1\u0026lt;/Min\u0026gt; \u0026lt;Max\u0026gt;1\u0026lt;/Max\u0026gt; \u0026lt;/Total\u0026gt; \u0026lt;/RoomOccupancy\u0026gt; \u0026lt;Attributes\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;01\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Private bathroom\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Images\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;Code\u0026gt;01\u0026lt;/Code\u0026gt; \u0026lt;URL\u0026gt;http://www.images.net/infor/work/imagen/hotel_room_02/M.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Ordered\u0026gt;1\u0026lt;/Ordered\u0026gt; \u0026lt;Description\u0026gt;Room\u0026lt;/Description\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;0001-01-01T00:00:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;/Images\u0026gt; \u0026lt;Description\u0026gt;Standard Single room\u0026lt;/Description\u0026gt; \u0026lt;Views\u0026gt; \u0026lt;View\u0026gt; \u0026lt;Code\u0026gt;01\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Sea view\u0026lt;/Name\u0026gt; \u0026lt;/View\u0026gt; \u0026lt;/Views\u0026gt; \u0026lt;Area\u0026gt;25\u0026lt;/Area\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;LocationType\u0026gt;City\u0026lt;/LocationType\u0026gt; \u0026lt;PaymentOptions cash=\u0026quot;false\u0026quot; bankAcct=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;Cards\u0026gt; \u0026lt;Card code=\u0026quot;VI\u0026quot;/\u0026gt; \u0026lt;Card code=\u0026quot;AX\u0026quot;/\u0026gt; \u0026lt;Card code=\u0026quot;CA\u0026quot;/\u0026gt; \u0026lt;/Cards\u0026gt; \u0026lt;/PaymentOptions\u0026gt; \u0026lt;ExclusiveDeal\u0026gt;true\u0026lt;/ExclusiveDeal\u0026gt; \u0026lt;PropertyCategory\u0026gt; \u0026lt;Code\u0026gt;1\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Hotel\u0026lt;/Name\u0026gt; \u0026lt;/PropertyCategory\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;/DescriptiveInfoRS\u0026gt;  DescriptiveInfoRS Description    Element Number Type Description     DescriptiveInfoRS/ UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   DescriptiveInfoRS/ Hotel/ 0..n  Root node. Hotel sheet.   Code 1 String Code.   Name 1 String Name.   Address 1 String Address.   Airports/ 0..1  List of airports.   Airports/ Airport/ 1..n  Specific airport near the hotel.   Airports/ Airport/ IATACode/ 1 String IATA airport Code.   Town 1 String Town.   ZipCode 1 String ZipCode.   CountryISOCode 1 String Country ISOCode.   AvailDestination 0..1  Avail destination (will only be returned if requested in Avail, and the type is CTY).   @code 1 String Destination code.   @name 1 String Destination name.   GeographicDestination 1  Geographic destination.   @code 1 String Destination code.   @name 1 String Destination name.   @avail 1 Boolean Indicates if the code can be used in Avail.   Latitude 0..1 String Latitude.   Longitude 0..1 String Longitude.   Contact/ 0..1  Hotel contact information.   Contact/ Email 1 String Email.   Contact/ Telephone 1 String Telephone.   Contact/ Fax 1 String Fax.   CategoryCode 1 String Category code.   BookingContact/ 0..1  Booking dept contact.   BookingContact/ Email 1 String Email.   BookingContact/ Telephone 1 String Telephone.   BookingContact/ Fax 1 String Fax.   Chaincode 0..1 String Hotel chain code.   ShortDescription 0..1 String Short description.   LongDescription 0..1 String Long description.   HowToGet 0..1 String Directions to the hotel.   Rooms/ 0..1  Rooms.   Rooms/ Room/ 1..n  Room.   @code 1 String Room Code.   @size 1 Integer Size of the room.   @viewCode 1 String Main view of the room. See the full list of card codes at Lists of Data.   @classificationCode 1 String Room classification code. See the full list of card codes at Lists of Data.   @occupancy 1 Integer Number of rooms availables at the hotel.   Rooms/ Room/ Description 1 String Room Description.   Rooms/ Room/ Beds/ 0..1  Room bedding.   @sharedBed 1 Boolean Indicates if it\u0026rsquo;s a shared bed.   Rooms/ Room/ Beds/ Bed 1..n  Number of beds allocated in the room.   @numberOfBeds 1 String Number of beds allocated in the room.   @type 1 String Type of bed. (Queen Bed, Single\u0026hellip;)   Rooms/ Room/ Views/ 0..1  Views of the room.   Rooms/ Room/ Views/ View 1..n  List of views.   Rooms/ Room/ Views/ View/ Code 1..n String View code.   Rooms/ Room/ Views/ View/ Name 1..n String Name of the View.   Rooms/ Room/ Attributes 1  Room Attributes. (Follows same structure as Hotel Attributes)   Rooms/ Room/ Images 1  Room Images. (Follows same structure as Hotel Images)   SituationDescription 0..1 String Area description.   RestaurantsDescription 0..1 String Restaurants description.   PoolsDescription 0..1 String Pools description.   ActivitiesDescription 0..1 String Activities description.   ServicesDescription 0..1 String Services description.   AdditionalDetails 0..1 String Additional details.   Attributes/ 0..1  Attributes.   Attributes/ Attribute/ 1..n  Specific attributes of the hotel, such as wi-fi.   Attributes/ Attribute/ Code 1 String Code.   Attributes/ Attribute/ Value 1 String Value.   Attributes/ Attribute/ Classification 1 String Classification ( HOT=hotel, HAB=room, SER=service and GRAL=generic).   Attributes/ Attribute/ Description 0..1 String Description.   Images/ 0..1  Images.   Images/ Picture/ 1..n  Picture.   Images/ Picture/ Url 1 String Url.   Images/ Picture/ Classification 1 String Classification (HOT=hotel, HAB=room, SER=service and GRAL=generic).   Images/ Picture/ Ordered 0..1 String Images should be ordered from 1 onward. 1 is top.   Images/ Picture/ Description 0..1 String Description.   Images/ Picture/ Code 0..1 String Code.   Images/ Picture/ UpgradeUTCDate 0..1 DateTime Indicates the upgrade date of the picture in UTC format.   Rooms/ 0..1  Hotel rooms.   Rooms/ Room/ 1..n  List of rooms.   @code 1 String Room code.   Rooms/ Room/ Beds/ 0..1  Room beds.   Rooms/ Room/ Beds/ Bed/ 1..n  List of beds.   @numberOfBeds 0..1 String Indicates number of beds in the room.   @type 0..1 String Indicates the type of bed.   Rooms/ Room/ RoomOccupancy/ 0..1  Indicates the amount of each occupant type staying in the room.   Rooms/ Room/ RoomOccupancy/ Adults/ 1  Indicates the amount of adults staying in the room (minimum and maximum).   Rooms/ Room/ RoomOccupancy/ Adults/ Min 1 Integer Indicates the minimum amount of adults staying in the room.   Rooms/ Room/ RoomOccupancy/ Adults/ Max 1 Integer Indicates the maximum amount of adults staying in the room.   Rooms/ Room/ RoomOccupancy/ Children/ 1  Indicates the amount of children staying in the room (minimum and maximum).   Rooms/ Room/ RoomOccupancy/ Children/ Min 1 Integer Indicates the minimum amount of children staying in the room.   Rooms/ Room/ RoomOccupancy/ Children/ Max 1 Integer Indicates the maximum amount of children staying in the room.   Rooms/ Room/ RoomOccupancy/ Infants 1  Indicates the amount of infants staying in the room (minimum and maximum).   Rooms/ Room/ RoomOccupancy/ Infants/ Min 1 Integer Indicates the minimum amount of infants staying in the room.   Rooms/ Room/ RoomOccupancy/ Infants/ Max 1 Integer Indicates the maximum amount of infants staying in the room.   Rooms/ Room/ RoomOccupancy/ Total/ 1  Indicates the total amount of occupants staying in the room (minimum and maximum).   Rooms/ Room/ RoomOccupancy/ Total/ Min 1 Integer Indicates the minimum total amount of occupants staying in the room.   Rooms/ Room/ RoomOccupancy/ Total/ Max 1 Integer Indicates the maximum total amount of occupants staying in the room.   Rooms/ Room/ Attributes/ 0..1  Attributes.   Rooms/ Room/ Attributes/ Attribute/ 1..n  Specific attributes of the room, such as wi-fi.   Rooms/ Room/ Attributes/ Attribute/ Code 1 String Code.   Rooms/ Room/ Attributes/ Attribute/ Classification 1 String HAB=room.   Rooms/ Room/ Attributes/ Attribute/ Description 0..1 String Description.   Rooms/ Room/ Images/ 0..1  Images.   Rooms/ Room/ Images/ Picture/ 1..n  Picture.   Rooms/ Room/ Images/ Picture/ Url 1 String Url.   Rooms/ Room/ Images/ Picture/ Classification 1 String HAB=room.   Rooms/ Room/ Images/ Picture/ Ordered 0..1 String Images should be ordered from 1 onward. 1 is top.   Rooms/ Room/ Images/ Picture/ Description 0..1 String Description.   Rooms/ Room/ Images/ Picture/ Code 0..1 String Code.   Rooms/ Room/ Images/ Picture/ UpgradeUTCDate 0..1 DateTime Indicates the upgrade date of the picture in UTC format.   Rooms/ Room/ Description 0..1 String Room description.   Rooms/ Room/ Views/ 0..1  Views.   Rooms/ Room/ Views/ View/ 1..n  List of room views.   Rooms/ Room/ Views/ View/ Code 1 String View code.   Rooms/ Room/ Views/ View/ Name 1 String View name.   Rooms/ Room/ Area/ 0..1 String Room area.   LocationType 0..1 String Location code.   PaymentOptions/ 0..1 String Type of cards allowed by the supplier. This tag is only mandatory if payment type is different than MerchantPay.   PaymentOptions/ Cards/ 1  List of cards allowed.   PaymentOptions/ Cards/ Card 1..n  Type of card allowed.   @code 1 String Code of card. Se the full list of card codes at Lists of Data.   ExclusiveDeal 0..1 Boolean Indicates that a Hotel is an Exlusive Deal.   PropertyCategory/ 0..1  Hotels property type. Similar to Type tag, but on supplier\u0026rsquo;s side.   PropertyCategory/ Code 1 String Supplier property code.   PropertyCategory/ Name 1 String Supplier property name.    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/how-to-guides/errors/",
	"title": "Errors",
	"tags": [],
	"description": "",
	"content": " TravelgateX\u0026rsquo;s API implements an element to display errors in every method response.\n\u0026lt;applicationErrors\u0026gt; \u0026lt;type\u0026gt;\u0026lt;/type\u0026gt; \u0026lt;code\u0026gt;\u0026lt;/code\u0026gt; \u0026lt;description\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;/applicationErrors\u0026gt;  Application errors Description    Element Number Type Description     applicationErrors 0..n  Application errors reported by supplier.   applicationErrors/type 1 String Error Type as specified by XML Travelgate.   applicationErrors/code 1 String Native error code reported by supplier.   applicationErrors/description 1 String Error description.   auditData 1  Data sent \u0026amp; received in the supplier\u0026rsquo;s native format.    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/concepts/advancedconcepts/errorwarning/",
	"title": "Errors and Warnings",
	"tags": [],
	"description": "List of errors and warnings in HotelX",
	"content": " In this chapter we will list the errors and warnings of HotelX booking flow and content.\nBooking flow Error list In the table below, we have structured a relation of all the Errors that can be returned in HotelX booking flow\n   Code Type Description Explanation     ACCESS_ERROR VALIDATION_ERROR No valid accesses found The access is not found or it has no permission, or you are using a test access and you need to add the testMode.   MISSING_FIELD VALIDATION_ERROR According to the case Some mandatory fields are missing in input   INTERNAL_ERROR API_ERROR According to the case Covers any unexpected error or errors due to internal service   ALL_PROCESSES_FAILED PROCESS_ERROR See warnings for more information This occurs when no options are returned for all accesses after applying a plugin (blacklist, filter, mapping code), commission, etc., it may also be caused by a wrong default setting, In the warning node you will find detailed information about the cause.   TIMEOUT CONNECTION_ERROR According to the case This occurs due to a connection timeout   REFERENCE_NOT_EXISTS BOOKING_ERROR According to the case This occurs when the booking reference provided is not available in the supplier system    Warning list In this section we will expand on all the Warnings that can be returned in HotelX booking flow. There are two types of warnings, HotelX warnings and Connection warnings.\nHotelX warnings In the table below, we have structured a relation of all the Warnings that can be returned in HotelX.\n   Code Type Description Explanation     WRONG_FIELD VALIDATION_ERROR According to the case A field or fields in the request are not correct   INTERNAL_ERROR MAPPING_ERROR According to the case Error produced when mapping codes, it usually happens regarding hotel mapping   COMMISSION_NOT_FOUND API_ERROR According to the case This occurs when the options are discarded because the supplier returns options with a negative commission that does not allow the calculation of the net price. You need to upload the commission file to solve it   WRONG_FIELD PLUGIN_ERROR According to the case It occurs when the input of the plugin is misintroduced or misconstructed   BLACKLIST PLUGIN_ERROR According to the case It occurs when the hotels or accesses are blacklisted    Error 204 - No Results Found Error ‚Äú204 No results found‚Äù is a common error that you can receive in the Search Query response. This error means that the product you are trying to obtain is not available.\nThere are several potential reasons as to why this error occurs:\n The product is not available for the dates in the request. The product is not available for the number of passengers selected in the request. The product is not available for the destination selected in the request. The product has been filtered by criteria applied in the pluggins.  In case an error of this type is received, you should first contact the supplier directly on a commercial level and check with them whether there should be availability for the product you are trying to obtain with the specific search criteria (dates, passenger quantity, passenger age, destination you have chosen, etc.). In case the supplier confirms that there should be availability but you are still not obtaining it, you should review the criteria set out in the pluggins you may be using, if you still can\u0026rsquo;t find the problem please you should contact our Customer Care department.\nConnection warnings This type of warnings contains the supplier original error codes. This type of error codes are classified as warning codes because whenever more than 1 supplier is requested, some of those suppliers may return an error while others may return the response, accordingly. In those cases, if at least one of the suppliers returns results an error cannot be returned, hence those results will be displayed in the response, and for those accesses which have not returned results a warning will be returned.\nSee list of supplier error codes\nContent Error List In the table below, we have structured a relation of all the Errors that can be returned in HotelX content\n   Code Description Explanation     11204 According to the case This occurrs when no results found   11400 According to the case A field or fields in the request are missing or not correct   22401 According to the case This occurs when the request lacks valid authentication credentials for the requested resource   22500 According to the case Covers any unexpected error or errors due to internal service   22512 According to the case This occurs when there is insufficient data to return due to internal error service    Warnings In the table below, we have structured a relation of all the Warnings that can be returned in HotelX content.\n   Code Description Explanation     21500 According to the case This occurrs when there is an unexpected error retrieving mapping codes   22600 According to the case This occurrs when no mapping is found.    "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/",
	"title": "External file loads",
	"tags": [],
	"description": "Add and update your master data and rules with files load",
	"content": " Masters   Masters Master information about your hotels, meal plans, currencies...\n     Rules Manage princing rules, filters and blacklists\n    "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/",
	"title": "Extranet",
	"tags": [],
	"description": "Learn how to use the extranet and load your inventory",
	"content": "   Overview Inventory extranet Overview\n     Load your inventory Steps and manual to load your inventory using the extranet\n     Tools Tools that will help you manage your inventory\n     FAQ Frequently asked questions about the Inventory-X extranet\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/faq/",
	"title": "FAQ",
	"tags": [],
	"description": "",
	"content": "Please visit our Help Center for any questions you might have\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/faq/",
	"title": "FAQ",
	"tags": [],
	"description": "",
	"content": "Please check out here our FAQ for Hotel Pull Sellers API!\n"
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/hotel-info/",
	"title": "Hotel Info",
	"tags": [],
	"description": "Add extra information to your hotels: images, descriptions...",
	"content": " How to add extra info to a hotel Considerations It is an incremental load, so bear in mind these considerations:\n If a hotels exists then it is updated.\n If a hotel does not exist then it is created.\n Existing hotel that are not referenced are not removed.\n If an existing hotel has to be removed from system then you have to contact with TravelgateX.\n If there is any problem with a hotel\u0026rsquo;s information then it is omitted (and logged) but the load continues.\n  \nSpecifications  File name: Master_HotelInfo.\n Each line represents a resource for a hotel.\n The first line is a header line: it does not contain data directly and it will be skipped.\n Inside a line, by default fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way. There is an exception, the resource value can contain the character \u0026ldquo;#\u0026rdquo; and it all will be gathered correctly.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;||\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Hotel code   1 Yes Yes string Type of the hotel resource:Img = ImageProp = Property TypeNote = Additional NotesAttr = AttributeSdesc = Short DescriptionLdesc = Long Description   2 Yes - string Attribute code. This field is only mandatory it the resource type is \u0026ldquo;Attr\u0026rdquo;.   3 Yes - string Attribute type. This field is only mandatory it the resource type is \u0026ldquo;Attr\u0026rdquo;.   4 Yes Yes string Value of the resource    \nExample HotelCode#ResourceType#Value 1001#Img###http://image.com/1 1001#Img###http://image.com/2 1001#Prop###Hostel 1001#Attr#3#General#FreeWifi 1001#Sdesc###Short description of the hotel. 1001#Ldesc###Long description of the hotel including more information.  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/messages/product-load/hotelrateplanretrieve/",
	"title": "HotelRatePlanRetrieve",
	"tags": [],
	"description": "HotelRatePlanRetrieve message",
	"content": " Providers will send a HotelRatePlanRetrieveRQ message to retrieve a complete break down of Rate Plans. TGX will return a break down of hotel / Rate Plans / rooms.\nHotelRatePlanRetrieveRQ Xml Exmaple\n\u0026lt;HotelRatePlanRetrieve\u0026gt; \u0026lt;request\u0026gt; \u0026lt;POS\u0026gt; \u0026lt;Source\u0026gt; \u0026lt;RequestorID ID=\u0026quot;Provider1\u0026quot; /\u0026gt; \u0026lt;BookingChannel \u0026gt; \u0026lt;CompanyName Code=\u0026quot;ClientTravelAgency1\u0026quot;/\u0026gt; \u0026lt;/BookingChannel\u0026gt; \u0026lt;TPA_Extensions\u0026gt; \u0026lt;Param key = \u0026quot;onlyActive\u0026quot; value = \u0026quot;0\u0026quot;/\u0026gt; \u0026lt;/TPA_Extensions\u0026gt; \u0026lt;/Source\u0026gt; \u0026lt;/POS\u0026gt; \u0026lt;RatePlans\u0026gt; \u0026lt;RatePlan\u0026gt; \u0026lt;DateRange Start=\u0026quot;2013-12-20\u0026quot; End=\u0026quot;2013-12-25\u0026quot;/\u0026gt; \u0026lt;RatePlanCandidates\u0026gt; \u0026lt;RatePlanCandidate RatePlanCode=\u0026quot;BAR\u0026quot;\u0026gt;\u0026lt;/RatePlanCandidate\u0026gt; \u0026lt;/RatePlanCandidates\u0026gt; \u0026lt;HotelRef HotelCode=\u0026quot;12\u0026quot; /\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/request\u0026gt; \u0026lt;/HotelRatePlanRetrieve\u0026gt;     Element Number Type Description     HotelRatePlanRetrieve/request 1  Root Node.   POS/Source/TPA_Extensions 0..1  Optional, empty only active RatePlans/Rooms will be received.   Param 1     @key 1 String onlyActive.   @value 1 String 1 - You will receive all active RatePlans/Rooms data. 0 - Active and deactivated RatePlans/Rooms will be received. (Same case than wihout TPA_Extensions node).   RatePlans/RatePlan/DateRange 1  Contains date filter.   @Start 1 Date Start date to search rates.   @End 1 Date End date to search rates.   RatePlans/RatePlan/HotelRef 1  Contains hotel filter.   @HotelCode 1 String Hotel date to search rates.   RatePlans/RatePlan/RatePlanCandidates/RatePlanCandidate 0..1  Contains rate filter.   @RatePlanCode 1 String Rate Plan Code to search rates.    HotelRatePlanRetrieveRS Example for a Rate Plan\n\u0026lt;HotelRatePlanRetrieveResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelRatePlanRetrieveResult Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;12\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan RatePlanType = \u0026quot;11\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-20\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt AmountAfterTax = \u0026quot;300.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; NumberOfGuests = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;40.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;20.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-20\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;35.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-20\u0026quot; End = \u0026quot;2013-12-20\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;20.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Commission Percent = \u0026quot;15.00\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanType = \u0026quot;11\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-12-21\u0026quot; End = \u0026quot;2013-12-21\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt AmountAfterTax = \u0026quot;300.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; NumberOfGuests = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;40.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;20.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-21\u0026quot; End = \u0026quot;2013-12-21\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;35.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-21\u0026quot; End = \u0026quot;2013-12-21\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;20.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Commission Percent = \u0026quot;15.00\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanType = \u0026quot;11\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-12-22\u0026quot; End = \u0026quot;2013-12-22\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt AmountAfterTax = \u0026quot;300.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; NumberOfGuests = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;40.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;20.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-22\u0026quot; End = \u0026quot;2013-12-22\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;35.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-22\u0026quot; End = \u0026quot;2013-12-22\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;20.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Commission Percent = \u0026quot;15.00\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanType = \u0026quot;11\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-12-23\u0026quot; End = \u0026quot;2013-12-23\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt AmountAfterTax = \u0026quot;300.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; NumberOfGuests = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;40.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;20.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-23\u0026quot; End = \u0026quot;2013-12-23\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;35.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-23\u0026quot; End = \u0026quot;2013-12-23\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;20.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Commission Percent = \u0026quot;15.00\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanType = \u0026quot;11\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-12-24\u0026quot; End = \u0026quot;2013-12-24\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt AmountAfterTax = \u0026quot;300.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;40.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;20.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-24\u0026quot; End = \u0026quot;2013-12-24\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;35.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-24\u0026quot; End = \u0026quot;2013-12-24\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;20.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Commission Percent = \u0026quot;15.00\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanType = \u0026quot;11\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-12-25\u0026quot; End = \u0026quot;2013-12-25\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt AmountAfterTax = \u0026quot;300.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;25\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;40.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;2\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; Amount = \u0026quot;20.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-25\u0026quot; End = \u0026quot;2013-12-25\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;35.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-25\u0026quot; End = \u0026quot;2013-12-25\u0026quot; AgeQualifyingCode = \u0026quot;8\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;20.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Commission Percent = \u0026quot;15.00\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanType = \u0026quot;11\u0026quot; RatePlanCode = \u0026quot;LOWCOST\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2013-12-25\u0026quot; End = \u0026quot;2013-12-25\u0026quot;\u0026gt; \u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt AmountAfterTax = \u0026quot;300.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;14\u0026quot; Code = \u0026quot;2-0-0\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt AmountAfterTax = \u0026quot;330.00\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Type = \u0026quot;14\u0026quot; Code = \u0026quot;2-1-0\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;MealsIncluded MealPlanCodes = \u0026quot;7\u0026quot;/\u0026gt; \u0026lt;/Rate\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Supplements\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-25\u0026quot; End = \u0026quot;2013-12-25\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;35.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot; ChargeTypeCode = \u0026quot;2-0-0\u0026quot;/\u0026gt; \u0026lt;Supplement Start = \u0026quot;2013-12-25\u0026quot; End = \u0026quot;2013-12-25\u0026quot; CurrencyCode = \u0026quot;EUR\u0026quot; Amount = \u0026quot;20.00\u0026quot; SupplementType = \u0026quot;Board\u0026quot; InvCode = \u0026quot;12\u0026quot; ChargeTypeCode = \u0026quot;3-0-0\u0026quot;/\u0026gt; \u0026lt;/Supplements\u0026gt; \u0026lt;SellableProducts\u0026gt; \u0026lt;SellableProduct InvCode = \u0026quot;JUN_1\u0026quot; InvType = \u0026quot;ROOM\u0026quot; InvStatusType = \u0026quot;Active\u0026quot;/\u0026gt; \u0026lt;/SellableProducts\u0026gt; \u0026lt;Commission Percent = \u0026quot;15.00\u0026quot;/\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanRetrieveResult\u0026gt; \u0026lt;/HotelRatePlanRetrieveResponse\u0026gt;  We get the Rate Plan with code BAR for the Hotel ID 12 for the date range 2013-12-20 - 2013-12-25. In this case, the rate plan with code LOWCOST has two rooms associated with it, you will receive a Rate Plan for each day-room-rate plan configuration.\n**Example for a Derived RatePlan**\n\u0026lt;HotelRatePlanRetrieveResponse xmlns = \u0026quot;http://schemas.xmltravelgate.com/hubpush/provider/2012/10\u0026quot;\u0026gt; \u0026lt;HotelRatePlanRetrieveResult Version = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;RatePlans HotelCode = \u0026quot;1\u0026quot; xmlns = \u0026quot;http://www.opentravel.org/OTA/2003/05\u0026quot;\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; AdjustedPercentage = \u0026quot;10.00\u0026quot; AdjustUpIndicator = \u0026quot;false\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-07-01\u0026quot; End = \u0026quot;2014-07-01\u0026quot;/\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;TarifaDerivada\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; AdjustedPercentage = \u0026quot;10.00\u0026quot; AdjustUpIndicator = \u0026quot;false\u0026quot; RatePlanStatusType = \u0026quot;Active\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-07-02\u0026quot; End = \u0026quot;2014-07-02\u0026quot;/\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;TarifaDerivada\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; AdjustedPercentage = \u0026quot;10.00\u0026quot; AdjustUpIndicator = \u0026quot;false\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-07-03\u0026quot; End = \u0026quot;2014-07-03\u0026quot;/\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;TarifaDerivada\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; AdjustedPercentage = \u0026quot;10.00\u0026quot; AdjustUpIndicator = \u0026quot;false\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-07-04\u0026quot; End = \u0026quot;2014-07-04\u0026quot;/\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;TarifaDerivada\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;RatePlan RatePlanCode = \u0026quot;DRV\u0026quot; BaseRatePlanCode = \u0026quot;SRATE\u0026quot; AdjustedPercentage = \u0026quot;10.00\u0026quot; AdjustUpIndicator = \u0026quot;false\u0026quot; RatePlanStatusType = \u0026quot;Deactivated\u0026quot;\u0026gt; \u0026lt;Rates\u0026gt; \u0026lt;Rate Start = \u0026quot;2014-07-05\u0026quot; End = \u0026quot;2014-07-05\u0026quot;/\u0026gt; \u0026lt;/Rates\u0026gt; \u0026lt;Description\u0026gt; \u0026lt;Text\u0026gt;TarifaDerivada\u0026lt;/Text\u0026gt; \u0026lt;/Description\u0026gt; \u0026lt;/RatePlan\u0026gt; \u0026lt;/RatePlans\u0026gt; \u0026lt;/HotelRatePlanRetrieveResult\u0026gt; \u0026lt;/HotelRatePlanRetrieveResponse\u0026gt;  For a derived rate you will not receive the rooms associated with it. The rooms associated with a derived rate are defined at setup level and must be associated with the base Rate Plan too.\n"
},
{
	"uri": "https://travelgatex.com/community/integrations-changelog/integration-changelog/",
	"title": "Integration changelog example",
	"tags": [],
	"description": "Integration changelog, to keep it with the source code",
	"content": " Integration changelog Each integration needs a changelog to inform about releases, roll backs and so.\nThis changelog won\u0026rsquo;t be at the documentation page, and will be kept with the source code repository on a single file called \u0026ldquo;CHANGELOG.md\u0026rdquo;.\nThis file will be copied on the documentation changelog by generating a folder per date with a single file called \u0026ldquo;index.md\u0026rdquo;.\nThus on the public documentation site we\u0026rsquo;ll have:\n \u0026hellip;\\changelog\\2000-01-31\\index.md \u0026hellip;\\changelog\\2000-02-01\\index.md \u0026hellip;\\changelog... as folders as needed  CHANGELOG.md structure the file will have the following structure:\n No header Grouped by release: On each release the changelog is grouped under a title 2 with the date in format iso (AAAA-MM-DD) Incremental notation: Changes not applied yet on a release will be at the top of the file with no title, once published a date title will be written on the top. Use containers with lists: All the entrances are treated as a list in a release note container Remember that containers can be of type:  Added for new features. Changed for changes in existing functionality. Deprecated for soon-to-be removed features. Removed for now removed features. Fixed for any bug fixes. Security in case of vulnerabilities. Consult more info on release-notes here   Example of CHANGELOG.md file \u0026lt;!-- NO HEADER NEEDED --\u0026gt; \u0026lt;!-- UNRELEASED STUFF --\u0026gt; {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - Addition #3 not applied yet... - Addition #2 not applied yet... - Addition #1 not applied yet... - ... {{% /release-notes-container %}} ## 2000-02-01 {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - Addition explanation #3 - Addition explanation #2 - Addition explanation #1 - ... {{% /release-notes-container %}} {{% release-notes-container type=\u0026quot;d\u0026quot; %}} - Deprecation explanation #3 - Deprecation explanation #2 - Deprecation explanation #1 - ... {{% /release-notes-container %}} ## 2000-01-31 {{% release-notes-container type=\u0026quot;a\u0026quot; %}} - Addition explanation #2 - Addition explanation #1 - ... {{% /release-notes-container %}} {{% release-notes-container type=\u0026quot;f\u0026quot; %}} - Fix explanation #3 - Fix explanation #2 - Fix explanation #1 - ... {{% /release-notes-container %}} ...  "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‚Äò!‚Äô indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‚Äò!‚Äô indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‚Äò!‚Äô indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. Take a look to this page\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/mappea/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‚Äò!‚Äô indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‚Äò!‚Äô indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": "Interfaces are an abstract type that includes a certain set of fields that are grouped together. For example, our AdviseMessage interface requires the error code, error type and error description fields to be used together.\nEach Interface is described in the same way: - A short definition of the Interface - An interactive GraphQL schema definition - A list of all of the fields that are included in this Interface (remember, in GraphQL, ‚Äò!‚Äô indicates mandatory fields. Some interfaces have all fields mandatory and some have a mix of mandatory and optional fields) - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-inventory/",
	"title": "Inventory",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \tTo make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/codelist/payment-type-codes/",
	"title": "Payment Type Codes",
	"tags": [],
	"description": "List of Payment Type Codes",
	"content": "   Payment Type Code Description     MerchantPayment The customer pays the client and the client will pay the provider.   DirectPayment The customer will have to use a credit card as a guarantee for the hotel and the payment will be done by the customer at check-in.   BookingDatePayment The client will use a credit card with the exact amount of the booking so they can pay the provider/hotel. The provider will charge the payment on the day of the reservation.   ArrivalDatePayment The client will use a credit card with the exact amount of the booking so they can pay the provider/hotel. The provider will charge the payment on the day of the check-in.    "
},
{
	"uri": "https://travelgatex.com/alerts-x/howtos/howto-query-alerts/",
	"title": "Query Alerts",
	"tags": [],
	"description": "How to query about your alerts",
	"content": " This page shows you how to query Alerts using API or TravelgateX Web.\nHow to request \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\nYou must query about your alerts by their location group or their code. Also can be filtered by active alerts or not. You should query about your alerts by their ubication group or their code. They also can be filtered by active alerts or not active alerts. \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; 19fd7afc932b16704f2b83f0c92c4386b900d00f\nBelow are shown examples for different casuistry:\n       #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"d68e218b7d2039d35b6b7d8ef58131d1\",\"n\":\"location group\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"},{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"b6d2360840706de09b0c306ebdcbdc21\",\"n\":\"alert code\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "https://travelgatex.com/applications/logging/howtos/howto-query-logging/",
	"title": "Query Logging",
	"tags": [],
	"description": "How to query about your performance",
	"content": " This page shows you how to query Logging using API or TravelgateX Web.\nHow to request You can query about your performance as a buyer or as a seller.\nBelow are shown different examples for different casuistry:\n    122d8186fb0ed7d5d886b00b3081cecb Testing /122d8186fb0ed7d5d886b00b3081cecb\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"122d8186fb0ed7d5d886b00b3081cecb\",\"n\":\"Buyer\",\"o\":[\"graphiql\"],\"u\":\"bsmarcosj\"},{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"22146f0cf8f73939e0a55c0274def86c\",\"n\":\"Seller\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "https://travelgatex.com/applications/stats/howtos/howto-query-stats/",
	"title": "Query Stats",
	"tags": [],
	"description": "How to query about your performance",
	"content": " This page shows you how to query Stats using API or TravelgateX Web.\nHow to request You can query about your performance as a buyer or as a seller.\nBelow are shown different examples for different casuistry:\n    122d8186fb0ed7d5d886b00b3081cecb Testing /122d8186fb0ed7d5d886b00b3081cecb\n   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"122d8186fb0ed7d5d886b00b3081cecb\",\"n\":\"Buyer\",\"o\":[\"graphiql\"],\"u\":\"bsmarcosj\"},{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"22146f0cf8f73939e0a55c0274def86c\",\"n\":\"Seller\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/channel-x/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "Release Notes Channel-X API",
	"content": "   Changelog Channel-X Changelog\n    "
},
{
	"uri": "https://travelgatex.com/flight-x/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   Roadmap Flight-X roadmap summarized\n     Flight-X changelog     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/bookingflow/reservation/",
	"title": "Reservation",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to book an option.\nRequest Format The request format works the same way as Valuation but with the list of passengers.\nResponse Format The result returns the booking locator (booking code), which could be the supplier\u0026rsquo;s own code or the one sent in request.\nIt also returns all the charges associated with the booking as well as its status.\nRemarks 180000 milliseconds is the maximum amount of time permitted in our system before the connection is closed.\nReservationRQ Example \u0026lt;ReservationRQ\u0026gt; \u0026lt;ClientLocator\u0026gt;2537459\u0026lt;/ClientLocator\u0026gt; \u0026lt;OnRequest\u0026gt;false\u0026lt;/OnRequest\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;extra\u0026quot; value = \u0026quot;31\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;DeltaPrice amount=\u0026quot;10\u0026quot; percent=\u0026quot;5\u0026quot; applyBoth=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2014\u0026lt;/EndDate\u0026gt; \u0026lt;MealPlanCode\u0026gt;D\u0026lt;/MealPlanCode\u0026gt; \u0026lt;HotelCode\u0026gt;10\u0026lt;/HotelCode\u0026gt; \u0026lt;Nationality\u0026gt;ES\u0026lt;/Nationality\u0026gt; \u0026lt;Holder title = \u0026quot;Miss\u0026quot; name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot; email = \u0026quot;hotelemail@email.com\u0026quot;/\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;ResGuests\u0026gt; \u0026lt;Guests\u0026gt; \u0026lt;Guest roomCandidateId = \u0026quot;1\u0026quot; paxId = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Title\u0026gt;Miss\u0026lt;/Title\u0026gt; \u0026lt;GivenName\u0026gt;Test11\u0026lt;/GivenName\u0026gt; \u0026lt;SurName\u0026gt;TestAp11\u0026lt;/SurName\u0026gt; \u0026lt;/Guest\u0026gt; \u0026lt;Guest roomCandidateId = \u0026quot;1\u0026quot; paxId = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;Title\u0026gt;Mr\u0026lt;/Title\u0026gt; \u0026lt;GivenName\u0026gt;Test12\u0026lt;/GivenName\u0026gt; \u0026lt;SurName\u0026gt;TestAp12\u0026lt;/SurName\u0026gt; \u0026lt;/Guest\u0026gt; \u0026lt;/Guests\u0026gt; \u0026lt;/ResGuests\u0026gt; \u0026lt;PaymentType\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt; \u0026lt;CardInfo\u0026gt; \u0026lt;CardCode\u0026gt;VI\u0026lt;/CardCode\u0026gt; \u0026lt;Number\u0026gt;4321432143214327\u0026lt;/Number\u0026gt; \u0026lt;Holder\u0026gt;Test11 TestAp11\u0026lt;/Holder\u0026gt; \u0026lt;ValidityDate\u0026gt; \u0026lt;Month\u0026gt;06\u0026lt;/Month\u0026gt; \u0026lt;Year\u0026gt;14\u0026lt;/Year\u0026gt; \u0026lt;/ValidityDate\u0026gt; \u0026lt;CVC\u0026gt;123\u0026lt;/CVC\u0026gt; \u0026lt;/CardInfo\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4582\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;506\u0026quot; description = \u0026quot;Double Standard..\u0026quot;/\u0026gt; \u0026lt;Preferences\u0026gt; \u0026lt;Preference type = \u0026quot;Smoker\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;NonSmoker\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;ExtraBed\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;Cradle\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;DoubleBed\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;TwinBeds\u0026quot;/\u0026gt; \u0026lt;/Preferences\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;Remarks\u0026gt;I want it a double bed.\u0026lt;/Remarks\u0026gt; \u0026lt;Preferences\u0026gt; \u0026lt;Preference type = \u0026quot;ContiguosRooms\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;Wedding\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;LateArrival\u0026quot;\u0026gt;14:00\u0026lt;/Preference\u0026gt; \u0026lt;Preference type = \u0026quot;LateCheckOut\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;GroundFloor\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;TopFlor\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;WithoutVoucher\u0026quot;/\u0026gt; \u0026lt;/Preferences\u0026gt; \u0026lt;/ReservationRQ\u0026gt;  ReservationRQ Description    Element Number Type Description     ReservationRQ 1  Root node.   ClientLocator 1 String Booking ID in client\u0026rsquo;s system.   OnRequest 1 Boolean Indicates if you want to receive the onrequest options in AvailRS, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   Parameters / 0..1  List of parameters.   Parameters /Parameter 1..n  Parameters for additional information that have been reported in ValuationRS.   @key 1 String Contains the keyword/Id to identify a parameter.   @value 1 String Contains the value of the parameter.   DeltaPrice 0..1  Indicates price variation permitted by the client (see MetaData in order to verify if a supplier implements it). You can find more information with examples at the bottom of this page.   @amount 0..1 String Amount (in the currency returned into the option) that is accepted by the client to be higher than the valuation price.   @percent 0..1 String Percentage accepted by the client to be higher than the valuation price.   @applyBoth 1 Boolean Indicates that the range between valuation price and the new price does not exceed the amount and/or porcentage indicated by the client.   StartDate 1 String Start date to search rates.   EndDate 1 String End date to search rates.   MealPlanCode 1 String MealPlan code.   HotelCode 1 String Hotel code.   Nationality 1 String Nationality of the Holder (use ISO3166_1_alfa_2 , see MetaData in order to verify if a supplier implements it).   Holder 1  Holder of the booking.   @title 1 Enum Holder\u0026rsquo;s title. Possible values: 0 = Mr, 1 = Mrs, 2 = Miss, 3 = Ms.   @name 1  Holder\u0026rsquo;s name.   @surname 1  Holder\u0026rsquo;s surname.   @email 0..1  Holder\u0026rsquo;s email.   Price 1  Total price of this valuation.   @currency 1 String Currency code.   @amount 1 Decimal Option Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed.   @commission 1 Decimal Commission (-1 = not specified, 0 = net price, X = % of the commission applied to the amount.)   ResGuests / 1  List of passengers.   ResGuests /Guests / 1  Passengers.   ResGuests /Guests/Guest 1..n  Detail of each passenger. If the holder is also a passenger you need to add his/hers information in the gest list.   @roomCandidateId 1 Integer Room candidate Identifier   @paxId 1 Integer Passenger id (starting at 1).   ResGuests /Guests/Guest/Title 1 Enum Guest\u0026rsquo;s title. Possible values: 0 = Mr, 1 = Mrs, 2 = Miss, 3 = Ms.   ResGuests /Guests/Guest/GivenName 1 String Guest\u0026rsquo;s given name.   ResGuests /Guests/Guest/SurName 1 String Guest\u0026rsquo;s last name.   PaymentType 1 String Indicates the type of payment. It can be MerchantPay, LaterPay, CardBookingPay or CardCheckInPay. Payment types are explained in \u0026ldquo;Detailed description\u0026rdquo; section, in this same page.   CardInfo / 0..1  Credit card details.   CardInfo /CardCode 1 String Indicates the type of credit card. See types allowed at Credit Card Types   CardInfo /Number 1 String Credit card number.   CardInfo /Holder 1 String Credit card holder.   CardInfo /ValidityDate 1     CardInfo /ValidityDate/Month 1 String Expiration month (2 characters).   CardInfo /ValidityDate/Year 1 String Expiration year (2 characters).   CardInfo /CVC 1 String Credit card security code.   CardInfo /isVCC 1 Boolean Indicates if the card information provided is from a Virtual Credit Card or not.   CardInfo /VirtualCreditCard 0..1  Extra information if the card is a virtual credit card.   CardInfo /VirtualCreditCard/VCCActivationDate 1 String Date from when the card can be charged. Format: DD/MM/YYYY.   CardInfo /VirtualCreditCard/VCCDeactivationDate 1 String Date from when the card will no longer be chargeable. Format: DD/MM/YYYY.   CardInfo /VirtualCreditCard/VCCCurrentBalance 1 String The amount which can be charged to the card.   CardInfo /VirtualCreditCard/VCCCurrencyCode 1 String The ISO currency code of the VCCCurrentBalance.   CardInfo /ThreeDomainSecurity 0..1  3DS data and transaction results.   CardInfo /ThreeDomainSecurity/ThreeDSVersion 1 String Three Domain Security version used.   CardInfo /ThreeDomainSecurity/DSTransactionID 0..1 String Unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.   CardInfo /ThreeDomainSecurity/XID 0..1 String Transaction identifier resulting from authentication processing.   CardInfo /ThreeDomainSecurity/ECI 1 String Electronic Commerce Indicator. See values allowed at ECI codes.   CardInfo /ThreeDomainSecurity/CAVV 0..1 String Cardholder Authentication Verification Value.   CardInfo /ThreeDomainSecurity/PARes 0..1 String Payer Authentication Response.   CardInfo /ThreeDomainSecurity/PAResStatus 0..1 String Payer Authentication Response status. See values allowed at PARes Status.   CardInfo /ThreeDomainSecurity/PARes 0..1 String Payer Authentication Response.   CardInfo /ThreeDomainSecurity/CardEnrolledStatus 0..1 String Status of Authentication eligibility. See values allowed at Card Enrollment Status.   CardInfo /ThreeDomainSecurity/SignatureStatus 0..1 String Transaction Signature status. See values allowed at Signature Verification Status.   CardInfo /ThreeDomainSecurity/MerchantName 0..1 String Merchant name.   Rooms / 1  Rooms within this option (room list).   Rooms /Room 1..n  Detail of room.   @id 1 String Room identifier.   @roomCandidateRefId 1 Integer Room candidate identifier.   @code 1 String Room code.   @description 1 String Room description.   Rooms /Preferences 0..1  Preference filters at room level.   Rooms /Preferences/Preference 1..n  Each filter of preference and its values.   @type 1  Type of preference allowed. See types allowed in PreferenceType further down this page   RoomCandidates /RoomCandidate 1..n  Room required.   @id 1 Integer Id of the requested room (starting at 1).   RoomCandidates /RoomCandidate/Paxes /Pax 1..n  Pax required.   @age 1 Integer Passenger age on the day of check-in.   @id 1 Integer Passenger id (starting at 1).   Remarks 0..1  Any customer comments for the supplier to consider (see MetaData in order to verify if a supplier implements it).   Preferences / 0..1  Preference filters at the option / general level.   Preferences /Preference 1..n  Each filter of preference and its values.   @type 1  Type of preference allowed. See types allowed in PreferenceType further down this page    ReservationRS Example \u0026lt;ReservationRS\u0026gt; \u0026lt;ProviderLocator\u0026gt;102\u0026lt;/ProviderLocator\u0026gt; \u0026lt;PropertyReservationNumber\u0026gt;HCN8273\u0026lt;/PropertyReservationNumber\u0026gt; \u0026lt;ResStatus\u0026gt;OK\u0026lt;/ResStatus\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/ReservationRS\u0026gt;  ReservationRS Description    Element Number Type Description     ReservationRS 1  Root node.   ProviderLocator 0..1 String Booking ID in the Supplier¬¥s system. It will always be returned if the ResStatus is OK or RQ. It could not be returned when the ResStatus is CN or UN, depending if the supplier returns it.   PropertyReservationNumber 0..1 String Booking Number in the property¬¥s system (see Metadata method in order to verify if a supplier implements it).   ResStatus 1 String reservation status (OK = confirmed, RQ = on request, CN = cancelled, UN = unknown.)   Price 0..1  Total price of this reservation (see MetaData in order to verify if a supplier implements it).   @currency 1 String Currency code.   @amount 1 Decimal Book Amount.   @binding 1 Boolean Identifies if is the price is binding (when true the sale price returned must not be less than the price informed.   @commission 1 Decimal Commission (-1 = not specified, 0 = net price, X = % of the commission that applies to the amount.)   Remarks 0..1 String Any remarks about this reservation   BillingSupplierCode 0..1 String Supplier\u0026rsquo;s billing code. Will be returned if the supplier has different billing accounts and this is informed in the reservation (see MetaData in order to verify if a supplier implements it).   Payable 0..1  Payable.   @value 1  Informs Payable.    Detailed description PreferenceType: The types that allow, the possible values are: - Smoker - NonSmoker - ExtraBed - Cradle - DoubleBed - TwinBeds - ContiguosRooms - Wedding - LateArrival - LateCheckOut - EarlyCheckIn - GroundFloor - TopFlor - WithoutVoucher\nResStatus:\nWhen making a reservation, there will be a field named ResStatus in the response indicating the status of the reservation. It can have four values: OK, RQ, CN and UN.\n OK: The reservation was completed with no problems. RQ: The reservation was completed but the product is still not available, so the reservation goes into a waiting list (Request). CN: The reservation was completed but due to a supplier error or a timeout the system will immediately cancel the reservation to prevent further possible errors. UN: The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown. It is the client\u0026rsquo;s responsibility to check if the booking is OK.  Important: be aware that you can receive an error and a reservation status OK in the same response, in this case the booking is confirmed. You should always consider the reservation status returned. Note: Keep the parameters in the valuation response to include them in the reservation request.\nBookings not confirmed: Only when the ResStatus = UN and an application error is also returned with type = 303 we can ensure the booking has not been confirmed in the supplier\u0026rsquo;s system.\n\u0026lt;ApplicationError\u0026gt; \u0026lt;type\u0026gt;303\u0026lt;/type\u0026gt; \u0026lt;description\u0026gt;Booking not confirmed\u0026lt;/description\u0026gt; \u0026lt;/ApplicationError\u0026gt; \u0026lt;ResStatus\u0026gt;UN\u0026lt;/ResStatus\u0026gt;  If you receive ResStatus = UN but don\u0026rsquo;t receive a 303 type application error then is the client\u0026rsquo;s responsibility to check if the booking is OK as we can\u0026rsquo;t ensure if the booking is confirmed or not.\nMerchantPay, LaterPay, CardBookingPay \u0026amp; CardCheckInPay\n PaymentOptions:\n MerchantPay: The payment is managed by the supplier.\n LaterPay: The payment is managed by the hotel. The customer will use a credit-card as a guarantee for the hotel and the payment will be completed at check in.\n CardBookingPay: The payment is managed by the supplier. The payment is effectuated at the time of booking.\n CardChekInPay: The payment is managed by the supplier. The payment is effectuated at check in in the hotel.\n  \u0026lt;PaymentType\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt;  If the payment is done by credit card, is it mandatory to specify the payment type and the credit card information in the XML request as in the example below:\n\u0026lt;PaymentType\u0026gt;LaterPay/CardBookingPay/CardCheckInPay\u0026lt;/PaymentType\u0026gt; \u0026lt;CardInfo\u0026gt; \u0026lt;CardCode\u0026gt;XX\u0026lt;/CardCode\u0026gt; \u0026lt;Number\u0026gt;XXXXXXXXXX\u0026lt;/Number\u0026gt; \u0026lt;Holder\u0026gt;XXXX\u0026lt;/Holder\u0026gt; \u0026lt;ValidityDate\u0026gt; \u0026lt;Month\u0026gt;XX\u0026lt;/Month\u0026gt; \u0026lt;Year\u0026gt;XX\u0026lt;/Year\u0026gt; \u0026lt;/ValidityDate\u0026gt; \u0026lt;CVC\u0026gt;XXX\u0026lt;/CVC\u0026gt; \u0026lt;/CardInfo\u0026gt;  DeltaPrice description applyBoth:\nDepending on the value of applyBoth:\n applyBoth =\u0026ldquo;false\u0026rdquo;: Indicates that one of the conditions (amount or percentage) has to meet the criteria before reservation. applyBoth =\u0026ldquo;true\u0026rdquo;: Indicates that the new price cannot exceed the amount or percentage indicated by the client.  An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice tag is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation).\nThis field is implemented if it\u0026rsquo;s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method. This information is available in the Static configuration of each supplier.\nPrice difference between the Reservation and Valuation methods We cannot guarantee that the price will be returned in Reservation, given that this is something which depends on the supplier, and unless they provide us the price in their response, there is no way for us to return it to you.\nIf the price returned in Reservation method is different than the one returned in the Valuation method, 4 cases could occur. Below, we have explained each of these cases and what should be done if either of them occur:\nCase 1:\nThe price in Reservation is lower than the price in Valuation. The selling price for the final customer will be the one in valuation, as this is the one that will be accepted by them at the time of booking.\nCase 2:\nThe price in Reservation is higher than the price in valuation:\nCase 2.1:\nThe supplier allows DeltaPrice and you allow a price change of, for example, up to ‚Ç¨10, indicating it in through our DeltaPrice field (explained in the previous section):\nValuation:\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;110\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;0\u0026quot;/\u0026gt;  Reservation:\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;110\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;0\u0026quot;/\u0026gt;  When making reservation, you must pay the supplier ‚Ç¨110, given that you have decided not to lose the booking even though the price has increased with ‚Ç¨10 compared to Valuation.\nCase 2.2:\nThe supplier allows DeltaPrice and you DO NOT allow price change. In this case we will return an error, as you do not permit a higher reservation price than the one already established in Valuation.\nCase 2.3:\nThe supplier DOES NOT allow DeltaPrice. If the supplier returns a higher price in Reservation than he does in Valuation, then the difference should be reported, as you have not specified in any way that the price can be changed. In this case the supplier has to cover the price change.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/booking-flow-methods/reservation/",
	"title": "Reservation",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to book an option.\nRequest Format The request format works the same way as Valuation but with the list of passengers.\nResponse Format The result returns the booking locator (booking code), which could be the supplier\u0026rsquo;s own code or the one sent in request.\nIt also returns all the charges associated with the booking as well as its status.\nRemarks 180000 milliseconds is the maximum amount of time permitted in our system before the connection is closed.\nReservationRQ Example In the request for this call it is necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the information in the section \u0026lsquo;Common elements\u0026rsquo;.\n\u0026lt;ReservationRQ\u0026gt; \u0026lt;ClientLocator\u0026gt;2537459\u0026lt;/ClientLocator\u0026gt; \u0026lt;OnRequest\u0026gt;false\u0026lt;/OnRequest\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;extra\u0026quot; value = \u0026quot;31\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;DeltaPrice amount=\u0026quot;10\u0026quot; percent=\u0026quot;5\u0026quot; applyBoth=\u0026quot;false\u0026quot;/\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2014\u0026lt;/EndDate\u0026gt; \u0026lt;MealPlanCode\u0026gt;D\u0026lt;/MealPlanCode\u0026gt; \u0026lt;HotelCode\u0026gt;10\u0026lt;/HotelCode\u0026gt; \u0026lt;Nationality\u0026gt;ES\u0026lt;/Nationality\u0026gt; \u0026lt;Holder title = \u0026quot;Miss\u0026quot; name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot; email = \u0026quot;hotelemail@email.com\u0026quot;/\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;ResGuests\u0026gt; \u0026lt;Guests\u0026gt; \u0026lt;Guest roomCandidateId = \u0026quot;1\u0026quot; paxId = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Title\u0026gt;Miss\u0026lt;/Title\u0026gt; \u0026lt;GivenName\u0026gt;Test11\u0026lt;/GivenName\u0026gt; \u0026lt;SurName\u0026gt;TestAp11\u0026lt;/SurName\u0026gt; \u0026lt;/Guest\u0026gt; \u0026lt;Guest roomCandidateId = \u0026quot;1\u0026quot; paxId = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;Title\u0026gt;Mr\u0026lt;/Title\u0026gt; \u0026lt;GivenName\u0026gt;Test12\u0026lt;/GivenName\u0026gt; \u0026lt;SurName\u0026gt;TestAp12\u0026lt;/SurName\u0026gt; \u0026lt;/Guest\u0026gt; \u0026lt;/Guests\u0026gt; \u0026lt;/ResGuests\u0026gt; \u0026lt;PaymentType\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt; \u0026lt;CardInfo\u0026gt; \u0026lt;CardCode\u0026gt;VI\u0026lt;/CardCode\u0026gt; \u0026lt;Number\u0026gt;4321432143214327\u0026lt;/Number\u0026gt; \u0026lt;Holder\u0026gt;Test11 TestAp11\u0026lt;/Holder\u0026gt; \u0026lt;ValidityDate\u0026gt; \u0026lt;Month\u0026gt;06\u0026lt;/Month\u0026gt; \u0026lt;Year\u0026gt;14\u0026lt;/Year\u0026gt; \u0026lt;/ValidityDate\u0026gt; \u0026lt;CVC\u0026gt;123\u0026lt;/CVC\u0026gt; \u0026lt;/CardInfo\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4582\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; code = \u0026quot;506\u0026quot; description = \u0026quot;Double Standard..\u0026quot;\u0026gt; \u0026lt;Preferences\u0026gt; \u0026lt;Preference type = \u0026quot;Smoker\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;NonSmoker\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;ExtraBed\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;Cradle\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;DoubleBed\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;TwinBeds\u0026quot;/\u0026gt; \u0026lt;/Preferences\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;Room id = \u0026quot;4583\u0026quot; roomCandidateRefId = \u0026quot;2\u0026quot; code = \u0026quot;507\u0026quot; description = \u0026quot;Twin Standard..\u0026quot;\u0026gt; \u0026lt;Preferences\u0026gt; \u0026lt;Preference type = \u0026quot;Smoker\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;NonSmoker\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;ExtraBed\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;Cradle\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;DoubleBed\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;TwinBeds\u0026quot;/\u0026gt; \u0026lt;/Preferences\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;RoomCandidate id = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;Remarks\u0026gt;I want it a double bed.\u0026lt;/Remarks\u0026gt; \u0026lt;Preferences\u0026gt; \u0026lt;Preference type = \u0026quot;ContiguosRooms\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;Wedding\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;LateArrival\u0026quot;\u0026gt;14:00\u0026lt;/Preference\u0026gt; \u0026lt;Preference type = \u0026quot;LateCheckOut\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;GroundFloor\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;TopFlor\u0026quot;/\u0026gt; \u0026lt;Preference type = \u0026quot;WithoutVoucher\u0026quot;/\u0026gt; \u0026lt;/Preferences\u0026gt; \u0026lt;/ReservationRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nReservationRQ Description    Element Number Type Description     ReservationRQ 1  Root node.   ClientLocator 1 String Booking ID in client\u0026rsquo;s system.   OnRequest 1 Boolean Indicates if you want to receive the onrequest options in AvailRS, as long as the supplier returns it in this method (see MetaData in order to verify if a supplier implements it).   Parameters/ 0..1  List of parameters.   Parameters/ Parameter 1..n  Parameters for additional information that have been reported in ValuationRS.   @key 1 String Contains the keyword/Id to identify a parameter.   @value 1 String Contains the value of the parameter.   DeltaPrice 0..1  Indicates price variation permitted by the client (see MetaData in order to verify if a supplier implements it). You can find more information with examples at the bottom of this page.   @amount 0..1 String Amount (in the currency returned into the option) that is accepted by the client to be higher than the valuation price.   @percent 0..1 String Percentage accepted by the client to be higher than the valuation price.   @applyBoth 1 Boolean Indicates that the range between valuation price and the new price does not exceed the amount and/or porcentage indicated by the client.   StartDate 1 String Start date to search rates. Format dd/MM/yyyy   EndDate 1 String End date to search rates. Format dd/MM/yyyy   MealPlanCode 1 String MealPlan code.   HotelCode 1 String Hotel code.   Nationality 1 String Nationality of the Holder (use ISO3166_1_alfa_2 , see MetaData in order to verify if a supplier implements it).   Holder 1  Holder of the booking.   @title 1 Enum Holder\u0026rsquo;s title. Possible values: 0 = Mr, 1 = Mrs, 2 = Miss, 3 = Ms.   @name 1  Holder\u0026rsquo;s name.   @surname 1  Holder\u0026rsquo;s surname.   @email 0..1  Holder\u0026rsquo;s email.   Price 1  Total price of this valuation.   @currency 1 String Currency code.   @amount 1 Decimal Option Amount.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed.   @commission 1 Decimal Commission (-1 = not specified, 0 = net price, X = % of the commission applied to the amount.)   ResGuests/ 1  List of passengers.   ResGuests/ Guests/ 1  Passengers.   ResGuests/ Guests/ Guest 1..n  Detail of each passenger. If the holder is also a passenger you need to add his/hers information in the gest list.   @roomCandidateId 1 Integer Room candidate Identifier.   @paxId 1 Integer Passenger id (starting at 1).   ResGuests/ Guests/ Guest/ Title 1 Enum Guest\u0026rsquo;s title. Possible values: 0 = Mr, 1 = Mrs, 2 = Miss, 3 = Ms.   ResGuests/ Guests/ Guest/ GivenName 1 String Guest\u0026rsquo;s given name.   ResGuests/ Guests/ Guest/ SurName 1 String Guest\u0026rsquo;s last name.   PaymentType 1 String Indicates the type of payment. It can be MerchantPay, LaterPay, CardBookingPay or CardCheckInPay. Payment types are explained in \u0026ldquo;Detailed description\u0026rdquo; section, in this same page.   CardInfo/ 0..1  Credit card details.   CardInfo/ CardCode 1 String Indicates the type of credit card. See types allowed at Credit Card Types   CardInfo/ Number 1 String Credit card number.   CardInfo/ Holder 1 String Credit card holder.   CardInfo/ ValidityDate 1     CardInfo/ ValidityDate/ Month 1 String Expiration month (2 characters).   CardInfo/ ValidityDate/ Year 1 String Expiration year (2 characters).   CardInfo/ CVC 1 String Credit card security code.   CardInfo/ isVCC 1 Boolean Indicates if the card information provided is from a Virtual Credit Card or not.   CardInfo/ VirtualCreditCard 0..1  Extra information if the card is a virtual credit card.   CardInfo/ VirtualCreditCard/ VCCActivationDate 1 String Date from when the card can be charged. Format: DD/MM/YYYY.   CardInfo/ VirtualCreditCard/ VCCDeactivationDate 1 String Date from when the card will no longer be chargeable. Format: DD/MM/YYYY.   CardInfo/ VirtualCreditCard/ VCCCurrentBalance 1 String The amount which can be charged to the card.   CardInfo/ VirtualCreditCard/ VCCCurrencyCode 1 String The ISO currency code of the VCCCurrentBalance.   CardInfo/ ThreeDomainSecurity 0..1  3DS data and transaction results.   CardInfo/ ThreeDomainSecurity/ ThreeDSVersion 1 String Three Domain Security version used.   CardInfo/ ThreeDomainSecurity/ DSTransactionID 0..1 String Unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.   CardInfo/ ThreeDomainSecurity/ XID 0..1 String Transaction identifier resulting from authentication processing.   CardInfo/ ThreeDomainSecurity/ ECI 1 String Electronic Commerce Indicator. See values allowed at ECI codes.   CardInfo/ ThreeDomainSecurity/ CAVV 0..1 String Cardholder Authentication Verification Value.   CardInfo/ ThreeDomainSecurity/ PARes 0..1 String Payer Authentication Response.   CardInfo/ ThreeDomainSecurity/ PAResStatus 0..1 String Payer Authentication Response status. See values allowed at PARes Status.   CardInfo/ ThreeDomainSecurity/ PARes 0..1 String Payer Authentication Response.   CardInfo/ ThreeDomainSecurity/ CardEnrolledStatus 0..1 String Status of Authentication eligibility. See values allowed at Card Enrollment Status.   CardInfo/ ThreeDomainSecurity/ SignatureStatus 0..1 String Transaction Signature status. See values allowed at Signature Verification Status.   CardInfo/ ThreeDomainSecurity/ MerchantName 0..1 String Merchant name.   Rooms/ 1  Rooms within this option (room list).   Rooms/ Room 1..n  Detail of room.   @id 1 String Room identifier.   @roomCandidateRefId 1 Integer Room candidate identifier.   @code 1 String Room code.   @description 1 String Room description.   Rooms/ Preferences/ 0..1  Preference filters at room level.   Rooms/ Preferences/ Preference 1..n  Each filter of preference and its values.   @type 1  Type of preference allowed. See types allowed in PreferenceType further down this page   RoomCandidates/ RoomCandidate/ 1..n  Room required.   @id 1 Integer Id of the requested room (starting at 1).   RoomCandidates/ RoomCandidate/ Paxes/ Pax 1..n  Pax required.   @age 1 Integer Passenger age on the day of check-in.   @id 1 Integer Passenger id (starting at 1, this identifier is at room level).   Remarks 0..1  Any customer comments for the supplier to consider (see MetaData in order to verify if a supplier implements it).   Preferences/ 0..1  Preference filters at the option / general level.   Preferences/ Preference 1..n  Each filter of preference and its values.   @type 1  Type of preference allowed. See types allowed in PreferenceType further down this page.    ReservationRS Example \u0026lt;ReservationRS\u0026gt; \u0026lt;ProviderLocator\u0026gt;102\u0026lt;/ProviderLocator\u0026gt; \u0026lt;PropertyReservationNumber\u0026gt;HCN8273\u0026lt;/PropertyReservationNumber\u0026gt; \u0026lt;ResStatus\u0026gt;OK\u0026lt;/ResStatus\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;/ReservationRS\u0026gt;  ReservationRS Description    Element Number Type Description     ReservationRS 1  Root node.   ProviderLocator 1 String Booking ID in the Supplier¬¥s system   PropertyReservationNumber 0..1 String Booking Number in the property¬¥s system (see Metadata method in order to verify if a supplier implements it).   ResStatus 1 String reservation status (OK = confirmed, RQ = on request, CN = cancelled, UN = unknown.)   Price 0..1  Total price of this reservation (see MetaData in order to verify if a supplier implements it).   @currency 1 String Currency code.   @amount 1 Decimal Book Amount.   @binding 1 Boolean Identifies if is the price is binding (when true the sale price returned must not be less than the price informed.   @commission 1 Decimal Commission (-1 = not specified, 0 = net price, X = % of the commission that applies to the amount.   Remarks 0..1 String Any remarks about this reservation    Detailed description PreferenceType: The types that allow, the possible values are: - Smoker - NonSmoker - ExtraBed - Cradle - DoubleBed - TwinBeds - ContiguosRooms - Wedding - LateArrival - LateCheckOut - EarlyCheckIn - GroundFloor - TopFlor - WithoutVoucher\nResStatus:\nWhen making a reservation, there will be a field named ResStatus in the response indicating the status of the reservation. It can have four values: OK, RQ, CN and UN.\n OK: The reservation was completed with no problems. RQ: The reservation was completed but the product is still not available, so the reservation goes into a waiting list (Request). CN: The reservation was completed but due to a supplier error or a timeout the system will immediately cancel the reservation to prevent further possible errors. UN: The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown. It is the client\u0026rsquo;s responsibility to check if the booking is OK.  Important: be aware that you can receive an error and a reservation status OK in the same response, in this case the booking is confirmed. You should always consider the reservation status returned. Note: Keep the parameters in the valuation response to include them in the reservation request.\nBookings not confirmed: Only when the ResStatus = UN and an application error is also returned with type = 303 we can ensure the booking has not been confirmed in the supplier\u0026rsquo;s system.\n\u0026lt;ApplicationError\u0026gt; \u0026lt;type\u0026gt;303\u0026lt;/type\u0026gt; \u0026lt;description\u0026gt;Booking not confirmed\u0026lt;/description\u0026gt; \u0026lt;/ApplicationError\u0026gt; \u0026lt;ResStatus\u0026gt;UN\u0026lt;/ResStatus\u0026gt;  If you receive ResStatus = UN but don\u0026rsquo;t receive a 303 type application error then is the client\u0026rsquo;s responsibility to check if the booking is OK as we can\u0026rsquo;t ensure if the booking is confirmed or not.\nMerchantPay, LaterPay, CardBookingPay \u0026amp; CardCheckInPay\n PaymentOptions:\n MerchantPay: The payment is managed by the supplier.\n LaterPay: The payment is managed by the hotel. The customer will use a credit-card as a guarantee for the hotel and the payment will be completed at check in.\n CardBookingPay: The payment is managed by the supplier. The payment is effectuated at the time of booking.\n CardChekInPay: The payment is managed by the supplier. The payment is effectuated at check in in the hotel.\n  \u0026lt;PaymentType\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt;  If the payment is done by credit card, is it mandatory to specify the payment type and the credit card information in the XML request as in the example below:\n\u0026lt;PaymentType\u0026gt;LaterPay/CardBookingPay/CardCheckInPay\u0026lt;/PaymentType\u0026gt; \u0026lt;CardInfo\u0026gt; \u0026lt;CardCode\u0026gt;XX\u0026lt;/CardCode\u0026gt; \u0026lt;Number\u0026gt;XXXXXXXXXX\u0026lt;/Number\u0026gt; \u0026lt;Holder\u0026gt;XXXX\u0026lt;/Holder\u0026gt; \u0026lt;ValidityDate\u0026gt; \u0026lt;Month\u0026gt;XX\u0026lt;/Month\u0026gt; \u0026lt;Year\u0026gt;XX\u0026lt;/Year\u0026gt; \u0026lt;/ValidityDate\u0026gt; \u0026lt;CVC\u0026gt;XXX\u0026lt;/CVC\u0026gt; \u0026lt;/CardInfo\u0026gt;  DeltaPrice description applyBoth:\nDepending on the value of applyBoth:\n applyBoth =\u0026ldquo;false\u0026rdquo;: Indicates that one of the conditions (amount or percentage) has to meet the criteria before reservation. applyBoth =\u0026ldquo;true\u0026rdquo;: Indicates that the new price cannot exceed the amount or percentage indicated by the client.  An error will be returned if the new price does not abide to DeltaPrice. If DeltaPrice tag is not sent and the integration implements it, we assume that the price range is 0 and the process will continue (price is lower or equal to the price showed in valuation).\nThis field is implemented if it\u0026rsquo;s native to the supplier or if another availability/valuation request needs to be done in Reservation. In case the supplier blocks the option in valuation, reservation will be done automatically in reservation method. This information is available in the Static configuration of each supplier.\nPrice difference between the Reservation and Valuation methods We cannot guarantee that the price will be returned in Reservation, given that this is something which depends on the supplier, and unless they provide us the price in their response, there is no way for us to return it to you.\nIf the price returned in Reservation method is different than the one returned in the Valuation method, 4 cases could occur. Below, we have explained each of these cases and what should be done if either of them occur:\nCase 1:\nThe price in Reservation is lower than the price in Valuation. The selling price for the final customer will be the one in valuation, as this is the one that will be accepted by them at the time of booking. The final price that you should pay the supplier will be the price in Reservation.\nCase 2:\nThe price in Reservation is higher than the price in valuation:\nCase 2.1:\nThe supplier allows DeltaPrice and you allow a price change of, for example, up to ‚Ç¨10, indicating it in through our DeltaPrice field (explained in the previous section):\nValuation:\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;110\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;0\u0026quot;/\u0026gt;  Reservation:\n\u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;110\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;0\u0026quot;/\u0026gt;  When making reservation, you must pay the supplier ‚Ç¨110, given that you have decided not to lose the booking even though the price has increased with ‚Ç¨10 compared to Valuation.\nCase 2.2:\nThe supplier allows DeltaPrice and you DO NOT allow price change. In this case we will return an error, as you do not permit a higher reservation price than the one already established in Valuation.\nCase 2.3:\nThe supplier DOES NOT allow DeltaPrice. If the supplier returns a higher price in Reservation than he does in Valuation, then the difference should be reported, as you have not specified in any way that the price can be changed. In this case the supplier has to cover the price change.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/reservationmanagement/reservationread/",
	"title": "ReservationRead",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to retrieve detailed information about a specific Reservation\nRequest Format The request requires one of the following data depending on supplier:\n Locators: booking codes (this element contains two elements Client (client\u0026rsquo;s booking code) and Provider (supplier\u0026rsquo;s booking code), one or both will be required depending on the supplier) Currency: the currency code CreationDate: the booking date StardDate: the check-in date EndDate: the check-out date HotelCode: Hotel code  Response Format The result returns the full details of a booking.\nRemarks 180000 millisecond is the maximum amount of time permitted in our system before the connection is closed.\nReservationReadRQ Example \u0026lt;ReservationReadRQ\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;5356342\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;MGNZ12345\u0026lt;/Provider\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;Currency\u0026gt;EUR\u0026lt;/Currency\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2014\u0026lt;/EndDate\u0026gt; \u0026lt;CreationDate\u0026gt;17/01/2014\u0026lt;/CreationDate\u0026gt; \u0026lt;HotelCode\u0026gt;AAA\u0026lt;/HotelCode\u0026gt; \u0026lt;Holder title = \u0026quot;Miss\u0026quot; name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot;/\u0026gt; \u0026lt;/ReservationReadRQ\u0026gt;  ReservationReadRQ Description    Element Number Type Description     ReservationReadRQ 1  Root node.   Locators / 1  Information about the locators (it is mandatory to indicate either client or supplier\u0026rsquo;s locator).   Locators /Client 0..1 String Client locator.   Locators /Provider 0..1 String Supplier locator.   Currency 1 String Currency code.   StartDate 0..1 String Start date of booking.   EndDate 0..1 String End date of booking.   CreationDate 0..1 String Creation date of booking.   HotelCode 1 String Hotel code.   Holder 0..1  Holder of the booking.   @title 1 String Holder\u0026rsquo;s title. Possible values: Mr, Mrs, Miss, Ms.   @name 1  Holder\u0026rsquo;s name.   @surname 1  Holder\u0026rsquo;s surname.    ReservationReadRS Example \u0026lt;ReservationReadRS\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;2578478\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;10TTT31\u0026lt;/Provider\u0026gt; \u0026lt;Property\u0026gt;HCN8273\u0026lt;/Property\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Name\u0026gt;LEO\u0026lt;/Name\u0026gt; \u0026lt;Code\u0026gt;10\u0026lt;/Code\u0026gt; \u0026lt;CreationDate\u0026gt;17/12/2015\u0026lt;/CreationDate\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2016\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2016\u0026lt;/EndDate\u0026gt; \u0026lt;Holder name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot;/\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4582\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; description = \u0026quot;Standard..\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;120\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-07-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;72.40\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;TransactionStatus\u0026gt; \u0026lt;ComunicationStatus\u0026gt;OK\u0026lt;/ComunicationStatus\u0026gt; \u0026lt;RSStatus\u0026gt;EXISTE\u0026lt;/RSStatus\u0026gt; \u0026lt;ResStatus\u0026gt;OK\u0026lt;/ResStatus\u0026gt; \u0026lt;/TransactionStatus\u0026gt; \u0026lt;/ReservationReadRS\u0026gt;  ReservationReadRS Description    Element Number Type Description     ReservationReadRS 1  Root node.   Locators / 1  Information about the locators.   Locators /Client 0..1 String Client locator.   Locators /Provider 0..1 String Supplier locator.   Locators /Property 0..1 String Property locator(see Metadata method in order to verify if a supplier implements it).   Hotel / 0..1  Hotel reservation.   Hotel /Code 0..1 String Hotel Code.   Hotel /Name 0..1 String Hotel Name.   Hotel /City 0..1 String Hotel city.   Hotel /CreationDate 0..1 String Date of booking.   Hotel /StartDate 0..1 String Check-in date.   Hotel /EndDate 0..1 String Check out date.   Hotel /MealPlanCode 0..1 String Booking Mealplan code.   Hotel /Holder 0..1 String Reservation Holder .   @name 1 String Holder name.   @surname 1 String Holder surname.   Hotel /Price 1 String Price of the reservation.   @currency 1 String Displays the currency provided by the supplier   @amount 1 Decimal Total amount for the booking.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission (-1 = not specified), 0 = net price, X = % of the commission applied to the amount .   Hotel /Rooms / 0..1  List of rooms reserved   Hotel /Rooms /Room 1..n  Details of room reserved.   @id 0..1 String Identifier of the room.   @roomCandidateRefId 0..1 Integer Identifier of room candidate.   @code 0..1 String Room code.   @description 0..1 String Room description.   Hotel /RoomCandidates / 0..1  Rooms requested at the time of booking.   Hotel /RoomCandidates /RoomCandidate 1..n  Room required.   @id 0..1 Integer Id of the requested room (starting at 1).   RoomCandidates /RoomCandidate/Paxes /Pax 1..n  Pax required.   @age 0..1 Integer Passenger age on the day of check-in.   @id 0..1 Integer Id of the requested room (starting at 1).   Hotel /CancelPenaltiesCancelPenalties 0..1  Information of cancellation policies.   @nonRefundable 1 Boolean Indicate if this option is nonRefundable (true or false).   Hotel /CancelPenalties /CancelPenalty 0..n  Listing of cancellation penalties.   Hotel /CancelPenalties /CancelPenalty/HoursBefore 1 String Number of hours prior to arrival day in which this Cancellation policy applies.   Hotel /CancelPenalties /CancelPenalty/Deadline 1 String Date on UTC Standard TimeZone in which this Cancellation policy applies (ISO 8601 e.g: 2016-07-01T05:00:00Z)   Hotel /CancelPenalties /CancelPenalty/CalculatedDeadline 1 Boolean Indicate if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate -\u0026gt; true = has been calculated by XTG / false = bypass of supplier data without calculation   Hotel /CancelPenalties /CancelPenalty/Penalty 1  Contains the value to apply.   @type 1 String Type of penalty Possible values: \u0026ldquo;Noches\u0026rdquo; (nights) , \u0026ldquo;Porcentaje\u0026rdquo; (percentage) ,\u0026ldquo;Importe\u0026rdquo; (price value).   @paymentType 1 String Indicates payment type.   @currency 1 String Currency code.   Hotel /Remarks 0..1 String Remarks.   TransactionStatus / 1 Trans. Status.   TransactionStatus /ComunicationStatus 1 String Status communication (OFFLINE, OK and KO).   TransactionStatus /RSStatus 1 String Response status - DESCONOCIDO (Unknown), EXISTE (Exists), EXISTECANCELADA (exists but it\u0026rsquo;s cancelled), NO_EXISTE (Does not exist).   TransactionStatus /ResStatus 1 String Status booking (OK = confirmed, RQ = on request, CN = cancelled, UN = unknown).    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/reservationmanagement/reservationread/",
	"title": "ReservationRead",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to retrieve detailed information about a specific Reservation\nRequest Format The request requires one of the following data depending on supplier:\n Locators: booking codes (this element contains two elements Client (client\u0026rsquo;s booking code) and Provider (supplier\u0026rsquo;s booking code), one or both will be required depending on the supplier) Currency: the currency code CreationDate: the booking date StardDate: the check-in date EndDate: the check-out date HotelCode: Hotel code  Response Format The result returns the full details of a booking.\nRemarks 180000 millisecond is the maximum amount of time permitted in our system before the connection is closed.\nReservationReadRQ Example In the request for this call it is necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the information in the section \u0026lsquo;Common elements\u0026rsquo;.\n\u0026lt;ReservationReadRQ\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;5356342\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;MGNZ12345\u0026lt;/Provider\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;Currency\u0026gt;EUR\u0026lt;/Currency\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2014\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2014\u0026lt;/EndDate\u0026gt; \u0026lt;CreationDate\u0026gt;17/01/2014\u0026lt;/CreationDate\u0026gt; \u0026lt;HotelCode\u0026gt;AAA\u0026lt;/HotelCode\u0026gt; \u0026lt;Holder title = \u0026quot;Miss\u0026quot; name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot;/\u0026gt; \u0026lt;/ReservationReadRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nReservationReadRQ Description    Element Number Type Description     ReservationReadRQ 1  Root node.   Locators / 1  Information about the locators (it is mandatory to indicate either client or supplier\u0026rsquo;s locator).   Locators /Client 0..1 String Client locator.   Locators /Provider 0..1 String Supplier locator.   Currency 1 String Currency code.   StartDate 0..1 String Start date of booking. Format dd/MM/yyyy   EndDate 0..1 String End date of booking. Format dd/MM/yyyy   CreationDate 0..1 String Creation date of booking. Format dd/MM/yyyy   HotelCode 1 String Hotel code.   Holder 0..1  Holder of the booking.   @title 1 String Holder\u0026rsquo;s title. Possible values: Mr, Mrs, Miss, Ms.   @name 1  Holder\u0026rsquo;s name.   @surname 1  Holder\u0026rsquo;s surname.    ReservationReadRS Example \u0026lt;ReservationReadRS\u0026gt; \u0026lt;Locators\u0026gt; \u0026lt;Client\u0026gt;2578478\u0026lt;/Client\u0026gt; \u0026lt;Provider\u0026gt;10TTT31\u0026lt;/Provider\u0026gt; \u0026lt;Property\u0026gt;HCN8273\u0026lt;/Property\u0026gt; \u0026lt;/Locators\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Name\u0026gt;LEO\u0026lt;/Name\u0026gt; \u0026lt;Code\u0026gt;10\u0026lt;/Code\u0026gt; \u0026lt;CreationDate\u0026gt;17/01/2016\u0026lt;/CreationDate\u0026gt; \u0026lt;StartDate\u0026gt;28/01/2016\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/01/2016\u0026lt;/EndDate\u0026gt; \u0026lt;Holder name = \u0026quot;Test11\u0026quot; surname = \u0026quot;TestAp11\u0026quot;/\u0026gt; \u0026lt;Price currency = \u0026quot;EUR\u0026quot; amount = \u0026quot;36.20\u0026quot; binding = \u0026quot;false\u0026quot; commission = \u0026quot;-1\u0026quot;/\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room id = \u0026quot;4582\u0026quot; roomCandidateRefId = \u0026quot;1\u0026quot; description = \u0026quot;Standard..\u0026quot;/\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;CancelPenalties nonRefundable = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;CancelPenalty\u0026gt; \u0026lt;HoursBefore\u0026gt;120\u0026lt;/HoursBefore\u0026gt; \u0026lt;Deadline\u0026gt;2016-01-01T05:00:00Z\u0026lt;/Deadline\u0026gt; \u0026lt;CalculatedDeadline\u0026gt;false\u0026lt;/CalculatedDeadline\u0026gt; \u0026lt;Penalty type = \u0026quot;Importe\u0026quot; paymentType = \u0026quot;MerchantPay\u0026quot; currency = \u0026quot;EUR\u0026quot;\u0026gt;72.40\u0026lt;/Penalty\u0026gt; \u0026lt;/CancelPenalty\u0026gt; \u0026lt;/CancelPenalties\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;TransactionStatus\u0026gt; \u0026lt;ComunicationStatus\u0026gt;OK\u0026lt;/ComunicationStatus\u0026gt; \u0026lt;RSStatus\u0026gt;EXISTE\u0026lt;/RSStatus\u0026gt; \u0026lt;ResStatus\u0026gt;OK\u0026lt;/ResStatus\u0026gt; \u0026lt;/TransactionStatus\u0026gt; \u0026lt;/ReservationReadRS\u0026gt;  ReservationReadRS Description    Element Number Type Description     ReservationReadRS 1  Root node.   Locators / 1  Information about the locators.   Locators /Client 0..1 String Client locator.   Locators /Provider 0..1 String Supplier locator.   Locators /Property 0..1 String Property locator(see Metadata method in order to verify if a supplier implements it).   Hotel / 0..1  Hotel reservation.   Hotel /Code 0..1 String Hotel Code.   Hotel /Name 0..1 String Hotel Name.   Hotel /City 0..1 String Hotel city.   Hotel /CreationDate 0..1 String Date of booking. Format dd/MM/yyyy   Hotel /StartDate 0..1 String Check-in date. Format dd/MM/yyyy   Hotel /EndDate 0..1 String Check out date. Format dd/MM/yyyy   Hotel /MealPlanCode 0..1 String Booking Mealplan code.   Hotel /Holder 0..1 String Reservation Holder .   @name 1 String Holder name.   @surname 1 String Holder surname.   Hotel /Price 1 String Price of the reservation.   @currency 1 String Displays the currency provided by the supplier   @amount 1 Decimal Total amount for the booking.   @binding 1 Boolean Identifies if is the price is binding (When true the sale price returned must not be less than the price informed).   @commission 1 Decimal Commission (-1 = not specified), 0 = net price, X = % of the commission applied to the amount .   Hotel /Rooms 0..1  List of rooms reserved   Hotel /Rooms/Room 1..n  Details of room reserved.   @id 0..1 String Identifier of the room.   @roomCandidateRefId 0..1 Integer Identifier of room candidate.   @code 0..1 String Room code.   @description 0..1 String Room description.   Hotel /RoomCandidates / 0..1  Rooms requested at the time of booking.   Hotel /RoomCandidates /RoomCandidate 1..n  Room required.   @id 0..1 Integer Id of the requested room (starting at 1).   RoomCandidates /RoomCandidate/Paxes/Pax 1..n  Pax required.   @age 0..1 Integer Passenger age on the day of check-in.   @id 0..1 Integer Id of the requested room (starting at 1).   Hotel /CancelPenaltiesCancelPenalties / 0..1  Information of cancellation policies.   @nonRefundable 1 Boolean Indicate if this option is nonRefundable (true or false).   Hotel /CancelPenalties /CancelPenalty 0..n  Listing of cancellation penalties.   Hotel /CancelPenalties /CancelPenalty/HoursBefore 1 String Number of hours prior to arrival day in which this Cancellation policy applies.   Hotel /CancelPenalties /CancelPenalty/Deadline 1 String Date on UTC Standard TimeZone in which this Cancellation policy applies (ISO 8601 e.g: 2016-07-01T05:00:00Z)   Hotel /CancelPenalties /CancelPenalty/CalculatedDeadline 1 Boolean Indicate if the Deadline is returned by the supplier or it\u0026rsquo;s been calculated by TravelGate -\u0026gt; true = has been calculated by XTG / false = bypass of supplier data without calculation   Hotel /CancelPenalties /CancelPenalty/Penalty 1  Contains the value to apply.   @type 1 String Type of penalty Possible values: \u0026ldquo;Noches\u0026rdquo; (nights) , \u0026ldquo;Porcentaje\u0026rdquo; (percentage) ,\u0026ldquo;Importe\u0026rdquo; (price value).   @paymentType 1 String Indicates payment type.   @currency 1 String Currency code.   Hotel /Remarks 0..1 String Remarks.   TransactionStatus / 1 Trans. Status.   TransactionStatus /ComunicationStatus 1 String Status communication (OFFLINE, OK and KO).   TransactionStatus /RSStatus 1 String Response status - DESCONOCIDO (Unknown), EXISTE (Exists), EXISTECANCELADA (exists but it\u0026rsquo;s cancelled), NO_EXISTE (Does not exist).   TransactionStatus /ResStatus 1 String Status booking (OK = confirmed, RQ = on request, CN = cancelled, UN = unknown).    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/search_by_destination/",
	"title": "Search by destination",
	"tags": [],
	"description": "Enables search query to request per destinations by converting destination codes to hotel codes",
	"content": "  const apiKeyJO = \"q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\"; const apiKeyDC = \"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\"; $(document).ready(main); function main() { const q = '[{\\x22apikey\\x22:\\x228626cf56-e364-4fd1-4fe0-311e23ac6355\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/74a01699ccc7f7a8f043f6583e64fcde\\/raw\\x22,\\x22divname\\x22:\\x22div_admin_destinations\\x22},{\\x22apikey\\x22:\\x225067eb7a-6020-4621-79d3-1c5cd8c1d27b\\x22,\\x22gist\\x22:\\x22https:\\/\\/gist.githubusercontent.com\\/tgx-bot\\/f820c0508f7d47432eaad34823d426e0\\/raw\\x22,\\x22divname\\x22:\\x22div_searchbydestinations\\x22}]'; const queries = JSON.parse(q); for (const q of queries) { iterateQueries(q) } } function iterateQueries(q) { if(!q.gist.includes('http')) return; $.get(q.gist, function (data) { q.data = data; renderGist(q); }); } function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; console.log(parameters.query); updateURL(); } function onEditVariables(newVariables) { parameters.variables = newVariables; updateURL(); } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; updateURL(); } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { const token = q.apikey; return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': token ? 'Apikey ' + token : null }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.divname), _ = { const element = $(`#${q.divname}`); const button = $(element).find('button.execute-button')[0] $(element).append(button); } ); }   #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }  Search by destination is a feature to search by destinations codes in the Search query.\nWhat it does In order to use it, codes must be sent in \u0026lsquo;CriteriaSearch\u0026rsquo;. Destination codes will be converted to hotel codes, then merged with the hotel codes sent in criteria if any, and finally the request will be sent to the supplier. In order to achieve the destination to hotel conversion, a source must be specified in a plugin.\nHow to use it Use this plugin by adding it to the settings in your HotelX Search Query.\nThe conversion must be done at the \u0026lsquo;REQUEST\u0026rsquo; step, either in type \u0026lsquo;PRE_STEP\u0026rsquo; or \u0026lsquo;POST_STEP\u0026rsquo;. The parameter with key \u0026ldquo;accessID\u0026rdquo; is mandatory and is the access used to convert destinations to hotel from its hotel list, which means that the hotel codes obtained are in the same context as the access.\nQuery get hotels \u0026amp; destination Get hotels \u0026amp; destinations\nQuery execute plugin search by destination Plugin search by destination\n{ \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;REQUEST\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;POST_STEP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;search_by_destination\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;accessID\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;x\u0026quot; } ] } ] } }  Example query destinations \u0026amp; hotels by access First of all, you need to know destinations by access.   \nExample query with execution plugin search by destinations    ### File format\nNo files are needed in order to use this plugin.\n"
},
{
	"uri": "https://travelgatex.com/travelgatex/security/",
	"title": "Security",
	"tags": [],
	"description": "Authorization &amp; Authentication",
	"content": "Providing secure access to our capabilities and data is a core priority for us.\nOur security measures include: A test API key that allows anyone to make queries and experiment with our APIs without exposing private data or enabling anyone to corrupt or change our data Confirmation that new businesses have signed appropriate contracts before they are provided with access to supplier databases Authentication through API tokenization Use of JSON web tokens Identity and Access Management control for registered users to that you can administer how your developers are able to access TravelgateX functionalities Support for creating and maintaining internal security policies Use of rate limiting and error messages where usage is outside our normal business experience.\n  Overview Learn platform security\n     Identity and access management Advanced security management\n    "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/specific-stop-sales/",
	"title": "Specific stop sales",
	"tags": [],
	"description": "Define specific stop sales by different conditions",
	"content": " Overview The Specific Stop Sales specify a series of condition for the product to be exclude of sale. These stops sales work as the general stop sales but with more conditions and configurations.\nIn the table you will see the conditions on which each stop sale applies, such as: Agencies, Hotels, Markets, Refundable, Check-in Dates ‚Ä¶.\nIn the first and second column is shown the code and name rule. The third column contains the pricing applied and in the Actions column some buttons where you will be able to:\n Information: Check last update and stop sales comments. Edit the stop sale. Delete the stop sale.  \nIf in one of the columns you have a button, it means that you have configurated a list of values, and the condition will be fulfilled if it has at least one of those values. To see the values that are applied, you can click the button and a modal will be displayed showing them. \n\nCreate and configurate a new rule To create a specific selling pricing rule in this section, we have to use the Create New Rule button and a modal similar to the following image will be displayed:\n\nIn the Basic tab you should add basic information about the stop sales as the name to identify it and rate conditions as package, refundable or its price type. You can also select from this tab if the stop sale should be applied to all agencies and providers or indicate an specific list of each group. A comment is mandatory to create the stop sale.\nIn the Advanced tab you can choose some additional settings that the system will consider to apply the stop sale, such as a specific list of mealplans, markets, check-in dates or booking dates.\nIn the Hotels tab, you can select a list of hotels, hotel country or city, chains and destinations to decide to which this rule applies.\nOutdated Rules There are some stop sales that can only be applied to certain dates, for example, if you have created a specific stop sale applying to check-in dates in December. These stop sales must be gradually eliminated so that inactive rules do not accumulate and in order to streamline operations.\nWhen you have expired stop sales, its rows will be displayed in red and the following message will be displayed in the extranet:\n\nIf you select the trash button, all the stop sales rules whose date has already passed will be eliminated.\n "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/rules/specific-stop-sales/",
	"title": "Specific stop sales",
	"tags": [],
	"description": "Define specific stop sales by different conditions",
	"content": " Specific Stop Sales Considerations It is an absolute load, so bear in mind these considerations:\n If all the data on the file is correct then the existing definition of General Stop Sales is removed and file\u0026rsquo;s data is inserted into the system to define the new Specific Stop Sales.\n If there is any problem with the file or its data then the load is cancelled and the existing definition of Specific Stop Sales is not removed.\n  \nSpecifications  File name: Rules_SpecificStopSales.csv.\n Each line represents a unique specific stop sale and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line, by default fields and subfields are separated using the characters #, | and ;. None of these characters can\u0026rsquo;t be used inside data because fields and subfields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nFor the complexity of the data the fields are not always directly unitary data many fields are complexe data so they have to be divided in other subfields.\nThe fields are separated by # and internally, if it needs it, its subfields are separated by |. And also if a subfield is a list of values it also has its values separated by ;.\n\n   Case Example Description     Field without data \u0026hellip;##\u0026hellip; We have the separator # and nothing inside.   Field directly with data and no subfields \u0026hellip;#12#\u0026hellip; It is just the value 12.   Field with complex data (not needed) \u0026hellip;#0#\u0026hellip; The type is 0 and it does not need of any other data so there is no more information (it has not got any more subfield).   Field with complex data (simple value) \u0026hellip;#1 AS#\u0026hellip;   Field with complex data (simple values) \u0026hellip;#1 10-08-2018   Field with complex data (list) \u0026hellip;#1 AS;XF;TR#\u0026hellip;    \nControl Lines  Control lines allow us to determine how the content of the file has to be interpreted.\n This type of lines do not contain data, they contain orders for the process and these orders take effect from the control line forward, so control lines should be placed at the begining of the file (and after any header).\n Each control operation has to be given on a separate line (one line one control operation).\n  \n   Control Description     @CTRL:separator= With the control line @CTRL:separator= followed by a character or string it can be defined the fields separator to be used, overwriting the default one or any previous definition. The specified character or string cannot be used inside data because fields would be gathered in a wrong way. Example of line to set # as the fields separator: @CTRL:separator=#.   @CTRL:separatorsub= With the control line @CTRL:separatorsub= followed by a character or string it can be defined the subfields separator to be used, overwriting the default one or any previous definition. The specified character or string cannot be used inside data because fields and subfields would be gathered in a wrong way. Example of line to set - as the subfields separator: @CTRL:separatorsub=-.   @CTRL:separatorlist= With the control line** @CTRL:separatorlist=** followed by a character or string it can be defined the separator to be used with list items, overwriting the default one or any previous definition. The specified character or string cannot be used inside list data because list items would be gathered in a wrong way. Example of line to set # as the list items separator: @CTRL:separatorlist=#.   @CTRL:remove With the control line @CTRL:remove we order the process to remove all the specific stop sale rules that are currently on the system. See Remove Data. Example of line: @CTRL:remove.    \nData Line fields    Position Mandatory Field Subfield Position Mandatory Data Type Description/Value     0 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret agencies or if it applies to all agencies. 0 = All agencies.1 = List of agencies: in this case it is mandatory to receive a list of items.   0 Yes 1 - list of strings List of agency codes.   1 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines the type of Cancellation Policies. 0 = All (NRF + RF)1 = Only No refundable (NRF)2 = Only Refundable (RF)   2 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines the Rate Type. 0 = All (B2C + B2B)1 = Only B2C2 = Only B2B   3 Yes 0 Yes enumeration:0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret providers or if it applies to all providers or only to direct or third party providers. ul\u0026gt;0 = All providers1 = List of items: in this case it is mandatory to receive a list of items.2 = Only all Third Party providers3 = Only all Direct providers   3 Yes 1 - list of strings List of provider codes.   4 Yes 0 Yes enumeration:0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret hotels (and from countries, cities, chains or destinations) or if it applies to all hotels. 0 = All hotels1 = List of hotels2 = Hotels from a list of countries3 = Hotels from a list of cities4 = Hotels from a list of chains5 = Hotels from a list of destinations6 = Hotels from a list of groups of destinations   4 Yes 1 - list of strings List of codes: hotels, countries, cities, chains or destinations (just one type).   5 Yes 0 Yes enumeration:0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret markets or if it applies to all markets. 0 = All markets.1 = List of markets: in this case it is mandatory to receive a list of items.   5 Yes 1 - list of strings List of market codes.   6 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a list of concret meal plans or if it applies to all meal plans. 0 = All meal plans.1 = List of meal plans: in this case it is mandatory to receive a list of items.   6 Yes 1 - list of strings List of meal plans codes.   7 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a concret range of check-in dates or if it applies to any date. 0 = All check-in dates.1 = Range of check-in dates.   7 Yes 1 - date Check-in date: from (inclusive). Only the date is used. Time is ignored   7 Yes 2 - date Check-in date: to (inclusive).Only the date is used. Time is ignored.   8 Yes 0 Yes enumeration: 0,1,2,\u0026hellip; Defines if the rule is specific for a concret range of booking dates or if it applies to any date. 0 = All booking dates.1 = Range of booking dates.   8 Yes 1 - date Booking date: from (inclusive). Only the date is used. Time is ignored.   8 Yes 2 - date Booking date: to (inclusive).Only the date is used. Time is ignored.   9 Yes 0 Yes string Description of the rule.   10 - 0 - integer Defines the release. A zero value indicates that there is no release applied.    Notes  A decimal value has to be set using \u0026lsquo;.\u0026rsquo; as separator. A boolean value can be set using false/true or 0/1. A date value has to be set with the format \u0026ldquo;yyyy-MM-dd\u0026rdquo; (i.e. \u0026ldquo;2018-05-12\u0026rdquo;). An hour value has to be set with an integer between 0 and 23. Country and market are in ISO 3166-1 alpha-2 code format (i.e. \u0026ldquo;ES\u0026rdquo;, \u0026ldquo;PT\u0026rdquo;, \u0026ldquo;FR\u0026rdquo;,\u0026hellip;).  Remove Data If it is needed there is the possibility to remove all the temporary pricing rules that are currently on the system.\nTo do this we cannot use the previous line fields specifications as they are used to set data, not to remove it.\n We have to use the same file name. The file has to be composed of one line with the following control line: @CTRL:remove Any blank line will be skipped (without generating any error). If there is any other line with data on the file then an error will be generated and no data will be removed from the system   "
},
{
	"uri": "https://travelgatex.com/getting-started/learning-graphql/thinking_in_graphql/",
	"title": "Thinking in GraphQL",
	"tags": [],
	"description": "",
	"content": " A Paradigm Shift GraphQL is a query language, and as such it does exactly that: it queries servers in order to get results back. With GraphQL, you can choose exactly what data you want to retrieve. GraphQL is a typed query language. That means that it has a lot of predictability, as each piece of data has its own type, so we know what sort of data we will be getting back. This is something we really appreciate, especially since we deal with so many third party APIs, and often we have no control of what\u0026rsquo;s going on on the other side! At TravelgateX we take away all of those headaches, by offering you an integration platform to 600+ suppliers, all accessible via a single GraphQL endpoint.\nUnderstanding GraphQL Schemas In GraphQL, the API specifications are called schemas. A GraphQL Schema is a contract between the client and the server. It defines how clients and servers can talk to each other and sets out what they expect from each other. This way, both know exactly what they can and cannot send to each other and what they\u0026rsquo;ll get in response to that.\nThere are a number of ways you can understand our Schema: You can see all elements of our data model by clicking on the green Schema button on the right hand side of our API playground. You can review our Reference Documentation which provides a page by page analysis of all Objects and fields used in our Schema. You can see how all of the data fields are connected by exploring the GraphQL Voyager tool.\nAt TravelgateX we would like to give a hat tip to API Guru and their excellent tool graphql-faker. This helped us write the schema in one window while seeing the results in another window. Besides being a super cool feature, this helped us think through each and every node in our data Schema. Building Queries You can test a Query in the API playground\nA query has the following components: Operation type: When searching data in GraphQL, we use Query to indicate the operation type (see below for Mutation operation type) Operation name: (optional) You can give your Query a name so that it is easy to find in later code. This is the similar to creating a function in other programming languages. Variable definitions: You can set what variables need to be completed in order to run your query. You declare a name for the variables you will use by using a $. A common variable name we use is $criteriaSearch. After declaring a variable name, use the colon and then describe what inputs are needed. You can choose from some of the input objects we have already created. For example, we often use the HotelCriteriaSearchInput input object. This input object requires the following fields as mandatory (indicate by a !): Check in date, check out date, number of hotels to be returned in a response, and number of people to occupy the rooms. You can also add language, currency, nationality and market fields as variables to this input object, for more filtered responses. Selection set: After the variables have been defined, you can use the { brackets to start listing what objects you want to query to get the data you need. Each selection set starts with a { and ends with a }. You can nest (indent) these selection sets so it is easier to read a query. Response: Once you have completed defining your query, you will receive a response in JSON format. This will be nested as well, so it is easier to read.\nFurther reading We recommend the following resources to learn more about making GraphQL queries: The Anatomy of a GraphQL query by Sashko Stubailo GraphQL explained by Jonas Helfer Queries and Mutations by GraphQL.org\nBuilding Mutations You can test a Mutation in the API playground. We recommend that you work through our example HotelX mutation to book a hotel.\nA query has the following components: Operation type: When searching data in GraphQL, we use Mutation to indicate the operation type, that is, we are going to change some data on the server Operation name: (optional) You can give your Mutation a name so that it is easy to find in later code. This is similar to creating a function in other programming languages. Variable definitions: You can set what variables need to be completed in order to run your mutation. You declare a name for the variables you will use by using a $. A common variable name we use is $bookInput. After declaring a variable name, use the colon and then describe what inputs are needed. You can choose from some of the input objects we have already created. For example, we often use the HotelBookInput input object. We added an ! in our example. The ! in GraphQL means it is mandatory. So while only three fields of the HotelBookInput are usually mandatory, by adding the ! to our variable definition, we have made all input object fields mandatory. Selection set: After the variables have been defined, you can use the { brackets to start listing what objects you want to query to get the data you need. Each selection set starts with a { and ends with a }. You can nest (indent) these selection sets so it is easier to read a query.  Response: Once you have completed defining your mutation, you will receive a response in JSON format. This will be nested as well, so it is easier to read. Look for the field Status and make sure it has OK to confirm that the data has been added/updated/deleted.\n"
},
{
	"uri": "https://travelgatex.com/alerts-x/howtos/howto-update-alerts/",
	"title": "Update Alert",
	"tags": [],
	"description": "How to update your alerts",
	"content": " This page shows you how to update an alert using API or TravelgateX.\nHow to request To update an alert you should input the alert code. Only data which needs to be updated needs to be input.\nBelow are shown examples for different casuistry:\n       #tab-holder { transform: scale(0); position: absolute; } #tab-holder.show-tabs { transform: scale(1); position: initial; } ul.tab-pannel-nav { margin-bottom: -32px; } ul.tabs { border-bottom: 1px solid #dee2e6; } li.tab { margin-bottom: -6px; } li.tab, li.tablabel { cursor: pointer; } li.tablabel { border: 1px solid transparent; border-top-left-radius: .25rem; border-top-right-radius: .25rem; display: block; padding: .5rem 1rem; border-color: #e9ecef #e9ecef #dee2e6; } li.tab:hoverlabel, li.tab.activelabel { background-color: #ceddec; } .display { max-height: 70vh; overflow: auto; } .tab-panel, .display { transform: scale(0); position: absolute; } .active-tab-panel, .display.active { transform: scale(1) !important; position: initial !important; } .graphiql.display { position: relative; z-index: 0; margin: 3.3rem 0 3.3rem 0; } .explanation { margin-left: 2rem; margin-bottom: 1.5rem; } div.graphiql-display { position: relative; } div.graphiql.displaybutton, div.graphiql-displaybutton { width: 47.5px !important; height: 47.5px !important; background-color: #b6bbbf !important; border: none; border-radius: 50%; cursor: pointer; margin: 0; padding: 0; position: absolute; top: 100px; left: 50%; z-index: 1004; transform: translateX(-37%); } div.graphiql.displaybutton svg, div.graphiql-displaybutton svg { fill: #fff !important; width: 30px; height: 28px; } div.graphiql.displaybutton:hover { background-color: #98a0a6 !important; } div.graphiql.displaybutton:focus { outline: none; } div.topBarWrap, div.variable-editor { display: none !important; } div.CodeMirror-gutter.CodeMirror-foldgutter { width: 1px; padding: 0 !important; } div.CodeMirror-gutter-wrapper { display: none; } #pulse-holder { width: 100px; height: 100px; display: inline-block; cursor: pointer; left: 50%; top: 50%; position: relative; transform: translate(-50%); } .pulse { width: 1px; height: 1px; top: 50%; left: 50%; position: absolute; border-radius: 50%; animation: pulse 3s infinite; } .pulse:hover { animation: none; } div#pulse-holderimg { width: 100%; animation: rotation 2s infinite linear; } div.query-editor div.CodeMirror-sizer { margin-left: 0 !important; padding-left: 2rem; } div.query-editor div.CodeMirror-gutters { display: none; } div.query-editordiv.CodeMirror { background-color: #F5F6F6 !important; } div.result-windowdiv.CodeMirror { background-color: #F0F2F2 !important; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(84, 145, 242, 0.4); } 85% { box-shadow: 0 0 0 60px rgba(84, 145, 242, 0.1); } 100% { box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.1); } } @keyframes rotation { from { transform: rotate3d(0, 0, 0, 0deg); } to { transform: rotate3d(0, 1, 0, 359deg); } } .queryWrap { width: 50%; } .CodeMirror-sizer { max-width: auto !important; min-width: auto !important; } .graphiql-container .CodeMirror { position: relative !important; }   const token = null ; const default_user = \"\"; const gists = [{\"ak\":\"5067eb7a-6020-4621-79d3-1c5cd8c1d27b\",\"g\":\"0536613ed120dac66dd14cefcec85921\",\"n\":\"windows update\",\"o\":[\"graphiql\"],\"u\":\"tgx-bot\"}]; $(document).ready(main); function main() { const tabsText = $('#tabsText').text(); const promises = [] for (const gist of gists) { if (gist.g) { const tabLI = `${gist.n} `; $('#tabMenu').append(tabLI); var substring = tabsText.indexOf(gist.g) !== -1 ? tabsText.substring( tabsText.indexOf(gist.g) + 1 + gist.g.length, tabsText.lastIndexOf(gist.g) - 1 ) : ''; const text = `${substring.trim() ? substring.split('\\n').join('\n') : ''}`; const pannelTabs = []; for (const option of gist.o) { pannelTabs.push(`${option}`) } const tab = `${text} ${pannelTabs.join('')} ${(gist.o || []).includes('graphiql') ? \"\" : \"\"} ${(gist.o || []).includes('curl') ? \"\" : \"\"} ${(gist.o || []).includes('other') ? \"\" : \"\"}  `; $('#tabContent').append(tab); promises.push(iterateQueries(gist)); } } Promise.all(promises).then(_ = { $.each($('#tabContent  div'), (i, elem) = { const button = $(elem).find('button.execute-button').first(); $(elem).find('.graphiql.display').first().append(button); }); $('#tabMenu  li  label').first().parent().toggleClass('active'); $('#tabContent  div').first().toggleClass('active-tab-panel'); $.each($('.general-display'), (i, elem) = { $(elem).children('.default-display').first().removeClass('default-display').toggleClass('active'); }); $.each($('.tab-pannel-nav'), (i, elem) = { $(elem).children().on('click', function () { $(this).siblings().removeClass('active'); $(this).toggleClass('active'); const tabClass = '.' + $(this).children().first().text(); const tab = $(this).parent().next().children(tabClass).first(); tab.siblings().removeClass('active'); tab.toggleClass('active'); }); $(elem).children('.default-tab').first().toggleClass('active'); }); $('#tabMenu  li  label').on('click', function () { $(this).parent().siblings().removeClass('active'); $(this).parent().toggleClass('active'); const tab = $('#' + $(this).attr('for')); tab.siblings().removeClass('active-tab-panel'); tab.toggleClass('active-tab-panel'); }); $('#tab-holder').addClass('show-tabs'); $('#pulse-holder').hide(); }); } function iterateQueries(gist) { const url = \"https://gist.githubusercontent.com/\" + (gist.u || default_user) + \"/\" + gist.g + \"/raw\"; return new Promise(resolve = { $.get(url, function (data) { const replaceValue = '¬ø$?TEST_LOCATOR¬ø$?'; let refinedData = data.replace(new RegExp(escapeRegExpString(replaceValue), 'g'), (+new Date()).toString()); renderGist({ gist: gist, data: refinedData }); resolve(); }); }) } function escapeRegExpString(string) { return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$\u0026') }; function renderGist(q) { var fetchURL = 'https://api.travelgatex.com'; var search = window.location.search; var parameters = {}; search.substr(1).split('\u0026').forEach(function (entry) { var eq = entry.indexOf('='); if (eq = 0) { parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1)); } }); parameters.variables = ''; const formattedQuery = q.data; parameters.query = formattedQuery; if (parameters.variables) { try { parameters.variables = JSON.stringify(JSON.parse(parameters.variables), null, 2); } catch (e) { } } function onEditQuery(newQuery) { parameters.query = newQuery; } function onEditVariables(newVariables) { parameters.variables = newVariables; } function onEditOperationName(newOperationName) { parameters.operationName = newOperationName; } function updateURL() { var newSearch = '?' + Object.keys(parameters).filter(function (key) { return Boolean(parameters[key]); }).map(function (key) { return encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]); }).join('\u0026'); history.replaceState(null, null, newSearch); } function graphQLFetcher(graphQLParams) { return fetch(fetchURL, { method: 'post', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': q.gist.ak ? 'Apikey ' + q.gist.ak : token }, body: JSON.stringify(graphQLParams), }).then(function (response) { return response.text(); }).then(function (responseBody) { try { return JSON.parse(responseBody); } catch (error) { return responseBody; } }); } ReactDOM.render( React.createElement(GraphiQL, { fetcher: graphQLFetcher, query: parameters.query, variables: parameters.variables, operationName: parameters.operationName, onEditQuery: onEditQuery, onEditVariables: onEditVariables, onEditOperationName: onEditOperationName }), document.getElementById(q.gist.g).querySelector('div.graphiql.display') , _ = { } ); } \n"
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-speed/log/legacy/",
	"title": "Speed",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/categorylist/",
	"title": "CategoryList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns a list of categories (codes and descriptions) used in HotelList and DescriptiveInfo.\nRequest Format The request does not require any elements empty request.\nResponse Format The result returns a list of Category .\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nCategoryListRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section.\n\u0026lt;CategoryListRQ\u0026gt; \u0026lt;/CategoryListRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nCategoryListRQ Description    Element Number Type Description     CategoryListRQ 1  Root node.    CategoryListRS Example \u0026lt;CategoryListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Categories\u0026gt; \u0026lt;Category\u0026gt; \u0026lt;Code\u0026gt;3*\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;3 stars\u0026lt;/Name\u0026gt; \u0026lt;/Category\u0026gt; \u0026lt;Category\u0026gt; \u0026lt;Code\u0026gt;3L\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;3 keys\u0026lt;/Name\u0026gt; \u0026lt;/Category\u0026gt; ... \u0026lt;Category/\u0026gt; \u0026lt;/Categories\u0026gt; \u0026lt;/CategoryListRS\u0026gt;  CategoryListRS Description    Element Number Type Description     CategoryListRS /UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   CategoryListRS /Categories 1  Root node, list of categories.   Category / 1..n  Category.   Category /Code 1 String Code.   Category /Name 1 String Name.    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/api-reference/codelist/credit-cards/",
	"title": "Credit Cards Codes",
	"tags": [],
	"description": "List of Credit Cards Codes",
	"content": "   Codes Names     VI Visa   AX American Express   BC BC Card   CA MasterCard   CB Carte Blanche   CU China Union Pay   DS Discover   DC Diners Club   T Carta Si   R Carte Bleue   N Dankort   L Delta   E Electron   JC Japan Credit Bureau   TO Maestro   S Switch   EC Electronic Cash   EU EuroCard   TP Universal air travel card   OP optima   ER Air Canada/RnRoute   XS Access   O Others    "
},
{
	"uri": "https://travelgatex.com/travelgatex/data-automation/",
	"title": "Data Automation",
	"tags": [],
	"description": "Automate bulk data operations",
	"content": " Bulk Data Automation Several of our TravelgateX API products use your data in order to perform tasks.\nFor example, your application may use certain field names to describe rooms, hotel amenities, and rates. These need to be matched to field names for your suppliers.\nYou can upload your data to our platform by: - Uploading it via SFTP or - Changing data via a mutation.\nYou can decide what is the best way for you to get your updated data into our servers.\nOur APIs have been built from the ground up with performance in mind. That means we must store data inside the application in order to keep the response time to a minimum.\nThe data we must store following specificitations:\nHotelX  Mappings Custom hotel lists    Uploading Strategies How to Upload data\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "In this page you can download a Postman project where you will find an example of each request from TravelgateX API with the connectivity already configured.\nOnly changes needed are the endpoint and the configuration in the requests:\n  You can download the Postman example project here\nExample of request the seller will receive from TravelgateX system:\nPost headers:\nContent-Type: text/xml; charset=utf-8 Accept: application/xml Expect: 100-continue Accept-Encoding: gzip Connection: Keep-Alive  Post body:\n\u0026lt;AvailRQ\u0026gt; \u0026lt;timeoutMilliseconds\u0026gt;24700\u0026lt;/timeoutMilliseconds\u0026gt; \u0026lt;source\u0026gt; \u0026lt;languageCode\u0026gt;en\u0026lt;/languageCode\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;filterAuditData\u0026gt; \u0026lt;registerTransactions\u0026gt;true\u0026lt;/registerTransactions\u0026gt; \u0026lt;/filterAuditData\u0026gt; \u0026lt;optionsQuota\u0026gt;0\u0026lt;/optionsQuota\u0026gt; \u0026lt;hubUser\u0026gt;xxx\u0026lt;/hubUser\u0026gt; \u0026lt;hubProvider\u0026gt;XXX\u0026lt;/hubProvider\u0026gt; \u0026lt;hubProviderInstanceCode\u0026gt;XYX\u0026lt;/hubProviderInstanceCode\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;UrlGeneric\u0026gt;www.supplier.com\u0026lt;/UrlGeneric\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;param\u0026quot; value = \u0026quot;PWXML\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;SearchType\u0026gt;Combined\u0026lt;/SearchType\u0026gt; \u0026lt;CancellationPolicies\u0026gt;false\u0026lt;/CancellationPolicies\u0026gt; \u0026lt;RoomCancellationPolicies\u0026gt;false\u0026lt;/RoomCancellationPolicies\u0026gt; \u0026lt;DailyPrices\u0026gt;false\u0026lt;/DailyPrices\u0026gt; \u0026lt;DailyRatePlans\u0026gt;false\u0026lt;/DailyRatePlans\u0026gt; \u0026lt;Attributes\u0026gt;false\u0026lt;/Attributes\u0026gt; \u0026lt;OnRequest\u0026gt;false\u0026lt;/OnRequest\u0026gt; \u0026lt;BusinessRules\u0026gt;CheaperAmount\u0026lt;/BusinessRules\u0026gt; \u0026lt;AvailDestinations\u0026gt; \u0026lt;Destination type = \u0026quot;HOT\u0026quot; code = \u0026quot;157\u0026quot;/\u0026gt; \u0026lt;/AvailDestinations\u0026gt; \u0026lt;StartDate\u0026gt;28/10/2022\u0026lt;/StartDate\u0026gt; \u0026lt;EndDate\u0026gt;29/10/2022\u0026lt;/EndDate\u0026gt; \u0026lt;Currency\u0026gt;EUR\u0026lt;/Currency\u0026gt; \u0026lt;Nationality\u0026gt;ES\u0026lt;/Nationality\u0026gt; \u0026lt;Markets\u0026gt; \u0026lt;Market\u0026gt;ES\u0026lt;/Market\u0026gt; \u0026lt;Market\u0026gt;EN\u0026lt;/Market\u0026gt; \u0026lt;/Markets\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;RoomCandidate cantidad = \u0026quot;1\u0026quot; id = \u0026quot;1\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;30\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;RoomCandidate cantidad = \u0026quot;2\u0026quot; id = \u0026quot;2\u0026quot;\u0026gt; \u0026lt;Paxes\u0026gt; \u0026lt;Pax age = \u0026quot;35\u0026quot; id = \u0026quot;1\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;42\u0026quot; id = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Pax age = \u0026quot;5\u0026quot; id = \u0026quot;3\u0026quot;/\u0026gt; \u0026lt;/Paxes\u0026gt; \u0026lt;/RoomCandidate\u0026gt; \u0026lt;Remarks\u0026gt;true\u0026lt;/Remarks\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;/AvailRQ\u0026gt;  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/faq/",
	"title": "FAQ",
	"tags": [],
	"description": "Frequently asked questions",
	"content": " Hotel Push Sellers API FAQ What is standard occupancy? Standard occupancy is the standard number of Adult paxes of the room. For example, if the standard occupancy is 2. And the following is loaded\u0026hellip;\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;1\u0026quot; AmountAfterTax=\u0026quot;50.00\u0026quot;/\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt;  \u0026hellip; The price of two paxes will be 100, and the price for one pax will be 50. Note that prices for pax under the standard occupancy must be specified and prices for babies under the standard occupancy will be 0.\nStandard occupancy is used for calculating prices above it:\nFor example, if the standard occupancy is 2. And the following is loaded\u0026hellip;\n\u0026lt;BaseByGuestAmts\u0026gt; \u0026lt;BaseByGuestAmt NumberOfGuests = \u0026quot;2\u0026quot; AmountAfterTax=\u0026quot;100.00\u0026quot;/\u0026gt; \u0026lt;/BaseByGuestAmts\u0026gt; \u0026lt;AdditionalGuestAmounts\u0026gt; \u0026lt;AdditionalGuestAmount MaxAdditionalGuests = \u0026quot;1\u0026quot; Amount = \u0026quot;50.00\u0026quot; AgeQualifyingCode = \u0026quot;10\u0026quot;/\u0026gt; \u0026lt;/AdditionalGuestAmounts\u0026gt;  \u0026hellip; The price for one pax will be 50, this is 100\u0026frasl;2. The price of two paxes will be 100 but the price for three paxes will be 200 = 100 + (100\u0026frasl;2 + 50). There are more details in the section HotelRatePlanNotif message.\nWhat is MaxAdditionalGuests in AdditionalGuestAmount? MaxAdditionalGuests is not the maximum number of additional guests but the number of additional guest for which the price is loaded.\nHow to open and close sales correctly? In our system we\u0026rsquo;ve three booleans to control restrictions:\n MasterOpen ArrivalOpen DepartureOpen  When all booleans are true a booking is allowed in the specified day.\nWhen MasterOpen is false bookings are not allowed in the specified day.\nWhen ArrivalOpen is false bookings are not allowed if the arrival date in the hotel is the specified day.\nWhen DepartureOpen is false bookings are not allowed if the departure date from the hotel is the specified day.\nTo control these three values when you are notifying availability you have RestrictionStatus/Status and RestrictionStatus/Restriction. Status indicates whether the action to do is Open or Close. Then the restriction indicates which of the internal booleans will be set (Master, Arrival, Departure). If a restriction is not present, all booleans are set. For example:\nIf you want to sell a product, the first needed thing to do is Open all bits. This is possible by doing the following:\nSend Status=Open, without Restriction.\nThen values will be:\n MasterOpen = true\n ArrivalOpen = true\n DepartureOpen = true\n  Then, if you don\u0026rsquo;t want paxes with arrival at the specified day, you must Close Arrival. This is possible by doing the following:\nSend Status=Close, Restriction=Arrival.\nThen values will be:\n MasterOpen = true\n ArrivalOpen = false\n DepartureOpen = true\n  Then, if you don\u0026rsquo;t want any bookings with departure at the specified day, you must Close Departure. This is possible by doing the following:\nSend Status=Close, Restriction=Departure.\nThen values will be:\n MasterOpen = true\n ArrivalOpen = false\n DepartureOpen = false\n  Finally, if you want to allow allow all kinds of bookings again, you must Open all bits again. This is possible by doing the following:\nSend Status=Open, without Restriction.\nThen values will be:\n MasterOpen = true\n ArrivalOpen = true\n DepartureOpen = true\n  Why AgeQualifyingCode is specified in supplements? In our system it is possible to load different supplements for each kind of pax (Baby, Child or Adult).\n"
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/faq/",
	"title": "FAQ",
	"tags": [],
	"description": "Frequently asked questions about the Inventory-X extranet",
	"content": "   Discount/Supplement using derived rates Know how the create and configurate different discounts or supplements\n     Free children and Free baby option  Know how the free children and baby option works\n     Cancel Policies Know how the load different cancellation policies by rate and date\n    "
},
{
	"uri": "https://travelgatex.com/applications/logging/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": "Changes history of deprecated notes previously announced "
},
{
	"uri": "https://travelgatex.com/applications/stats/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon. Removal of cache from OperationDetailed. Reason: Added new field trafficType.. Deprecated on 2019-04-03.To be removed soon. Removal of time from StatsInfo. Reason: Added new fields averageTime and totalTime.. Deprecated on 2019-04-03.To be removed soon. Removal of ratios from StatsData. Reason: Added hits fields to be able to calculate ratios at client side.. Deprecated on 2019-04-08.To be removed soon.   2019-04-08  Deprecated ratios from StatsData. Reason: Added hits fields to be able to calculate ratios at client side.. Expected removal on 2019-07-07 .   2019-04-03  Deprecated cache from OperationDetailed. Reason: Added new field trafficType.. Expected removal on 2019-07-02 . Deprecated time from StatsInfo. Reason: Added new fields averageTime and totalTime.. Expected removal on 2019-07-02 .   2019-02-08  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Product. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Resource. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Role. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Group. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-01 .   2018-08-22  Deprecated error from API. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Member. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Operation. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Organization. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Product. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Resource. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Role. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .   2018-08-01  Deprecated error from Group. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .   2018-06-01  Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   "
},
{
	"uri": "https://travelgatex.com/product_template/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": "Changes history of deprecated notes previously announced "
},
{
	"uri": "https://travelgatex.com/alerts-x/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon.   2019-08-13  Removed type from AdviseMessage. Reason: . Deprecated on 2018-06-01 .   2018-06-01  Deprecated type from AdviseMessage. Reason: . Finally removed on 2019-08-13 . Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced 2020-02-25  Deprecated accessCode from HotelCancelInput. Reason: Use new bookingID instead. Deprecated language from HotelCancelInput. Reason: Use new bookingID instead. Deprecated hotelCode from HotelCancelInput. Reason: Use new bookingID instead. Deprecated reference from HotelCancelInput. Reason: Use new bookingID instead. Deprecated accessCode from HotelCriteriaBookingInput. Reason: Use new bookingID instead. Deprecated language from HotelCriteriaBookingInput. Reason: Use new bookingID instead. Deprecated typeSearch from HotelCriteriaBookingInput. Reason: Use new bookingID instead. Deprecated references from HotelCriteriaBookingInput. Reason: Use new bookingID instead. Deprecated dates from HotelCriteriaBookingInput. Reason: Use new bookingID instead.   Unreleased  Removal of loadFile from HotelXMutation. Reason: . Deprecated on 2018-06-06.To be removed soon. Removal of distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21.To be removed soon. Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon. Removal of description from Bed. Reason: Deprecated from 2019-07-29. Deprecated on 2019-07-29.To be removed soon. Removal of error from Board. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of error from Category. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of error from Destination. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of error from Hotel. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of error from RoomStatic. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of creationDate from BookingHotel. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of checkIn from BookingHotel. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of checkOut from BookingHotel. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of effectiveDate from PriceBreakdown. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of expireDate from PriceBreakdown. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of effectiveDate from Promotion. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of expireDate from Promotion. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of effectiveDate from RatePlan. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of expireDate from RatePlan. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of effectiveDate from Supplement. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of expireDate from Supplement. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of token from HotelOptionSearch. Reason: . Deprecated on 2019-02-05.To be removed soon. Removal of commit from Reference. Reason: Please, use SupplierReference. Deprecated on 2018-10-21.To be removed soon. Removal of market from HotelOptionSearch. Reason: . Deprecated on 2019-12-11.Expected removal on 2020-03-10. Removal of market from HotelXDefaultSettingsData. Reason: . Deprecated on 2019-12-11.Expected removal on 2020-03-10. Removal of property from HotelData. Reason: Deprecated from 2019-10-16. Redundant information. Deprecated on 2019-10-16.Expected removal on 2020-01-14.   2019-12-11  Deprecated market from HotelOptionSearch. Reason: . Expected removal on 2020-03-10 . Deprecated market from HotelXDefaultSettingsData. Reason: . Expected removal on 2020-03-10 .   2019-10-16  Deprecated property from HotelData. Reason: Deprecated from 2019-10-16. Redundant information. Expected removal on 2020-01-14 .   2019-08-13  Removed loadFile from HotelXMutation. Reason: . Deprecated on 2018-06-06 . Removed type from AdviseMessage. Reason: . Deprecated on 2018-06-01 . Removed description from Bed. Reason: Deprecated from 2019-07-29. Deprecated on 2019-07-29 . Removed error from Board. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03 . Removed error from Category. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03 . Removed error from Destination. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03 . Removed error from Hotel. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03 . Removed error from RoomStatic. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03 . Removed creationDate from BookingHotel. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed checkIn from BookingHotel. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed checkOut from BookingHotel. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed effectiveDate from PriceBreakdown. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed expireDate from PriceBreakdown. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed effectiveDate from Promotion. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed expireDate from Promotion. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed effectiveDate from RatePlan. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed expireDate from RatePlan. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed effectiveDate from Supplement. Reason: Incorrect date format.. Deprecated on 2018-02-28 . Removed expireDate from Supplement. Reason: Incorrect date format.. Deprecated on 2018-02-28 .   2019-07-29  Deprecated description from Bed. Reason: Deprecated from 2019-07-29. Finally removed on 2019-08-13 . Deprecated description from Bed. Reason: Deprecated from 2019-07-29. Expected removal on 2019-10-27 .   2019-07-03  Deprecated error from Board. Reason: Deprecated from 2019-07-03. Finally removed on 2019-08-13 . Deprecated error from Category. Reason: Deprecated from 2019-07-03. Finally removed on 2019-08-13 . Deprecated error from Destination. Reason: Deprecated from 2019-07-03. Finally removed on 2019-08-13 . Deprecated error from Hotel. Reason: Deprecated from 2019-07-03. Finally removed on 2019-08-13 . Deprecated error from RoomStatic. Reason: Deprecated from 2019-07-03. Finally removed on 2019-08-13 . Deprecated error from Board. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 . Deprecated error from Category. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 . Deprecated error from Destination. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 . Deprecated error from Hotel. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 . Deprecated error from RoomStatic. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 .   2019-02-19  Removed token from HotelOptionSearch. Reason: . Deprecated on 2019-02-05 .   2019-02-05  Deprecated token from HotelOptionSearch. Reason: . Finally removed on 2019-02-19 . Deprecated token from HotelOptionSearch. Reason: . Expected removal on 2019-05-06 .   2018-10-21  Deprecated commit from Reference. Reason: Please, use SupplierReference. Expected removal on 2019-01-19 .   2018-07-26  Removed useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12 . Removed connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19 .   2018-07-24  Removed distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21 .   2018-07-09  Removed quote from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed deleteDefaultSettings from Mutation. Reason: You can find it in query at Admin. Deprecated on 2017-11-21 . Removed updateDefaultSettings from Mutation. Reason: You can find it in query at Admin. Deprecated on 2017-11-21 . Removed createDefaultSettings from Mutation. Reason: You can find it in query at Admin. Deprecated on 2017-11-21 . Removed loadFile from Mutation. Reason: You can find it in query at Admin. Deprecated on 2017-11-21 . Removed hotelCancel from Mutation. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotelBook from Mutation. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed search from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed booking from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed defaultSettings from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed mapping from Query. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 .   2018-06-06  Deprecated loadFile from HotelXMutation. Reason: . Finally removed on 2019-08-13 . Deprecated loadFile from HotelXMutation. Reason: . Expected removal on 2018-09-04 .   2018-06-01  Deprecated type from AdviseMessage. Reason: . Finally removed on 2019-08-13 . Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   2018-05-21  Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Finally removed on 2018-07-24 . Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Expected removal on 2018-08-19 .   2018-03-19  Deprecated connectUser from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-07-26 .   2018-02-28  Deprecated creationDate from BookingHotel. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated checkIn from BookingHotel. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated checkOut from BookingHotel. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated effectiveDate from PriceBreakdown. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated expireDate from PriceBreakdown. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated effectiveDate from Promotion. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated expireDate from Promotion. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated effectiveDate from RatePlan. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated expireDate from RatePlan. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated effectiveDate from Supplement. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated expireDate from Supplement. Reason: Incorrect date format.. Finally removed on 2019-08-13 . Deprecated creationDate from BookingHotel. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated checkIn from BookingHotel. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated checkOut from BookingHotel. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated effectiveDate from PriceBreakdown. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated expireDate from PriceBreakdown. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated effectiveDate from Promotion. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated expireDate from Promotion. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated effectiveDate from RatePlan. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated expireDate from RatePlan. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated effectiveDate from Supplement. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated expireDate from Supplement. Reason: Incorrect date format.. Expected removal on 2018-05-29 .   2017-12-12  Deprecated useContext from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-07-26 .   2017-11-21  Deprecated quote from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated deleteDefaultSettings from Mutation. Reason: You can find it in query at Admin. Finally removed on 2018-07-09 . Deprecated updateDefaultSettings from Mutation. Reason: You can find it in query at Admin. Finally removed on 2018-07-09 . Deprecated createDefaultSettings from Mutation. Reason: You can find it in query at Admin. Finally removed on 2018-07-09 . Deprecated loadFile from Mutation. Reason: You can find it in query at Admin. Finally removed on 2018-07-09 . Deprecated hotelCancel from Mutation. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated hotelBook from Mutation. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated search from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated booking from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated defaultSettings from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 . Deprecated mapping from Query. Reason: You can find it in query at HotelX. Finally removed on 2018-07-09 .   "
},
{
	"uri": "https://travelgatex.com/mappea/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon.   2019-02-08  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Product. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Resource. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Role. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Group. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-01 .   2018-08-22  Deprecated error from API. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Member. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Operation. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Organization. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Product. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Resource. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Role. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .   2018-08-08  Removed distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21 . Removed distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21 . Removed distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21 . Removed hotel from Booking. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Quote. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Search. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Booking. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Quote. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed hotel from Search. Reason: You can find it in query at HotelX. Deprecated on 2017-11-21 . Removed useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12 . Removed useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12 . Removed connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19 . Removed connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19 . Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 .   2018-08-03  Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 . Deprecated bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-08 .   2018-08-01  Deprecated error from Group. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .   2018-06-01  Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   2018-05-21  Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Finally removed on 2018-08-08 . Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Finally removed on 2018-08-08 . Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Finally removed on 2018-08-08 .   2018-03-19  Deprecated connectUser from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-08-08 . Deprecated connectUser from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-08-08 .   2017-12-12  Deprecated useContext from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-08-08 . Deprecated useContext from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-08-08 .   2017-11-21  Deprecated hotel from Booking. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Quote. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Search. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Booking. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Quote. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 . Deprecated hotel from Search. Reason: You can find it in query at HotelX. Finally removed on 2018-08-08 .   "
},
{
	"uri": "https://travelgatex.com/paymentx/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon.   2019-02-08  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Product. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Resource. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Role. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Group. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-01 .   2018-08-22  Deprecated error from API. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Member. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Operation. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Organization. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Product. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Resource. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 . Deprecated error from Role. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .   2018-08-03  Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-07-31 . Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-07-31 .   2018-08-01  Deprecated error from Group. Reason: Sustituted by adviseMessage. Finally removed on 2019-02-08 .   2018-07-31  Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 .   2018-06-01  Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/breaking-changes/",
	"title": "GraphQL Schema breaking changes",
	"tags": ["breaking-changes"],
	"description": "Changes history of deprecated notes previously announced",
	"content": " Changes history of deprecated notes previously announced Unreleased  Removal of distribute from AddOns. Reason: You can find it in distribution AddOn. Deprecated on 2018-05-21.To be removed soon. Removal of entities from AdminQuery. Reason: Only for statsX product. Use client, supplier, accesess queries. Deprecated on 2019-08-21.To be removed soon. Removal of type from AdviseMessage. Reason: . Deprecated on 2018-06-01.To be removed soon. Removal of description from Bed. Reason: Deprecated from 2019-07-29. Deprecated on 2019-07-29.To be removed soon. Removal of error from Board. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of error from Category. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of error from Destination. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of error from Hotel. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of error from RoomStatic. Reason: Deprecated from 2019-07-03. Deprecated on 2019-07-03.To be removed soon. Removal of creationDate from BookingHotel. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of checkIn from BookingHotel. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of checkOut from BookingHotel. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of effectiveDate from PriceBreakdown. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of expireDate from PriceBreakdown. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of effectiveDate from Promotion. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of expireDate from Promotion. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of effectiveDate from RatePlan. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of expireDate from RatePlan. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of effectiveDate from Supplement. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of expireDate from Supplement. Reason: Incorrect date format.. Deprecated on 2018-02-28.To be removed soon. Removal of token from HotelOptionSearch. Reason: . Deprecated on 2019-02-05.To be removed soon. Removal of loadFile from HotelXMutation. Reason: . Deprecated on 2018-06-06.To be removed soon. Removal of cache from OperationDetailed. Reason: Added new field trafficType.. Deprecated on 2019-04-03.To be removed soon. Removal of time from StatsInfo. Reason: Added new fields averageTime and totalTime.. Deprecated on 2019-04-03.To be removed soon. Removal of commit from Reference. Reason: Please, use SupplierReference. Deprecated on 2018-10-21.To be removed soon. Removal of ratios from StatsData. Reason: Added hits fields to be able to calculate ratios at client side.. Deprecated on 2019-04-08.To be removed soon. Removal of market from HotelOptionSearch. Reason: . Deprecated on 2019-12-11.Expected removal on 2020-03-10. Removal of market from HotelXDefaultSettingsData. Reason: . Deprecated on 2019-12-11.Expected removal on 2020-03-10. Removal of property from HotelData. Reason: Deprecated from 2019-10-16. Redundant information. Deprecated on 2019-10-16.Expected removal on 2020-01-14.   2019-12-11  Deprecated market from HotelOptionSearch. Reason: . Expected removal on 2020-03-10 . Deprecated market from HotelXDefaultSettingsData. Reason: . Expected removal on 2020-03-10 .   2019-10-16  Deprecated property from HotelData. Reason: Deprecated from 2019-10-16. Redundant information. Expected removal on 2020-01-14 .   2019-08-21  Deprecated entities from AdminQuery. Reason: Only for statsX product. Use client, supplier, accesess queries. Expected removal on 2019-11-19 .   2019-07-29  Deprecated description from Bed. Reason: Deprecated from 2019-07-29. Expected removal on 2019-10-27 .   2019-07-03  Deprecated error from Board. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 . Deprecated error from Category. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 . Deprecated error from Destination. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 . Deprecated error from Hotel. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 . Deprecated error from RoomStatic. Reason: Deprecated from 2019-07-03. Expected removal on 2019-10-01 .   2019-04-08  Deprecated ratios from StatsData. Reason: Added hits fields to be able to calculate ratios at client side.. Expected removal on 2019-07-07 .   2019-04-03  Deprecated cache from OperationDetailed. Reason: Added new field trafficType.. Expected removal on 2019-07-02 . Deprecated time from StatsInfo. Reason: Added new fields averageTime and totalTime.. Expected removal on 2019-07-02 .   2019-02-12  Removed token from HotelOptionSearch. Reason: . Deprecated on 2019-02-05 .   2019-02-08  hotel from Booking. Reason: You can find it in query at HotelX. . hotel from Quote. Reason: You can find it in query at HotelX. . hotel from Search. Reason: You can find it in query at HotelX. .   2019-02-05  Deprecated token from HotelOptionSearch. Reason: . Finally removed on 2019-02-12 .   2019-01-30  Deprecated hotel from Booking. Reason: You can find it in query at HotelX. Finally removed on 2019-02-08 . Deprecated hotel from Quote. Reason: You can find it in query at HotelX. Finally removed on 2019-02-08 . Deprecated hotel from Search. Reason: You can find it in query at HotelX. Finally removed on 2019-02-08 .   2019-01-11  Removed error from API. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Member. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Operation. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Organization. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Product. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Resource. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Role. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-22 . Removed error from Group. Reason: Sustituted by adviseMessage. Deprecated on 2018-08-01 .   2018-10-21  Deprecated commit from Reference. Reason: Please, use SupplierReference. Expected removal on 2019-01-19 .   2018-08-22  Removed organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 . Removed bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Deprecated on 2018-08-03 .    Deprecated error from API. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Member. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Operation. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Organization. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Product. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Resource. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 . Deprecated error from Role. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 .  \n2018-08-03  Deprecated organization from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-22 . Deprecated pointOfSaleCode from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-22 . Deprecated bookingReference from PaymentXBookingInfoFilterInput. Reason: Please use PaymentXBookingInfoCriteriaInput. Finally removed on 2018-08-22 .   2018-08-01  Deprecated error from Group. Reason: Sustituted by adviseMessage. Finally removed on 2019-01-11 .   2018-07-31  Removed useContext from HotelSettingsInput. Reason: Redundant.. Deprecated on 2017-12-12 . Removed connectUser from HotelSettingsInput. Reason: Redundant.. Deprecated on 2018-03-19 .   2018-06-06  Deprecated loadFile from HotelXMutation. Reason: . Expected removal on 2018-09-04 .   2018-06-01  Deprecated type from AdviseMessage. Reason: . Expected removal on 2018-08-30 .   2018-05-21  Deprecated distribute from AddOns. Reason: You can find it in distribution AddOn. Expected removal on 2018-08-19 .   2018-03-19  Deprecated connectUser from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-07-31 .   2018-02-28  Deprecated creationDate from BookingHotel. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated checkIn from BookingHotel. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated checkOut from BookingHotel. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated effectiveDate from PriceBreakdown. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated expireDate from PriceBreakdown. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated effectiveDate from Promotion. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated expireDate from Promotion. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated effectiveDate from RatePlan. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated expireDate from RatePlan. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated effectiveDate from Supplement. Reason: Incorrect date format.. Expected removal on 2018-05-29 . Deprecated expireDate from Supplement. Reason: Incorrect date format.. Expected removal on 2018-05-29 .   2017-12-12  Deprecated useContext from HotelSettingsInput. Reason: Redundant.. Finally removed on 2018-07-31 .   "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Our Input Objects pages describe every single resource, and fields exclusively of Flight-X. If you want to know about more inputs that accept the platform schema, you can take a look to this pages\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/mappea/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/inventory-x/",
	"title": "Inventory",
	"tags": [],
	"description": "Documentation and resources for the Inventory API",
	"content": "   Overview Inventory Overview\n     Getting Started Basic information to start with\n     Extranet Learn how to use the extranet and load your inventory\n     Release Notes Release Notes for Inventory\n    "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/tools/manage/",
	"title": "Management",
	"tags": [],
	"description": "Manage users and hotels",
	"content": " The Manage section allows you to manage users from your team or hoteliers and also allows you to check hotels details as address, telephone, email\u0026hellip;\n\n Hotels Users  Hotels This section allows you to access the master hotels. Introducing the ID or name and clicking the Filter button will give you the information of that hotel.\n\nAs you can see in the previous image, the basic information for each hotel is:\n ID: Hotel‚Äôs ID set by TravelgateX. Name: Master hotel name. Provider Assigned: Channel through which this hotel is connected. Update Date: Hotel information‚Äôs last update date.  If you want to get all the detail information of the hotel, you should click on the pencil icon located on the right of the masterhotel row. A pop up window will appear:\n\nUsers This tool allows you to create, modify or delete users. This users can be created for your team or for the hoteliers that you believe should have access to the Inventory system. Creating users for hoteliers is not mandatory, but in some cases they ask for it in order to check that all is loaded correctly in the system. In other cases, it is the Channel Manager who demands that the hotelier be given a credential, so the hotelier has to ask the client for a user.\nIn case that the hotelier asks for access to the Inventory extranet, it will be the Buyer who is in charge of creating the user through this tool and not TravelgateX. \nTo create a new username click on Add new User and a pop up window will appear to introduce the username, type of user and a password. You would also need to indicate an email address for this username in case the password is forgotten and has to be recovered.\n\nThe type of user, or user role, allows the user to do certain actions and view certain sections of the extranet. The different roles or types of users are:\n Client: This kind of user will be able to see all the information regarding hotels assigned to them, no matter which the Channel Manager is, and it will be able to do changes on these hotels. Client Admin: This kind of user will be able to see all the information related to a client, such as hotels or Channel Managers, and will be able to do all sort of modifications. Unlike the Client role, it will not be necessary to assign permissions at hotel level. This user role will have access to everything related with the Buyer. Client Viewer: This type of user allows to see all the information but it does not allow to do any kind of change or modification. It has access to the tabs Availability, Calendar, Booking List and Booking Price Details of the section Product in the extranet. Provider: A user with this role will be able to see, change and modify information and configurations of the hotels assigned to them. The difference between this and the Client role is that it will only have access to the Channels Manager they are related to. The user with Provider role will have access to the sections Inventory and Product. Provider Viewer: This type of user allows to see all the information but it does not allow to do any kind of change or modification. It has access to the tabs Availability, Calendar, Booking List and Booking Price Details of the section Product in the extranet.  Usually, the kind of user that will be create for a hotelier is Provider Viewer. When selecting the kind of role, a new field will appear in order for the Channel Manager which it relates to can be indicated, as you can see in the following image:\n\nOnce the form is filled and verified, you will be able to save the changes by clicking the Save button. If you want to reject the changes, click the Cancel button.\n\nIn case you want to delete a user you have to click the bin icon located on the right of the user row, and click the Delete button on the pop up window that will appear,\n "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/mealplans/",
	"title": "MealPlans",
	"tags": [],
	"description": "Create and configurate your mealplans",
	"content": " How to add a mealplan \nConsiderations It is an incremental load, so bear in mind these considerations:\n If a meal plan exists then it is updated.\n If a meal plan does not exist then it is created.\n Existing meal plans that are not referenced are not removed.\n If an existing meal plan has to be removed from system then you have to contact with TravelgateX.\n If there is any problem with a meal plan\u0026rsquo;s information then it is omitted (and logged) but the load continues.\n  \n## Specifications\n File name: Master_Mealplans.csv.\n Each line represents a unique meal plan and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Meal plan code   1 Yes Yes string Meal plan name    \nExample AI#All inclusive  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/methods/",
	"title": "Methods",
	"tags": [],
	"description": "To get started with Hotel-X",
	"content": " Quickstart   Booking Flow How to perform a booking\n     Management Management operations for bookings performed via TGX\n     Content How to manage content: Hotels, Boards, Categories, Metadata...\n    "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/rules/configuration/others/",
	"title": "Others",
	"tags": [],
	"description": "Other business rules you can manage",
	"content": " Time Zone With this rule it be can set the Time Zone to use with some rules, as: * Selling Pricing Rules: the Booking Date field (dates from \u0026amp; to), the Booking Hour field and the Booking Day field. * Specific Stop Sales: the Booking Date field (dates from \u0026amp; to).\nRest of date fields and rules related to dates are managed as UTC. By default this rule is set to UTC Time Zone.\nThis rule can only be set by organization on general settings (the same behaviour for all agencies).\nAggregation Key With this rule it can be set to activate aggregation of sellings on the Hotel-X module with a specific key or it can be set not to use any kind of aggregation. Aggregation key has an specific format: it has to be a concatenation of different selectors (the order is important) using \u0026lsquo;,\u0026rsquo; as separator (with no blank spaces neither other kind of special characters).\nSelectors are the following ones: * hotel * supplier * board * refundable * binding * room * rateRules * payment\nExample: hotel,board,room\nBy default it will be used the aggregation defined on internal system configuration.\nThis rule can be set by agency or by organization on general settings: when defined on general settings it will only be applied on those agencies that explicitly have been set to inherit from general settings.\n "
},
{
	"uri": "https://travelgatex.com/paymentx/",
	"title": "PaymentX",
	"tags": [],
	"description": "",
	"content": "   Reference Reference Documentation\n     GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n    "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/tools/permissions/",
	"title": "Permissions",
	"tags": [],
	"description": "Assign and manage your users and hotels relation",
	"content": " The Permissions section allows you to assign a user to different hotels or Channel Managers:\n Provider - User to Provider User to Hotels  \nProvider - User to Provider From this section a user with a Provider role is given access to one or many providers/Channel Managers.\nIn order to give permissions to a particular user, you just have to click the Add new UserProvider ‚Äì Provider button.\n\nA pop up window will appear where you should select the provider which it will have access to. After this, you should click the Save button in order to save the changes.\n\nUser to Hotels From this section you are able to give access to a user, whatever its role is, to one or many hotels. To do so, you have to indicate the user you want to give access to and afterwards click the Add new User-Hotel button.\n\nA pop up window will show in which you will be able to introduce the hotel name for the hotel to which the user will have access. The Can Edit all Rates from Hotel option allows you to indicate if you want this user to be able to edit all rate from the hotel or specify some of them:\n\nYou can also give access to a user for all hotels you have setup with one or more Channel Manager. For this you must select All hotels from provider and a list with all channels accessible for this user will appear.\n\n "
},
{
	"uri": "https://travelgatex.com/distribution/reservation-api/",
	"title": "Reservation API",
	"tags": [],
	"description": "Reservation API reference",
	"content": "   Overview Reservation API Overview\n     API Reference API Reference\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-speed/",
	"title": "Speed",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \tTo make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.     "
},
{
	"uri": "https://travelgatex.com/distribution/extranet/tools/",
	"title": "Tools",
	"tags": [],
	"description": "Tools that will help you manage your Distribution-loaded data",
	"content": "   Searches Search among your hotels, providers, currencies and meal plans\n     Reports Generate CSV reports from loaded hotels and configurated blacklists\n    "
},
{
	"uri": "https://travelgatex.com/getting-started/learning-graphql/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": " Top tools to develop in GraphQL Here is a collection of tools we\u0026rsquo;ve been using that have help us develop in GraphQL:\nSchemas Design  APIs Guru\u0026rsquo;s graphql-faker  Go Packages Nowadays most our APIS are written in Go, mainly because of speed, ability to handle very high load while using low resources. Also because of the ability to develop plugins. We\u0026rsquo;ve used many libraries and packages to help us, hereby our list:\n GraphQL server - Focused on ease of use Redis  NodeJS Packages Other pieces of our software are written in NodeJS. Mainly because some packages are wither not avaialble in Go, or because the Go package is not as performant as the Node alternative. These are the packages we use: * GraphQL server\nSchema Visualizers It\u0026rsquo;s nice to be able to see your schema and be able to navigate through it.\n GraphQL Voyager - Represent any GraphQL API as an interactive graph  Documentation Generators git co bea\nGenerate beautiful static documentation sites directly from schema or introspection query\n GraphQL Playground - GraphQL IDE for docs \u0026amp; coollaboration Graph Docs Graphdoc  GraphQL Clients Build, create and play with queries, it\u0026rsquo;s fun!\n GraphQL Playground: our favorite online client Insomnia: just like Postman, but GraphQL ready GraphiQL: the original  Big List Here\u0026rsquo;s a list of even more tools, resources, etc.\n Awesome GraphQL Free online course: Exploring GraQL: A Query Language for APIs Official GraphQL site   "
},
{
	"uri": "https://travelgatex.com/travelgatex/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "Walkthrouhgs of common applications",
	"content": "What you can build on TravelgateX\u0026rsquo;s platform   Build An OTA Build your own full fledged OTA\n     Configure HotelX Security Configure your own HotelX security model\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-insights/log/legacy/",
	"title": "Insights",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/core/",
	"title": "Admin",
	"tags": [],
	"description": "",
	"content": "Admin Manage your accesses.\n Get list of your accesses. Update your access.  \n  Overview Admin Overview\n     Getting Started Basic information to start with Admin\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/concepts/advancedconcepts/",
	"title": "Advanced Concepts",
	"tags": [],
	"description": "Understand Hotel-X advanced concepts",
	"content": "   Errors and Warnings List of errors and warnings in HotelX\n     Settings Learn about settings in HotelX\n    "
},
{
	"uri": "https://travelgatex.com/inventory-x/extranet/tools/bookings/",
	"title": "Booking List &amp; Price Details",
	"tags": [],
	"description": "Retrieve booking information from a specific hotel.",
	"content": " The Booking List and Booking Price details sections allows you to retrieve and check information of bookings from a specific hotel. You can find both tools in the Product tab.\n\n Booking List Booking Price Details  Booking List The Booking List tool allows you to retrieve a list of the bookings made in a particular hotel. You must introduce the client and the Channel Manager, the hotel and the filter parameters to search the bookings that meet the conditions.\nIt is possible to filter by dates or locator. In case of filtering by date, you will be able to filter by arrival date, creation date, departure date or last update date. If you want to filter by locator, you will be able to choose to filter by Client/Buyer locator, internal locator (Inventory locator) or Provider/Channel Manager locator. Clicking the Search button will initiate the search.\n\nBooking Price Details This tool will let you retrieve the details of a particular booking. As always, it is necessary to select the client and the Channel Manager. Afterwards, it will be necessary to indicate the type and locator. As a result you will see a panel where you will be able to check the price of the booking and its details.\n\n "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/currencies/",
	"title": "Currencies",
	"tags": [],
	"description": "Currencies exchanges",
	"content": " Currencies exchanges Considerations  We can specify global currencies and specific currencies for concrete agencies. If an agency has got specific currencies then this agency will use these ones but if an agency hasn\u0026rsquo;t got specific currencies then this agency will use the global currencies. Global currencies are inherited by agencies with specific currencies in which they are not contained, so if a currency is defined as global and this currency is no defined specifically for an agency then the agency will use de global definition for this currency. It is an incremental load:  If a currency exists then it is updated. If a currency does not exist then it is created. Existing currencies that are not referenced are not removed. If an existing currency has to be removed from system then you have to contact with TravelgateX. If specific currencies for an agency have to be removed from system then you have to contact with TravelgateX. If there is any problem with a currency\u0026rsquo;s information then it is omitted (and logged) but the load continues.   Specifications  File name: Master_CurrenciesExchange.csv.\n Each line represents a unique temporary pricing rule and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line, by default fields and subfields are separated using the characters #, | and ;. None of these characters can\u0026rsquo;t be used inside data because fields and subfields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n We need to know the base currency used for all the exchange values.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  Data Line fields    Position Mandatory Field Mandatory Data Type Description/Value     0 Yes Yes string ISO currency code (3 chars).   1 Yes Yes decimal Exchange value: it is a decimal value using the character \u0026ldquo;.\u0026rdquo; as separator. It indicates the equivalence of this currency with 1 unit of the base currency.   2 No No string Agency code (to create specific currencies). If this field is not given then this will be a global currency.    Notes:\n A decimal value has to be set using \u0026lsquo;.\u0026rsquo; as separator. Currency is in ISO 4217 code format (i.e. \u0026ldquo;EUR\u0026rdquo;, \u0026ldquo;USD\u0026rdquo;, \u0026ldquo;GBP\u0026rdquo;,\u0026hellip;)  Base Currency  The file must be created on a base currency, and all other currencies have to be defined with their exchange with this base currency. TGX Distribution system operates using EUR as the base currency for all the internal operations, so if the file does not uses EUR as the base currency then the TGX Distribution team must be noticed of this point and needs to know which is the base currency. The base currency must be included into the file and will have an exchange value of 1. The exchange value of a currency indicates the equivalence of this currency with 1 unit of the base currency.  *Example 1: GBP as base currency:*\n\u0026quot;EUR#1.110\u0026quot; *1 GBP corresponds to 1.110 EUR* \u0026quot;GBP#1.000\u0026quot; *base currency* \u0026quot;USD#1.310\u0026quot; *1 GBP corresponds to 1.310 USD*  *Example 2: EUR as base currency:*\n\u0026quot;EUR#1\u0026quot; *base currency* \u0026quot;GBP#0.9009\u0026quot; *1 EUR corresponds to 0.9009 GBP* \u0026quot;USD#1.1802\u0026quot; *1 EUR corresponds to 1.1802 USD*  *Example 3: USD as base currency:*\n\u0026quot;EUR#0.8473\u0026quot; *1 USD corresponds to 0.8473 EUR* \u0026quot;GBP#0.7633\u0026quot; *1 USD corresponds to 0.7633 GBP* \u0026quot;USD#1.00\u0026quot; *base currency*  "
},
{
	"uri": "https://travelgatex.com/distribution/",
	"title": "Distribution",
	"tags": [],
	"description": "A comprehensive Business Rules Engine, right where you need it. When you need it!",
	"content": " Distribution allows you, as a Seller, to manage pricing rules, filters and blacklists for each of your Buyers connected via TravelgateX. These rules can be applied at a channel, hotel or booking level, as well as applied to specific date ranges or markets, giving you the power to configure your company‚Äôs distribution strategy in a simple, user-friendly interface. Distribution rules will help your company maximise benefits while growing the overall sales by managing pricing and filters for each of your customers. Effortlessly, regardless if you have 1 or 1.000 customers.\n Define a general commission/markup or a specific one by hotel, meal plan, market, nationality, booking date, realease and more market conditions. Work with currencies: block certain currencies by country or allow currency exchange. Define different filters by hotel portfolio, payment type, rate rules (Non refundable, refundable rates), rate plan codes or binding prices. Define general stop sales by hotel, hotel chains, markets, countries, cities and destinations. Define specific stop sales by meal plan, market, nationality, booking date, release, non refundable / refudable rates and more market conditions.  All rules can be loaded and updated manually through the Distribution extranet or using different csv files that you will be able to store in our FTP (our system will load automatically the rules you defined with a predeterminated frequency). For detail information of each rule, you can visit Rules Management.\nMasters Distribution works with content information about your hotels, rooms, meal plans, providers and destination. All this master information can be loaded into the Distribution extranet or, alternatevely, using different files that you will need to load in our FTP so we can process all these information.\nCheck how to load this information in Masters load.\nCheck your bookings Distribution provides two alternatives to check the booking information, you can either use the extranet or get the results with the Reservation API.\nFeel free to ask us any questions via our Help Center. \n  Overview Distribution Overview\n     Getting Started Basic information to start with\n     Extranet Learn how to use the extranet and load your pricing rules\n     External file loads Add and update your master data and rules with files load\n     Reservation API Reservation API reference\n     FAQ Do you have specific questions about Distribution-X? Check out the FAQs\n     Release Notes New Updates \u0026amp; Releases\n    "
},
{
	"uri": "https://travelgatex.com/applications/logging/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‚Äònights‚Äô, ‚Äòpercent‚Äô or ‚Äòimport‚Äô penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/applications/stats/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‚Äònights‚Äô, ‚Äòpercent‚Äô or ‚Äòimport‚Äô penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/alerts-x/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‚Äònights‚Äô, ‚Äòpercent‚Äô or ‚Äòimport‚Äô penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/flight-x/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nIn these pages you can find the relevant enums of Flight-X, if you need to know more about the other enums in our platform you can take look to this pages.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/mappea/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‚Äònights‚Äô, ‚Äòpercent‚Äô or ‚Äòimport‚Äô penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/paymentx/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‚Äònights‚Äô, ‚Äòpercent‚Äô or ‚Äòimport‚Äô penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/travelgatex/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": "Enums are a particular type of Scalar that works like a drop-down, single selection menu. Each type of Enum has a number of choices defined, and users must select one of the choices when querying the Enum.\nFor example, you could make a Query asking for only hotels with a particular penalty cancellation policy (enum CancelPentaltyType). You then choose whether to see hotels with either a ‚Äònights‚Äô, ‚Äòpercent‚Äô or ‚Äòimport‚Äô penalty type.\nEach Enum is described in the same way: - A short definition of the Enum - An interactive GraphQL schema definition which shows the full list of possible options for the Enum - A list of which objects require this Enum to be used - Where possible, we are adding examples of how to use this object in your queries.\nYou can update any page of our documentation by clicking on ‚ÄòEdit page‚Äô and sending a pull request or by making a comment on the page. Our average turnaround for responding to pull requests or comments is less than 24 hours. "
},
{
	"uri": "https://travelgatex.com/distribution/faq/",
	"title": "FAQ",
	"tags": [],
	"description": "Do you have specific questions about Distribution-X? Check out the FAQs",
	"content": "Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/geographicdestinationtree/",
	"title": "GeographicDestinationTree",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns the supplier\u0026rsquo;s geographic tree where each node indicates whether the request is accessible from availability, indicated with a parameter with values true or false. The main difference between the methods GeographicalTree and DestinationTree is that GeographicalTree has this boolean parameter.\nRequest Format The request not requires any element, it is empty.\nResponse Format The result returns a list of DestinationTree with corresponding sub-destinations.\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nGeographicDestinationTreeRQ Example \u0026lt;GeographicDestinationTreeRQ\u0026gt; \u0026lt;/GeographicDestinationTreeRQ\u0026gt;  GeographicDestinationTreeRQ Description    Element Number Type Description     GeographicDestinationTreeRQ 1  Root node.    GeographicDestinationTreeRS Example \u0026lt;GeographicDestinationTreeRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;DestinationTree code = \u0026quot;ES\u0026quot; name = \u0026quot;Espa√±a\u0026quot; avail = \u0026quot;False\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;BAL\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AST\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AND\u0026quot;/\u0026gt; \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code= \u0026quot;IT\u0026quot; name = \u0026quot;Italia\u0026quot; avail = \u0026quot;False\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AA\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;BB\u0026quot;/\u0026gt; . . . \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;EN\u0026quot; name = \u0026quot;England\u0026quot; avail = \u0026quot;False\u0026quot;\u0026gt;. . .\u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;BAL\u0026quot; name = \u0026quot;Baleares\u0026quot; avail = \u0026quot;True\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;PAL0\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;ALC0\u0026quot;/\u0026gt; \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;AST\u0026quot; name = \u0026quot;Asturias\u0026quot; avail = \u0026quot;True\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;AND\u0026quot; name = \u0026quot;Andalucia\u0026quot; avail = \u0026quot;True\u0026quot;/\u0026gt; . . . \u0026lt;DestinationTree code = \u0026quot;PAL0\u0026quot; name = \u0026quot;Palma de Mallorca\u0026quot; avail = \u0026quot; True\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;ALC0\u0026quot; name = \u0026quot;Alcudia\u0026quot; avail = \u0026quot; True\u0026quot;/\u0026gt; . . . \u0026lt;/GeographicDestinationTreeRS\u0026gt;  GeographicDestinationTreeRS Description    Element Number Type Description     GeographicDestinationTreeRS 1  Root node.   UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   DestinationTree / 1..n  Father node.   @code 1 String    @name 1 String    @avail 1 Boolean    DestinationTree /DestinationLeaf 0..n  Childs node.   @code 1 String     Detailed description \u0026lt;GeographicDestinationTreeRS\u0026gt; \u0026lt;DestinationTree code = \u0026quot;ES\u0026quot; name = \u0026quot;Espa√±a\u0026quot; avail = \u0026quot;False\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;BAL\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AST\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AND\u0026quot;/\u0026gt; \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code= \u0026quot;IT\u0026quot; name = \u0026quot;Italia\u0026quot; avail = \u0026quot;False\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AA\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;BB\u0026quot;/\u0026gt; . . . \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;EN\u0026quot; name = \u0026quot;England\u0026quot; avail = \u0026quot;False\u0026quot;\u0026gt;. . .\u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;BAL\u0026quot; name = \u0026quot;Baleares\u0026quot; avail = \u0026quot;True\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;PAL0\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;ALC0\u0026quot;/\u0026gt; \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;PAL0\u0026quot; name = \u0026quot;Palma de Mallorca\u0026quot; avail = \u0026quot; True\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;SAR\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;IND\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;AST\u0026quot; name = \u0026quot;Asturias\u0026quot; avail = \u0026quot;True\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;AND\u0026quot; name = \u0026quot;Andalucia\u0026quot; avail = \u0026quot;True\u0026quot;/\u0026gt; . . . \u0026lt;DestinationTree code = \u0026quot;ALC0\u0026quot; name = \u0026quot;Alcudia\u0026quot; avail = \u0026quot; True\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;SAR\u0026quot; name = \u0026quot;Son Sardina\u0026quot; avail = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;IND\u0026quot; name = \u0026quot;Indioteria\u0026quot; avail = \u0026quot;false\u0026quot;/\u0026gt; . . . \u0026lt;/GeographicDestinationTreeRS\u0026gt;  There are two essential definitions which need to be clear in order to understand the difference between city and zone:\n types of nodes if these nodes are accessible or not.  Let\u0026rsquo;s start with the two types of nodes. There are two types of nodes: the parent node, also called DestinationTree node, and the child node, also named Destination leaf node. A parent can have zero to n children ( 0..n ) and a child can only one parent ( 1..1 ). For example, the DestinationTree code = \u0026ldquo;ES\u0026rdquo; is the parent of the DestinationLeaf code = \u0026ldquo;BAL\u0026rdquo;, \u0026ldquo;AST\u0026rdquo; and \u0026ldquo;AND\u0026rdquo; and at the same time DestinationTree code = \u0026ldquo;BAL\u0026rdquo; is also a the parent of the DestinationLeaf code = \u0026ldquo;PAL0\u0026rdquo; and \u0026ldquo;ALC0\u0026rdquo;, and so on.\nAccessible on an availability level means that it is possible to perform an availability for that zone. A node is accessible when the tag avail is set to true. If it is set to false the node is not accessible and consequently, not available.\nTherefore:\n City: Lowest accessible node. Zone: Not the lowest accessible node.  Note: In rare occasions, it is possible to find nodes lower than cities, which won\u0026rsquo;t be accessible, but the standard scenario is not to find lower nodes than cities.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/",
	"title": "Hotel Buyers API (legacy)",
	"tags": [],
	"description": "Read documentation on Hotel Buyers API (legacy)",
	"content": "   Methods API Methods\n     Release notes Release notes\n     Data Structure      Overview      FAQ     Lists of Data     "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/hotel-solutions/",
	"title": "Hotel Solutions",
	"tags": [],
	"description": "Additional features to your Connection",
	"content": "Here at Travelgate, we are developing a series of new added value solutions to the buyers of accommodation product.\nFor more information visit Hotel+\n  Transfers Add Transfer options back and forth the Hotel from nearby Airports\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-insights/",
	"title": "Insights",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \tTo make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.     "
},
{
	"uri": "https://travelgatex.com/community/integrations-changelog/",
	"title": "Integrations Changelog",
	"tags": [],
	"description": "Integrations changelog process",
	"content": "Integrations changelog is conducted at CHANGELOG.md kept with the source code, that is copied on docs at integrations changelog section:\n  Public changelog example Public changelog, to be published at documentation site\n     Integration changelog example Integration changelog, to keep it with the source code\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/plugins/",
	"title": "Plugins",
	"tags": [],
	"description": "Additional logic to your Connection",
	"content": "Plugins are the secret sauce of the HotelX API. Think of plugins as features that will introduce at a request level all the business logic you normally would have had to implement on your side. These plugins can be used to fully customize the request and response in any way you wish, and can be added as your business grows and evolves. No need to aggregate responses now that you only have a few suppliers live? No problem. With Hotel-X, it\u0026rsquo;s easy to add this feature once your business needs it.\nHotelX Plugins are a separate Go application that get compiled into the main application and run natively in our servers. Plugins are specified at the request level, or be configured by default.\nBelow is the list of Plugins TravelgateX has already developed. Got a suggestion? Head to our TGX Community\n  Overview Plugins Overview. What they are, when they get executed and how to execute them.\n     Blacklist Hotel codes Blacklist: filter out specific hotels from the Search query\n     Mapping Map different codes from different Sellers in order to get a de-duped response.\n     Add Parameter Allows Add Parameter to the access created for a supplier\n     Aggregation Aggregate different Suppliers response based on different criteria.\n     Booking Persistence This plugin allows to store and avoid duplicated bookings\n     Commission Convert Gross Prices into Net Prices.\n     Market Group Groups the Search result by markets that share the same product\n     Preference To give preference to the options that match the preference rules.\n     Safety Margin Discards those options that have a commission higher than expected.\n     Vcc Gen Creates a virtual credit card at Book step\n     Currency Converter Convert currency in order to have a unified response.\n     Search by destination Enables search query to request per destinations by converting destination codes to hotel codes\n    "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/",
	"title": "Products changelogs",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes by product",
	"content": "   ChannelX Contains a curated, chronologically ordered list of notable changes\n     FlightsX Contains a curated, chronologically ordered list of notable changes\n     Mappea Contains a curated, chronologically ordered list of notable changes\n     Inventory Contains a curated, chronologically ordered list of notable changes\n     Speed Contains a curated, chronologically ordered list of notable changes\n     Insights Contains a curated, chronologically ordered list of notable changes\n     Distribution Contains a curated, chronologically ordered list of notable changes\n     Stats Contains a curated, chronologically ordered list of notable changes\n     Web travelgatex.com changelog Contains a chronologically ordered list of notable changes at our website\n    "
},
{
	"uri": "https://travelgatex.com/applications/logging/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n     Logging changelog     "
},
{
	"uri": "https://travelgatex.com/applications/stats/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n     Stats changelog     "
},
{
	"uri": "https://travelgatex.com/product_template/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n     PRODUCT Changelog     "
},
{
	"uri": "https://travelgatex.com/alerts-x/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n     Alerts-X Changelog     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpushsellers/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "Release Notes Hotel Push Sellers API",
	"content": "   Changelog Changelog Hotel Push Sellers API\n    "
},
{
	"uri": "https://travelgatex.com/inventory-x/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "Release Notes for Inventory",
	"content": " 2021-06-04  Now it\u0026rsquo;s possible to use a add your own room description in the Inventory extranet. This feature allows buyers and sellers to set, at rate level, the rooms descriptions they want to configurate without the need to open a ticket to our Help Center. More info.   2020-11-25  Now it\u0026rsquo;s possible to load free charges for child and baby pax using the Inventory-X extranet. This feature allows buyers to set, at rate level, free children or babies when Channel Managers are not able to load it from their side. More info.   2020-11-19  Now it\u0026rsquo;s possible to create hotels using the Inventory-X extranet. This feature allows administrators users to create a hotel not listed in our data base yet without having to open a ticket to our Customer Care Team. More info.    "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   Roadmap We have put together a GitHub Project where we will keep updating on the things we‚Äôve in our plans.\n     GraphQL Schema Changes It includes backwards-compatible changes, schema previews, and upcoming breaking changes.\n     GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n     Products changelogs Contains a curated, chronologically ordered list of notable changes by product\n     Platform Changelog     "
},
{
	"uri": "https://travelgatex.com/travelgatex/resources/",
	"title": "Resources",
	"tags": [],
	"description": "New Updates &amp; Releases",
	"content": "  "
},
{
	"uri": "https://travelgatex.com/getting-started/learning-graphql/tutorials_resources/",
	"title": "Tutorials &amp; Resources",
	"tags": [],
	"description": "",
	"content": " Although GraphQL is a very young technology, it\u0026rsquo;s quickly gaining momentum and already has a fast growing yet vast ecosystem. Apart from Facebook\u0026rsquo;s and Graphql.org\u0026rsquo;s official documentation, there are more and more development teams embracing this technology and you can now find a lot of articles, tutorial and videos talking about it.\nWe want to be part of this community and hopefully help you discover this new technology and its features. That\u0026rsquo;s why we have gathered some of the best articles and tutorials for you to get to know GraphQL and learn how to use it step by step. Have a look at the list bellow and click on any of the resources, materials, podcast and documentation to start.\nEnjoy it!\nGraphQL Articles and discussions  REST APIs are REST-in-Peace APIs. Long Live GraphQL. Hacker News Thread Living APIs and the Case for GraphQL  GraphQL Tutorials  Learn GraphQL with GitHub The free and open-source tutorial to learn all around GraphQL to go from zero to production. Learn GraphQL by querying a schema based on JSON data  GraphQL Resources  GraphQL official documentation Apollo Relay official documentation Schema first development - Johannes Schickling Schema-first development with GraphQL GraphQL First in practice at Quri GraphQL First: A better way to build modern apps GraphQL User List  GraphQL Books  Introducing The GraphQL Guide by John Resig Learn To Build Fullstack Graphql Applications by Julian Mayorga  Other Graph Related Resources  Graph Data Structures for Beginners   "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-distribution/log/legacy/",
	"title": "Distribution",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/applications/",
	"title": "Applications",
	"tags": [],
	"description": "Applications",
	"content": "   Stats Real-time connectivity performance dashboard\n     Logging Simple access to all transactions\u0026#39; traces\n     Insights Anticipate contracting, mark-ups and trends with data\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/bestpractices/",
	"title": "Best Practices",
	"tags": [],
	"description": "To be most effective",
	"content": " Best Practices   GraphQL to Rest      Keep Alive Header      Check Booking status     "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/currencylist/",
	"title": "CurrencyList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns a list of currencies the supplier supports in Avail.\nRequest Format The request does not require any elements. Empty request.\nResponse Format The result returns a list of currencies.\nCurrencyListRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section.\n\u0026lt;CurrencyListRQ\u0026gt; \u0026lt;/CurrencyListRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nCurrencyListRQ Description    Element Number Type Description     CurrencyListRQ 1  Root node.    CurrencyListRS Example \u0026lt;CurrencyListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Currencies\u0026gt; \u0026lt;Currency\u0026gt; \u0026lt;Code\u0026gt;EUR\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Euro\u0026lt;/Name\u0026gt; \u0026lt;/Currency\u0026gt; \u0026lt;Currency\u0026gt; \u0026lt;Code\u0026gt;USD\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Dollar\u0026lt;/Name\u0026gt; \u0026lt;/Currency\u0026gt; \u0026lt;/Currencies\u0026gt; \u0026lt;/CurrencyListRS\u0026gt;  CurrencyListRS Description    Element Number Type Description     CurrencyListRS 1  Root node.   UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   Currencies 1  Contains a list of currencies.   Currency 0..n  Contains details of the currency.   @code 1 String ISO - 3 Code.   @Name 1 String Name of the currency.    "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-distribution/",
	"title": "Distribution",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \tTo make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.     "
},
{
	"uri": "https://travelgatex.com/travelgatex/frequently-asked-questions/",
	"title": "FAQs",
	"tags": ["faq"],
	"description": "Do you have specific questions about TravelgateX? Check out the Business FAQs",
	"content": "Click here for our most frequently asked questions about working with TravelgateX\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/hotellist/",
	"title": "HotelList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns a list of hotels with basic information (code, name, address, phone, etc.) for each hotel\nRequest Format The request does not require any elements. Empty request.\nResponse Format The result returns a list of Hotel (hotels).\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nThis method may be preloaded in XML Travelgate\u0026rsquo;s system if it takes more than 3 minutes to download.\nThe ContinuationToken can be used in this request - the specification can be found in the \u0026lsquo;Common Elements\u0026rsquo; section.\nHotelListRQ Example \u0026lt;HotelListRQ\u0026gt; \u0026lt;/HotelListRQ\u0026gt;  HotelListRQ Description    Element Number Type Description     HotelListRQ 1  Root node.    HotelListRS Example \u0026lt;HotelListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Hotels\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;5\u0026lt;/Code\u0026gt; \u0026lt;GiataId source = \u0026quot;http://urlGiata\u0026quot;\u0026gt;1200\u0026lt;/GiataId\u0026gt; \u0026lt;Name\u0026gt;BADAJOZ\u0026lt;/Name\u0026gt; \u0026lt;Address\u0026gt;CTRA.NACIONAL V, KM 393\u0026lt;/Address\u0026gt; \u0026lt;Airports\u0026gt; \u0026lt;Airport\u0026gt; \u0026lt;IATACode\u0026gt;BJZ\u0026lt;/IATACode\u0026gt; \u0026lt;/Airport\u0026gt; \u0026lt;/Airports\u0026gt; \u0026lt;Town\u0026gt;BADAJOZ\u0026lt;/Town\u0026gt; \u0026lt;ZipCode\u0026gt;06002\u0026lt;/ZipCode\u0026gt; \u0026lt;CountryISOCode\u0026gt;ES\u0026lt;/CountryISOCode\u0026gt; \u0026lt;AvailDestination code = \u0026quot;06\u0026quot; name = \u0026quot;BADAJOZ\u0026quot;/\u0026gt; \u0026lt;GeographicDestination code = \u0026quot;06\u0026quot; name = \u0026quot;BADAJOZ\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;Latitude\u0026gt;38.893839\u0026lt;/Latitude\u0026gt; \u0026lt;Longitude\u0026gt;-7.014112\u0026lt;/Longitude\u0026gt; \u0026lt;Contact\u0026gt; \u0026lt;Email\u0026gt;badajoz@xxx.com\u0026lt;/Email\u0026gt; \u0026lt;Telephone\u0026gt;91425891\u0026lt;/Telephone\u0026gt; \u0026lt;Fax\u0026gt;910200200\u0026lt;/Fax\u0026gt; \u0026lt;/Contact\u0026gt; \u0026lt;CategoryCode\u0026gt;4 Estrellas\u0026lt;/CategoryCode\u0026gt; \u0026lt;PaymentOptions cash=\u0026quot;false\u0026quot; bankAcct=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;Cards\u0026gt; \u0026lt;Card code=\u0026quot;VI\u0026quot;/\u0026gt; \u0026lt;Card code=\u0026quot;AX\u0026quot;/\u0026gt; \u0026lt;Card code=\u0026quot;CA\u0026quot;/\u0026gt; \u0026lt;/Cards\u0026gt; \u0026lt;/PaymentOptions\u0026gt; \u0026lt;ExclusiveDeal\u0026gt;true\u0026lt;/ExclusiveDeal\u0026gt; \u0026lt;PropertyCategory\u0026gt; \u0026lt;Code\u0026gt;1\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Hotel\u0026lt;/Name\u0026gt; \u0026lt;/PropertyCategory\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;65#7\u0026lt;/Code\u0026gt; \u0026lt;ProviderCode\u0026gt;7\u0026lt;/ProviderCode\u0026gt; \u0026lt;GiataId source = \u0026quot;http://urlGiata\u0026quot;\u0026gt;1200\u0026lt;/GiataId\u0026gt; \u0026lt;Name\u0026gt;ILLA\u0026lt;/Name\u0026gt; \u0026lt;Address\u0026gt;AVDA. ILLA S/N\u0026lt;/Address\u0026gt; \u0026lt;Town\u0026gt;HUELVA\u0026lt;/Town\u0026gt; \u0026lt;ZipCode\u0026gt;21449\u0026lt;/ZipCode\u0026gt; \u0026lt;CountryISOCode\u0026gt;ES\u0026lt;/CountryISOCode\u0026gt; \u0026lt;AvailDestination code = \u0026quot;2\u0026quot; name = \u0026quot;HUELVA\u0026quot;/\u0026gt; \u0026lt;GeographicDestination code = \u0026quot;2\u0026quot; name = \u0026quot;HUELVA\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;Latitude\u0026gt;37.207295\u0026lt;/Latitude\u0026gt; \u0026lt;Longitude\u0026gt;-7.23768\u0026lt;/Longitude\u0026gt; \u0026lt;Contact\u0026gt; \u0026lt;Email\u0026gt;emailhotel@xxx.es\u0026lt;/Email\u0026gt; \u0026lt;Telephone\u0026gt;95124578\u0026lt;/Telephone\u0026gt; \u0026lt;Fax\u0026gt;910200200\u0026lt;/Fax\u0026gt; \u0026lt;/Contact\u0026gt; \u0026lt;CategoryCode\u0026gt;4 Estrellas\u0026lt;/CategoryCode\u0026gt; \u0026lt;PropertyCategory\u0026gt; \u0026lt;Code\u0026gt;2\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Home\u0026lt;/Name\u0026gt; \u0026lt;/PropertyCategory\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;Hotel\u0026gt;...\u0026lt;/Hotel\u0026gt; \u0026lt;/Hotels\u0026gt; \u0026lt;/HotelListRS\u0026gt;  HotelListRS Description    Element Number Type Description     HotelListRS /UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   HotelListRS /Hotels /Hotel 0..n  Root node. Hotel sheet.   Code 1 String Internal code to perform availability and/or supplier code.   ProviderCode 0..1 String Internal code established by the supplier (see MetaData).   GiataId 0..1  Giata System ID.   @source 0..1 String Giata url   @value 0..1 String Giata code (more on detailed description)   Name 1 String Name.   Address 1 String Address.   Airports / 0..1  List of airports.   Airports /Airport 1..n  Specific airport near the hotel.   Airports /Airport/IATACode 1 String IATA airport Code.   Town 1 String Town.   ZipCode 0..1 String ZipCode.   CountryISOCode 1 String CountryISOCode.   AvailDestination 0..1  Avail Destination.   @code 1 String Destination code.   @name 1 String Destination name.   GeographicDestination 1  Geographic Destination.   @code 1 String Destination code.   @name 1 String Destination name.   @avail 1 Boolean Indicates if it is allowed in availability.   Latitude 0..1 String Latitude.   Longitude 0..1 String Longitude.   Contact / 0..1  Contact.   Contact /Email 0..1 String Email.   Contact /Telephone 0..1 String Telephone.   Contact /Fax 0..1 String Fax.   CategoryCode 1 String CategoryCode.   Type 0..1 String Hotel type: please see detailed description   PaymentOptions / 0..1 String Type of cards allowed by the supplier. This tag is only mandatory if payment type is different than MerchantPay.   PaymentOptions /Cards / 1  List of cards allowed.   PaymentOptions /Cards /Card 1..n  Type of card allowed.   @code 1 String Code card (see Lists of Data (VI,AX,BV,CA\u0026hellip;)).   ExclusiveDeal 0..1 Boolean Indicates that the Hotel has an Exclusive Deal.   PropertyCategory / 0..1  Hotels property type. Similar to Type, but on supplier\u0026rsquo;s side.   PropertyCategory /Code 1 String Supplier\u0026rsquo;s property code.   PropertyCategory /Name 1 String Supplier\u0026rsquo;s property name.    Detailed Description Giata Code:\nA Giata code is a hotel code that provides information of said hotel. This code is common for all the suppliers.\nFor example:\nFor the supplier TravellingTest:\n\u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;5\u0026lt;/Code\u0026gt; \u0026lt;GiataFormatCode\u0026gt;254\u0026lt;/GiataFormatCodez\u0026gt; \u0026lt;Name\u0026gt;BADAJOZ\u0026lt;/Name\u0026gt; \u0026lt;/Hotel\u0026gt;  For the supplier TestOnTour:\n\u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;14\u0026lt;/Code\u0026gt; \u0026lt;GiataFormatCode\u0026gt;254\u0026lt;/GiataFormatCodez\u0026gt; \u0026lt;Name\u0026gt;BADAJOZ\u0026lt;/Name\u0026gt; \u0026lt;/Hotel\u0026gt;  Please note that for the same hotel, the internal code of each supplier is different, but the Giata code stays the same. Giata system is an external company that does a generic mapping of all of the hotels information.\nAvailDestination \u0026amp; GeographicDestination:\nPlease note that the code for these parameters needs to be the lowest destination level and these values are available in AvailDestinationTree \u0026amp; GeographicDestinationTree, respectively.\nHotel types:\nH (Hotel)\nA (Apartment)\nAH (Apartment Hotel)\nC (Club)\nAT (Agrotourism)\nHS (Hostel)\nCA (House)\nV (Ville)\nB (Bungalows)\nD (Disco Club)\nSupplier Code:\nThe hotel code can be returned combined with other codes, like the city code. In this case, it\u0026rsquo;s necessary to perform an availability request.\ne.g, if you are making an availability search by hotel code and the city code is also needed, our system will combine them so you can use it in Availability request.\nIn this case, the code will be the one generated by us, combining the hotel code and the city code, and not the supplier\u0026rsquo;s native code. This can also happen with other code types instead of city code (i.e. country code). In these cases we return the ProviderCode tag containing the internal code used by the supplier (see MetaData).\n"
},
{
	"uri": "https://travelgatex.com/distribution/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "New Updates &amp; Releases",
	"content": "   Distribution changelog     "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/room-list/",
	"title": "Room List",
	"tags": [],
	"description": "Create and update your room list",
	"content": " How to add a provider \nConsiderations It is an incremental load, so bear in mind these considerations:\n If a meal plan exists then it is updated.\n If a meal plan does not exist then it is created.\n Existing meal plans that are not referenced are not removed.\n If an existing meal plan has to be removed from system then you have to contact with TravelgateX.\n If there is any problem with a meal plan\u0026rsquo;s information then it is omitted (and logged) but the load continues.\n  \nSpecifications  File name: Master_RoomList.csv.\n Each line represents a room.\n The first line is a header line: it does not contain data directly and it will be skipped.\n Inside a line, by default fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way. There is an exception, the Room Description can contain the character # and it all will be gathered correctly.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Room code   1 Yes Yes string Room description    \nExample RoomCode#RoomDescription 1#Room 1 2#Room 2 3#Room 3  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/howtos/guides/howto-book/",
	"title": "Useful information",
	"tags": [],
	"description": "Some concepts and particularities",
	"content": " HotelX Settings In HotelX there are different configuration level settings for a request. With these settings, you can configure some aspect of the request:\n   Field Description     context It indicates the context codes that you want to send and to receive.   Timeout It sets the requested timeout in the different query and mutation types:* search¬†* quote¬†* book (includes cancel and booking)¬†   Language The language you want to use in the request.   Currency It indicates the currency you are going to send to the supplier or suppliers.   Nationality It indicates the nationality you are going to send to the supplier or suppliers.   Market It indicates the market you are going to send to the supplier or suppliers.   Business Rules These rules are sent directly via the integration, and they affect the supplier\u0026rsquo;s response.\n* Options Quota: number of options returned via the integration.\n* Type: Choose priority of product    As we have previously stated, we have three ways to indicate these settings.\nWe are going to start with the most specific until the most general.\nSettings per request These settings overwrite all others.\nYou must have permission to overwrite settings, if you don\u0026rsquo;t have this permission you won\u0026rsquo;t be able to change the configuration on runtime, that is, to each request.\nThese fields are the same in the three levels, only that the information is overwritten in lower levels. So, the request settings overwrite all other settings.\nSettings per client The settings in this level are used when you don‚Äôt overwrite settings to the request level.\nHowever, if you have the same client in different groups, you can set different settings to each one. In this case, you should specify which group you want to use in the request, in order to choose which configuration to use.\nSettings per HotelX And the last one, settings per HotelX instance. These settings are in the highest level, in the case that you don\u0026rsquo;t have the client\u0026rsquo;s settings and you don\u0026rsquo;t specify them in the request, settings are obtained from HotelX instance, this setting is mandatory.\n"
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-stats/log/legacy/",
	"title": "Stats",
	"tags": ["products-changelog"],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.  "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/descriptiveinfo/",
	"title": "DescriptiveInfo",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns the details of a hotel (pictures, descriptions \u0026hellip;) in a given language.\nRequest Format The request just requires the hotel code and language code (ISO-639-1) - this is specified within the source\u0026ndash;\u0026gt;languageCode).\nResponse Format The result returns the details of that hotel.\nRemarks The maximum time permitted in our system before the connection is closed is 180000 milliseconds.\nDescriptiveInfoRQ Example In the request for this call it is necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the information in the section \u0026lsquo;Common elements\u0026rsquo;.\n\u0026lt;DescriptiveInfoRQ\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;524AC\u0026lt;/Code\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;/DescriptiveInfoRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nDescriptiveInfoRQ Description    Element Number Type Description     DescriptiveInfoRQ/ 1  Root node.   DescriptiveInfoRQ/ Hotel/ 1 String Hotel requested.   DescriptiveInfoRQ/ Hotel/ Code 1 String Code.    DescriptiveInfoRS Example \u0026lt;DescriptiveInfoRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;70\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Nice Stay\u0026lt;/Name\u0026gt; \u0026lt;Address\u0026gt;Avenue Doctor Brown S/N\u0026lt;/Address\u0026gt; \u0026lt;Airports\u0026gt; \u0026lt;Airport\u0026gt; \u0026lt;IATACode\u0026gt;LON\u0026lt;/IATACode\u0026gt; \u0026lt;/Airport\u0026gt; \u0026lt;/Airports\u0026gt; \u0026lt;Town\u0026gt;London\u0026lt;/Town\u0026gt; \u0026lt;ZipCode\u0026gt;21449\u0026lt;/ZipCode\u0026gt; \u0026lt;CountryISOCode\u0026gt;UK\u0026lt;/CountryISOCode\u0026gt; \u0026lt;AvailDestination code = \u0026quot;2\u0026quot; name = \u0026quot;London\u0026quot;/\u0026gt; \u0026lt;GeographicDestination code = \u0026quot;2\u0026quot; name = \u0026quot;London\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;Contact\u0026gt; \u0026lt;Email\u0026gt;emailhotel@xxx.com\u0026lt;/Email\u0026gt; \u0026lt;Telephone\u0026gt;91547892\u0026lt;/Telephone\u0026gt; \u0026lt;Fax\u0026gt;\u0026lt;/Fax\u0026gt; \u0026lt;/Contact\u0026gt; \u0026lt;BookingContact\u0026gt; \u0026lt;Email\u0026gt;bookinghotel@xxx.com\u0026lt;/Email\u0026gt; \u0026lt;Telephone\u0026gt;91547880\u0026lt;/Telephone\u0026gt; \u0026lt;Fax\u0026gt;910200200\u0026lt;/Fax\u0026gt; \u0026lt;/BookingContact\u0026gt; \u0026lt;CategoryCode\u0026gt;4 Stars\u0026lt;/CategoryCode\u0026gt; \u0026lt;ShortDescription\u0026gt;the hotel.....\u0026lt;/ShortDescription\u0026gt; \u0026lt;LongDescription\u0026gt;the hotel....\u0026lt;/LongDescription\u0026gt; \u0026lt;HowToGet\u0026gt;\u0026lt;/HowToGet\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room code = \u0026quot;201232338\u0026quot; size = \u0026quot;0\u0026quot; viewCode = \u0026quot;Others\u0026quot; classificationCode = \u0026quot;Others\u0026quot; occupancy = \u0026quot;0\u0026quot;\u0026gt; \u0026lt;Beds\u0026gt; \u0026lt;Bed numberOfBeds = \u0026quot;1\u0026quot; type = \u0026quot;QueenBed\u0026quot;/\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;Attributes\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;2403\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Free WiFi\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;2399\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Flat-panel TV\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;2398\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Cable TV service\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;4951\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Free cribs/infant beds\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;318\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Balcony\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Images\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;URL\u0026gt;https://i.travelapi.com/hotels/8000000/7770000/7769600/7769581/72588f9a_z.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;0001-01-01T00:00:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;URL\u0026gt;https://i.travelapi.com/hotels/8000000/7770000/7769600/7769581/bd3da76f_z.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;0001-01-01T00:00:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;/Images\u0026gt; \u0026lt;Description\u0026gt;Small Double Room with Balcony\u0026lt;/Description\u0026gt; \u0026lt;Views\u0026gt; \u0026lt;View\u0026gt; \u0026lt;Code\u0026gt;4219\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Mountain view\u0026lt;/Name\u0026gt; \u0026lt;/View\u0026gt; \u0026lt;/Views\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;SituationDescription\u0026gt;....\u0026lt;/SituationDescription\u0026gt; \u0026lt;Attributes\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;10\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;City center: 3000\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;21\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Bus stop: 70000\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;32\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Bathroom\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;43\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Minibar\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;54\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Jacuzzi\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;65\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Radio\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;76\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Safe\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;87\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HOT\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Playground\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;98\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;SER\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Internet\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;90\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Restaurant\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;01\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;TV\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;31\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HOT\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Pool\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Images\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;URL\u0026gt;http://www.images.net/infor/work/imagen/hotel_07/mapa.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Map view\u0026lt;/Description\u0026gt; \u0026lt;Ordered\u0026gt;1\u0026lt;/Ordered\u0026gt; \u0026lt;Code\u0026gt;50\u0026lt;/Code\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;URL\u0026gt;http://www.images.net/infor/work/imagen/hotel_02/M.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;GRAL\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;External view\u0026lt;/Description\u0026gt; \u0026lt;Ordered\u0026gt;2\u0026lt;/Ordered\u0026gt; \u0026lt;Code\u0026gt;100\u0026lt;/Code\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;/Images\u0026gt; \u0026lt;Rooms\u0026gt; \u0026lt;Room code = \u0026quot;821\u0026quot;\u0026gt; \u0026lt;Beds\u0026gt; \u0026lt;Bed numberOfBeds = \u0026quot;1\u0026quot; type = \u0026quot;SINGLE\u0026quot;/\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;RoomOccupancy\u0026gt; \u0026lt;Adults\u0026gt; \u0026lt;Min\u0026gt;1\u0026lt;/Min\u0026gt; \u0026lt;Max\u0026gt;1\u0026lt;/Max\u0026gt; \u0026lt;/Adults\u0026gt; \u0026lt;Children\u0026gt; \u0026lt;Min\u0026gt;0\u0026lt;/Min\u0026gt; \u0026lt;Max\u0026gt;0\u0026lt;/Max\u0026gt; \u0026lt;/Children\u0026gt; \u0026lt;Infants\u0026gt; \u0026lt;Min\u0026gt;0\u0026lt;/Min\u0026gt; \u0026lt;Max\u0026gt;0\u0026lt;/Max\u0026gt; \u0026lt;/Infants\u0026gt; \u0026lt;Total\u0026gt; \u0026lt;Min\u0026gt;1\u0026lt;/Min\u0026gt; \u0026lt;Max\u0026gt;1\u0026lt;/Max\u0026gt; \u0026lt;/Total\u0026gt; \u0026lt;/RoomOccupancy\u0026gt; \u0026lt;Attributes\u0026gt; \u0026lt;Attribute\u0026gt; \u0026lt;Code\u0026gt;01\u0026lt;/Code\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Description\u0026gt;Private bathroom\u0026lt;/Description\u0026gt; \u0026lt;/Attribute\u0026gt; \u0026lt;/Attributes\u0026gt; \u0026lt;Images\u0026gt; \u0026lt;Picture\u0026gt; \u0026lt;Code\u0026gt;01\u0026lt;/Code\u0026gt; \u0026lt;URL\u0026gt;http://www.images.net/infor/work/imagen/hotel_room_02/M.jpg\u0026lt;/URL\u0026gt; \u0026lt;Classification\u0026gt;HAB\u0026lt;/Classification\u0026gt; \u0026lt;Ordered\u0026gt;1\u0026lt;/Ordered\u0026gt; \u0026lt;Description\u0026gt;Room\u0026lt;/Description\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;0001-01-01T00:00:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;/Picture\u0026gt; \u0026lt;/Images\u0026gt; \u0026lt;Description\u0026gt;Standard Single room\u0026lt;/Description\u0026gt; \u0026lt;Views\u0026gt; \u0026lt;View\u0026gt; \u0026lt;Code\u0026gt;01\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Sea view\u0026lt;/Name\u0026gt; \u0026lt;/View\u0026gt; \u0026lt;/Views\u0026gt; \u0026lt;Area\u0026gt;25\u0026lt;/Area\u0026gt; \u0026lt;/Room\u0026gt; \u0026lt;/Rooms\u0026gt; \u0026lt;LocationType\u0026gt;City\u0026lt;/LocationType\u0026gt; \u0026lt;PaymentOptions cash=\u0026quot;false\u0026quot; bankAcct=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;Cards\u0026gt; \u0026lt;Card code=\u0026quot;VI\u0026quot;/\u0026gt; \u0026lt;Card code=\u0026quot;AX\u0026quot;/\u0026gt; \u0026lt;Card code=\u0026quot;CA\u0026quot;/\u0026gt; \u0026lt;/Cards\u0026gt; \u0026lt;/PaymentOptions\u0026gt; \u0026lt;ExclusiveDeal\u0026gt;true\u0026lt;/ExclusiveDeal\u0026gt; \u0026lt;PropertyCategory\u0026gt; \u0026lt;Code\u0026gt;1\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Hotel\u0026lt;/Name\u0026gt; \u0026lt;/PropertyCategory\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;/DescriptiveInfoRS\u0026gt;  DescriptiveInfoRS Description    Element Number Type Description     DescriptiveInfoRS/ UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   DescriptiveInfoRS/ Hotel 0..n  Root node. Hotel sheet.   Code 1 String Code.   Name 1 String Name.   Address 1 String Address.   Airports/ 0..1  List of airports.   Airports/ Airport 1..n  Specific airport near the hotel.   Airports/ Airport/ IATACode 1 String IATA airport Code.   Town 1 String Town.   ZipCode 1 String ZipCode.   CountryISOCode 1 String Country ISOCode.   AvailDestination 0..1  Avail destination (will only be returned if requested in Avail, and the type is CTY).   @code 1 String Destination code.   @name 1 String Destination name.   GeographicDestination 1  Geographic destination.   @code 1 String Destination code.   @name 1 String Destination name.   @avail 1 Boolean Indicates if the code can be used in Avail.   Latitude 0..1 String Latitude.   Longitude 0..1 String Longitude.   Contact/ 0..1  Hotel contact information.   Contact/ Email 1 String Email.   Contact/ Telephone 1 String Telephone.   Contact/ Fax 1 String Fax.   CategoryCode 1 String Category code.   BookingContact/ 0..1  Booking dept contact.   BookingContact/ Email 1 String Email.   BookingContact/ Telephone 1 String Telephone.   BookingContact/ Fax 1 String Fax.   Chaincode 0..1 String Hotel chain code.   ShortDescription 0..1 String A brief description of the hotel.   LongDescription 0..1 String An extended description that can include remarks, observations and other relevant information about the hotel.   HowToGet 0..1 String Directions to the hotel.   Rooms/ 0..1  Rooms.   Rooms/ Room 1..n  Room.   @code 1 String Room Code.   @size 1 Integer Size of the room.   @viewCode 1 String Main view of the room. See the full list of card codes at Lists of Data.   @classificationCode 1 String Room classification code. See the full list of card codes at Lists of Data.   @occupancy 1 Integer Number of rooms availables at the hotel.   Rooms/ Room/ Description 1 String Room Description.   Rooms/ Room/ Beds/ 0..1  Room bedding.   @sharedBed 1 Boolean Indicates if it\u0026rsquo;s a shared bed.   Rooms/ Room/ Beds/ Bed 1..n  Number of beds allocated in the room.   @numberOfBeds 1 String Number of beds allocated in the room.   @type 1 String Type of bed. (Queen Bed, Single\u0026hellip;)   Rooms/ Room/ Views/ 0..1  Views of the room.   Rooms/ Room/ Views/ View 1..n  List of views.   Rooms/ Room/ Views/ View/ Code 1..n String View code.   Rooms/ Room/ Views/ View/ Name 1..n String Name of the View.   Rooms/ Room/ Attributes 1  Room Attributes. (Follows same structure as Hotel Attributes)   Rooms/ Room/ Images 1  Room Images. (Follows same structure as Hotel Images)   SituationDescription 0..1 String Area description.   RestaurantsDescription 0..1 String Restaurants description.   PoolsDescription 0..1 String Pools description.   ActivitiesDescription 0..1 String Activities description.   ServicesDescription 0..1 String Services description.   AdditionalDetails 0..1 String Additional details.   Attributes/ 0..1  Attributes.   Attributes/ Attribute/ 1..n  Specific attributes of the hotel, such as wi-fi.   Attributes/ Attribute/ Code 1 String Code.   Attributes/ Attribute/ Value 1 String Value.   Attributes/ Attribute/ Classification 1 String Classification ( HOT=hotel, HAB=room, SER=service and GRAL=generic).   Attributes/ Attribute/ Description 0..1 String Description.   Images/ 0..1  Images.   Images/ Picture/ 1..n  Picture.   Images/ Picture/ Url 1 String Url.   Images/ Picture/ Classification 1 String Classification (HOT=hotel, HAB=room, SER=service and GRAL=generic).   Images/ Picture/ Ordered 0..1 String Images should be ordered from 1 onward. 1 is top.   Images/ Picture/ Description 0..1 String Description.   Images/ Picture/ Code 0..1 String Code.   Images/ Picture/ UpgradeUTCDate 0..1 DateTime Indicates the upgrade date of the picture in UTC format.   Rooms/ 0..1  Hotel rooms.   Rooms/ Room/ 1..n  List of rooms.   @code 1 String Room code.   Rooms/ Room/ Beds/ 0..1  Room beds.   Rooms/ Room/ Beds/ Bed/ 1..n  List of beds.   @numberOfBeds 0..1 String Indicates number of beds in the room.   @type 0..1 String Indicates the type of bed.   Rooms/ Room/ RoomOccupancy/ 0..1  Indicates the amount of each occupant type staying in the room.   Rooms/ Room/ RoomOccupancy/ Adults/ 1  Indicates the amount of adults staying in the room (minimum and maximum).   Rooms/ Room/ RoomOccupancy/ Adults/ Min 1 Integer Indicates the minimum amount of adults staying in the room.   Rooms/ Room/ RoomOccupancy/ Adults/ Max 1 Integer Indicates the maximum amount of adults staying in the room.   Rooms/ Room/ RoomOccupancy/ Children/ 1  Indicates the amount of children staying in the room (minimum and maximum).   Rooms/ Room/ RoomOccupancy/ Children/ Min 1 Integer Indicates the minimum amount of children staying in the room.   Rooms/ Room/ RoomOccupancy/ Children/ Max 1 Integer Indicates the maximum amount of children staying in the room.   Rooms/ Room/ RoomOccupancy/ Infants 1  Indicates the amount of infants staying in the room (minimum and maximum).   Rooms/ Room/ RoomOccupancy/ Infants/ Min 1 Integer Indicates the minimum amount of infants staying in the room.   Rooms/ Room/ RoomOccupancy/ Infants/ Max 1 Integer Indicates the maximum amount of infants staying in the room.   Rooms/ Room/ RoomOccupancy/ Total/ 1  Indicates the total amount of occupants staying in the room (minimum and maximum).   Rooms/ Room/ RoomOccupancy/ Total/ Min 1 Integer Indicates the minimum total amount of occupants staying in the room.   Rooms/ Room/ RoomOccupancy/ Total/ Max 1 Integer Indicates the maximum total amount of occupants staying in the room.   Rooms/ Room/ Attributes/ 0..1  Attributes.   Rooms/ Room/ Attributes/ Attribute/ 1..n  Specific attributes of the room, such as wi-fi.   Rooms/ Room/ Attributes/ Attribute/ Code 1 String Code.   Rooms/ Room/ Attributes/ Attribute/ Classification 1 String HAB=room.   Rooms/ Room/ Attributes/ Attribute/ Description 0..1 String Description.   Rooms/ Room/ Images/ 0..1  Images.   Rooms/ Room/ Images/ Picture/ 1..n  Picture.   Rooms/ Room/ Images/ Picture/ Url 1 String Url.   Rooms/ Room/ Images/ Picture/ Classification 1 String HAB=room.   Rooms/ Room/ Images/ Picture/ Ordered 0..1 String Images should be ordered from 1 onward. 1 is top.   Rooms/ Room/ Images/ Picture/ Description 0..1 String Description.   Rooms/ Room/ Images/ Picture/ Code 0..1 String Code.   Rooms/ Room/ Images/ Picture/ UpgradeUTCDate 0..1 DateTime Indicates the upgrade date of the picture in UTC format.   Rooms/ Room/ Description 0..1 String Room description.   Rooms/ Room/ Views/ 0..1  Views.   Rooms/ Room/ Views/ View/ 1..n  List of room views.   Rooms/ Room/ Views/ View/ Code 1 String View code.   Rooms/ Room/ Views/ View/ Name 1 String View name.   Rooms/ Room/ Area/ 0..1 String Room area.   LocationType 0..1 String Location code.   PaymentOptions/ 0..1 String Type of cards allowed by the supplier. This tag is only mandatory if payment type is different than MerchantPay.   PaymentOptions/ Cards/ 1  List of cards allowed.   PaymentOptions/ Cards/ Card 1..n  Type of card allowed.   @code 1 String Code of card. See the full list of card codes at Lists of Data.   ExclusiveDeal 0..1 Boolean Indicates that a Hotel is an Exlusive Deal.   PropertyCategory/ 0..1  Hotels property type. Similar to Type tag, but on supplier\u0026rsquo;s side.   PropertyCategory/ Code 1 String Supplier property code.   PropertyCategory/ Name 1 String Supplier property name.    "
},
{
	"uri": "https://travelgatex.com/product_template/faqs/",
	"title": "FAQs",
	"tags": [],
	"description": "Do you have specific questions about PRODUCT? Check out the FAQs",
	"content": ""
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/faqs/",
	"title": "FAQs",
	"tags": [],
	"description": "Do you have specific questions about HotelX? Check out the FAQs",
	"content": "Click here for our Hotel-X FAQ.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/listsdata/",
	"title": "Lists of Data",
	"tags": [],
	"description": "",
	"content": " Method Goals This paragraph aims to return all of the data lists used in our system: language codes, error codes,currency list, credit cards, nationality and market.\nLanguage Codes    Language Code     English en   Spanish es   Portuguese pt   Italian it   French fr   German de   Brazilian br    Error codes    Code Description     101 Unspecified Error (Exception not controlled or not classified as controlled error). This could be caused by an integration error or an unexpected supplier response.   102 Supplier Error.   103 Too many requests to the supplier.   104 Timeout (Timeout during the execution of an operation (look in the common attribute timeout )).   105 Communication Error.   204 Supplier returns 0 results in availability.   205 The Supplier doesn\u0026rsquo;t accept the distribution RQ.   206 The Supplier doesn\u0026rsquo;t accept the dates RQ.   207 The Supplier doesn\u0026rsquo;t accept the request RQ.   301 Option not found in policies.   302 Hotel Not Found in DescriptiveInfo.   303 Booking not confirmed in the supplier\u0026rsquo;s system.    Currency codes Our system uses a standard ISO - 3 for all suppliers.\nCredit Cards    Codes Names     VI Visa   AX American Express   BC BC Card   CA MasterCard   CB Carte Blanche   CU China Union Pay   DS Discover   DC Diners Club   T Carta Si   R Carte Bleue   N Dankort   L Delta   E Electron   JC Japan Credit Bureau   TO Maestro   S Switch   EC Electronic Cash   EU EuroCard   TP Universal air travel card   OP Optima   ER Air Canada/RnRoute   XS Access   O Others    Currency codes Our system uses a standard ISO - 3 for all suppliers.\nMarkets Most suppliers use a standard ISO - 3166_1_alfa_2, but it depends on each individual supplier.\nNationality We use a standard ISO - 3166_1_alfa_2.\nPayment Types    Codes Description     MerchantPay The payment is managed by the supplier.   LaterPay The payment is managed by the hotel. The customer will use a credit-card as a guarantee for the hotel and the payment will be completed at check in.   CardBookingPay The payment is managed by the supplier. The payment is effectuated at the time of booking.   CardCheckInPay The payment is managed by the supplier. The payment is effectuated at check in in the hotel.   PayX The payment is managed by TravelgateX\u0026rsquo;s payment system.    Electronic Commerce Indicator Codes Visa, American Express, Diners Club and JCB    ECI Value Description     05 3DS authentication was successful, transactions are secured by 3DS.   06 Authentication was attempted but was not or could not be completed; possible reasons being either the card or its Issuing Bank has yet to participate in 3DS.   07 3DS authentication is either failed or could not be attempted; possible reasons being both card and Issuing Bank are not secured by 3DS, technical errors, or improper configuration.    MasterCard    ECI Value Description     00 3DS authentication is either failed or could not be attempted; possible reasons being both card and Issuing Bank are not secured by 3DS, technical errors, or improper configuration.   01 3DS authentication was attempted but was not or could not be completed; possible reasons being either the card or its Issuing Bank has yet to participate in 3DS, or cardholder ran out of time to authorize.   02 3DS authentication is successful.    PARes Status    Status Value Description     Y Successful Authentication.   N Failed Authentication.   U Unable to complete Authentication.   A Successful Attempts Transaction.   B You can proceed to authorisation using the information received.   R Authentication Rejected.    Card Enrollment Status    Status Value Description     Y Cardholder is enrolled. Bank is participating in 3-D Secure protocol and will return the ACSUrl.   N Cardholder Not Participating ‚Äì Cardholder is not enrolled.   U Unavailable. The DS or ACS is not available for authentication at the time of the request.    Signature Verification Status    Status Value Description     Y Signature of the PARes has been validated successfully.   N PARes could not be validated.    Rate Conditions    Codes Description     NonRefundable Cancellation fee is a 100% from the moment the reservation is create.   Custom A way of setting less standardized rates. Can specify the restrictions that it deems convenient and that are not typified by TGX.   Older55 Rate that can only be sold to people who are 55 yeasrs or older.   Older60 Rate that can only be sold to people who are 60 yeasrs or older.   Older65 Rate that can only be sold to people who are 65 yeasrs or older.   Package Rate can\u0026rsquo;t be sold separately from another product attached to it, such as a flight.   CanaryResident Rate applicable to Canary Islands residents only.   BalearicResident Rate applicable to Balearic Islands residents only.   LargeFamily Rate applied to large families and is determined by each supplier.Check remarks for more details.   Honeymoon Rate applied to those who just got married and is determined by each supplier. Check remarks for more details.   PublicServant Rate applicable to public servants only.   Unemployed Rate applied to those without work.   Mobile Rate applicable to options booked by mobile.   Warranty Rate applicable to options with cancellation warranty.    "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/providers/",
	"title": "Providers",
	"tags": [],
	"description": "Create and update your prpviders",
	"content": " How to add a provider \nConsiderations It is an incremental load, so bear in mind these considerations:\n If a meal plan exists then it is updated. If a meal plan does not exist then it is created. Existing meal plans that are not referenced are not removed. If an existing meal plan has to be removed from system then you have to contact with TravelgateX. If there is any problem with a meal plan\u0026rsquo;s information then it is omitted (and logged) but the load continues.  \nSpecifications  File name: Providers.csv.\n Each line represents a unique provider and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Provider code   1 Yes Yes string Provider name   2 Yes Yes boolean Indicate if the provider is Direct or Third.true ‚Üí Direct / Own providerfalse ‚Üí Third / External provider    \nExample 1#Test Provider#true  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/concepts/advancedconcepts/settings/",
	"title": "Settings",
	"tags": [],
	"description": "Learn about settings in HotelX",
	"content": " On this page you will learn more about settings in HotelX.\nWhat are settings? Settings are the common configuration that will be used in order to build the request to the supplier/s.\nThere are two kind of settings, overridable and partially overridable. You can find the partially overridable settings in the first level of settings and are known as HotelX_Settings. These settings are formed by some non-overridable settings such as \u0026ldquo;group\u0026rdquo; and \u0026ldquo;testMode\u0026rdquo;, some overridable global settings such as \u0026ldquo;timeout\u0026rdquo;, \u0026ldquo;auditTransactions\u0026rdquo;, etc., and some overridable baseSettings such as \u0026ldquo;businessRules\u0026rdquo;.\nThere are several levels of settings that can be combined in order to build customised settings. The hierarchy of heritage and type of settings for each level is:\n0 - Criteria common settings fields (currency, auditTransactions, businessRules, etc.)\n1 - Access Settings [Base Settings]\n2 - Supplier Settings [Base Settings]\n3 - Query Settings [HotelX Settings]\n4 - Database Access Settings [Base Settings]\n5 - Database Supplier Settings [Base Settings]\n6 - Database Client Settings [Default Settings]\n7 - Database Group Settings [Default Settings]\nAny field that is empty in one level, will be filled in with the value of the following level.\nThere is a special case, which is the Criteria fields specified in the query. Those have preference over the values in database. If those are empty in the query, they will be filled from the values in the database setted up early.\nWhich settings are mandatory and from where are comming from?  Context: Mandatory. This field has to be filled in the query or in default settings\n Client: Mandatory. Has to be filled in the query\n Group: Optional. If it\u0026rsquo;s not filled in the query, it will be taken from our internal database\n Timeout: Mandatory. This field has to be filled in the query or in default settings\n AuditTransactions: Optional\n BusinessRules: Mandatory. This field has to be filled in the query or in default settings\n Suppliers: Optional\n Plugins: Optional\n TestMode: Optional\n ClientTokens: Optional\n CommitRequired: Optional\n Language: Mandatory. This field has to be filled in the query (Criteria) or in default settings\n Currency: Mandatory. This field has to be filled in the query (Criteria) or in default settings\n Nationality: Mandatory. This field has to be filled in the query (Criteria) or in default settings\n Markets: Mandatory. This field has to be filled in the query (Criteria) or in default settings\n  Where can Settings be applied? Settings can be applied to the following operations:\nQueries These queries have the same settings configuration Click here to see configuration\n Search\n Search setting example  Quote\n Quote setting example  Booking List\n Booking List setting example   Mutations These mutations have the same settings configuration Click here to see configuration\n Book\n Example : Book setting example  Cancel\n Example : Quote setting example    If you need to modify any fields of the database Settings, please contact our Help Center. Please find an example of each type of the settings above:\nHotelX Settings Query/Mutation settings\n\u0026quot;settings\u0026quot;: { \u0026quot;group\u0026quot;: \u0026quot;HotelX_test\u0026quot;, \u0026quot;client\u0026quot;: \u0026quot;xtg\u0026quot;, \u0026quot;context\u0026quot;: \u0026quot;HOTELTEST\u0026quot;, \u0026quot;testMode\u0026quot;: true, \u0026quot;timeout\u0026quot;: 18000, \u0026quot;language\u0026quot;:\u0026quot;es\u0026quot;, \u0026quot;suppliers\u0026quot;: [ { \u0026quot;code\u0026quot;: \u0026quot;HOTELTEST\u0026quot;, \u0026quot;settings\u0026quot;: { \u0026quot;auditTransactions\u0026quot;: true }, \u0026quot;accesses\u0026quot;: [ { \u0026quot;accessId\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;settings\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot; } } ] } ] }  Base Settings Access or supplier settings (from Query or database)\n\u0026quot;settings\u0026quot;: { \u0026quot;timeout\u0026quot;: 300, \u0026quot;auditTransactions\u0026quot;: true, \u0026quot;businessRules\u0026quot;: { \u0026quot;optionsQuota\u0026quot;: 500, \u0026quot;businessRulesType\u0026quot;: \u0026quot;CHEAPER_AMOUNT\u0026quot; } }  [Default Settings] Group or client database settings\n\u0026quot;settings\u0026quot;: { \u0026quot;context\u0026quot;: \u0026quot;CONTEXT\u0026quot;, \u0026quot;client\u0026quot;: \u0026quot;client\u0026quot;, \u0026quot;timeout\u0026quot;: { \u0026quot;search\u0026quot;: 18000, \u0026quot;quote\u0026quot;: 25000, \u0026quot;book\u0026quot;: 180000 }, \u0026quot;language\u0026quot;: \u0026quot;en\u0026quot;, \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;nationality\u0026quot;: \u0026quot;ES\u0026quot;, \u0026quot;market\u0026quot;: \u0026quot;ES\u0026quot;, \u0026quot;businessRules\u0026quot;: { \u0026quot;optionsQuota\u0026quot;: 0, \u0026quot;businessRulesType\u0026quot;: \u0026quot;CHEAPER_AMOUNT\u0026quot; } }  If we send a Query with the previous HotelX Settings, the configuration that will be sent to the Seller is:\n Context: \u0026ldquo;CONTEXT\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From DB Default Settings\n Language: \u0026ldquo;en\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From HotelX Query/Mutation Settings\n Currency: \u0026ldquo;EUR\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From Access Settings in Query/Mutation (Base Settings)\n Nationality: \u0026ldquo;ES\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From DB Default Settings\n Market: \u0026ldquo;ES\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From DB Default Settings\n Timeout: 18000\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From HotelX Query/Mutation Settings  AuditTransactions: true\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From Supplier Settings in Query/Mutation (Base Settings)\n BusinessRules/OptionQuota: 0\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From Access DB Settings (Base Settings)\n BusinessRules/BusinessRulesType: \u0026ldquo;CHEAPER_AMOUNT\u0026rdquo;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//From Access DB Settings (Base Settings)\n  Plugins As you can observe in GraphQL API Specifications, the input field \u0026ldquo;plugins\u0026rdquo; allows to insert plugins that will be executed during execution process.\nDefault Plugins Additionally, it is possible to load default plugins in our database. Currently, the only way to load these plugins in our database is contacting our Customer Care team. These default plugins will be executed in all the Queries and Mutations specified above if no filters are specified.\nFilter Plugins Besides, in the Query/Mutation Settings, there is a filter that allows to include or exclude the execution of any plugin. The way it works is similar to the Access Filter in Hotel-Search and it is only allowed specifying includes or excludes, not both. HotelX always reads Query/Mutation input plugins and then joins them to the loaded default plugins of our database, then applies the plugin filters.\n On the one hand, if you specify plugins to be included, these plugins will be executed only if they are found in all the joined plugins (Query/Mutation input plugins in settings and Default plugins from database).\n On the other hand, if you specify plugins be to excluded, these will be deleted from joined plugins and consequently not executed.\n  The way of indicating which plugins we want to include/exclude is introducing Step, Type and Name of the plugin in the Query/Mutation.\nTimeout The timeout is the timeout in milliseconds that will be applied to the connection with seller/sellers/supplier/s. If more than one supplier is requested, timeout will be applied to all suppliers and cut the connection with those suppliers that exceed this timeout. Travelgate will not close the connection with the client if this timeout is exceeded.\n"
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-stats/",
	"title": "Stats",
	"tags": [],
	"description": "Contains a curated, chronologically ordered list of notable changes",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \tTo make it easier for users and contributors to see precisely what notable changes have been made on the product.\nProduct Page Link\nAll notable changes to this product will be documented in this page. Under construction! We have logged this resource on our roadmap and we are currently working through extending all of the resources in our documentation. If you need specific resources (such as this page), please let us know by using one of the following channels:\n Send us a Jira service desk request Log an issues request with us Write this page yourself! If you have experience in solving this topic, we would love your contribution. Please click on the Edit page button and issue a Pull Request via GitHub with your suggested edits.     "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/log/legacy/",
	"title": "travelgatex.com",
	"tags": ["products-changelog"],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": " To make it easier for users and contributors to see precisely what notable changes have been made on the web.\nWeb site Link\nAll notable changes to this product will be documented in this page. 2019-06-20  TEAMs: Improved TEAMs page to allow see teams to all TGX operators Stats: Now shows totals and percentatge on all headers IAM Members: Added icon type members to be more clean IAM Members: Improvement to keep groups open at IAM page    Profiles: Revised redirections to all profile pages IAM Members: fixed creation of new members solving issue on granting permissions IAM create organization: New organizations, pattern code has been changed to allow numbers on organization code Stats: stats view all adviseMessages and only reject if error   2019-06-06  IAM admin entities: UX improve, now expanded by default    IAM admin entities: The accesses list weren\u0026rsquo;t showing the supplier data asociated Stats: stats view all adviseMessages and only reject if error   2019-05-29  IAM members: added macro-roles for distribution IAM members: added macro-roles for alerts and agrupations IAM: added \u0026ldquo;suit organization\u0026rdquo; option to adapt organizations to IAM tree structure.    IAM: removed mandatory condition to label Stats: moved assets to other   2019-05-24  Insights: New public page published Organizations: organizations\u0026rsquo; summary page Stats: view error others Stats: UX improvement on cursor to download    HotelX: Fixed issue that prevented configs from refreshing when changing hotelX instances Stats: Issue on filter stats when impersonating   2019-05-16  IAM: Revised edit labels. IAM: Edit functionality for group labels. Vertical Menu: Improved style.    Members: Solved issue on getting members.   2019-05-10  Members: Some members were not showing the tick on isActive when they were active. Events: Invert past events to be first the most recent Connect: Fixed bug on clicking reload on firefox   2019-05-03  Email: Implemented new mailing system to send emails from the web. Connect: Improved control over disabled controls and added flexibility to dates.   2019-04-30  IAM: Added option to clone members permissions to other users Public page: Shuffle profiles on home Stats: responsive media-querys applied Connect: Added access code and client name to activations    Connect: updated activations list and added istest to accesses    Hotelx: Allowed empty fields in hotelx IAM-teams: Fixed a bug that didn\u0026rsquo;t allow to create teams   2019-04-15  Stats: Column sorting Stats: filter suppliers by clients on filter Buyer HotelX: Added hotelx default settings screen Backend: Added settings submenu Backend: Profile list by organization Organizations: Added edit organization page IAM: Added option to clone members Entities: Added owner to form in entities/suppliers Public web: Added \u0026ldquo;Why partner with us\u0026rdquo; page Connect: added drag and drop XML functionality    Stats: Changed Filters Stats: Circular mock-up of global stats Stats: Ratios calculations revised Stats: Change calendar component to allow manual settings Backend nav-bar: Updated men√∫ items reordered on all pages    IAM-organizations: Solved a bug produced when trying to add/removes apis to/from a group IAM-members: Solved bug with member deletion   2019-03-31  Hotel-b2b: Added close-booking and my-bookings logic Hotel-b2b: Added items to menu Hotel-b2b: Price comparator Added provisional \u0026ldquo;test\u0026rdquo; button to new connect functionality Activations: added supplier column Connect: Added channelx option to forms Old connect: Added fields to legacy form Stats: Other requests added Stats: Separate filter Buyer Stats: add organizacitons and owners on filter by seller    IAM-organizations: Solved a bug produced when trying to add/removes apis to/from a group   2019-03-14  added status cards to stats Profiles edition IAM: revoque/grant apis to a group    B2B result page changes Home footer: changed blog URL Activations page modified style    Solved an error not showing an error on create a duplicate member   2019-02-28  New application HotelX: B2B Improved first login email validation    Renamed product payment as HotelPay-X Stats: revised date filter dropdown Changed token treatment (accept very long tokens) Profile section fetches groups to assign roles Improved first login wizard UX   2019-02-12  Added pagination on IAM Added first login wizard    Button remove organization   2019-01-29  Connect: added selector to specify client    HotelX: fixed issue with empty fields    Removed old create access function   2019-01-10  HotelX configuration: Added access code to configuration form    Backend: Vertical men√∫ updated and reordered New register page and welcome page    Error handling moddified (changed error for adviseMessage in GraphQL Schema)   2018-12-27  New static page on public web: Testimonials. Backend: Added impersonation functionality IAM: Added impersonation functionality to users list Added recaptcha validation on contact and register page    Solved a bug where the org-selector was not appearing in some situations   2018-12-13  New static pages on public web (People and Company)    Backend Men√∫: icons revised   2018-11-29  User registration functionality Connect: Added suppliers to connect form legacy Payment: Added an alert to see the code of the saved card after saving it Payment: Search by name and surname Profiles directory: Tags clickable and able to update filters    Entites: Changed link client to add client    Entities: Bug inducing duplicity on accesses fixed. Applied Apollo GraphQL bugfix to Official Apollo repository bug reported Admin-Entities: Bug fix on supplier creation   2018-11-15  Admin-Entities: added unlink group from access Admin-Entities: added edit suppliers List with selected orgnization added to stats on header    Partners directory: fixed filtering Stats filtering reviewed   2018-11-07  General backend: Left accordion menu applied. Stats results style changed. Stats sellers tab style changed.    Stats calculations reviewed and fixed. Seller tab reviewed and fixed.   2018-10-31  Back end menu: Added connect. Back end menu: Added admin-entities. General Back end: Pagination improved. Changed Stats filters. Search profile: Added search inputs.    Load stats problem solved. IAM: fixed a bug with the update of the permissions on a member.   2018-10-23  Added Hotel-X configuration page to the web. Added Mastercard to Payment-X    Members: fixed a bug with the update of the permissions on a member.   2018-10-09  Added press module with releases, asses, medias, newsletter, blog and contact. Added the possiblity to add apis to a team. Added second functional version of stats.    Changed the query to obtain team permissions.    Minor styling and logic global fixes.   2018-09-25  Added admin toggle to entities to allow the creation of accesses, clients and suppliers. Added link button on accesses, clients and suppliers toggles, to link the resource at the current group level.   2018-07-31  Added columns to IAM members user table \u0026ldquo;WHOLESALER\u0026rdquo; seller added to filter list of partners Added option to assign roles through templates of macro roles to IAM members   2018-07-30  Improvements on the organization selector  Sorted organizations in alphabetical order. Autoselect when there is just one org. available. Popup when there is no org. selected. Prettier component.     Iam members  Label, created at and updated at columns on members table. Option to assign roles by macro-roles  Seller \u0026ldquo;WHOLESALER\u0026rdquo; to the partners filter on the directory and partners screen. New admin permissions  \n Groups function filters   "
},
{
	"uri": "https://travelgatex.com/alerts-x/",
	"title": "Alerts",
	"tags": [],
	"description": "",
	"content": "Alerts is a monitoring App which monitors any unusual performance accroding to the criteria you set for that connection.\n  Overview Alerts Overview\n     Reference Reference Documentation\n     How-to guides Perform specific tasks\n     Release Notes New Updates \u0026amp; Releases\n    "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/hotels-portfolio/",
	"title": "Hotels portfolio by Agency",
	"tags": [],
	"description": "Set concrete hotels portfolios by agency",
	"content": " How to add a hotel portfolio by agency \nConsiderations It is an absolute load, so bear in mind these considerations:\n If all the data on the file is correct then the existing hotels portfolios by agency are removed and file\u0026rsquo;s data is inserted into the system to define the news hotels portfolios by agency.\n If there is any problem with the file or its data then the load is cancelled and the existing hotels portfolios by agency are not removed.\n If an agency does not have a hotels portfolio on the system then that agency will use all the hotels on the system.\n If an agency has a hotels portfolio on the system and that agency is not included on the file then that portfolio will be removed and the agency will use all the hotels on the system.\n If all hotels portfolios for all agencies have to be removed form the system then you have to contact with TravelgateX.\n  \nSpecifications  File name: Master_AgencyHotels.csv.\n Each line represents a unique hotel portfolio for one agency.\n The first line is not a header line: it contains data directly.\n Inside a line fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n If a field is mandatory then it has to be present in each line, even if it has no data: its used position cannot be omitted. If mandatory then we have to see if its data is mandatory or not.\n If a field is not mandatory but we want to set it then all previous fields must be present: if any previous field is not mandatory and we don\u0026rsquo;t want to set a value we will have to include it with no value. We need it this way as it is used the field position to map it to the target data.\n If a field\u0026rsquo;s data is not mandatory and we don\u0026rsquo;t want to set it then we just keep it empty: i.e. \u0026hellip;##\u0026hellip;\n If a field\u0026rsquo;s data is mandatory then we have to set something (no value is not admitted).\n  \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Agency Code   1 Yes Yes string List of hotel codes that correspond to the hotel portfolio for the corresponding agency. Each hotel code of the list has to be separated using the ; as separator.    \nExample TEST_AGENCY#1111;2222;3333;4444  "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/marketlist/",
	"title": "MarketList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return a list of the available Markets, which will be used in the availability request.\nRequest Format The request does not require any elements - empty request.\nResponse Format The result returns a list of Market.\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds. Most suppliers use a standard ISO-3166_1_alfa_2, but it depends on each individual supplier.\nMarketListRQ Example \u0026lt;MarketListRQ\u0026gt; \u0026lt;/MarketListRQ\u0026gt;  MarketListRQ Description    Element Number Type Description     MarketListRQ 1  Root node.    MarketListRS Example \u0026lt;MarketListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Markets\u0026gt; \u0026lt;Market\u0026gt; \u0026lt;Code\u0026gt;ES\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Spain\u0026lt;/Name\u0026gt; \u0026lt;GroupCode\u0026gt;Europe\u0026lt;/GroupCode\u0026gt; \u0026lt;/Market\u0026gt; \u0026lt;Market\u0026gt; \u0026lt;Code\u0026gt;PT\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Portugal\u0026lt;/Name\u0026gt; \u0026lt;GroupCode\u0026gt;Europe\u0026lt;/GroupCode\u0026gt; \u0026lt;/Market\u0026gt; ‚Ä¶ \u0026lt;Market/\u0026gt; \u0026lt;/Markets\u0026gt; \u0026lt;/MarketListRS\u0026gt;  MarketListRS Description    Element Number Type Description     MarketListRS /UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   MarketListRS /Markets / 1  Root node, list of markets.   Markets /Market 1..n  Market.   Markets /Market/Code 1 String Code.   Markets /Market/Name 1 String Name.   Markets /Market/GroupCode 0..1 String Indicates if the supplier groups different markets together and what the group is called.    GroupCode:\nUse this option to see if the supplier groups different markets in a single group, so you can get the same prices/options if two markets belong to the same group.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/",
	"title": "Release Notes",
	"tags": ["release-notes"],
	"description": "Check the update released of Hotel-X",
	"content": "   Roadmap We have put together a GitHub Project where we will keep updating on the things we‚Äôve in our plans.\n     GraphQL Schema Changes It includes backwards-compatible changes, schema previews, and upcoming breaking changes.\n     GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n     Hotel-X Changelog     "
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/products-changelogs/changelog-web/",
	"title": "Web travelgatex.com changelog",
	"tags": [],
	"description": "Contains a chronologically ordered list of notable changes at our website",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \t 2019-10-15  ACCESES: Added shared field and allowed url edition in acceses. MENU: new horizontal menu.    CONNECT: Modified to choose client before hotelx. PUBLIC WEB: changed info searches/day in home.    PROFILES: tag error on removing category fixed. PRESS: Fixed media processing.      \t 2019-10-09  ALERTS: Added new filters and group by ALERTS: Add API and timesToRecovery    ALERTS: Added new responsive styles    ALERTS: fix on Status ALERTS: fix on Update Price      \t 2019-09-16  Connect: Added VCC to legacy Profiles: Enabled entity asignment to profiles IAM: Added pagination and info to orgs, and profiles page completed    Added gzip compression to calls to the gateway    Alerts: Fixed issue on create new alert Connect: Fixed dates activations      \t 2019-09-30  ENTITIES: Modified access form to custom require runtime configuration    IAM: Changes on new macro roles ORGANIZATIONS: Changed filters to not appear on the request on missing    MEMBERS: Solved an error realated on updating api-keys after a new creation      \t 2019-08-30  IAM: Added owner filter to entities/admin-entities. added new tab for\u0026hellip; Logging: Added hotel reference Members: IAM-macro-roles, added tabs for simple and advanced Alerts: entities by buyer or seller    Logging: References now allows more than one option    Logging: Fixed logging with filter if your not logged on the page      \t 2019-08-16  Logging: Added new feature to set filters via url Alerts: added logic time alerts Connect: modified profile cals and addded premium partner option to connect    Accesses: improved refresh logic when updating accesses IAM Entities: Improved sorting in entities    B2B: Fixed required typename on apis      \t 2019-07-31  Alerts: Added sort to table Stats: traffic type selector Logging: Added column machine to results Logging: Selector items per page Error Messages: added hint description to error code table    Changed format of api-errors    Logging: Fixed error descriptions Profiles: fixed bug that prevented refresh on edit Logging: Added label when reference filters are disabled      \t 2019-07-15  Alerts: added configuration multiselectors Profiles: Fully enabled filter profiles Logging: Added new filter number of results Entities: Added sorting method Profiles: Updated query to look for stats and formated text in profiles    Logging: Filter errors refactored Logging: Added red control to non filled required filters Logging: Changed time to 24h mode, without am/pm    Logging: Logging table wasn\u0026rsquo;t showing the timestamps on firefox, now is fixed Logging: Enable showing organisation suppliers on SELLER mode Logging: Hide the table on no results      \t 2019-06-28  Logging-filter: Implemented ShowOnlyActives filter, added pagination to the results table Added Star-rating component at pages and changed text in people Created internal status page Alerts released on web    Logging-filter: Reorder filter columns, reorder table columns Changed the global header, alerts and organization selector.    Fix on Stats Calendar      \t To make it easier for users and contributors to see precisely what notable changes have been made on the web.\nWeb site Link\nAll notable changes to this product will be documented in this page. 2019-06-20  TEAMs: Improved TEAMs page to allow see teams to all TGX operators Stats: Now shows totals and percentatge on all headers IAM Members: Added icon type members to be more clean IAM Members: Improvement to keep groups open at IAM page    Profiles: Revised redirections to all profile pages IAM Members: fixed creation of new members solving issue on granting permissions IAM create organization: New organizations, pattern code has been changed to allow numbers on organization code Stats: stats view all adviseMessages and only reject if error   2019-06-06  IAM admin entities: UX improve, now expanded by default    IAM admin entities: The accesses list weren\u0026rsquo;t showing the supplier data asociated Stats: stats view all adviseMessages and only reject if error   2019-05-29  IAM members: added macro-roles for distribution IAM members: added macro-roles for alerts and agrupations IAM: added \u0026ldquo;suit organization\u0026rdquo; option to adapt organizations to IAM tree structure.    IAM: removed mandatory condition to label Stats: moved assets to other   2019-05-24  Insights: New public page published Organizations: organizations\u0026rsquo; summary page Stats: view error others Stats: UX improvement on cursor to download    HotelX: Fixed issue that prevented configs from refreshing when changing hotelX instances Stats: Issue on filter stats when impersonating   2019-05-16  IAM: Revised edit labels. IAM: Edit functionality for group labels. Vertical Menu: Improved style.    Members: Solved issue on getting members.   2019-05-10  Members: Some members were not showing the tick on isActive when they were active. Events: Invert past events to be first the most recent Connect: Fixed bug on clicking reload on firefox   2019-05-03  Email: Implemented new mailing system to send emails from the web. Connect: Improved control over disabled controls and added flexibility to dates.   2019-04-30  IAM: Added option to clone members permissions to other users Public page: Shuffle profiles on home Stats: responsive media-querys applied Connect: Added access code and client name to activations    Connect: updated activations list and added istest to accesses    Hotelx: Allowed empty fields in hotelx IAM-teams: Fixed a bug that didn\u0026rsquo;t allow to create teams   2019-04-15  Stats: Column sorting Stats: filter suppliers by clients on filter Buyer HotelX: Added hotelx default settings screen Backend: Added settings submenu Backend: Profile list by organization Organizations: Added edit organization page IAM: Added option to clone members Entities: Added owner to form in entities/suppliers Public web: Added \u0026ldquo;Why partner with us\u0026rdquo; page Connect: added drag and drop XML functionality    Stats: Changed Filters Stats: Circular mock-up of global stats Stats: Ratios calculations revised Stats: Change calendar component to allow manual settings Backend nav-bar: Updated men√∫ items reordered on all pages    IAM-organizations: Solved a bug produced when trying to add/removes apis to/from a group IAM-members: Solved bug with member deletion   2019-03-31  Hotel-b2b: Added close-booking and my-bookings logic Hotel-b2b: Added items to menu Hotel-b2b: Price comparator Added provisional \u0026ldquo;test\u0026rdquo; button to new connect functionality Activations: added supplier column Connect: Added channelx option to forms Old connect: Added fields to legacy form Stats: Other requests added Stats: Separate filter Buyer Stats: add organizacitons and owners on filter by seller    IAM-organizations: Solved a bug produced when trying to add/removes apis to/from a group   2019-03-14  added status cards to stats Profiles edition IAM: revoque/grant apis to a group    B2B result page changes Home footer: changed blog URL Activations page modified style    Solved an error not showing an error on create a duplicate member   2019-02-28  New application HotelX: B2B Improved first login email validation    Renamed product payment as HotelPay-X Stats: revised date filter dropdown Changed token treatment (accept very long tokens) Profile section fetches groups to assign roles Improved first login wizard UX   2019-02-12  Added pagination on IAM Added first login wizard    Button remove organization   2019-01-29  Connect: added selector to specify client    HotelX: fixed issue with empty fields    Removed old create access function   2019-01-10  HotelX configuration: Added access code to configuration form    Backend: Vertical men√∫ updated and reordered New register page and welcome page    Error handling moddified (changed error for adviseMessage in GraphQL Schema)   2018-12-27  New static page on public web: Testimonials. Backend: Added impersonation functionality IAM: Added impersonation functionality to users list Added recaptcha validation on contact and register page    Solved a bug where the org-selector was not appearing in some situations   2018-12-13  New static pages on public web (People and Company)    Backend Men√∫: icons revised   2018-11-29  User registration functionality Connect: Added suppliers to connect form legacy Payment: Added an alert to see the code of the saved card after saving it Payment: Search by name and surname Profiles directory: Tags clickable and able to update filters    Entites: Changed link client to add client    Entities: Bug inducing duplicity on accesses fixed. Applied Apollo GraphQL bugfix to Official Apollo repository bug reported Admin-Entities: Bug fix on supplier creation   2018-11-15  Admin-Entities: added unlink group from access Admin-Entities: added edit suppliers List with selected orgnization added to stats on header    Partners directory: fixed filtering Stats filtering reviewed   2018-11-07  General backend: Left accordion menu applied. Stats results style changed. Stats sellers tab style changed.    Stats calculations reviewed and fixed. Seller tab reviewed and fixed.   2018-10-31  Back end menu: Added connect. Back end menu: Added admin-entities. General Back end: Pagination improved. Changed Stats filters. Search profile: Added search inputs.    Load stats problem solved. IAM: fixed a bug with the update of the permissions on a member.   2018-10-23  Added Hotel-X configuration page to the web. Added Mastercard to Payment-X    Members: fixed a bug with the update of the permissions on a member.   2018-10-09  Added press module with releases, asses, medias, newsletter, blog and contact. Added the possiblity to add apis to a team. Added second functional version of stats.    Changed the query to obtain team permissions.    Minor styling and logic global fixes.   2018-09-25  Added admin toggle to entities to allow the creation of accesses, clients and suppliers. Added link button on accesses, clients and suppliers toggles, to link the resource at the current group level.   2018-07-31  Added columns to IAM members user table \u0026ldquo;WHOLESALER\u0026rdquo; seller added to filter list of partners Added option to assign roles through templates of macro roles to IAM members   2018-07-30  Improvements on the organization selector  Sorted organizations in alphabetical order. Autoselect when there is just one org. available. Popup when there is no org. selected. Prettier component.     Iam members  Label, created at and updated at columns on members table. Option to assign roles by macro-roles  Seller \u0026ldquo;WHOLESALER\u0026rdquo; to the partners filter on the directory and partners screen. New admin permissions  \n Groups function filters      "
},
{
	"uri": "https://travelgatex.com/distribution/file-loads/masters/destinations/",
	"title": "Destinations",
	"tags": [],
	"description": "Create and update your destinations and destinations groups",
	"content": " How to add a destination \nConsiderations It is an incremental load, so bear in mind these considerations:\n If a destination exists then it is updated.\n If a destination does not exist then it is created.\n Existing destinations that are not referenced are not removed.\n If an existing destination has to be removed from system then you have to contact with TravelgateX.\n If there is any problem with a destination\u0026rsquo;s information then it is omitted (and logged) but the load continues.\n  \nSpecifications  File name: Master_Destinations.csv.\n Each line represents a unique destination and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line, by default fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026ldquo; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n All fields are mandatory.\n  \nControl lines  Control lines allow us to determine how the content of the file has to be interpreted.\n This type of lines do not contain data, they contain orders for the process and these orders take effect from the control line forward, so control lines should be placed at the begining of the file (and after any header).\n Each control operation has to be given on a separate line (one line one control operation).\n  \n   Control Description     @CTRL:separator= With the control line @CTRL:separator= followed by a character or string it can be defined the fields separator to be used, overwriting the default one or any previous definition. The specified character or string cannot be used inside data because fields would be gathered in a wrong way.  Example of line to set # as the fields separator: @CTRL:separator=#.    \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Destination Code. It can\u0026rsquo;t be set to zero value. It is the code of the destination and it will be used for reference the node on the tree. Note: This code should be match the city code in the Hotel master file.   1 Yes - string Empty field. It will be ignored.   2 Yes Yes string Destination name.   3 Yes - string ISO Country Code (2 chars).   4 Yes - string Parent destination code. If the destination has no parent then it has to be set to zero.    \nExample 5##Springs (California)#US#0  How to add a destination group Considerations It is an incremental load, so take in account these considerations:\n If a group exists then it is updated.\n If a group does not exist then it is created.\n Existing meal plans that are not referenced are not removed.\n If an existing meal plan has to be removed from system then you have to contact with TravelgateX.\n If there is any problem with a meal plan\u0026rsquo;s information then it is omitted (and logged) but the load continues.\n  \nSpecifications  File name: Master_DestinationsGroups.csv.\n Each line represents a unique destination and contains all the information (fields) about it.\n The first line is not a header line: it contains data directly.\n Inside a line, by default fields are separated using the character #. This character can\u0026rsquo;t be used inside data because fields would be gathered in a wrong way.\n The data of the fields is not encapsulated by \u0026quot; or any other character: the information must be included directly.\n Any blank line will be skipped.\n The file and its data have to be encoded using UTF-8. Otherwise there can be stored strange characters.\n All fields are mandatory.\n  \nControl lines  Control lines allow us to determine how the content of the file has to be interpreted.\n This type of lines do not contain data, they contain orders for the process and these orders take effect from the control line forward, so control lines should be placed at the begining of the file (and after any header).\n Each control operation has to be given on a separate line (one line one control operation).\n  \n   Control Description     @CTRL:separator= With the control line @CTRL:separator= followed by a character or string it can be defined the fields separator to be used, overwriting the default one or any previous definition. The specified character or string cannot be used inside data because fields would be gathered in a wrong way. Example of line to set # as the fields separator: @CTRL:separator=#.   @CTRL:separatorlist= With the control line @CTRL:separatorlist= followed by a character or string it can be defined the separator to be used with list items, overwriting the default one or any previous definition. The specified character or string cannot be used inside list data because list items would be gathered in a wrong way. Example of line to set  as the list items separator: @CTRL:separatorlist=.    \nLine fields    Position Mandatory Field Mandatory Data Type Description     0 Yes Yes string Group ID. Unique group identifier.   1 Yes No string Group Name/Description. If not given then it will be used the group ID as name.   2 Yes Yes string Destionation List. List of destinations that belong to the corresponding group. The list of destinations stored in this value are separated by default with \u0026ldquo;;\u0026rdquo; but it can be changed.    \nExample 5#California Group#1234;4567;8910  "
},
{
	"uri": "https://travelgatex.com/flight-x/",
	"title": "Flight-X",
	"tags": [],
	"description": "NDC API for flight shopping and booking",
	"content": "Is a new fast, easy, one-stop NDC 19.1 API for flight shopping and booking.\nWith Flight-X, you can connect to multiple NDC and non-NDC Suppliers and add business logic to reflect your pricing and unique offers.\nThere are no integration costs and you can integrate with hundreds of flights Suppliers.\n  Overview Flight-X Overview\n     API Reference Reference Documentation\n     Methods Flight-X Methods\n     Release Notes New Updates \u0026amp; Releases\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/geographicdestinationtree/",
	"title": "GeographicDestinationTree",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns the supplier\u0026rsquo;s geographic tree where each node indicates whether the request is accessible from availability, indicated with a parameter with values true or false. The main difference between the methods GeographicalTree and DestinationTree is that GeographicalTree has this boolean parameter.\nRequest Format The request not requires any element, it is empty.\nResponse Format The result returns a list of DestinationTree with corresponding sub-destinations.\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nGeographicDestinationTreeRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section.\n\u0026lt;GeographicDestinationTreeRQ\u0026gt; \u0026lt;/GeographicDestinationTreeRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nGeographicDestinationTreeRQ Description    Element Number Type Description     GeographicDestinationTreeRQ 1  Root node.    GeographicDestinationTreeRS Example \u0026lt;GeographicDestinationTreeRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;DestinationTree code = \u0026quot;ES\u0026quot; name = \u0026quot;Espa√±a\u0026quot; avail = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;BAL\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AST\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AND\u0026quot;/\u0026gt; \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code= \u0026quot;IT\u0026quot; name = \u0026quot;Italia\u0026quot; avail = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AA\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;BB\u0026quot;/\u0026gt; . . . \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;EN\u0026quot; name = \u0026quot;England\u0026quot; avail = \u0026quot;false\u0026quot;\u0026gt;. . .\u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;BAL\u0026quot; name = \u0026quot;Baleares\u0026quot; avail = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;PAL0\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;ALC0\u0026quot;/\u0026gt; \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;AST\u0026quot; name = \u0026quot;Asturias\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;AND\u0026quot; name = \u0026quot;Andalucia\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; . . . \u0026lt;DestinationTree code = \u0026quot;PAL0\u0026quot; name = \u0026quot;Palma de Mallorca\u0026quot; avail = \u0026quot; true\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;ALC0\u0026quot; name = \u0026quot;Alcudia\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; . . . \u0026lt;/GeographicDestinationTreeRS\u0026gt;  GeographicDestinationTreeRS Description    Element Number Type Description     GeographicDestinationTreeRS 1  Root node.   UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   DestinationTree / 1..n  Father node.   @code 1 String    @name 1 String    @avail 1 Boolean    DestinationTree /DestinationLeaf 0..n  Childs node.   @code 1 String     Detailed description \u0026lt;GeographicDestinationTreeRS\u0026gt; \u0026lt;DestinationTree code = \u0026quot;ES\u0026quot; name = \u0026quot;Espa√±a\u0026quot; avail = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;BAL\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AST\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AND\u0026quot;/\u0026gt; \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code= \u0026quot;IT\u0026quot; name = \u0026quot;Italia\u0026quot; avail = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;AA\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;BB\u0026quot;/\u0026gt; . . . \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;EN\u0026quot; name = \u0026quot;England\u0026quot; avail = \u0026quot;false\u0026quot;\u0026gt;. . .\u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;BAL\u0026quot; name = \u0026quot;Baleares\u0026quot; avail = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;PAL0\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;ALC0\u0026quot;/\u0026gt; \u0026lt;/DestinationTree\u0026gt; \u0026lt;DestinationTree code = \u0026quot;PAL0\u0026quot; name = \u0026quot;Palma de Mallorca\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;SAR\u0026quot;/\u0026gt; \u0026lt;DestinationLeaf code = \u0026quot;IND\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;AST\u0026quot; name = \u0026quot;Asturias\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;AND\u0026quot; name = \u0026quot;Andalucia\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; . . . \u0026lt;DestinationTree code = \u0026quot;ALC0\u0026quot; name = \u0026quot;Alcudia\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;SAR\u0026quot; name = \u0026quot;Son Sardina\u0026quot; avail = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;DestinationTree code = \u0026quot;IND\u0026quot; name = \u0026quot;Indioteria\u0026quot; avail = \u0026quot;false\u0026quot;/\u0026gt; . . . \u0026lt;/GeographicDestinationTreeRS\u0026gt;  There are two essential definitions which need to be clear in order to understand the difference between city and zone:\n types of nodes if these nodes are accessible or not.  Let\u0026rsquo;s start with the two types of nodes. There are two types of nodes: the parent node, also called DestinationTree node, and the child node, also named Destination leaf node. A parent can have zero to n children ( 0..n ) and a child can only one parent ( 1..1 ). For example, the DestinationTree code = \u0026ldquo;ES\u0026rdquo; is the parent of the DestinationLeaf code = \u0026ldquo;BAL\u0026rdquo;, \u0026ldquo;AST\u0026rdquo; and \u0026ldquo;AND\u0026rdquo; and at the same time DestinationTree code = \u0026ldquo;BAL\u0026rdquo; is also a the parent of the DestinationLeaf code = \u0026ldquo;PAL0\u0026rdquo; and \u0026ldquo;ALC0\u0026rdquo;, and so on.\nAccessible on an availability level means that it is possible to perform an availability for that zone. A node is accessible when the tag avail is set to true. If it is set to false the node is not accessible and consequently, not available.\nTherefore:\n City: Lowest accessible node. Zone: Not the lowest accessible node.  Note: In rare occasions, it is possible to find nodes lower than cities, which won\u0026rsquo;t be accessible, but the standard scenario is not to find lower nodes than cities.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/mealplanlist/",
	"title": "MealPlanList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return a list of the available MealPlans, which will be used in the availability response.\nRequest Format The request does not require any elements - empty request.\nResponse Format The result returns a list of MealPlan.\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nIf the supplier has more than 100 mealplan codes, or more than 20 codes for one single mealplan, this code will be mapped depending on the supplier.\nMealPlanRQ Example \u0026lt;MealPlanListRQ\u0026gt; \u0026lt;/MealPlanListRQ\u0026gt;  MealPlanListRQ Description    Element Number Type Description     MealPlanListRQ 1  Root node.    MealPlanListRS Example \u0026lt;MealPlanListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;MealPlans\u0026gt; \u0026lt;MealPlan\u0026gt; \u0026lt;Code\u0026gt;BB\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Bed and breakfast\u0026lt;/Name\u0026gt; \u0026lt;/MealPlan\u0026gt; \u0026lt;MealPlan\u0026gt; \u0026lt;Code\u0026gt;HB\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Half board\u0026lt;/Name\u0026gt; \u0026lt;/MealPlan\u0026gt; ‚Ä¶ \u0026lt;MealPlan/\u0026gt; \u0026lt;/MealPlans\u0026gt; \u0026lt;/MealPlanListRS\u0026gt;  MealPlanListRS Description    Element Number Type Description     MealPlanListRS /UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   MealPlanListRS /MealPlans / 1  Root node, list of mealplans.   MealPlans /MealPlan 1..n  MealPlan.   MealPlans /MealPlan/Code 1 String Code.   MealPlans /MealPlan/Name 1 String Name.    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/hotellist/",
	"title": "HotelList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method returns a list of hotels with basic information (code, name, address, phone, etc.) for each hotel\nRequest Format The request does not require any elements. Empty request.\nResponse Format The result returns a list of Hotel (hotels).\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nThis method may be preloaded in XML Travelgate\u0026rsquo;s system if it takes more than 3 minutes to download.\nThe ContinuationToken can be used in this request - the specification can be found in the \u0026lsquo;Common Elements\u0026rsquo; section.\nHotelListRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section.\n\u0026lt;HotelListRQ\u0026gt; \u0026lt;/HotelListRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nHotelListRQ Description    Element Number Type Description     HotelListRQ 1  Root node.    HotelListRS Example \u0026lt;HotelListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Hotels\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;5\u0026lt;/Code\u0026gt; \u0026lt;GiataId source = \u0026quot;http://urlGiata\u0026quot;\u0026gt;1200\u0026lt;/GiataId\u0026gt; \u0026lt;Name\u0026gt;BADAJOZ\u0026lt;/Name\u0026gt; \u0026lt;Address\u0026gt;CTRA.NACIONAL V, KM 393\u0026lt;/Address\u0026gt; \u0026lt;Airports\u0026gt; \u0026lt;Airport\u0026gt; \u0026lt;IATACode\u0026gt;BJZ\u0026lt;/IATACode\u0026gt; \u0026lt;/Airport\u0026gt; \u0026lt;/Airports\u0026gt; \u0026lt;Town\u0026gt;BADAJOZ\u0026lt;/Town\u0026gt; \u0026lt;ZipCode\u0026gt;06002\u0026lt;/ZipCode\u0026gt; \u0026lt;CountryISOCode\u0026gt;ES\u0026lt;/CountryISOCode\u0026gt; \u0026lt;AvailDestination code = \u0026quot;06\u0026quot; name = \u0026quot;BADAJOZ\u0026quot;/\u0026gt; \u0026lt;GeographicDestination code = \u0026quot;06\u0026quot; name = \u0026quot;BADAJOZ\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;Latitude\u0026gt;38.893839\u0026lt;/Latitude\u0026gt; \u0026lt;Longitude\u0026gt;-7.014112\u0026lt;/Longitude\u0026gt; \u0026lt;Contact\u0026gt; \u0026lt;Email\u0026gt;badajoz@xxx.com\u0026lt;/Email\u0026gt; \u0026lt;Telephone\u0026gt;91425891\u0026lt;/Telephone\u0026gt; \u0026lt;Fax\u0026gt;910200200\u0026lt;/Fax\u0026gt; \u0026lt;/Contact\u0026gt; \u0026lt;CategoryCode\u0026gt;4 Estrellas\u0026lt;/CategoryCode\u0026gt; \u0026lt;PaymentOptions cash=\u0026quot;false\u0026quot; bankAcct=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;Cards\u0026gt; \u0026lt;Card code=\u0026quot;VI\u0026quot;/\u0026gt; \u0026lt;Card code=\u0026quot;AX\u0026quot;/\u0026gt; \u0026lt;Card code=\u0026quot;CA\u0026quot;/\u0026gt; \u0026lt;/Cards\u0026gt; \u0026lt;PaymentOptions/\u0026gt; \u0026lt;ExclusiveDeal\u0026gt;true\u0026lt;/ExclusiveDeal\u0026gt; \u0026lt;PropertyCategory\u0026gt; \u0026lt;Code\u0026gt;1\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Hotel\u0026lt;/Name\u0026gt; \u0026lt;/PropertyCategory\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;65#7\u0026lt;/Code\u0026gt; \u0026lt;ProviderCode\u0026gt;7\u0026lt;/ProviderCode\u0026gt; \u0026lt;GiataId source = \u0026quot;http://urlGiata\u0026quot;\u0026gt;1200\u0026lt;/GiataId\u0026gt; \u0026lt;Name\u0026gt;ILLA\u0026lt;/Name\u0026gt; \u0026lt;Address\u0026gt;AVDA. ILLA S/N\u0026lt;/Address\u0026gt; \u0026lt;Town\u0026gt;HUELVA\u0026lt;/Town\u0026gt; \u0026lt;ZipCode\u0026gt;21449\u0026lt;/ZipCode\u0026gt; \u0026lt;CountryISOCode\u0026gt;ES\u0026lt;/CountryISOCode\u0026gt; \u0026lt;AvailDestination code = \u0026quot;2\u0026quot; name = \u0026quot;HUELVA\u0026quot;/\u0026gt; \u0026lt;GeographicDestination code = \u0026quot;2\u0026quot; name = \u0026quot;HUELVA\u0026quot; avail = \u0026quot;true\u0026quot;/\u0026gt; \u0026lt;Latitude\u0026gt;37.207295\u0026lt;/Latitude\u0026gt; \u0026lt;Longitude\u0026gt;-7.23768\u0026lt;/Longitude\u0026gt; \u0026lt;Contact\u0026gt; \u0026lt;Email\u0026gt;emailhotel@xxx.es\u0026lt;/Email\u0026gt; \u0026lt;Telephone\u0026gt;95124578\u0026lt;/Telephone\u0026gt; \u0026lt;Fax\u0026gt;910200200\u0026lt;/Fax\u0026gt; \u0026lt;/Contact\u0026gt; \u0026lt;CategoryCode\u0026gt;4 Estrellas\u0026lt;/CategoryCode\u0026gt; \u0026lt;PropertyCategory\u0026gt; \u0026lt;Code\u0026gt;2\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Home\u0026lt;/Name\u0026gt; \u0026lt;/PropertyCategory\u0026gt; \u0026lt;/Hotel\u0026gt; \u0026lt;Hotel\u0026gt;...\u0026lt;/Hotel\u0026gt; \u0026lt;/Hotels\u0026gt; \u0026lt;/HotelListRS\u0026gt;  HotelListRS Description    Element Number Type Description     HotelListRS /UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   HotelListRS /Hotels /Hotel 0..n  Root node. Hotel sheet.   Code 1 String Internal code to perform availability and/or supplier code.   ProviderCode 0..1 String Internal code established by the supplier (see MetaData).   GiataId 0..1  Giata System ID.   @source 0..1 String Giata url   @value 0..1 String Giata code (more on detailed description)   Name 1 String Name.   Address 1 String Address.   Airports / 0..1  List of airports.   Airports /Airport 1..n  Specific airport near the hotel.   Airports /Airport/IATACode 1 String IATA airport Code.   Town 1 String Town.   ZipCode 0..1 String ZipCode.   CountryISOCode 1 String CountryISOCode.   AvailDestination 0..1  Avail Destination.   @code 1 String Destination code.   @name 1 String Destination name.   GeographicDestination 1  Geographic Destination.   @code 1 String Destination code.   @name 1 String Destination name.   @avail 1 Boolean Indicates if it is allowed in availability.   Latitude 0..1 String Latitude.   Longitude 0..1 String Longitude.   Contact / 0..1  Contact.   Contact /Email 0..1 String Email.   Contact /Telephone 0..1 String Telephone.   Contact /Fax 0..1 String Fax.   CategoryCode 1 String CategoryCode.   Type 0..1 String Hotel type: please see detailed description   PaymentOptions / 0..1 String Type of cards allowed by the supplier. This tag is only mandatory if payment type is different than MerchantPay.   PaymentOptions /Cards / 1  List of cards allowed.   PaymentOptions /Cards /Card 1..n  Type of card allowed.   @code 1 String Code card (see Lists of Data (VI,AX,BV,CA\u0026hellip;)).   ExclusiveDeal 0..1 Boolean Indicates that the Hotel has an Exclusive Deal.   PropertyCategory / 0..1  Hotels property type. Similar to , but on supplier\u0026rsquo;s side.   PropertyCategory /Code 1 String Supplier\u0026rsquo;s property code.   PropertyCategory /Name 1 String Supplier\u0026rsquo;s property name.    Detailed Description Giata Code:\nA Giata code is a hotel code that provides information of said hotel. This code is common for all the suppliers.\nFor example:\nFor the supplier TravellingTest:\n\u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;5\u0026lt;/Code\u0026gt; \u0026lt;GiataFormatCode\u0026gt;254\u0026lt;/GiataFormatCodez\u0026gt; \u0026lt;Name\u0026gt;BADAJOZ\u0026lt;/Name\u0026gt; \u0026lt;/Hotel\u0026gt;  For the supplier TestOnTour:\n\u0026lt;Hotel\u0026gt; \u0026lt;Code\u0026gt;14\u0026lt;/Code\u0026gt; \u0026lt;GiataFormatCode\u0026gt;254\u0026lt;/GiataFormatCodez\u0026gt; \u0026lt;Name\u0026gt;BADAJOZ\u0026lt;/Name\u0026gt; \u0026lt;/Hotel\u0026gt;  Please note that for the same hotel, the internal code of each supplier is different, but the Giata code stays the same. Giata system is an external company that does a generic mapping of all of the hotels information.\nAvailDestination \u0026amp; GeographicDestination:\nPlease note that the code for these parameters needs to be the lowest destination level and these values are available in AvailDestinationTree \u0026amp; GeographicDestinationTree, respectively.\nHotel types:\nH (Hotel)\nA (Apartment)\nAH (Apartment Hotel)\nC (Club)\nAT (Agrotourism)\nHS (Hostel)\nCA (House)\nV (Ville)\nB (Bungalows)\nD (Disco Club)\nSupplier Code:\nThe hotel code can be returned combined with other codes, like the city code. In this case, you as a Supplier will need to generate this code, combining the city code and the hotel code, and not returning only your supplier\u0026rsquo;s Hotel native code. This can also happen with other code types instead of city code (i.e. country code).\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/metadata/",
	"title": "MetaData",
	"tags": [],
	"description": "",
	"content": " Method Goals This method provides information about the meta data of the supplier so that it can be effectively configured.\nRequest Format The request does not require any elements - empty request.\nResponse Format The XML response contains many elements of the supplier\u0026rsquo;s meta data: number of hotels, number of cities and number of areas available, maximum number of roomcandidate, maximum number of paxes in a roomcandidate, release days, minimum stay, list of languages supported \u0026hellip;\nIt is separated in the following sections:\n Avail Valuation Reservation ReservationRead ReservationList Cancel Batch Generic  Clarification - All information contained within the Avail section relates to the availability method and all information contained within the Valuation section, relates to the valuation method, and so on.\nMetaDataRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section\n\u0026lt;MetaDataRQ\u0026gt; \u0026lt;/MetaDataRQ\u0026gt;  MetaDataRQ Description    Element Number Type Description     MetaDataRQ 1  Root node.    MetaDataRS Example \u0026lt;MetaDataRS\u0026gt; \u0026lt;operationImplemented\u0026gt;true\u0026lt;/operationImplemented\u0026gt; \u0026lt;Avail\u0026gt; \u0026lt;Destinations\u0026gt; \u0026lt;MaxNumberHotels reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberHotels\u0026gt; \u0026lt;MaxNumberHotelsRecommended reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberHotelsRecommended\u0026gt; \u0026lt;MaxNumberCities reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberCities\u0026gt; \u0026lt;MaxNumberCitiesRecommended reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberCitiesRecommended\u0026gt; \u0026lt;MaxNumberZones reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberZones\u0026gt; \u0026lt;MaxNumberZonesRecommended reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberZonesRecommended\u0026gt; \u0026lt;MaxNumberGeoCodes reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberGeoCodes\u0026gt; \u0026lt;MaxNumberGeoCodesRecommended reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberGeoCodesRecommended\u0026gt; \u0026lt;HotelSameDestinationRestriction reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/HotelSameDestinationRestriction\u0026gt; \u0026lt;DestinationSameCountryRestriction reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/DestinationSameCountryRestriction\u0026gt; \u0026lt;/Destinations\u0026gt; \u0026lt;AllowsCurrency reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsCurrency\u0026gt; \u0026lt;AllowsBusinessRules reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsBusinessRules\u0026gt; \u0026lt;NumMarketsAllowed reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/NumMarketsAllowed\u0026gt; \u0026lt;Release reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/Release\u0026gt; \u0026lt;MinimumStay reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MinimumStay\u0026gt; \u0026lt;MaxStay reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxStay\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;MaxNumberRoomCandidates reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberRoomCandidates\u0026gt; \u0026lt;PaxTypeRangeInRoomCandidates reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt; \u0026lt;Candidate max = \u0026quot;3\u0026quot; min = \u0026quot;1\u0026quot; type = \u0026quot;Adult\u0026quot;/\u0026gt; \u0026lt;Candidate max = \u0026quot;2\u0026quot; min = \u0026quot;0\u0026quot; type = \u0026quot;Child\u0026quot;/\u0026gt; \u0026lt;Candidate max = \u0026quot;0\u0026quot; min = \u0026quot;0\u0026quot; type = \u0026quot;Infant\u0026quot;/\u0026gt; \u0026lt;/PaxTypeRangeInRoomCandidates\u0026gt; \u0026lt;MaxPaxInRoomCandidates reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxPaxInRoomCandidates\u0026gt; \u0026lt;MaxPaxInAllRooms reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxPaxInAllRooms\u0026gt; \u0026lt;RequiredRoomWithSamePaxConfiguration\u0026gt; \u0026lt;SamePaxNumber reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/SamePaxNumber\u0026gt; \u0026lt;SamePaxAge reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/SamePaxAge\u0026gt; \u0026lt;/RequiredRoomWithSamePaxConfiguration\u0026gt; \u0026lt;AgeRange reviewDate = \u0026quot;11/11/2016\u0026quot;\u0026gt; \u0026lt;Age max = \u0026quot;5\u0026quot; min = \u0026quot;2\u0026quot; type = \u0026quot;Child\u0026quot;/\u0026gt; \u0026lt;/AgeRange\u0026gt; \u0026lt;RateRules\u0026gt; \u0026lt;RateRule reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NonRefundable\u0026lt;/RateRule\u0026gt; \u0026lt;RateRule reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;largeFamily\u0026lt;/RateRule\u0026gt; \u0026lt;/RateRules\u0026gt; \u0026lt;Beds\u0026gt; \u0026lt;InformNumberOfUnits reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformNumberOfUnits\u0026gt; \u0026lt;InformSharedBed reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformSharedBed\u0026gt; \u0026lt;InformBedType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformBedType\u0026gt; \u0026lt;InformNumberOfBeds reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformNumberOfBeds\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;InformBindingPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformBindingPrice\u0026gt; \u0026lt;InformCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPolicies\u0026gt; \u0026lt;InformRoomCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformRoomCancelPolicies\u0026gt; \u0026lt;ImplementsCombination reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/ImplementsCombination\u0026gt; \u0026lt;InformRoomFees reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformRoomFees\u0026gt; \u0026lt;InformRemarks reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformRemarks\u0026gt; \u0026lt;PaymentTypes\u0026gt; \u0026lt;PaymentType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt; \u0026lt;PaymentType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;LaterPay\u0026lt;/PaymentType\u0026gt; \u0026lt;/PaymentTypes\u0026gt; \u0026lt;OptionTypes\u0026gt; \u0026lt;OptionType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;Hotel\u0026lt;/OptionType\u0026gt; \u0026lt;/OptionTypes\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;InformDailyPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformDailyPrice\u0026gt; \u0026lt;InformDailyRatePlan reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformDailyRatePlan\u0026gt; \u0026lt;InformOffers reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformOffers\u0026gt; \u0026lt;InformNRFRateByRoom reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformNRFRateByRoom\u0026gt; \u0026lt;InformFees reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformFees\u0026gt; \u0026lt;/Avail\u0026gt; \u0026lt;Valuation\u0026gt; \u0026lt;AllowsBlockOption reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsBlockOption\u0026gt; \u0026lt;InformBindingPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformBindingPrice\u0026gt; \u0026lt;InformNRFRate reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformNRFRate\u0026gt; \u0026lt;InformRemarks reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformRemarks\u0026gt; \u0026lt;InformCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPolicies\u0026gt; \u0026lt;InformCancelPoliciesDescription reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPoliciesDescription\u0026gt; \u0026lt;InformFees reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformFees\u0026gt; \u0026lt;TimeZone reviewDate = \u0026quot;04/01/2022\u0026quot;\u0026gt;[eUtc.Utc_Unknown|eUtc.HotelLocalTime|eUtc.Utc_-14|...|eUtc.Utc_0|...|eUtc.Utc_14]\u0026lt;/TimeZone\u0026gt; \u0026lt;/Valuation\u0026gt; \u0026lt;Reservation\u0026gt; \u0026lt;AllowsDeltaPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsDeltaPrice\u0026gt; \u0026lt;InformPropertyReservationNumber reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPropertyReservationNumber\u0026gt; \u0026lt;RequiredAllPassengers reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/RequiredAllPassengers\u0026gt; \u0026lt;AllowsRemarks reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsRemarks\u0026gt; \u0026lt;AllowsUrlCard reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsUrlCard\u0026gt; \u0026lt;InformBillingSupplier reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformBillingSupplier\u0026gt; \u0026lt;InformPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPrice\u0026gt; \u0026lt;AllowsPreferences\u0026gt; \u0026lt;Preference hotel = \u0026quot;false\u0026quot; room = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;Smoker\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt; \u0026lt;Preference hotel = \u0026quot;false\u0026quot; room = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;ExtraBed\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt; \u0026lt;Preference hotel = \u0026quot;true\u0026quot; room = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;LateArrival\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;true\u0026quot; type = \u0026quot;numeric\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt; \u0026lt;/AllowsPreferences\u0026gt; \u0026lt;/Reservation\u0026gt; \u0026lt;ReservationRead\u0026gt; \u0026lt;Implements reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/Implements\u0026gt; \u0026lt;InformPropertyReservationNumber reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPropertyReservationNumber\u0026gt; \u0026lt;AllowsProvideLocator reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsProvideLocator\u0026gt; \u0026lt;AllowsClientLocator reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsClientLocator\u0026gt; \u0026lt;InformCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPolicies\u0026gt; \u0026lt;InformPriceCancel reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPriceCancel\u0026gt; \u0026lt;RequiredCheckInDate reviewDate = \u0026quot;18/10/2021\u0026quot;\u0026gt;false\u0026lt;/RequiredCheckInDate\u0026gt; \u0026lt;RequiredCheckOutDate reviewDate = \u0026quot;18/10/2021\u0026quot;\u0026gt;false\u0026lt;/RequiredCheckOutDate\u0026gt; \u0026lt;RequiredReservationDate reviewDate = \u0026quot;18/10/2021\u0026quot;\u0026gt;false\u0026lt;/RequiredReservationDate\u0026gt; \u0026lt;/ReservationRead\u0026gt; \u0026lt;ReservationList\u0026gt; \u0026lt;Implements reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/Implements\u0026gt; \u0026lt;InformPropertyReservationNumber reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPropertyReservationNumber\u0026gt; \u0026lt;AllowsCreationDate reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsCreationDate\u0026gt; \u0026lt;AllowsCheckDate reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsCheckDate\u0026gt; \u0026lt;InformCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPolicies\u0026gt; \u0026lt;InformPriceCancel reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPriceCancel\u0026gt; \u0026lt;/ReservationList\u0026gt; \u0026lt;Cancel\u0026gt; \u0026lt;Implements reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/Implements\u0026gt; \u0026lt;AllowsProvideLocator reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsProvideLocator\u0026gt; \u0026lt;AllowsClientLocator reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsClientLocator\u0026gt; \u0026lt;InformPriceCancel reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPriceCancel\u0026gt; \u0026lt;/Cancel\u0026gt; \u0026lt;Batch\u0026gt; \u0026lt;InformExclusiveDeal reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformExclusiveDeal\u0026gt; \u0026lt;HotelList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/HotelList\u0026gt; \u0026lt;DescriptiveInfo\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/DescriptiveInfo\u0026gt; \u0026lt;GeographicDestinationTree\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/GeographicDestinationTree\u0026gt; \u0026lt;AvailDestinationTree\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/AvailDestinationTree\u0026gt; \u0026lt;RoomList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/RoomList\u0026gt; \u0026lt;MealPlanList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/MealPlanList\u0026gt; \u0026lt;CategoryList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/CategoryList\u0026gt; \u0026lt;DescriptiveInfoExtended\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/DescriptiveInfoExtended\u0026gt; \u0026lt;MarketList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/MarketList\u0026gt; \u0026lt;CurrencyList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/CurrencyList\u0026gt; \u0026lt;/Batch\u0026gt; \u0026lt;Generic\u0026gt; \u0026lt;RequiredNationality reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/RequiredNationality\u0026gt; \u0026lt;AllowsNationality reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;true\u0026lt;/AllowsNationality\u0026gt; \u0026lt;AllowsOnRequest reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsOnRequest\u0026gt; \u0026lt;/Generic\u0026gt; \u0026lt;/MetaDataRS\u0026gt;  MetaDataRS Description    Element Number Type Description     MetaDataRS 1  Root node.   Avail / 1  Avail node.   Avail /Destinations / 1  Contains information regarding the destinations for AvailRQ.   Avail /Destinations /MaxNumberHotels 1 Integer Maximum number of hotels that can be requested.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberHotelsRecommended 1 Integer Maximum number of hotels recommended by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberCities 1 Integer Maximum number of cities that can be requested.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberCitiesRecommended 1 Integer Maximum number of cities recommended by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberZones 1 Integer Maximum number of zones that can be requested.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberZonesRecommended 1 Integer Maximum number of zones recommended by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberGeoCodes 1 Integer Maximum number of GeoCodes that can be requested.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations / MaxNumberGeoCodesRecommended 1 Integer Maximum number of GeoCodes recommended by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /HotelSameDestinationRestriction 1 Boolean If the supplier allows the availability for N hotels, this tag indicates whether those hotels must be within the same destination.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /DestinationSameCountryRestriction 1 Boolean If the supplier allows the availability for N destinations, this tag indicates whether those destinations must be within the same country.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /AllowsCurrency 1 Boolean If true, it is possible to request the currency.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /AllowsBusinessRules 1 Boolean Specifies if this supplier allows businessrules.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /NumMarketsAllowed 1 Integer Number of markets supported by the supplier in the same request.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Release 1 Integer Minimum days required in between booking date and checking date ( days in advance ). If the value is zero then there is no limitation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /MinimumStay 1 Integer Minimum number of days required for booking. If the value is zero then there is no limitation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /MaxStay 1 Integer Maximum number of days allowed for booking.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates / 1  Contains information about the restrictions of the rooms.   Avail /RoomCandidates /MaxNumberRoomCandidates 1 Integer Maximum number of room candidates that can be requested in the same avail request.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /PaxTypeRangeInRoomCandidates 1  Contains information about the age restrictions of the guests in a room.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /PaxTypeRangeInRoomCandidates /Candidate 1  Guest restrictions for each candidate type in a room.   @type 1 Enum Candidate classification type.(Adult, Child, Infant)   @min 1 Integer Minimum required number of guest of this type.   @max 1 Integer Maximum number of guest of this type allowed.   Avail /RoomCandidates /MaxPaxInRoomCandidates 1 Integer Maximum number paxs in same room that can be requested in the same avail request.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /MaxPaxInAllRooms 1 Integer Total amount of paxs that can be requested in the same avail request.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /RequiredRoomWithSamePaxConfiguration / 1  Indicates whether all of the distributions must have the same configuration.   Avail /RoomCandidates /RequiredRoomWithSamePaxConfiguration /SamePaxNumber 1 Boolean Indicates whether it is necessary that the number of guests be the same in all of the configurations.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /RequiredRoomWithSamePaxConfiguration /SamePaxAge 1 Boolean Indicates whether all of the guests in a particular distribution must be the same age.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /AgeRange / 1  The age range used by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /AgeRange /Age 1..n  Age range.   @type 1 String Type of classification according to age.(Adult, Child, Infant)   @min 1 String Minimum age in range.   @max 1 String Max age in range.   Avail /RoomCandidates /RateRules / 1  List of rate rule types.   Avail /RoomCandidates /RateRules /RateRule 1..n Enum Rate rules supported by the supplier (You can check these Rate conditions in our Avail section).   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /Beds / 1  Information about beds.   Avail /RoomCandidates /Beds /InformNumberOfUnits 1 Boolean Indicates the number of units available per room.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /Beds /InformSharedBed 1 Boolean Informs in availability response if beds in the room are shared.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /Beds /InformBedType 1 Boolean Informs if the supplier returns the beds types.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /Beds /InformNumberOfBeds 1 Boolean Informs if the supplier returns the number of beds for each room.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformBindingPrice 1 Boolean Supplier returns binding PVPs.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformCancelPolicies 1 Boolean Returns cancellation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformRoomCancelPolicies 1 Boolean Returns cancellation policies at room level.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformRoomFees 1 Boolean Returns fees at room level.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /ImplementsCombination 1 Boolean Informs whether the integration allows room combination or not.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformRemarks 1 Boolean Space available for any remarks or comments aimed at the client.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /PaymentTypes / 1  List of payment types accepted by the supplier.   Avail /PaymentTypes /PaymentType 1..n  Indicates the types of payment (Merchant, Direct, \u0026hellip;).   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /OptionTypes / 1  List of option types accepted by the supplier.   Avail /OptionTypes /OptionType 1..n  Indicates the types of option.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Languages / 1  List of languages.   Avail /Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformDailyPrice 1 Boolean Informs if the supplier returns the daily price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformDailyRatePlan 1 Boolean Informs if the supplier returns the daily rate.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformOffers 1 Boolean If true, the supplier returns the offers applied.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformNRFRateByRoom 1 Boolean The supplier can inform in availability if the room is non-refundable.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformFees 1 Boolean Informs if the supplier returns fees.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation / 1  Valuation node.   Valuation /AllowsBlockOption 1 Boolean Informs if the supplier can block the option.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformBindingPrice 1 Boolean Informs if the price is binding in valuation response.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformNRFRate 1 Boolean The supplier can inform in valuation if the rate is non-refundable.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformRemarks 1 Boolean Returns remarks.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformCancelPolicies 1 Boolean Informs cancellation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformCancelPoliciesDescription 1 Boolean Specifies if the supplier informs the cancel policies in free text.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformFees 1 Boolean Informs if the supplier returns fees.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /TimeZone 1 Enum Informs in which TimeZone are the hoursBefore and deadline values of cancelation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation / 1  Reservation node.   Reservation /AllowsDeltaPrice 1 Boolean Allows a margin stipulated by the client for booking with a higher price (delta).   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /InformPropertyReservationNumber 1 Boolean Informs if the supplier returns the property reservation number.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /RequiredAllPassengers 1 Boolean Required data for all passengers (names and surnames).   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /AllowsRemarks 1 Boolean Informs if the supplier allows send remarks.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /AllowsUrlCard 1 Boolean Specifies if the supplier allows url card data encode when the paymente type is LaterPay.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /InformBillingSupplier 1 Boolean Informs data of the external supplier in the booking.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /InformPrice 1 Boolean The supplier informs the booking price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /AllowsPreferences / 0..1  Preference filters allowed by the provider.   Reservation /AllowsPreferences /Preference 1  Each filter of preference and its values.   @hotel 1 Boolean At the option / general level.   @room 1 Boolean At the room level.   Reservation /AllowsPreferences /Preference/PreferenceType 1  Type of preference allowed. See types allowed in ** Reservation:** .   Reservation /AllowsPreferences /Preference/Value 1  Definition of the type of preference.   @mandatory 1 Boolean If it is necessary to pass a value in the Preference tag in reservation request.   @type 0..1 String Type of the required value. (string, numeric, boolean)   ReservationRead / 1  ReservationRead node.   ReservationRead /InformPropertyReservationNumber 1 Boolean Informs if the supplier returns the property reservation number.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /Implements 1 Boolean Informs if the supplier implements this method.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /AllowsProvideLocator 1 Boolean The supplier allows provider locator.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /AllowsClientLocator 1 Boolean The supplier allows client locator.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /InformCancelPolicies 1 Boolean Informs cancellation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /InformPriceCancel 1 Boolean The supplier informs the cancellation price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /RequiredCheckInDate 1 Boolean The supplier informs if it requires the check-in date to return the reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /RequiredCheckOutDate 1 Boolean The supplier informs if it requires the check-out date to return the reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /RequiredReservationDate 1 Boolean The supplier informs if it requires the booking date to return the reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList / 1  ReservationList node.   ReservationList /Implements 1 Boolean Informs if the supplier implements this method.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /InformPropertyReservationNumber 1 Boolean Informs if the supplier returns the property reservation number.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /AllowsCreationDate 1 Boolean The supplier allows search by creation date.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /AllowsCheckDate 1 Boolean The supplier allows search by check in date.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /InformCancelPolicies 1 Boolean Informs cancellation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /InformPriceCancel 1 Boolean The supplier informs the cancellation price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Cancel / 1  Cancel node.   Cancel /Implements 1 Boolean Informs if the supplier implements this method.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Cancel /AllowsProvideLocator 1 Boolean The supplier allows provider locator.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Cancel /AllowsClientLocator 1 Boolean The supplier allows client locator.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Cancel /InformPriceCancel 1 Boolean The supplier informs the cancellation price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch / 1  Batch node.   Batch /InformExclusiveDeal 1 Boolean The supplier indicates if a Hotel is an Exclusive Deal in HotelList and/or DescriptiveInfo.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /HotelList / 1  Contains information regarding HotelList.   Batch /HotelList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /HotelList /Languages / 1  List of languages.   Batch /HotelList /Languages /Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /DescriptiveInfo / 1  Contains information regarding DescriptiveInfo.   Batch /DescriptiveInfo /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /DescriptiveInfo /Languages / 1  List of languages.   Batch /DescriptiveInfo /Languages /Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /GeographicDestinationTree / 1  Contains information regarding GeographicDestinationTree.   Batch /GeographicDestinationTree /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /GeographicDestinationTree /Languages / 1  List of languages.   Batch /GeographicDestinationTree /Languages /Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /AvailDestinationTree / 1  Contains information regarding AvailDestinationTree.   Batch /AvailDestinationTree /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /AvailDestinationTree /Languages / 1  List of languages.   Batch /AvailDestinationTree /Languages /Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /RoomList / 1  Contains information regarding RoomList.   Batch /RoomList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /RoomList /Languages / 1  List of languages.   Batch /RoomList /Languages /Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /MealPlanList / 1  Contains information regarding MealPlanList.   Batch /MealPlanList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /MealPlanList /Languages / 1  List of languages.   Batch /MealPlanList /Languages /Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /CategoryList / 1  Contains information regarding CategoryList.   Batch /CategoryList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /CategoryList /Languages / 1  List of languages.   Batch /CategoryList /Languages /Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /DescriptiveInfoExtended / 1  Contains information regarding DescriptiveInfoExtended.   Batch /DescriptiveInfoExtended /StaticType 1 Enum Informs the static type. The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /DescriptiveInfoExtended /Languages / 1  List of languages.   Batch /DescriptiveInfoExtended /Languages /Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /MarketList / 1  Contains information regarding MarketList.   Batch /MarketList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /MarketList /Languages / 1  List of languages.   Batch /MarketList /Languages /Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /CurrencyList / 1  Contains information regarding CurrencyList.   Batch /CurrencyList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /CurrencyList /Languages 1  List of languages.   Batch /CurrencyList /Languages/Language 1..n  String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Generic / 1  Generic node.   Generic /RequiredNationality 1 Boolean Informs if the supplier requires nationality in Avail, Valuation and Reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Generic /AllowsNationality 1 Boolean Informs if the supplier allows nationality in Avail, Valuation and Reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Generic /AllowsOnRequest 1 Boolean If true, the supplier informs the onrequest status option in Avail, Valuation, and Reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.    Detailed description Important: values can be -1, this means the supplier has no restriction. For example, if MaxNumberHotels returns -1 means there is no maximum number of hotels to be set in a request. reviewDate attribute:\nThe attribute called reviewDate will let you know when the field was last reviewed, thus ensuring that you can trust the information as being up to date.\nTags structure:\nSome tags were renamed, so that they follow a certain standard of coherence. With this in mind, we will differentiate between 4 types of tags, depending on how it starts:\n Implements: It shows whether a call has been implemented or not.\n Inform: It indicates whether the information provided in our RS lets you see any optional fields such as rates.\n Required: It indicates whether any field, either in our RQ or in our RS, is required, in order for the logs to be valid. For example, whether the Nationality field is required or whether it is required to implement the list of rooms because we do not provide a description for them.\n Allows: It indicates whether an optional field in our RQ is allowed to display additional items. For example the onrequest in availability.\n  Avail:\nMaxNumberHotelsRecommended, MaxNumberCitiesRecommended, MaxNumberZonesRecommended, MaxNumberGeoCodesRecommended: These tags indicate what the recommended number of Cities/Hotels/Zones or Geocodes is for each supplier are. This means that even if a supplier allows for a search of up to 500 at a time, they may recommend that you do not exceed 200, thus way avoiding TimeOut errors and showing results in time. In the majority of cases the maximum number of hotels allowed is the same as the recommended number of hotels (MaxNumberHotels = MaxNumberHotelsRecommended). There are, however, a few cases in which it can be different.\nValuation:\nTimeZone: This tag indicate in which timezone are the \u0026ldquo;hoursBefore\u0026rdquo; and \u0026ldquo;Deadline\u0026rdquo; fields of cancelation policies. The possible values are:\nUnknown HotelLocalTime UTC-12 UTC-11 UTC-10 UTC-9 UTC-8 UTC-7 UTC-6 UTC-5 UTC-4 UTC-3 UTC-2 UTC-1 UTC+0 UTC+1 UTC+2 UTC+3 UTC+4 UTC+5 UTC+6 UTC+7 UTC+8 UTC+9 UTC+10 UTC+11 UTC+12 UTC+13 UTC+14  If \u0026ldquo;Unknown\u0026rdquo; or \u0026ldquo;HotelLocalTime\u0026rdquo; are selected we\u0026rsquo;ll add an offset of +14 only to the Deadline in case it\u0026rsquo;s calculated and not returned directly by the supplier on UTC Standard.\nReservation:\nAllowsPreferences: In this tag it indicates what types of preferences the provider allows at the hotel and / or room level.\n Preference: Each of these tags will specify the type of preference allowed and at what level it can be requested\n hotel =\u0026gt; at the option / general level. room =\u0026gt; at room level.  PreferenceType: The types that allow, the possible values are:\n Smoker NonSmoker ExtraBed Cradle DoubleBed TwinBeds ContiguosRooms Wedding LateArrival LateCheckOut EarlyCheckIn GroundFloor TopFlor WithoutVoucher   Value :\n mandatory: Here we will specify if it is necessary to pass a value in the Preference tag in reservation request.\n type: Then you must specify the type of value that can be sent in tag type. This type is an Enum that could be:\n string numeric boolean    Example 1:\n MetaData:\n\u0026lt;Preference hotel = \u0026quot;false\u0026quot; room = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;Smoker\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt;   Reservation: ~~~xml  ~~~   Example 2:\n MetaData:\n\u0026lt;Preference hotel = \u0026quot;false\u0026quot; room = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;LateArrival\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;true\u0026quot; type = \u0026quot;string\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt;   Reservation: ~~~xml 14:00 ~~~    Reservation Read, ReservationList:\nInformPriceCancel: In case the booking status is CN, this field allows us to show the price of the cancellation and not the price of the booking.\nBatch:\nStatic type: These parameters are XMLTravelgate‚Äôs internal parameters. They define the type of download each method has for each supplier. If the parameter value is set as online, the method runs a direct call to the supplier‚Äôs system because the method takes less than 4 minutes. Any other value will signify that the process takes more than 4 minutes, which means we have to cache the information in our BBDD (the methods with this feature are updated every week).\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/roomlist/",
	"title": "RoomList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return a list of rooms, their codes as well as descriptions.\nRequest Format The request does not require any elements - empty request.\nResponse Format The result returns a list of RoomInfo.\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nThis message must be implemented solely in case the supplier does not return room description in Avail. This requirement will be indicated in MetaData.\nRoomListRQ Example \u0026lt;RoomListRQ\u0026gt; \u0026lt;/RoomListRQ\u0026gt;  RoomListRQ Description    Element Number Type Description     RoomListRQ 1  Root node.    RoomListRS Example \u0026lt;RoomListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;RoomsInfo\u0026gt; \u0026lt;RoomInfo\u0026gt; \u0026lt;Code\u0026gt;STD\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Standard\u0026lt;/Name\u0026gt; \u0026lt;/RoomInfo\u0026gt; \u0026lt;RoomInfo\u0026gt; \u0026lt;Code\u0026gt;ST\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Suite\u0026lt;/Name\u0026gt; \u0026lt;/RoomInfo\u0026gt; ... \u0026lt;RoomInfo/\u0026gt; \u0026lt;/RoomsInfo\u0026gt; \u0026lt;/RoomListRS\u0026gt;  RoomListRS Description    Element Number Type Description     RoomListRS /UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   RoomListRS /RoomsInfo / 1  Root node, list of rooms   RoomInfo / 1..n  Room info.   RoomInfo /Code 1 String Code.   RoomInfo /Name 1 String Name.    Detailed description Room types \u0026amp; languages\nYou can define in AvailRQ (Common Elements) which language you want the room description returned in - as long as the supplier supports the selected language, otherwise the default language is most commonly English. The standard languages are: English \u0026amp; Spanish.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/marketlist/",
	"title": "MarketList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return a list of the available Markets, which will be used in the availability request.\nRequest Format The request does not require any elements - empty request.\nResponse Format The result returns a list of Market.\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds. Most suppliers use a standard ISO-3166_1_alfa_2, but it depends on each individual supplier.\nMarketListRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section.\n\u0026lt;MarketListRQ\u0026gt; \u0026lt;/MarketListRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nMarketListRQ Description    Element Number Type Description     MarketListRQ 1  Root node.    MarketListRS Example \u0026lt;MarketListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;Markets\u0026gt; \u0026lt;Market\u0026gt; \u0026lt;Code\u0026gt;ES\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Spain\u0026lt;/Name\u0026gt; \u0026lt;GroupCode\u0026gt;Europe\u0026lt;/GroupCode\u0026gt; \u0026lt;/Market\u0026gt; \u0026lt;Market\u0026gt; \u0026lt;Code\u0026gt;PT\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Portugal\u0026lt;/Name\u0026gt; \u0026lt;GroupCode\u0026gt;Europe\u0026lt;/GroupCode\u0026gt; \u0026lt;/Market\u0026gt; ‚Ä¶ \u0026lt;Market/\u0026gt; \u0026lt;/Markets\u0026gt; \u0026lt;/MarketListRS\u0026gt;  MarketListRS Description    Element Number Type Description     MarketListRS /UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   MarketListRS /Markets / 1  Root node, list of markets.   Markets /Market 1..n  Market.   Markets /Market/Code 1 String Code.   Markets /Market/Name 1 String Name.   Markets /Market/GroupCode 0..1 String Indicates if the supplier groups different markets together and what the group is called.    GroupCode:\nUse this option to see if the supplier groups different markets in a single group, so you can get the same prices/options if two markets belong to the same group.\n"
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/runtimeconfiguration/",
	"title": "RuntimeConfiguration",
	"tags": [],
	"description": "",
	"content": " Method Goals This message returns a template of the supplier\u0026rsquo;s configuration.\nRequest Format The request does not require any elements, it is an empty request.\nResponse Format The returned XML contains a template of all fields used by the supplier.\nRuntimeConfigurationRQ Example \u0026lt;RuntimeConfigurationRQ\u0026gt; \u0026lt;/RuntimeConfigurationRQ\u0026gt;  RuntimeConfigurationRQ Description    Element Number Type Description     RuntimeConfigurationRQ 1  Root node.    RuntimeConfigurationRS Example \u0026lt;RuntimeConfigurationRS\u0026gt; \u0026lt;Configuration\u0026gt; \u0026lt;User/\u0026gt; \u0026lt;Password/\u0026gt; \u0026lt;UrlGeneric/\u0026gt; \u0026lt;Parameters\u0026gt; \u0026lt;Parameter key = \u0026quot;agencia\u0026quot; value = \u0026quot;\u0026quot;/\u0026gt; \u0026lt;/Parameters\u0026gt; \u0026lt;/Configuration\u0026gt; \u0026lt;/RuntimeConfigurationRS\u0026gt;  ConfiguracionRunTimeRS Description    Element Number Type Description     RuntimeConfigurationRS 1  Root node.    "
},
{
	"uri": "https://travelgatex.com/mappea/",
	"title": "MappeaX",
	"tags": [],
	"description": "",
	"content": "   Overview ChannelX Information\n     Reference Reference Documentation\n     GraphQL Schema breaking changes Changes history of deprecated notes previously announced\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/mealplanlist/",
	"title": "MealPlanList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return a list of the available MealPlans, which will be used in the availability response.\nRequest Format The request does not require any elements - empty request.\nResponse Format The result returns a list of MealPlan.\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nIf the supplier has more than 100 mealplan codes, or more than 20 codes for one single mealplan, this code will be mapped depending on the supplier.\nMealPlanRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section.\n\u0026lt;MealPlanListRQ\u0026gt; \u0026lt;/MealPlanListRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nMealPlanListRQ Description    Element Number Type Description     MealPlanListRQ 1  Root node.    MealPlanListRS Example \u0026lt;MealPlanListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;MealPlans\u0026gt; \u0026lt;MealPlan\u0026gt; \u0026lt;Code\u0026gt;BB\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Bed and breakfast\u0026lt;/Name\u0026gt; \u0026lt;/MealPlan\u0026gt; \u0026lt;MealPlan\u0026gt; \u0026lt;Code\u0026gt;HB\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Half board\u0026lt;/Name\u0026gt; \u0026lt;/MealPlan\u0026gt; ‚Ä¶ \u0026lt;MealPlan/\u0026gt; \u0026lt;/MealPlans\u0026gt; \u0026lt;/MealPlanListRS\u0026gt;  MealPlanListRS Description    Element Number Type Description     MealPlanListRS /UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   MealPlanListRS /MealPlans / 1  Root node, list of mealplans.   MealPlans /MealPlan 1..n  MealPlan.   MealPlans /MealPlan/Code 1 String Code.   MealPlans /MealPlan/Name 1 String Name.    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/legacy/methods/staticcontent/staticconfiguration/",
	"title": "StaticConfiguration (Deprecated)",
	"tags": [],
	"description": "",
	"content": " Important: be aware that this method is deprecated and will not be updated. MetaData is the new and improved version of StaticConfiguration. Method Goals This method provides information about the static configuration of the supplier so that it can be effectively configured.\nRequest Format The request does not require any elements - empty request.\nResponse Format The XML response contains many elements of the supplier\u0026rsquo;s configuration: number of hotels, number of cities and number of areas available, maximum number of roomcandidate, maximum number of paxes in a roomcandidate, release days, minimum stay, list of languages supported \u0026hellip;\nStaticConfigurationRQ Example \u0026lt;StaticConfigurationRQ\u0026gt; \u0026lt;/StaticConfigurationRQ\u0026gt;  StaticConfigurationRQ Description    Element Number Type Description     StaticConfigurationRQ 1  Root node.    StaticConfigurationRS Example \u0026lt;StaticConfigurationRS\u0026gt; \u0026lt;MaxNumberHotels\u0026gt;2000\u0026lt;/MaxNumberHotels\u0026gt; \u0026lt;MaxNumberCities\u0026gt;1\u0026lt;/MaxNumberCities\u0026gt; \u0026lt;MaxNumberZones\u0026gt;1\u0026lt;/MaxNumberZones\u0026gt; \u0026lt;MaxNumberGeoCodes\u0026gt;0\u0026lt;/MaxNumberGeoCodes\u0026gt; \u0026lt;RequiredRoomList\u0026gt;false\u0026lt;/RequiredRoomList\u0026gt; \u0026lt;InformCancelPolicies\u0026gt;true\u0026lt;/InformCancelPolicies\u0026gt; \u0026lt;InformBindingPriceValuation\u0026gt;true\u0026lt;/InformBindingPriceValuation\u0026gt; \u0026lt;InformBindingPrice\u0026gt;true\u0026lt;/InformBindingPrice\u0026gt; \u0026lt;InformNRFValuation\u0026gt;true\u0026lt;/InformNRFValuation\u0026gt; \u0026lt;InformNRFRate\u0026gt;true\u0026lt;/InformNRFRate\u0026gt; \u0026lt;Inform55Rate\u0026gt;true\u0026lt;/Inform55Rate\u0026gt; \u0026lt;InformPackageRate\u0026gt;true\u0026lt;/InformPackageRate\u0026gt; \u0026lt;InformExtraActivity\u0026gt;false\u0026lt;/InformExtraActivity\u0026gt; \u0026lt;InformForfait\u0026gt;true\u0026lt;/InformForfait\u0026gt; \u0026lt;RemarksValuation\u0026gt;true\u0026lt;/RemarksValuation\u0026gt; \u0026lt;MaxNumberRoomCandidates\u0026gt;9\u0026lt;/MaxNumberRoomCandidates\u0026gt; \u0026lt;MaxPaxInRoomCandidates\u0026gt;9\u0026lt;/MaxPaxInRoomCandidates\u0026gt; \u0026lt;Release\u0026gt;0\u0026lt;/Release\u0026gt; \u0026lt;MinimumStay\u0026gt;0\u0026lt;/MinimumStay\u0026gt; \u0026lt;InformBillingSupplierReservation\u0026gt;false\u0026lt;/InformBillingSupplierReservation\u0026gt; \u0026lt;ImplementsProvideLocatorReservationRead\u0026gt;true\u0026lt;/ImplementsProvideLocatorReservationRead\u0026gt; \u0026lt;ImplementsClientLocatorReservationRead\u0026gt;true\u0026lt;/ImplementsClientLocatorReservationRead\u0026gt; \u0026lt;ImplementsCancel\u0026gt;true\u0026lt;/ImplementsCancel\u0026gt; \u0026lt;InformPriceReservation\u0026gt;true\u0026lt;/InformPriceReservation\u0026gt; \u0026lt;HotelListLanguages\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;Language\u0026gt;de\u0026lt;/Language\u0026gt; \u0026lt;Language\u0026gt;pt\u0026lt;/Language\u0026gt; \u0026lt;Language\u0026gt;fr\u0026lt;/Language\u0026gt; \u0026lt;Language\u0026gt;it\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/HotelListLanguages\u0026gt; \u0026lt;ReservationListCreationDate\u0026gt;true\u0026lt;/ReservationListCreationDate\u0026gt; \u0026lt;ReservationListCheckDate\u0026gt;true\u0026lt;/ReservationListCheckDate\u0026gt; \u0026lt;HotelListType\u0026gt;OffLineCompleted\u0026lt;/HotelListType\u0026gt; \u0026lt;DescriptiveInfoType\u0026gt;NotImplemented\u0026lt;/DescriptiveInfoType\u0026gt; \u0026lt;GeographicDestinationTreeType\u0026gt;OffLine\u0026lt;/GeographicDestinationTreeType\u0026gt; \u0026lt;AvailDestinationTreeType\u0026gt;OffLine\u0026lt;/AvailDestinationTreeType\u0026gt; \u0026lt;RoomListType\u0026gt;OnLine\u0026lt;/RoomListType\u0026gt; \u0026lt;InformCancelPoliciesReservationRead\u0026gt;false\u0026lt;/InformCancelPoliciesReservationRead\u0026gt; \u0026lt;InformCancelPoliciesReservationList\u0026gt;false\u0026lt;/InformCancelPoliciesReservationList\u0026gt; \u0026lt;InformCancelPoliciesAvail\u0026gt;false\u0026lt;/InformCancelPoliciesAvail\u0026gt; \u0026lt;InformChangesPolicies\u0026gt;false\u0026lt;/InformChangesPolicies\u0026gt; \u0026lt;ImplementsDeltaPrice\u0026gt;false\u0026lt;/ImplementsDeltaPrice\u0026gt; \u0026lt;RequiredAllPassengers\u0026gt;true\u0026lt;/RequiredAllPassengers\u0026gt; \u0026lt;ImplementsDailyPrice\u0026gt;false\u0026lt;/ImplementsDailyPrice\u0026gt; \u0026lt;InformBedsAvail\u0026gt;false\u0026lt;/InformBedsAvail\u0026gt; \u0026lt;InformModificationPolicies\u0026gt;false\u0026lt;/InformModificationPolicies\u0026gt; \u0026lt;InformNRFRateByRoom\u0026gt;false\u0026lt;/InformNRFRateByRoom\u0026gt; \u0026lt;ModifyTransactions\u0026gt; \u0026lt;ModifyTransaction\u0026gt; \u0026lt;Modify\u0026gt;ModifyStartDateAddDays\u0026lt;/Modify\u0026gt; \u0026lt;Modify\u0026gt;ModifyEndDateAddDays\u0026lt;/Modify\u0026gt; \u0026lt;/ModifyTransaction\u0026gt; \u0026lt;ModifyTransaction\u0026gt; \u0026lt;Modify\u0026gt;ModifyHolder\u0026lt;/Modify\u0026gt; \u0026lt;Modify\u0026gt;ModifyRoomsAddRooms\u0026lt;/Modify\u0026gt; \u0026lt;Modify\u0026gt;ModifyRoomsRemoveRooms\u0026lt;/Modify\u0026gt; \u0026lt;/ModifyTransaction\u0026gt; \u0026lt;/ModifyTransactions\u0026gt; \u0026lt;AllowsCurrencyAvail\u0026gt;true\u0026lt;/AllowsCurrencyAvail\u0026gt; \u0026lt;InformCancelPoliciesModify\u0026gt;false\u0026lt;/InformCancelPoliciesModify\u0026gt; \u0026lt;AllowOnRequest\u0026gt;false\u0026lt;/AllowOnRequest\u0026gt; \u0026lt;ImplementsDailyRatePlan\u0026gt;false\u0026lt;/ImplementsDailyRatePlan\u0026gt; \u0026lt;AllowRemarks\u0026gt;false\u0026lt;/AllowRemarks\u0026gt; \u0026lt;InformSharedBed\u0026gt;false\u0026lt;/InformSharedBed\u0026gt; \u0026lt;InformBedType\u0026gt;false\u0026lt;/InformBedType\u0026gt; \u0026lt;InformNumberOfBeds\u0026gt;false\u0026lt;/InformNumberOfBeds\u0026gt; \u0026lt;AllowBlockOption\u0026gt;false\u0026lt;/AllowBlockOption\u0026gt; \u0026lt;InformExclusiveDeal\u0026gt;false\u0026lt;/InformExclusiveDeal\u0026gt; \u0026lt;InformPriceCancel\u0026gt;false\u0026lt;/InformPriceCancel\u0026gt; \u0026lt;AllowUrlCard\u0026gt;false\u0026lt;/AllowUrlCard\u0026gt; \u0026lt;InformCancelPoliciesDescription\u0026gt;false\u0026lt;/InformCancelPoliciesDescription\u0026gt; \u0026lt;PaymentTypes\u0026gt; \u0026lt;PaymentType\u0026gt;LaterPay\u0026lt;/PaymentType\u0026gt; \u0026lt;PaymentType\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt; \u0026lt;/PaymentTypes\u0026gt; \u0026lt;InformAvailableModificationsInReservationRead\u0026gt;false\u0026lt;/InformAvailableModificationsInReservationRead\u0026gt; \u0026lt;RequiredNationality\u0026gt;false\u0026lt;/RequiredNationality\u0026gt; \u0026lt;Inform60Rate\u0026gt;false\u0026lt;/Inform60Rate\u0026gt; \u0026lt;Inform65Rate\u0026gt;false\u0026lt;/Inform65Rate\u0026gt; \u0026lt;InformCanaryResidentRate\u0026gt;false\u0026lt;/InformCanaryResidentRate\u0026gt; \u0026lt;InformBalearicResidentRate\u0026gt;false\u0026lt;/InformBalearicResidentRate\u0026gt; \u0026lt;InformLargeFamilyRate\u0026gt;false\u0026lt;/InformLargeFamilyRate\u0026gt; \u0026lt;InformHoneymoonRate\u0026gt;false\u0026lt;/InformHoneymoonRate\u0026gt; \u0026lt;ImplementsBusinessRules\u0026gt;false\u0026lt;/ImplementsBusinessRules\u0026gt; \u0026lt;ImplementsProviderLocatorCancel\u0026gt;false\u0026lt;/ImplementsProviderLocatorCancel\u0026gt; \u0026lt;ImplementsClientLocatorCancel\u0026gt;false\u0026lt;/ImplementsClientLocatorCancel\u0026gt; \u0026lt;NumMarketsAllowed\u0026gt;5\u0026lt;/NumMarketsAllowed\u0026gt; \u0026lt;InformTiket\u0026gt;false\u0026lt;/InformTiket\u0026gt; \u0026lt;ImplementsDescriptiveInfoExtended\u0026gt;false\u0026lt;/ImplementsDescriptiveInfoExtended\u0026gt; \u0026lt;InformNumberOfUnits\u0026gt;true\u0026lt;/InformNumberOfUnits\u0026gt; \u0026lt;AgeRange\u0026gt; \u0026lt;Age min = \u0026quot;0\u0026quot; max = \u0026quot;2\u0026quot;/\u0026gt; \u0026lt;Age min = \u0026quot;3\u0026quot; max = \u0026quot;12\u0026quot;/\u0026gt; \u0026lt;Age min = \u0026quot;13\u0026quot; max = \u0026quot;999\u0026quot;/\u0026gt; \u0026lt;/AgeRange\u0026gt; \u0026lt;DestinationRegex\u0026gt; \u0026lt;Regex\u0026gt;HOT\u0026lt;/Regex\u0026gt; \u0026lt;/DestinationRegex\u0026gt; \u0026lt;/StaticConfigurationRS\u0026gt;  StaticConfigurationRS Description    Element Number Type Description     StaticConfigurationRS 1  Root node.   MaxNumberHotels 1 Integer Maximum number of hotel that can be requested in an AvailRQ.   MaxNumberCities 1 Integer Maximum number of cities that can be requested in an AvailRQ.   MaxNumberZones 1 Integer Maximum number of zones that can be requested in an AvailRQ.   MaxNumberGeoCodes 1 Integer Maximum number of GeoCodes that can be requested in an AvailRQ.   RequiredRoomList 1 Boolean The supplier has implemented a list of rooms in which the room description is returned in availability.(not a mandatory call)   InformCancelPolicies 1 Boolean Returns cancellation policies.   InformBindingPriceValuation 1 Boolean Informs if the price is binding in valuation response.   InformBindingPrice 1 Boolean Supplier returns binding PVPs in availability.   InformNRFValuation 1 Boolean The supplier can inform in valuation if the rate is non-refundable.   InformNRFRate 1 Boolean The supplier can inform in availability if the rate is non-refundable.   InformNRFRateByRoom 1 Boolean The supplier can inform in availability if the room is non-refundable.   Inform55Rate 1 Boolean Returns options for over 55s rates (senior rates) in availability.   InformPackageRate 1 Boolean Informs package rates options in availability. These options can\u0026rsquo;t be sold separately.   InformExtraActivity 1 Boolean Informs of the possible option type Hotel+entrance.   InformForfait 1 Boolean Informs of the possible option type Hotel+Forfait.   RemarksValuation 1 Boolean Returns remarks in Valuation.   MaxNumberRoomCandidates 1 Integer Maximum number of room candidates that can be requested in the same avail request.   MaxPaxInRoomCandidates 1 Integer Maximum number paxs in same room that can be requested in the same avail request.   Release 1 Integer Minimum days required in between booking date and checking date ( days in advance ). If the value is zero then there is no limitation.   MinimumStay 1 Integer Minimum number of days required for booking. If the value is zero then there is no limitation.   InformBillingSupplier Reservation 1 Boolean Informs data of the external supplier in the booking.   ImplementsProvideLocator ReservationRead 1 Boolean The supplier implements ReservationRead using provider locator.   ImplementsClientLocator ReservationRead 1 Boolean The supplier implements ReservationRead using client locator.   ImplementsCancel 1 Boolean The supplier implements the Cancel method.   InformPriceReservation 1 Boolean The supplier informs the booking price in the reservation method.   HotelListLanguages 1  Languages that the supplier returns their information in.   HotelListLanguages/Languages 1  List of languages.   HotelListLanguages/Languages /Language 1..n String Language code.   ReservationListCreationDate 1 Boolean The supplier implements ReservationList by creation date.   ReservationListCheckDate 1 Boolean The supplier implements ReservationList by check in date.   HotelListType 1 Enum XMLTravelgate\u0026rsquo;s internal parameter, see the specification in Detailed description.   DescriptiveInfoType 1 Enum XMLTravelgate\u0026rsquo;s internal parameter, see the specification in Detailed description.   GeographicDestination TreeType 1 Enum XMLTravelgate\u0026rsquo;s internal parameter, see the specification in Detailed description.   AvailDestinationTreeType 1 Enum XMLTravelgate\u0026rsquo;s internal parameter, see the specification in Detailed description.   RoomListType 1 Enum XMLTravelgate\u0026rsquo;s internal parameter, see the specification in Detailed description.   InformCancelPolicies ReservationRead 1 Boolean Informs cancellation policies in ReservationRead.   InformCancelPolicies ReservationList 1 Boolean Informs cancellation policies in ReservationList.   InformCancelPoliciesAvail 1 Boolean Informs cancellation policies in Avail.   InformChangesPolicies 1 Boolean The supplier informs if there is an extra fee for any booking modification.   ImplementsDeltaPrice 1 Boolean Implements a margin stipulated by the client for booking with a higher price (delta).   RequiredAllPassengers 1 Boolean Required data for all passengers (names and surnames).   ImplementsOffersAvail 1 Boolean If true, the supplier returns the offers applied in Avail.   ImplementsRemarksAvail 1 Boolean Space available for any remarks or comments aimed at the client in Avail.   AllowsCurrencyAvail 1 Boolean If true, it is possible to request the currency in Avail.   AllowOnRequest 1 Boolean If true, the supplier informs the onrequest status option in Avail, Valuation, and Reservation.   InformCancelPoliciesModify 1 Boolean Informs the cancellation policies in Modification methods.   ImplementsDailyPrice 1 Boolean Informs if the supplier returns the daily price in Avail.   ImplementsDailyRatePlan 1 Boolean Informs if the supplier returns the daily rate in Avail.   AllowRemarks 1 Boolean Informs if the supplier allows send remarks in Reservation.   InformSharedBed 1 Boolean Informs in availability response if beds in the room are shared.   InformBedType 1 Boolean Informs if the supplier returns the beds types in Avail.   InformNumberOfBeds 1 Boolean Informs if the supplier returns the number of beds for each room in Avail.   AllowBlockOption 1 Boolean Informs if the supplier can block the option in Valuation.   InformExclusiveDeal 1 Boolean The supplier indicates if a Hotel is an Exclusive Deal in HotelList and/or DescriptiveInfo.   InformPriceCancel 1 Boolean The supplier informs about the cancelation price in the cancel response.   AllowUrlCard 1 Boolean Specifies if the supplier allows url card data encode when the paymente type is LaterPay.   InformCancelPolicies Description 1 Boolean Specifies if the supplier informs the cancel policies in free text in Valuation.   ImplementsBusinessRules 1 Boolean Specifies if this supplier uses businessrules in Avail.   PaymentTypes 1  List of payment types accepted by the supplier.   PaymentTypes/PaymentType 1..n  Indicates the types of payment (Merchant, Direct \u0026hellip;) .   InformAvailableModifications InReservationRead 1 Boolean Specifies if the supplier informs of the possible modifications in ReservationRead.   RequiredNationality 1 Boolean Informs if the supplier requires nationality in Avail, Valuation and Reservation.   Inform60Rate 1 Boolean The supplier informs the options with rates of pax of 60 years old or over in availability.   Inform65Rate 1 Boolean The supplier informs the options with rates of pax of 65 years old or over in availability.   InformCanaryResidentRate 1 Boolean The supplier informs rates for canary residents in Avail.   InformBalearicResidentRate 1 Boolean The supplier informs rates for balearic residents in Avail.   InformLargeFamilyRate 1 Boolean The supplier informs rates for large families in Avail.   InformHoneymoonRate 1 Boolean The supplier informs rates for honeymoon in Avail.   ImplementsProviderLocatorCancel 1 Boolean The supplier implements cancel transaction using provider locator.   ImplementsClientLocatorCancel 1 Boolean The supplier implements cancel transaction using client locator.   InformModificationPolicies 1 Boolean The supplier informs of the modification policies in Valuation.   ModifyTransactions 0..1  Modifications allowed by the supplier.   ModifyTransactions /ModifyTransaction 1..n  Modifications allowed in the same request by the supplier.   ModifyTransactions /ModifyTransaction/Modify 1..n  Modification type (ModifyStartDateAddDays, ModifyStartDateSubtractDays, ModifyEndDateAddDays, ModifyEndDateSubtractDays, ModifyHolder, ModifyRoomsAddRooms, ModifyRoomsRemoveRooms, ModifyMealPlan or ModifyAddComment).   NumMarketsAllowed 1 Integer Number of markets supported by the supplier in the same request.   InformTiket 1 Boolean Informs of the possible option type Hotel+Ticket.   ImplementsDescriptive InfoExtended 1 Boolean Indicates whether the new DescriptiveInfo is implemented.   InformNumberOfUnits 1 Boolean Indicates the number of units available per room.   AgeRange 0..1  The age range used by the supplier.   AgeRange /Age 1..n  Age range   @min 1 String Minimum age in range   @max 1 String Max age in range   DestinationRegex 0..1  List of regex.   DestinationRegex /Regex 1..n String Regex.    Detailed description HotelListType, DescriptiveInfoType, GeographicDestinationTreeType, AvailDestinationTreeType and RoomListType:\nThese parameters are XMLTravelgate\u0026rsquo;s internal parameters. They define the type of download each method has for each supplier. If the parameter value is set as online, the method runs a direct call to the supplier\u0026rsquo;s system because the method takes less than 4 minutes. Any other value will signify that the process takes more than 4 minutes, which means we have to cache the information in our BBDD (the methods with this feature are updated every week).\nThe following tags are set as FALSE by default:\n(This is either because the supplier doesn\u0026rsquo;t support it or because is has not been updated yet)\n ImplementsDailyRatePlan ImplementsDailyPrice InformSharedBed InformBedType InformNumberOfBeds AllowBlockOption InformPriceCancel InformAvailableModificationsInReservationRead RequiredNationality Inform60Rate Inform65Rate InformCanaryResidentRate InformBalearicResidentRate InformLargeFamilyRate InformHoneymoonRate ImplementsProviderLocatorCancel ImplementsClientLocatorCancel NumMarketsAllowed ImplementsDescriptiveInfoExtended InformNumberOfUnits  "
},
{
	"uri": "https://travelgatex.com/integrations/",
	"title": "Integrations",
	"tags": [],
	"description": "Integrations",
	"content": "Consult here our integrations grouped by line.\n  Flights Flight integrations\n     Hotel Hotel integrations\n     Payment Payment integrations\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/metadata/",
	"title": "MetaData",
	"tags": [],
	"description": "",
	"content": " Method Goals This method provides information about the meta data of the supplier so that it can be effectively configured.\nRequest Format The request does not require any elements - empty request.\nResponse Format The XML response contains many elements of the supplier\u0026rsquo;s meta data: number of hotels, number of cities and number of areas available, maximum number of roomcandidate, maximum number of paxes in a roomcandidate, release days, minimum stay, list of languages supported \u0026hellip;\nIt is separated in the following sections:\n Avail Valuation Reservation ReservationRead ReservationList Cancel Batch Generic  Clarification - All information contained within the Avail section relates to the availability method and all information contained within the Valuation section, relates to the valuation method, and so on.\nMetaDataRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section.\n\u0026lt;MetaDataRQ\u0026gt; \u0026lt;/MetaDataRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nMetaDataRQ Description    Element Number Type Description     MetaDataRQ 1  Root node.    MetaDataRS Example \u0026lt;MetaDataRS\u0026gt; \u0026lt;operationImplemented\u0026gt;true\u0026lt;/operationImplemented\u0026gt; \u0026lt;Avail\u0026gt; \u0026lt;Destinations\u0026gt; \u0026lt;MaxNumberHotels reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberHotels\u0026gt; \u0026lt;MaxNumberHotelsRecommended reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberHotelsRecommended\u0026gt; \u0026lt;MaxNumberCities reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberCities\u0026gt; \u0026lt;MaxNumberCitiesRecommended reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberCitiesRecommended\u0026gt; \u0026lt;MaxNumberZones reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberZones\u0026gt; \u0026lt;MaxNumberZonesRecommended reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberZonesRecommended\u0026gt; \u0026lt;MaxNumberGeoCodes reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberGeoCodes\u0026gt; \u0026lt;MaxNumberGeoCodesRecommended reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberGeoCodesRecommended\u0026gt; \u0026lt;HotelSameDestinationRestriction reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/HotelSameDestinationRestriction\u0026gt; \u0026lt;DestinationSameCountryRestriction reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/DestinationSameCountryRestriction\u0026gt; \u0026lt;/Destinations\u0026gt; \u0026lt;AllowsCurrency reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsCurrency\u0026gt; \u0026lt;AllowsBusinessRules reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsBusinessRules\u0026gt; \u0026lt;NumMarketsAllowed reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/NumMarketsAllowed\u0026gt; \u0026lt;Release reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/Release\u0026gt; \u0026lt;MinimumStay reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MinimumStay\u0026gt; \u0026lt;MaxStay reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxStay\u0026gt; \u0026lt;RoomCandidates\u0026gt; \u0026lt;MaxNumberRoomCandidates reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxNumberRoomCandidates\u0026gt; \u0026lt;PaxTypeRangeInRoomCandidates reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt; \u0026lt;Candidate max = \u0026quot;3\u0026quot; min = \u0026quot;1\u0026quot; type = \u0026quot;Adult\u0026quot;/\u0026gt; \u0026lt;Candidate max = \u0026quot;2\u0026quot; min = \u0026quot;0\u0026quot; type = \u0026quot;Child\u0026quot;/\u0026gt; \u0026lt;Candidate max = \u0026quot;0\u0026quot; min = \u0026quot;0\u0026quot; type = \u0026quot;Infant\u0026quot;/\u0026gt; \u0026lt;/PaxTypeRangeInRoomCandidates\u0026gt; \u0026lt;MaxPaxInRoomCandidates reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxPaxInRoomCandidates\u0026gt; \u0026lt;MaxPaxInAllRooms reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;0\u0026lt;/MaxPaxInAllRooms\u0026gt; \u0026lt;RequiredRoomWithSamePaxConfiguration\u0026gt; \u0026lt;SamePaxNumber reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/SamePaxNumber\u0026gt; \u0026lt;SamePaxAge reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/SamePaxAge\u0026gt; \u0026lt;/RequiredRoomWithSamePaxConfiguration\u0026gt; \u0026lt;AgeRange reviewDate = \u0026quot;11/11/2016\u0026quot;\u0026gt; \u0026lt;Age max = \u0026quot;5\u0026quot; min = \u0026quot;2\u0026quot; type = \u0026quot;Child\u0026quot;/\u0026gt; \u0026lt;/AgeRange\u0026gt; \u0026lt;RateRules\u0026gt; \u0026lt;RateRule reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NonRefundable\u0026lt;/RateRule\u0026gt; \u0026lt;RateRule reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;largeFamily\u0026lt;/RateRule\u0026gt; \u0026lt;/RateRules\u0026gt; \u0026lt;Beds\u0026gt; \u0026lt;InformNumberOfUnits reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformNumberOfUnits\u0026gt; \u0026lt;InformSharedBed reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformSharedBed\u0026gt; \u0026lt;InformBedType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformBedType\u0026gt; \u0026lt;InformNumberOfBeds reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformNumberOfBeds\u0026gt; \u0026lt;/Beds\u0026gt; \u0026lt;/RoomCandidates\u0026gt; \u0026lt;InformBindingPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformBindingPrice\u0026gt; \u0026lt;InformCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPolicies\u0026gt; \u0026lt;InformRoomCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformRoomCancelPolicies\u0026gt; \u0026lt;ImplementsCombination reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/ImplementsCombination\u0026gt; \u0026lt;InformRoomFees reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformRoomFees\u0026gt; \u0026lt;InformRemarks reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformRemarks\u0026gt; \u0026lt;PaymentTypes\u0026gt; \u0026lt;PaymentType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;MerchantPay\u0026lt;/PaymentType\u0026gt; \u0026lt;PaymentType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;LaterPay\u0026lt;/PaymentType\u0026gt; \u0026lt;/PaymentTypes\u0026gt; \u0026lt;OptionTypes\u0026gt; \u0026lt;OptionType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;Hotel\u0026lt;/OptionType\u0026gt; \u0026lt;/OptionTypes\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;InformDailyPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformDailyPrice\u0026gt; \u0026lt;InformDailyRatePlan reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformDailyRatePlan\u0026gt; \u0026lt;InformOffers reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformOffers\u0026gt; \u0026lt;InformNRFRateByRoom reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformNRFRateByRoom\u0026gt; \u0026lt;InformFees reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformFees\u0026gt; \u0026lt;/Avail\u0026gt; \u0026lt;Valuation\u0026gt; \u0026lt;AllowsBlockOption reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsBlockOption\u0026gt; \u0026lt;InformBindingPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformBindingPrice\u0026gt; \u0026lt;InformNRFRate reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformNRFRate\u0026gt; \u0026lt;InformRemarks reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformRemarks\u0026gt; \u0026lt;InformCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPolicies\u0026gt; \u0026lt;InformCancelPoliciesDescription reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPoliciesDescription\u0026gt; \u0026lt;InformFees reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformFees\u0026gt; \u0026lt;TimeZone reviewDate = \u0026quot;04/01/2022\u0026quot;\u0026gt;[eUtc.Utc_Unknown|eUtc.HotelLocalTime|eUtc.Utc_-14|...|eUtc.Utc_0|...|eUtc.Utc_14]\u0026lt;/TimeZone\u0026gt; \u0026lt;/Valuation\u0026gt; \u0026lt;Reservation\u0026gt; \u0026lt;AllowsDeltaPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsDeltaPrice\u0026gt; \u0026lt;InformPropertyReservationNumber reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPropertyReservationNumber\u0026gt; \u0026lt;RequiredAllPassengers reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/RequiredAllPassengers\u0026gt; \u0026lt;AllowsRemarks reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsRemarks\u0026gt; \u0026lt;AllowsUrlCard reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsUrlCard\u0026gt; \u0026lt;InformBillingSupplier reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformBillingSupplier\u0026gt; \u0026lt;InformPrice reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPrice\u0026gt; \u0026lt;AllowsPreferences\u0026gt; \u0026lt;Preference hotel = \u0026quot;false\u0026quot; room = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;Smoker\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt; \u0026lt;Preference hotel = \u0026quot;false\u0026quot; room = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;ExtraBed\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt; \u0026lt;Preference hotel = \u0026quot;true\u0026quot; room = \u0026quot;false\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;LateArrival\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;true\u0026quot; type = \u0026quot;numeric\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt; \u0026lt;/AllowsPreferences\u0026gt; \u0026lt;/Reservation\u0026gt; \u0026lt;ReservationRead\u0026gt; \u0026lt;Implements reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/Implements\u0026gt; \u0026lt;InformPropertyReservationNumber reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPropertyReservationNumber\u0026gt; \u0026lt;AllowsProvideLocator reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsProvideLocator\u0026gt; \u0026lt;AllowsClientLocator reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsClientLocator\u0026gt; \u0026lt;InformCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPolicies\u0026gt; \u0026lt;InformPriceCancel reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPriceCancel\u0026gt; \u0026lt;RequiredCheckInDate reviewDate = \u0026quot;18/10/2021\u0026quot;\u0026gt;false\u0026lt;/RequiredCheckInDate\u0026gt; \u0026lt;RequiredCheckOutDate reviewDate = \u0026quot;18/10/2021\u0026quot;\u0026gt;false\u0026lt;/RequiredCheckOutDate\u0026gt; \u0026lt;RequiredReservationDate reviewDate = \u0026quot;18/10/2021\u0026quot;\u0026gt;false\u0026lt;/RequiredReservationDate\u0026gt; \u0026lt;/ReservationRead\u0026gt; \u0026lt;ReservationList\u0026gt; \u0026lt;Implements reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/Implements\u0026gt; \u0026lt;InformPropertyReservationNumber reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPropertyReservationNumber\u0026gt; \u0026lt;AllowsCreationDate reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsCreationDate\u0026gt; \u0026lt;AllowsCheckDate reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsCheckDate\u0026gt; \u0026lt;InformCancelPolicies reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformCancelPolicies\u0026gt; \u0026lt;InformPriceCancel reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPriceCancel\u0026gt; \u0026lt;/ReservationList\u0026gt; \u0026lt;Cancel\u0026gt; \u0026lt;Implements reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/Implements\u0026gt; \u0026lt;AllowsProvideLocator reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsProvideLocator\u0026gt; \u0026lt;AllowsClientLocator reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsClientLocator\u0026gt; \u0026lt;InformPriceCancel reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformPriceCancel\u0026gt; \u0026lt;/Cancel\u0026gt; \u0026lt;Batch\u0026gt; \u0026lt;InformExclusiveDeal reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/InformExclusiveDeal\u0026gt; \u0026lt;HotelList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/HotelList\u0026gt; \u0026lt;DescriptiveInfo\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/DescriptiveInfo\u0026gt; \u0026lt;GeographicDestinationTree\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/GeographicDestinationTree\u0026gt; \u0026lt;AvailDestinationTree\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/AvailDestinationTree\u0026gt; \u0026lt;RoomList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/RoomList\u0026gt; \u0026lt;MealPlanList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/MealPlanList\u0026gt; \u0026lt;CategoryList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/CategoryList\u0026gt; \u0026lt;DescriptiveInfoExtended\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/DescriptiveInfoExtended\u0026gt; \u0026lt;MarketList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/MarketList\u0026gt; \u0026lt;CurrencyList\u0026gt; \u0026lt;StaticType reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;NotImplemented\u0026lt;/StaticType\u0026gt; \u0026lt;Languages\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;en\u0026lt;/Language\u0026gt; \u0026lt;Language reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;es\u0026lt;/Language\u0026gt; \u0026lt;/Languages\u0026gt; \u0026lt;/CurrencyList\u0026gt; \u0026lt;/Batch\u0026gt; \u0026lt;Generic\u0026gt; \u0026lt;RequiredNationality reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/RequiredNationality\u0026gt; \u0026lt;AllowsNationality reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;true\u0026lt;/AllowsNationality\u0026gt; \u0026lt;AllowsOnRequest reviewDate = \u0026quot;20/06/2022\u0026quot;\u0026gt;false\u0026lt;/AllowsOnRequest\u0026gt; \u0026lt;/Generic\u0026gt; \u0026lt;/MetaDataRS\u0026gt;  MetaDataRS Description    Element Number Type Description     MetaDataRS 1  Root node.   Avail / 1  Avail node.   Avail /Destinations / 1  Contains information regarding the destinations for AvailRQ.   Avail /Destinations /MaxNumberHotels 1 Integer Maximum number of hotels that can be requested.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberHotelsRecommended 1 Integer Maximum number of hotels recommended by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberCities 1 Integer Maximum number of cities that can be requested.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberCitiesRecommended 1 Integer Maximum number of cities recommended by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberZones 1 Integer Maximum number of zones that can be requested.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberZonesRecommended 1 Integer Maximum number of zones recommended by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /MaxNumberGeoCodes 1 Integer Maximum number of GeoCodes that can be requested.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations / MaxNumberGeoCodesRecommended 1 Integer Maximum number of GeoCodes recommended by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /HotelSameDestinationRestriction 1 Boolean If the supplier allows the availability for N hotels, this tag indicates whether those hotels must be within the same destination.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Destinations /DestinationSameCountryRestriction 1 Boolean If the supplier allows the availability for N destinations, this tag indicates whether those destinations must be within the same country.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /AllowsCurrency 1 Boolean If true, it is possible to request the currency.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /AllowsBusinessRules 1 Boolean Specifies if this supplier allows businessrules.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /NumMarketsAllowed 1 Integer Number of markets supported by the supplier in the same request.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Release 1 Integer Minimum days required in between booking date and checking date ( days in advance ).   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /MinimumStay 1 Integer Minimum number of days required for booking.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /MaxStay 1 Integer Maximum number of days allowed for booking.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates / 1  Contains information about the restrictions of the rooms.   Avail /RoomCandidates /MaxNumberRoomCandidates 1 Integer Maximum number of room candidates that can be requested in the same avail request.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /PaxTypeRangeInRoomCandidates / 1  Contains information about the age restrictions of the guests in a room.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /PaxTypeRangeInRoomCandidates /Candidate 1  Guest restrictions for each candidate type in a room.   @type 1 Enum Candidate classification type.(Adult, Child, Infant)   @min 1 Integer Minimum required number of guest of this type.   @max 1 Integer Maximum number of guest of this type allowed.   Avail /RoomCandidates /MaxPaxInRoomCandidates 1 Integer Maximum number paxs in same room that can be requested in the same avail request.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /MaxPaxInAllRooms 1 Integer Total amount of paxs that can be requested in the same avail request.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /RequiredRoomWithSamePaxConfiguration / 1  Indicates whether all of the distributions must have the same configuration.   Avail /RoomCandidates /RequiredRoomWithSamePaxConfiguration /SamePaxNumber 1 Boolean Indicates whether it is necessary that the number of guests be the same in all of the configurations.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /RequiredRoomWithSamePaxConfiguration /SamePaxAge 1 Boolean Indicates whether all of the guests in a particular distribution must be the same age.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /AgeRange / 1..n  The age range used by the supplier.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /RoomCandidates /AgeRange /Age 1..n  Age range.   @type 1 String Type of classification according to age.(Adult, Child, Infant)   @min 1 String Minimum age in range.   @max 1 String Max age in range.   Avail /RateRules / 1  List of rate rule types.   Avail /RateRules /RateRule 1..n Enum Rate rules supported by the supplier (You can check these Rate conditions in our Avail section).   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Beds / 1  Information about beds.   Avail /Beds /InformNumberOfUnits 1 Boolean Indicates the number of units available per room.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Beds /InformSharedBed 1 Boolean Informs in availability response if beds in the room are shared.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Beds /InformBedType 1 Boolean Informs if the supplier returns the beds types.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Beds /InformNumberOfBeds 1 Boolean Informs if the supplier returns the number of beds for each room.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformBindingPrice 1 Boolean Supplier returns binding PVPs.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformCancelPolicies 1 Boolean Returns cancellation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformRoomCancelPolicies 1 Boolean Returns cancellation policies at room level.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformRoomFees 1 Boolean Returns fees at room level.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /ImplementsCombination 1 Boolean Informs whether the integration allows room combination or not.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformRemarks 1 Boolean Space available for any remarks or comments aimed at the client.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /PaymentTypes / 1  List of payment types accepted by the supplier.   Avail /PaymentTypes /PaymentType 1..n  Indicates the types of payment (Merchant, Direct, \u0026hellip;).   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /OptionTypes / 1  List of option types accepted by the supplier.   Avail /OptionTypes /OptionType 1..n  Indicates the types of option.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /Languages / 1  List of languages.   Avail /Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformDailyPrice 1 Boolean Informs if the supplier returns the daily price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformDailyRatePlan 1 Boolean Informs if the supplier returns the daily rate.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformOffers 1 Boolean If true, the supplier returns the offers applied.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformNRFRateByRoom 1 Boolean The supplier can inform in availability if the room is non-refundable.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Avail /InformFees 1 Boolean Informs if the supplier returns fees.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation / 1  Valuation node.   Valuation /AllowsBlockOption 1 Boolean Informs if the supplier can block the option.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformBindingPrice 1 Boolean Informs if the price is binding in valuation response.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformNRFRate 1 Boolean The supplier can inform in valuation if the rate is non-refundable.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformRemarks 1 Boolean Returns remarks.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformCancelPolicies 1 Boolean Informs cancellation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformCancelPoliciesDescription 1 Boolean Specifies if the supplier informs the cancel policies in free text.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /InformFees 1 Boolean Informs if the supplier returns fees.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Valuation /TimeZone 1 Enum Informs in which TimeZone are the hoursBefore and deadline values of cancelation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation / 1  Reservation node.   Reservation /AllowsDeltaPrice 1 Boolean Allows a margin stipulated by the client for booking with a higher price (delta).   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /InformPropertyReservationNumber 1 Boolean Informs if the supplier returns the property reservation number.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /RequiredAllPassengers 1 Boolean Required data for all passengers (names and surnames).   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /AllowsRemarks 1 Boolean Informs if the supplier allows send remarks.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /AllowsUrlCard 1 Boolean Specifies if the supplier allows url card data encode when the paymente type is LaterPay.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /InformBillingSupplier 1 Boolean Informs data of the external supplier in the booking.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /InformPrice 1 Boolean The supplier informs the booking price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Reservation /AllowsPreferences / 0..1  Preference filters allowed by the provider.   Reservation /AllowsPreferences /Preference / 1  Each filter of preference and its values.   @hotel 1 Boolean At the option / general level.   @room 1 Boolean At the room level.   Reservation /AllowsPreferences /Preference /PreferenceType 1  Type of preference allowed. See types allowed in ** Reservation:** .   Reservation /AllowsPreferences /Preference /Value 1  Definition of the type of preference.   @mandatory 1 Boolean If it is necessary to pass a value in the Preference tag in reservation request.   @type 0..1 String Type of the required value. (string, numeric, boolean)   ReservationRead / 1  ReservationRead node.   ReservationRead /InformPropertyReservationNumber 1 Boolean Informs if the supplier returns the property reservation number.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /Implements 1 Boolean Informs if the supplier implements this method.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /AllowsProvideLocator 1 Boolean The supplier allows provider locator.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /AllowsClientLocator 1 Boolean The supplier allows client locator.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /InformCancelPolicies 1 Boolean Informs cancellation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /InformPriceCancel 1 Boolean The supplier informs the cancellation price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /RequiredCheckInDate 1 Boolean The supplier informs if it requires the check-in date to return the reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /RequiredCheckOutDate 1 Boolean The supplier informs if it requires the check-out date to return the reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationRead /RequiredReservationDate 1 Boolean The supplier informs if it requires the booking date to return the reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList / 1  ReservationList node.   ReservationList /Implements 1 Boolean Informs if the supplier implements this method.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /InformPropertyReservationNumber 1 Boolean Informs if the supplier returns the property reservation number.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /AllowsCreationDate 1 Boolean The supplier allows search by creation date.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /AllowsCheckDate 1 Boolean The supplier allows search by check in date.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /InformCancelPolicies 1 Boolean Informs cancellation policies.   @reviewDate 1 String Informs of the date when the field was last reviewed.   ReservationList /InformPriceCancel 1 Boolean The supplier informs the cancellation price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Cancel / 1  Cancel node.   Cancel /Implements 1 Boolean Informs if the supplier implements this method.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Cancel /AllowsProvideLocator 1 Boolean The supplier allows provider locator.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Cancel /AllowsClientLocator 1 Boolean The supplier allows client locator.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Cancel /InformPriceCancel 1 Boolean The supplier informs the cancellation price.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch / 1  Batch node.   Batch /InformExclusiveDeal 1 Boolean The supplier indicates if a Hotel is an Exclusive Deal in HotelList and/or DescriptiveInfo.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /HotelList / 1  Contains information regarding HotelList.   Batch /HotelList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /HotelList /Languages / 1  List of languages.   Batch /HotelList /Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /DescriptiveInfo / 1  Contains information regarding DescriptiveInfo.   Batch /DescriptiveInfo /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /DescriptiveInfo /Languages / 1  List of languages.   Batch /DescriptiveInfo /Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /GeographicDestinationTree / 1  Contains information regarding GeographicDestinationTree.   Batch /GeographicDestinationTree /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /GeographicDestinationTree /Languages / 1  List of languages.   Batch /GeographicDestinationTree / Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /RoomList / 1  Contains information regarding RoomList.   Batch /RoomList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /RoomList /Languages / 1  List of languages.   Batch /RoomList /Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /MealPlanList / 1  Contains information regarding MealPlanList.   Batch /MealPlanList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /MealPlanList /Languages / 1  List of languages.   Batch /MealPlanList /Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /CategoryList / 1  Contains information regarding CategoryList.   Batch /CategoryList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /CategoryList /Languages / 1  List of languages.   Batch /CategoryList /Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /MarketList / 1  Contains information regarding MarketList.   Batch /MarketList /StaticType 1 Enum Informs the static type.The possible values are: Offline or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /MarketList /Languages / 1  List of languages.   Batch /MarketList /Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /CurrencyList / 1  Contains information regarding CurrencyList.   Batch /CurrencyList /StaticType 1 Enum Informs the static type.The possible values are: Offline, OfflineCompleted or NotImplemented.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Batch /CurrencyList /Languages / 1  List of languages.   Batch /CurrencyList /Languages /Language 1..n String Language code.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Generic / 1  Generic node.   Generic /RequiredNationality 1 Boolean Informs if the supplier requires nationality in Avail, Valuation and Reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Generic /AllowsNationality 1 Boolean Informs if the supplier allows nationality in Avail, Valuation and Reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.   Generic /AllowsOnRequest 1 Boolean If true, the supplier informs the onrequest status option in Avail, Valuation, and Reservation.   @reviewDate 1 String Informs of the date when the field was last reviewed.    Detailed description Important: values can be -1, this means the supplier has no restriction. For example, if MaxNumberHotels returns -1 means there is no maximum number of hotels to be set in a request. reviewDate attribute:\nThe attribute called reviewDate will let you know when the field was last reviewed, thus ensuring that you can trust the information as being up to date.\nTags structure:\nSome tags were renamed, so that they follow a certain standard of coherence. With this in mind, we will differentiate between 4 types of tags, depending on how it starts:\n Implements: It shows whether a call has been implemented or not.\n Inform: It indicates whether the information provided in our RS lets you see any optional fields such as rates.\n Required: It indicates whether any field, either in our RQ or in our RS, is required, in order for the logs to be valid. For example, whether the Nationality field is required or whether it is required to implement the list of rooms because we do not provide a description for them.\n Allows: It indicates whether an optional field in our RQ is allowed to display additional items. For example the onrequest in availability.\n  Avail:\nMaxNumberHotelsRecommended, MaxNumberCitiesRecommended, MaxNumberZonesRecommended, MaxNumberGeoCodesRecommended: These tags indicate what the recommended number of Cities/Hotels/Zones or Geocodes is for each supplier are. This means that even if a supplier allows for a search of up to 500 at a time, they may recommend that you do not exceed 200, thus way avoiding TimeOut errors and showing results in time. In the majority of cases the maximum number of hotels allowed is the same as the recommended number of hotels (MaxNumberHotels = MaxNumberHotelsRecommended). There are, however, a few cases in which it can be different.\nValuation:\nTimeZone: This tag indicate in which timezone are the \u0026ldquo;hoursBefore\u0026rdquo; and \u0026ldquo;Deadline\u0026rdquo; fields of cancelation policies. The possible values are:\nUnknown HotelLocalTime UTC-12 UTC-11 UTC-10 UTC-9 UTC-8 UTC-7 UTC-6 UTC-5 UTC-4 UTC-3 UTC-2 UTC-1 UTC+0 UTC+1 UTC+2 UTC+3 UTC+4 UTC+5 UTC+6 UTC+7 UTC+8 UTC+9 UTC+10 UTC+11 UTC+12 UTC+13 UTC+14  If \u0026ldquo;Unknown\u0026rdquo; or \u0026ldquo;HotelLocalTime\u0026rdquo; are selected we\u0026rsquo;ll add an offset of +14 only to the Deadline in case it\u0026rsquo;s calculated and not returned directly by the supplier on UTC Standard.\nReservation:\nAllowsPreferences: In this tag it indicates what types of preferences the provider allows at the hotel and / or room level.\n Preference: Each of these tags will specify the type of preference allowed and at what level it can be requested\n hotel =\u0026gt; at the option / general level. room =\u0026gt; at room level.  PreferenceType: The types that allow, the possible values are:\n Smoker NonSmoker ExtraBed Cradle DoubleBed TwinBeds ContiguosRooms Wedding LateArrival LateCheckOut EarlyCheckIn GroundFloor TopFlor WithoutVoucher   Value :\n mandatory: Here we will specify if it is necessary to pass a value in the Preference tag in reservation request.\n type: Then you must specify the type of value that can be sent in tag type. This type is an Enum that could be:\n string numeric boolean   Example 1:\n MetaData:\n\u0026lt;Preference hotel = \u0026quot;false\u0026quot; room = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;Smoker\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;false\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt;   Reservation: ~~~xml  ~~~   Example 2:\n MetaData:\n\u0026lt;Preference hotel = \u0026quot;false\u0026quot; room = \u0026quot;true\u0026quot;\u0026gt; \u0026lt;PreferenceType\u0026gt;LateArrival\u0026lt;/PreferenceType\u0026gt; \u0026lt;Value mandatory = \u0026quot;true\u0026quot; type = \u0026quot;string\u0026quot;/\u0026gt; \u0026lt;/Preference\u0026gt;   Reservation: ~~~xml 14:00 ~~~    Reservation Read, ReservationList:\nInformPriceCancel: In case the booking status is CN, this field allows us to show the price of the cancellation and not the price of the booking.\nBatch:\nStatic type: These parameters are XMLTravelgate‚Äôs internal parameters. They define the type of download each method has for each supplier. If the parameter value is set as online, the method runs a direct call to the supplier‚Äôs system because the method takes less than 4 minutes. Any other value will signify that the process takes more than 4 minutes, which means we have to cache the information in our BBDD (the methods with this feature are updated every week).\n"
},
{
	"uri": "https://travelgatex.com/getting-started/learning-graphql/",
	"title": "Learning GraphQL",
	"tags": [],
	"description": "",
	"content": "   GraphQL Overview      Basic Concepts      Thinking in GraphQL      Tools      Tutorials \u0026amp; Resources     "
},
{
	"uri": "https://travelgatex.com/community/",
	"title": "Community",
	"tags": [],
	"description": "",
	"content": "   Style Guide Community Style Guide\n     Writting release notes Release notes, document with the changelog\n     Using gist to include GraphQL examples Use gist to document GraphQL examples\n     Integrations Changelog Integrations changelog process\n    "
},
{
	"uri": "https://travelgatex.com/connectiontypessellers/hotelpullsellers/methods/staticcontent/roomlist/",
	"title": "RoomList",
	"tags": [],
	"description": "",
	"content": " Method Goals This method aims to return a list of rooms, their codes as well as descriptions.\nRequest Format The request does not require any elements - empty request.\nResponse Format The result returns a list of RoomInfo.\nRemarks The maximum time permitted in our system before the connection is closed is 240000 milliseconds.\nThis message must be implemented solely in case the supplier does not return room description in Avail. This requirement will be indicated in MetaData.\nRoomListRQ Example In the request of this call it is only necessary to use the object: \u0026ldquo;HotelBaseRQ\u0026rdquo;. You can find the info in the \u0026lsquo;Common Elements\u0026rsquo; section.\n\u0026lt;RoomListRQ\u0026gt; \u0026lt;/RoomListRQ\u0026gt;  Important information about Number (Cardinal):\nGo to Common-Elements for more information.\nRoomListRQ Description    Element Number Type Description     RoomListRQ 1  Root node.    RoomListRS Example \u0026lt;RoomListRS\u0026gt; \u0026lt;UpgradeUTCDate\u0026gt;2016-10-18T13:18:03+02:00\u0026lt;/UpgradeUTCDate\u0026gt; \u0026lt;RoomsInfo\u0026gt; \u0026lt;RoomInfo\u0026gt; \u0026lt;Code\u0026gt;STD\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Standard\u0026lt;/Name\u0026gt; \u0026lt;/RoomInfo\u0026gt; \u0026lt;RoomInfo\u0026gt; \u0026lt;Code\u0026gt;ST\u0026lt;/Code\u0026gt; \u0026lt;Name\u0026gt;Suite\u0026lt;/Name\u0026gt; \u0026lt;/RoomInfo\u0026gt; ... \u0026lt;RoomInfo/\u0026gt; \u0026lt;/RoomsInfo\u0026gt; \u0026lt;/RoomListRS\u0026gt;  RoomListRS Description    Element Number Type Description     RoomListRS/ UpgradeUTCDate 1 DateTime Indicates the update date of the information in UTC format.   RoomListRS/ RoomsInfo / 1  Root node, list of rooms   RoomInfo / 1..n  Room info.   RoomInfo /Code 1 String Code.   RoomInfo /Name 1 String Name.    Detailed description Room types \u0026amp; languages\nYou can define in AvailRQ (Common Elements) which language you want the room description returned in - as long as the supplier supports the selected language, otherwise the default language is most commonly English. The standard languages are: English \u0026amp; Spanish.\n"
},
{
	"uri": "https://travelgatex.com/product_template/howtos/resources/bestpractices/",
	"title": "Best practices",
	"tags": [],
	"description": "best practices",
	"content": "  "
},
{
	"uri": "https://travelgatex.com/product_template/howtos/resources/guides/",
	"title": "Guides",
	"tags": [],
	"description": "guides",
	"content": "  "
},
{
	"uri": "https://travelgatex.com/product_template/",
	"title": "PRODUCT NAME",
	"tags": [],
	"description": "",
	"content": "Smoke, mirrors and snake oil\n  Reference Reference Documentation\n     How-to guides Perform specific tasks\n     Release Notes New Updates \u0026amp; Releases\n     FAQs Do you have specific questions about PRODUCT? Check out the FAQs\n    "
},
{
	"uri": "https://travelgatex.com/product_template/howtos/resources/videos/",
	"title": "Videos",
	"tags": [],
	"description": "videos",
	"content": "  "
},
{
	"uri": "https://travelgatex.com/_footer/",
	"title": "footer",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet.\n"
},
{
	"uri": "https://travelgatex.com/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/integrations/flights/aa/changelog/",
	"title": "AA - American Airlines Changelog",
	"tags": [],
	"description": "",
	"content": " DLL Name Changelog Easily accessible log of notable changes to DLL integration\n\t 2019-11-27  change to get item bags.      "
},
{
	"uri": "https://travelgatex.com/integrations/flights/aert/changelog/",
	"title": "AERT - AERTiCKET",
	"tags": [],
	"description": "",
	"content": " \t 2020-02-26  issue of fare amount price without agency comission      \t 2020-01-17  Bookings with ADT typed passengers      "
},
{
	"uri": "https://travelgatex.com/integrations/flights/amd/changelog/",
	"title": "AMD - Amadeus Changelog",
	"tags": [],
	"description": "",
	"content": " DLL Name Changelog Easily accessible log of notable changes to DLL integration\n\t 2019-12-19  Retrieved bookings\u0026rsquo; status      "
},
{
	"uri": "https://travelgatex.com/alerts-x/release-notes/changelog/",
	"title": "Alerts-X Changelog",
	"tags": [],
	"description": "",
	"content": "Easily accessible log of notable changes to Alerts-X\n\t 2019-08-21  Error to update alerts from price to an other alertType or vice versa.   2019-08-20  New Alert type available PRICE. With this alert type will be posible to set alerts which will advise of amount or commission anomalies for price.   2019-08-12  Error to update alerts in some cases.   2019-08-07  Now is Checked api, operation \u0026amp; errorCode inputs to be sure that exists or its combinations are posible.    Now is checked if update values are different. If not, update is rejected.   2019-08-06  New field api in configuration inputs to be able to filter by serviceApi (hotel, transportation\u0026hellip;). New field API in AlertConfiguration.   2019-08-05  Returns warning to advise of deleted events if configuration of the alert is updated.    New field ComercialType in AlertConfiguration.   2019-07-30  Save historicalWindow correctly.   2019-07-29  Check permissions of team groups.   2019-07-25  Allow to get alerts without groups criteria input.    Fixed an error to allow an alert create in an AlertsX group with no alert.   2019-07-10  After an alert configuration update their past events will be deleted.   2019-06-12  Fixed an error that was causing an unsuccessful alert create or update to set clients, suppliers and accesses to the alert for Travelgate Teams users.   2019-06-11  Fixed an error to return all the events of the alerts.   2019-06-06  Added /Health to check service status.   2019-05-23  Alerts-X product documentation is available      "
},
{
	"uri": "https://travelgatex.com/integrations/payment/bcmr/changelog/",
	"title": "BCMR - Bancomer Changelog",
	"tags": [],
	"description": "",
	"content": " \t 2019-12-18  Fixed problem with phone numbers starting with \u0026lsquo;+\u0026rsquo;      \t 2019-12-03  MobilePhoneNumber value is now used if specified      "
},
{
	"uri": "https://travelgatex.com/tags/breaking-changes/",
	"title": "Breaking Changes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/credits/",
	"title": "Credits",
	"tags": [],
	"description": "contributors and packages used by hugo-theme-docdock",
	"content": " github contributors Other contributors  @bep supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester. clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support reveal-js - The HTML Presentation Framework  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo    "
},
{
	"uri": "https://travelgatex.com/integrations/flights/de2/changelog/",
	"title": "DE - Condor Changelog",
	"tags": [],
	"description": "",
	"content": " \t##2020-02-12  Null reference error of Valoracion  \n   \t 2020-01-14  OrderList development      \t 2019-12-19  Cancellation issue      \t##2019-01-20  ValoracionRS passenger reference issue  \n   "
},
{
	"uri": "https://travelgatex.com/distribution/release-notes/changelog/",
	"title": "Distribution changelog",
	"tags": [],
	"description": "",
	"content": "Easily accessible log of notable changes to Distribution-X API All notable changes in our platform will be documented on this page. \t 2021-02-16  Added new page to download reports for the booking list. Access is limited by user. Available at Distribution-X extranet [Menu \u0026gt; Bookings \u0026gt; Booking List Reports].   2020-01-08  Added new page to decrypt tokens of the booking flow. Access is limited by user. Available at Distribution-X extranet [Menu \u0026gt; Tools \u0026gt; Decrypt Token].      "
},
{
	"uri": "https://travelgatex.com/integrations/flights/eft/changelog/",
	"title": "EFT - Esferatur Changelog",
	"tags": [],
	"description": "",
	"content": " \t 2019-11-27  The possibility of booking Open Jaw fares    tasasDU includes      "
},
{
	"uri": "https://travelgatex.com/integrations/flights/ei/changelog/",
	"title": "EI - Aer Lingus Changelog",
	"tags": [],
	"description": "",
	"content": " DLL Name Changelog Easily accessible log of notable changes to DLL integration\n\t##2020-03-02  Added idTarifas in Availability  \n##2020-03-02  numScale counter error in Availability  \n   "
},
{
	"uri": "https://travelgatex.com/tags/faq/",
	"title": "Faq",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/flight-x/release-notes/changelog/",
	"title": "Flight-X changelog",
	"tags": [],
	"description": "",
	"content": "Easily accessible log of notable changes to Flight-X\n\t 2020-02-20  Released first pilot API version in Ggraphql (Only searh method)      "
},
{
	"uri": "https://travelgatex.com/tags/graphql-changelog/",
	"title": "Graphql Changelog",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/integrations/flights/hv/changelog/",
	"title": "HV - Transavia Changelog",
	"tags": [],
	"description": "",
	"content": " DLL Name Changelog Easily accessible log of notable changes to DLL integration\n\t 2019-12-02  Showing payment methods      "
},
{
	"uri": "https://travelgatex.com/applications/insights/datasets/dataset-content/benchmark/benchmark-hotel-rates/",
	"title": "Hotel Rates Benchmark Dataset",
	"tags": [],
	"description": "Understand Hotel Rates Benchmark Dataset",
	"content": " On this page you will learn how the data is stored in Benchmark Hotel Rates Dataset and how to interpret the differents table fields.\nOverview The data used corresponds to the search and book transactions for the last 30 days that meet the following criteria:√ß\n Check-in dates by week, starting current week and up to 6 months. Requests for 1 room and 2 adults. Hotels have been mapped against at least another Seller in TravelgateX.  Price is per night in euros (‚Ç¨) and only from net transactions. Total search and book requests with net prices are also included in the report, both your organization\u0026rsquo;s requests and those to your competitors.\nAll prices shown correspond to the minimum price that has been returned for the same hotel and specific market + week of check-in, so in the vast majority of cases you are comparing your most basic rate to the most basic rate of your competitors. Please note that the data provided in this report depends on the results obtained from hotel mapping, where it is possible that an incorrect mapping statement was made or that not all possible hotel mappings were considered. This dataset is updated weekly.\n\nTables Descriptions of each table and their correspondent fields are found below:\nhotel_rates_weekly_seller This table contains the total of searches (with net and unknown commission) and ok bookings requests and the minimum price for search and booking requests for my organization and all my competitive set (compset). The metrics are aggregated by check in week, market source, hotel and destination of the hotel.\nFields\n checkin_week (TIMESTAMP). Week by check-in date in UTC (format: YYYY-MM-DD hh:mm:ss). Date shown corresponds to Monday day. market (STRING). Source market code (ISO 3166-2). hotel_code (STRING). Own hotel code. hotel_name (STRING). Own hotel name. search_ok_net (NUMBER). Quantity of searches with available options and net price. search_ok_net_compset (NUMBER). Quantity of searches with available options and net price in the competitive set. search_ok_unknown (NUMBER). Quantity of searches with available options and unknown price type. search_ok_unknown_compset (NUMBER). Quantity of searches with available options and unknown price type. in the competitive set. search_nok (NUMBER). Quantity of searches without available options. search_nok_compset (NUMBER). Quantity of searches without available options in the competitive set. min_amount_search_net (FLOAT). Minimum price in euros (‚Ç¨) returned in searches requests for the above conditions. min_amount_search_net_compset (FLOAT). Minimum price in euros (‚Ç¨) returned in searches requests for the above conditions in the competitive set. booking_ok (NUMBER). Quantity of bookings with net price. booking_ok_compset (NUMBER). Quantity of bookings with net price in the competitive set. min_amount_booking_net (FLOAT). Minimum price in euros (‚Ç¨) returned in bookings requests for the above conditions. min_amount_booking_net_compset (FLOAT). Minimum price in euros (‚Ç¨) returned in bookings requests for the above conditions in the competitive set. country (STRING). Country destination code (ISO 3166-2). zone_1 (STRING). Administrative first level zone. E.g. Comunidad de Madrid zone_2 (STRING). Administrative second level zone E.g. Madrid city  Preview\n   checkin_week market hotel_code hotel_name search_ok_net search_ok_net_compset search_ok_unknown search_ok_unknown_compset min_amount_search_net min_amount_search_net_compset booking_ok booking_ok_compset min_amount_booking_net min_amount_booking_net_compset country zone_1 zone_2     2022-07-11 00:00:00 UTC IT 12345 Hotel Faro \u0026amp; Beach Club 358 450 20 35 53,3 48,2 23 39 55,90 54,22 SP Comunidad de Madrid Madrid city   2022-07-11 00:00:00 UTC SP 54321 Hilton Sandton 852 421 28 25 102,75 109,20 23 39 105,42 103,18 ZA Gauteng City of Johannesburg Metropolitan Municipality    "
},
{
	"uri": "https://travelgatex.com/connectiontypesbuyers/hotel-x/release-notes/changelog/",
	"title": "Hotel-X Changelog",
	"tags": [],
	"description": "",
	"content": "Easily accessible log of notable changes to HotelX API All notable changes in our platform will be documented on this page. \t 2020-12-22  Add 3 new fields in PaymentCardInput isVCC, virtualCreditCard and threeDomainSecurity, check Graphql schema changes, for more detail and example you cansee the Book request specification\n Strong Customer Authentication (3DS). 3DS data can now be included with a Payment Card in a book request alongside payment card data. You can find new field threeDomainSecurity on the input of Paymentcard.\n  Virtual Credit Cards (VCC). Extra information about Virtual Credit Cards can now be included with a Payment Card in a Book request. You can find new field virtualCreditCard input of Paymentcard.\n      \t 2020-12-04  We have added the feature of mapping promotions in booking-flow and default codes are implemented for promotions too. Mapping Plugins\n Now we send to InsightsX mapping of Promotions to visualize the status of your mapping in the connectivities you have in a structured reports.\n      \t 2020-11-25  Now we send to InsightsX mapping of Hotel, Board, Room and Rate to visualize the status of your mapping in the connectivities you have in a structured reports.\n Add \u0026ldquo;Default Codes\u0026rdquo; to Mapping Plugins, this feature allows to set a default code for each code in the source (provider) context.\n      \t 2020-02-26  Now the booking and cancel services allow the user to retrieve and cancel a book with the new field returned in book response bookingID. You can see more details of bookingID in the documentation here.   2020-02-25  Added new field bookingID into Reference (book, booking and cancel). This bookingID will be useful for booking retrieving and cancelling. Added new field bookingID into HotelCancelInput (cancel). Added new field bookingID into HotelCriteriaBookingInput (booking).   2020-02-24  Added deletedAt_in, deletedAt_not_in, deletedAt_lt, deletedAt_lte, deletedAt_lte, deletedAt_gt and deletedAt_gte fields into HotelXHotelFilterInput.   2020-02-24  Internal changes. Added field features into optionid. Some options returned in Search were not able to be priced in Quote step since for HotelX these options were exactly the same. Now these options are treated as different thanks to the field features inside the optionid. The search options with RateRulesType PUBLIC_SERVANT and UNEMPLOYED will no longer be discarted.   2020-02-05  We\u0026rsquo;ve launched a new API called Metadata, which allow you to retrieve the supplier information and configuration. You can see the documentation here. We have also introduced this API to our bookingflow, which allows us to block the invalid querys (those querys that does not match with the supplier configuration in the metadata) in order to optimize the traffic.   2020-02-05  Internal changes. Removed field optionsQuota from optionid. Now the plugin Add Parameter will also be able to replace the parameters that share the same key inside an specific configuration. You can see the documentation here. Internal changes. Now the field market from optionid will contain all the markets related to the option, until now it was only prepared to return a single market.   2020-12-02  The Board Mapping has been changed into a separated functionality: it has to be explicitly requested in order to indicate HotelX to map the board codes. This also allow you to chose the context in which you want to map the codes.   2020-12-02  We\u0026rsquo;ve launched a new plugin called Amenity Map which allows the user to retrive amenities in the hotels service using another context different that supplier context. This functionality differs with other mappings because mapping has to be requested in query fields, not in plugin section. You can see the documentation here.   2019-11-28  Added new value PAYX to PaymentType enum (search). We\u0026rsquo;ve launched a new plugin called Virtual Credit Card Generator which adds the possibility to create a virtual credit card at Book step, in order to pay the reservation‚Äôs import with it. You can see the documentation here.  { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;REQUEST\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;PRE_STEP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;genvcc\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;activationDate\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2020-05-22\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;expirationDate\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;2020-05-24\u0026quot; } ] } ] } }   2019-11-27  We\u0026rsquo;ve launched a new plugin called Market Group X that allows the user to group the Search result by markets that share the same Options. You can see the documentation here.  { \u0026quot;plugins\u0026quot;: [ { \u0026quot;step\u0026quot;: \u0026quot;REQUEST_ACCESS\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;market_groupX\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;MARKETS_GROUP\u0026quot; } ] } ] }   2019-11-20  Added new field code into Surcharge.   2019-11-05  New fields keys in Aggregation Plugin (\u0026ldquo;binding\u0026rdquo; and \u0026ldquo;refundable\u0026rdquo;). More information about Aggregation Plugin here.  { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION/RESPONSE\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;AGGREGATION\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;cheapest_price\u0026quot;, \u0026quot;parameters\u0026quot;: [ { {\u0026quot;key\u0026quot;: \u0026quot;primaryKey\u0026quot;,\u0026quot;value\u0026quot;: \u0026quot;hotel,supplier,room,refundable,binding\u0026quot;} } ] } ] } }    Field hotel in Booking query. Now, this field indicates the locator provided by the hotel (just in case the supplier returns it).  query { hotelX { booking(criteria: { accessCode: \u0026quot;422\u0026quot;, language: \u0026quot;en\u0026quot;, references: { currency: \u0026quot;EUR\u0026quot;, hotelCode: \u0026quot;1\u0026quot;, references: [ { client: \u0026quot;Demo_Client\u0026quot;, supplier: \u0026quot;HOTELTEST\u0026quot; } ] }, typeSearch: REFERENCES}, settings: {client:\u0026quot;Demo_Client\u0026quot;, testMode: true}) { bookings { reference { client hotel supplier } } } } }    Internal improvements.      \t 2021-05-25  Added new input supplierCode in hotels query. You can see more details of hotels query in the documentation here.      \t 2019-08-07  Fix Hotel-List repeated Hotels   2019-08-06  Add new enum type PaymentCardType which contain list of supported payment card. Add new field type of type PaymentCardType into PaymentCardInput and deprecate old field cardType Type HotelData introduces field RoomConnection (same type as Rooms service operation) Modified RoomData type by adding the new types RoomSource (string) and OccupancyStatic    Deprecated description from Bed (search) Deprecated KO in BookStatusType  \n2019-07-11  Deprecate type error in Hotel-list, Hotel-Room, Hotel-Board, Hotel-Category Add error filter in Hotel-list, Hotel-Room, Hotel-Board, Hotel-Category Add adviseMessage as new error type    Fix Level value in Hotel-list, Hotel-Room, Hotel-Board, Hotel-Category  \n2019-07-02  New field in book, cancel and booking respone. booking/reference/hotel.    Client token in batch and booking flow.  \n2019-06-27  Categories in Hotel-Category are grouped by group. Internal system improvements.   2019-06-26  New warning type in book. EMPTY_PRICE is returned when the supplier doesn\u0026rsquo;t return the price and we use the price obtained in quote.   2019-06-19  New field in book, cancel and booking respone. booking/billingSupplierCode. New blacklist file format. The values has changed to allow new features. You can see the documentation here. New field for the commision file. Now you can put clienToken for each rule. You can see the documentation here. Internal system improvements.   2019-06-13  New fields in search respone. room/features, room/supplierCode and ratPlan/supplierCode.    Security improvements.   2019-05-27  Added searchPrice in Quote and quotePrice in Book   2019-05-13  Internal monitorization   2019-05-09  Fix error when default settings are not available    Improve stats   2019-05-02  Added field filters in Hotel List    Deprecate type in GeonameData   2019-03-07  Added CurrencyX management for the cancel penalties.    Bug when the cancel penalty type is empty or invalid format. Mandatory field always returns FALSE when fee is EXCLUSIVE type in Surcharge node.   2019-02-26  New plugin, add parameter. You can see the documentation here.    Management of the default currency settings.   2019-02-12  Type HotelData introduces new field \u0026ldquo;GiataData\u0026rdquo;. Internal, better performant, REST endpoint in Search operation. Field filters have been added to minimize the throughput, this wasn\u0026rsquo;t necessary with Graphql, filtered fields that have a relation with Legacy API are now also sent as filter.   Expire date of payment card in Book now accept the following format: month: 1 digit or 2 digits, year: 4 digits or 2 digits\n 2019-02-04  Fix Hotel List and Hotel Room EOF error, when elastic returns empty result.   2019-01-28  Fix the error of destinationSearcher when elastic returns empty value.   2019-01-23  Fix the error of Hotel List and Hotel Room when requesting more than one code.   2019-01-14  Upgrade permission check in all microservices Environment variable health check Add parameter in Hotel-Quote and Hotel-Book   2018-12-04  Fix booking timeout issue    Added warning if any option has been discarded by CommissionX and CurrencyX plugins   2018-11-29  Fix filter maxSize Destination    Adapt Hotel-Room, Hotel-Board, Hotel-Category to new organization.    Added log if commission Fee is -1   2018-11-27  Ambiguous warning message in Book when supplier has not returned a price Removed error nodes from Groups and Organization nodes Removed log if amount is 0 in Fees node   2018-11-20  Added geonames in Hotel List Added access code in Book log in some special cases of commission    Partially synchronous resource caches in Hotel-Quote, Hotel-Book, Hotel-Cancel, Hotel-Booking   2018-11-19  Fix Stats Fix Hotels requested stats in Access and Transaction spans in some cases where the count wasn\u0026rsquo;t correct    Margin plugin compares net commission in order to decide discarding or mantaining an option.   2018-11-08  Fix blacklist (by supplier) plugin   2018-11-02  Fix price discrepancy between Quote and Book   2018-10-02  Allow relay at the Query Hotels Count field in HotelConnection to retrieve the number of HotelEdges that match the filter. Pagination does not affect Count.   2018-09-25  Status tipification to be able to differentiate from critical to non-critical external services    Commission and currency rates are now kept unchanged between Quote and Book    Operation and Access processes have been updated to register times of their different execution steps and their processed options. Transactions to worker are now monitorized in their own span with supplier\u0026rsquo;s communication times, parsing times and processed options.   2018-09-06  Fix apply Markups to net price   2018-09-04  Fix currency bug inside markups, in Quote and Book   2018-09-03  Fix Exchange node empty if not CurrencyX (see doc in https://docs.travelgatex.com/connectiontypesbuyers/hotel-x/plugins/converter/) Fix bugs in Quote    Improve reponse time and service  \n2018-08-22  Settings heritage. Guide Plugins filter    Fix bugs  \n2018-08-21  New input field in Hotels Query filter. This allows to filter the response by hotel\u0026rsquo;s country. GraphQL Schema updated.   2018-07-24  New plugin, safety margin. You can see the documentation here.   2018-07-18  Hotel, board, room and rate maps caches are now updated synchronously. This will improve the user\u0026rsquo;s experience when 1st time debugging operations. Hotel maps cache refactoring to reduce the number of cached items and cached operations. Hotel maps cached requests are now pipelined to reduce Round Trip Time.   2018-07-16  HotelX concepts content examples.   2018-07-11  Improvement of the Rooms Schema with paginated list and max number of elements per page. By default: 1000 rooms.   2018-07-04  Wrong behaviour that made options to be discarded when price in supplements was empty in Search query.      "
},
{
	"uri": "https://travelgatex.com/integrations/flights/ig/changelog/",
	"title": "IG - MeridianaFly Changelog",
	"tags": [],
	"description": "",
	"content": " \t 2019-12-02  framework to 4.6.2    when receiving RT request in 1 \u0026ldquo;Desglose\u0026rdquo;      "
},
{
	"uri": "https://travelgatex.com/applications/insights/release-notes/",
	"title": "Insights changelog",
	"tags": [],
	"description": "Releases Noter for Insights Datasets",
	"content": "Easily accessible log of notable changes to Insights-X\n\t 2020-03-11  Updated RANK definiton in benchmark tables. All destinations/suppliers/clients with the same volume for the same metric receive the same rank value. The next destinations/suppliers/clients receives a rank value which increments by the number of peers with the previous rank value, instead of increment by 1.      \t 2019-11-28  Added the fields client_owner and provider_owner in all the tables of the InsightsX Dataset.    Changed fields availability_index, booking_index and revenue_index by availability_best_compset, booking_best_compset and revenue_best_compset in benchmark tables.      \t 2019-10-04  Added new table: daily_portfolio_stats_(buyer|seller)    Changed fields in daily_portfolio_(buyer|seller) table. Added field client_owner, removed fields client_id and username.      "
},
{
	"uri": "https://travelgatex.com/tags/integration-changelog/",
	"title": "Integration Changelog",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/integrations/flights/lh/changelog/",
	"title": "LH - Lufthansa Changelog",
	"tags": [],
	"description": "",
	"content": " DLL Name Changelog Easily accessible log of notable changes to DLL integration\n\t 2019-11-27  Error in Bags information Error in aplicaSegmentos when the flight is one-way .      "
},
{
	"uri": "https://travelgatex.com/applications/logging/release-notes/changelog/",
	"title": "Logging changelog",
	"tags": [],
	"description": "",
	"content": "Easily accessible log of notable changes to Logging\n\t 2019-08-30  Now quotes requested by Speed have the same sessionID that quotes requested by the client in order to identify them.    Now reference filters are arrays in order to be able to request multiple references at once.   2019-08-22  Added the field hotel in the input object reference from which bookings can be searched by the hotel\u0026rsquo;s reference.   2019-08-21  Added new input object timeRange that improves the time filters providing both a relative time filter and an absolute time filter.   2019-08-02  Added a hard limit when an API\u0026rsquo;s response lasts more than 60 seconds. When application hard limit is surpassed, microservice will response with a graceful response (http_status code = 403).   2019-07-17  Added a new input object reference with two fields client and supplier from which bookings can be searched.   2019-07-11  Added a new field statusType in LoggingLegacyData to retrieve the final status of the transacction.    Added a new input field first in LoggingLegacyFilterInput to be able to change the size of the response. By default up to 100 results will be returned.   2019-07-10  Fix an error that was causing to download files with empty content. Issue-49   2019-07-09  Start-up of the Logging service in production      "
},
{
	"uri": "https://travelgatex.com/integrations/flights/nas/changelog/",
	"title": "Nas - Norwegian Changelog",
	"tags": [],
	"description": "",
	"content": " DLL Name Changelog Easily accessible log of notable changes to DLL integration\n\t 2019-12-11  List of routes offered      \t 2019-12-02  Seating references to flights      \t 2019-11-28  Charges for included baggage Number of baggage shown Baggage references to passengers      \t 2019-11-14  Transaction to get a list of supported routes.      "
},
{
	"uri": "https://travelgatex.com/product_template/release-notes/changelog/",
	"title": "PRODUCT Changelog",
	"tags": [],
	"description": "",
	"content": "Easily accessible log of notable changes to PRODUCT\n"
},
{
	"uri": "https://travelgatex.com/travelgatex/release-notes/changelog/",
	"title": "Platform Changelog",
	"tags": [],
	"description": "",
	"content": "To make it easier for users and contributors to see precisely what notable changes have been made on TravelgateX.\nAll notable changes on TravelgateX platform will be documented in this page. \t 2021-02-09  GraphQL Schema updated.   2020-12-21  GraphQL Schema updated.   2020-12-03  GraphQL Schema updated.   2020-11-23  GraphQL Schema updated.   2020-08-31  GraphQL Schema updated.   2020-07-27  GraphQL Schema updated.   2020-05-28  GraphQL Schema updated.   2020-04-15  GraphQL Schema updated.   2020-03-31  GraphQL Schema updated.   2020-03-10  GraphQL Schema updated.   2019-08-29  GraphQL Schema updated.   2019-08-19  GraphQL Schema updated.   2019-08-08  GraphQL Schema updated.   2019-08-05  GraphQL Schema updated.   2019-07-31  New TravelgateX Slack Bot    GraphQL Schema updated.   2019-07-15  GraphQL Schema updated.   2019-07-04  GraphQL Schema updated.   2019-06-25  GraphQL Schema updated.   2019-06-13  GraphQL Schema updated.   2019-06-03  GraphQL Schema updated.    stats gateway  \n2019-05-30  GraphQL Schema updated.   2019-05-23  GraphQL Schema updated. Accesses, Clients and Suppliers querys chagend to the new entitiesx client    flow cascade permissions code field from accessData to match with query response    CatalogAdviseMessage to extern schema   2019-05-16  GraphQL Schema updated.   2019-05-06  GraphQL Schema updated.   2019-05-02  GraphQL Schema updated.   2019-04-30  GraphQL Schema updated.   2019-04-24  GraphQL Schema updated.   2019-04-08  GraphQL Schema updated.   2019-02-28  GraphQL Schema updated.   2019-02-14  GraphQL Schema updated.   2019-03-07  GraphQL Schema updated.   2019-02-20  GraphQL Schema updated.    owner of default client api-key permissions on hotlst    image GCR CreateOrgTemplate Default client on addClient function    Old org code format   2019-02-11  GraphQL Schema updated.    Audit deprecated loadFile query    SelectChildren function changed Added org code   2019-02-07  GraphQL Schema updated.    Response header. Content-type   2019-01-30  GraphQL Schema updated.    Entities resolvers   2019-01-11  The DEFAULT_TEMPLATE option has been modified.The permissions given to the owner were : iam:all:viewer Now: all:all:1a This is for future updates. Ignore it for the time being. The owner of the organization now has an admin permission all across the apis: org:api:rsc:crud1xaf. Intern members (@xmltravelgate.com, @travelgatex.com) only can be added to TEAM type groups. Operations now does not check permissions. All operations listed.    deleteApi function implemented. Api-key can be added to more than one product on the same folder. Group query can now be filtered by parent.    Error when adding apis to TEAM type groups. When creating new member used to always return \u0026ldquo;Auth0 connection error\u0026rdquo; Some errors description have been improved.   2019-01-09  Endpoint error messages    Launch patch with new patch file New patch fixing write headers    Headers patch   2018-12-19  New implement of cache Use gzip to unzip response instead of delegate to request module    Two caches, one for apikeys and another one to redirect endpoint Implement case not zipped Implement cache to rewrite endpoint    Timming   2018-12-17  Worker   2018-12-14  Use worker and main thread to stats depends search, and calculate Send stringify of body_worker Protect Buffer    ElapsedTime when error, and fix jsonstringify Timming    Tracing from worker (detail) Tracing from utils2 (detail)   2018-12-13  GraphQL Schema updated.    Timming and use workers for stats. Status code when endpoint fails Worker   2018-12-11  Handler for updating api-keys to different groups    Error description to not found members deleteApi functionality Parent filter to groups Filters to external schema    isAdmin from productData   2018-12-04  All check for GetSons Description to more than one member in a api-key error    Descendents query, only returns valid groups all permissions, now returns only orgs and validGroups    Debug prints   2018-11-29  Upgrade libraries    Autogencode. Deleted commit   2018-11-27  \u0026lsquo;all\u0026rsquo; requestors now able to update accesses non of their ownage    Shared automatic update in UpdateAccess   2018-11-26  impersonatedJwt to member resolver    all permissions for productData-\u0026gt;apis resolver all\u0026rsquo; user case in resource data resolver for role connection get organizations function for normal permission table   2018-11-22  Max length for org code raised to 8    UpdateOrganizationDomain mutation to intern schema Error on alpha-numeric characters for organization code UpdateOrganizationDomain delete function Domain filter to organizations function resolver Autogenerated code for new orgs with no code Domain filter to organizations function in external schema    all:api:all use case   2018-11-21  RefreshToken now returns a list of apikeys with the result Intern schema modified adding domain scalar and domains in organization Organization data resolver has been modified to add domain resolvers    Token-gen for updateGroupAdmin   2018-11-20  GraphQL Schema updated.    Refresh token funcition. Create Organization. Errors description. Update group    Entities call when move folder and change members refresh token position.    Useless folders from create folder template   2018-11-07  GraphQL Schema updated.    Force group names to lowcase only in TEAM/ORG cases    Useless folders    Update organizations.   2018-10-28  GraphQL Schema updated.    New field Geoname in Hotels query, which provides hotel\u0026rsquo;s geographical information   2018-10-18  GraphQL Schema updated.    Profile type    Supplier, Client and Access entities resources content.   2018-09-26  GraphQL Schema updated.   2018-09-20  GraphQL Schema updated.    Product name FlightsX.   2018-09-10  GraphQL Schema updated.   2018-08-29  Added pagination to partners list   2018-08-27  GraphQL Schema updated.   2018-08-22  GraphQL Schema updated.    Entity\u0026rsquo;s Owner and its related Filters, queries and mutations. parents and descendents queries for Group and Organization. Old connect form migrated to TravelgateX Clients and suppliers CRUD    Corrected change of Payment\u0026rsquo;s structure Basic Audit by request using header TGX-Audit: 1 See more: TGX Headers page   2018-08-14  New section for entities in IAM Accesses CRUD    GraphQL Schema updated.   2018-08-13  GraphQL Schema updated.   2018-08-08  GraphQL Schema updated.    TGX Headers page Support basic Tracing by request using header TGX-Tracing: 1 Return groups codes on entities queries (accessData,suppierData,clientData,profileData). Access name filter New default group when user account is deleted. Audit members has been added in createMember and deleteMember    Response of Access and Supplier query when no accesses on the request Entity propagation Permission check Update member auditions and refactor that funcionality URL resolver API/resource resolvers Roles function with new admin permissions   2018-07-31  Improvements in the organization selector and modal. GraphQL Schema updated.    IAM mutations All groups in resources and apis resolvers    Delete member mutation (Delete Apikeys or uninvite user emails) Public deleteGroup function and made it public   2018-07-27  Organizations queries resolvers   2018-07-26  GraphQL Schema updated.    Groups resolvers  \n2018-07-25  GraphQL Schema updated. Admin permissions management for groups.    Old support Apikey    Team\u0026rsquo;s permission management for groups.    Flow (Cascade) permissions. Inprove time response of groups resolvers.  \n2018-07-16  GraphQL Schema breaking changes. Substitutes and fixes to Deprecated and Deleted Notes pages.    GraphQL Schema updated. Changelog based on keep a changelog    Deprecated schema notes pages. Deleted schema notes pages.    Documentation pages\u0026rsquo; styles  \n2018-07-10  Deleted schema notes Documentation pages\u0026rsquo; index    GraphQL Schema updated. New version of Deprecated schema notes   2018-07-09  Previously deprecated queries. See more      "
},
{
	"uri": "https://travelgatex.com/tags/products-changelog/",
	"title": "Products Changelog",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/integrations/payment/rsys/changelog/",
	"title": "RSYS - Redsysx Changelog",
	"tags": [],
	"description": "",
	"content": " \t 2020-01-17  Fixed transaction code for refunds      \t 2020-01-17  Fixed languages codes      "
},
{
	"uri": "https://travelgatex.com/tags/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/product_template/howtos/resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/tags/roadmap/",
	"title": "Roadmap",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/integrations/flights/sbr/changelog/",
	"title": "SBR - Sabre Changelog",
	"tags": [],
	"description": "",
	"content": " \t 2020-01-08  Parsing of baggage with import=0 Parsing of included baggage      \t 2019-12-18  Parsing of special suplements of AvailabilityFares branded fares      \t 2019-11-27  Now when it tries to add it checks if it is before and if it deletes it..      \t 2019-11-25  Added seats to bill with price 0 when not reserved because of \u0026ldquo;PNS not allowed\u0026rdquo; error.      \t 2019-11-19  Sending duplicated birthdates causing the error \u0026ldquo;DB already collected\u0026rdquo; on Reservation.      \t 2019-11-15  Now in reservation PassengerDetails we always send the element ReceivedFrom.      \t 2019-11-13  Now last ticketing date is returned in the response of RetrieveReservation.      "
},
{
	"uri": "https://travelgatex.com/applications/stats/release-notes/changelog/",
	"title": "Stats changelog",
	"tags": [],
	"description": "",
	"content": "Easily accessible log of notable changes to Stats\n\t 2019-09-19  Updated changelog      \t 2019-08-02  Added a hard limit when an API\u0026rsquo;s response lasts more than 60 seconds. When application hard limit is surpassed, microservice will response with a graceful response (http_status code = 403).   2019-07-22  Added new input object timeRange that improves the time filters providing both a relative time filter and an absolute time filter.   2019-06-12  Fix an error that was causing to have empty operations in the response.   2019-06-03  New scalar type Int64 has been created. hits in StatsData, totalHits in OperationDetailed and hits in StatsInfo have changed its type to this new scalar.   2019-05-30  Now adviceMessage\u0026rsquo;s from others TravelgateX products are returned as external in owns adviceMessage\u0026rsquo;s.   2019-05-23  Now type of StatsInforeturns the correct value.   2019-05-22  Now stats are available from 01/01/2018. Requests by accessCode are available only from 15/05/2019.   2019-05-14  Fix an error that was causing accessCode not being stored successfully. Fix an error to show 100 assets per errorCode and per operation.   2019-05-03  Fix an error that was causing that assets of HUB error types were NULL.   2019-05-02  Input field retrieveAssets made optional. false by default.   2019-04-30  New required input field retrieveAssets added to indicate if assets are needed.    Assets returned limited to 100 to avoid too big responses. This limitation makes sense since the main objective is not to access all the asset nodes.   2019-04-23  Fix an error building internal queries when Quote/Booking and Other are requested.   2019-04-11  New input field owner added to allow filter by organization.   2019-04-08  label in OperationData added. Reason: Share the operation code in English. hits in StatsData added. Reason: Share a summary of hits at StatsData level.    Internal queries to Stats DB optimized.   2019-04-03  trafficType in OperationDetailed added. Reason: To differentiate existent traffic types: BASIC, SPEED, OPTIMIZED.   2019-03-14  Stats product documentation      "
},
{
	"uri": "https://travelgatex.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/",
	"title": "TravelgateX Documentation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://travelgatex.com/integrations/flights/vy/changelog/",
	"title": "VY - Vueling Changelog",
	"tags": [],
	"description": "",
	"content": " \t##2020-01-07  List of segments shown  \n   \t##2019-12-19  Fare upsell request error by RT fares request  \n   \t##2019-12-12  changed priority boarding book requirement from perReserva to perSegment  \n   \t##2019-12-03  type of priority boarding supplements that we parse in the Valuation response  \n Fare upsell request error      \t 2019-11-13  Timeout error typified Error in FareAvailability when asking for Optima Fares for return trips.      \t 2019-11-11  The delta price control in the booking transaction Added priority boarding pricing in quote transaction. Added functionalty to request priority boarding in book transaction.      "
}]